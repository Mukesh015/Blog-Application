"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/bson";
exports.ids = ["vendor-chunks/bson"];
exports.modules = {

/***/ "(ssr)/./node_modules/bson/lib/bson.cjs":
/*!****************************************!*\
  !*** ./node_modules/bson/lib/bson.cjs ***!
  \****************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nfunction isAnyArrayBuffer(value) {\n    return [\n        \"[object ArrayBuffer]\",\n        \"[object SharedArrayBuffer]\"\n    ].includes(Object.prototype.toString.call(value));\n}\nfunction isUint8Array(value) {\n    return Object.prototype.toString.call(value) === \"[object Uint8Array]\";\n}\nfunction isRegExp(d) {\n    return Object.prototype.toString.call(d) === \"[object RegExp]\";\n}\nfunction isMap(d) {\n    return Object.prototype.toString.call(d) === \"[object Map]\";\n}\nfunction isDate(d) {\n    return Object.prototype.toString.call(d) === \"[object Date]\";\n}\nfunction defaultInspect(x, _options) {\n    return JSON.stringify(x, (k, v)=>{\n        if (typeof v === \"bigint\") {\n            return {\n                $numberLong: `${v}`\n            };\n        } else if (isMap(v)) {\n            return Object.fromEntries(v);\n        }\n        return v;\n    });\n}\nfunction getStylizeFunction(options) {\n    const stylizeExists = options != null && typeof options === \"object\" && \"stylize\" in options && typeof options.stylize === \"function\";\n    if (stylizeExists) {\n        return options.stylize;\n    }\n}\nconst BSON_MAJOR_VERSION = 6;\nconst BSON_INT32_MAX = 0x7fffffff;\nconst BSON_INT32_MIN = -0x80000000;\nconst BSON_INT64_MAX = Math.pow(2, 63) - 1;\nconst BSON_INT64_MIN = -Math.pow(2, 63);\nconst JS_INT_MAX = Math.pow(2, 53);\nconst JS_INT_MIN = -Math.pow(2, 53);\nconst BSON_DATA_NUMBER = 1;\nconst BSON_DATA_STRING = 2;\nconst BSON_DATA_OBJECT = 3;\nconst BSON_DATA_ARRAY = 4;\nconst BSON_DATA_BINARY = 5;\nconst BSON_DATA_UNDEFINED = 6;\nconst BSON_DATA_OID = 7;\nconst BSON_DATA_BOOLEAN = 8;\nconst BSON_DATA_DATE = 9;\nconst BSON_DATA_NULL = 10;\nconst BSON_DATA_REGEXP = 11;\nconst BSON_DATA_DBPOINTER = 12;\nconst BSON_DATA_CODE = 13;\nconst BSON_DATA_SYMBOL = 14;\nconst BSON_DATA_CODE_W_SCOPE = 15;\nconst BSON_DATA_INT = 16;\nconst BSON_DATA_TIMESTAMP = 17;\nconst BSON_DATA_LONG = 18;\nconst BSON_DATA_DECIMAL128 = 19;\nconst BSON_DATA_MIN_KEY = 0xff;\nconst BSON_DATA_MAX_KEY = 0x7f;\nconst BSON_BINARY_SUBTYPE_DEFAULT = 0;\nconst BSON_BINARY_SUBTYPE_UUID_NEW = 4;\nconst BSONType = Object.freeze({\n    double: 1,\n    string: 2,\n    object: 3,\n    array: 4,\n    binData: 5,\n    undefined: 6,\n    objectId: 7,\n    bool: 8,\n    date: 9,\n    null: 10,\n    regex: 11,\n    dbPointer: 12,\n    javascript: 13,\n    symbol: 14,\n    javascriptWithScope: 15,\n    int: 16,\n    timestamp: 17,\n    long: 18,\n    decimal: 19,\n    minKey: -1,\n    maxKey: 127\n});\nclass BSONError extends Error {\n    get bsonError() {\n        return true;\n    }\n    get name() {\n        return \"BSONError\";\n    }\n    constructor(message){\n        super(message);\n    }\n    static isBSONError(value) {\n        return value != null && typeof value === \"object\" && \"bsonError\" in value && value.bsonError === true && \"name\" in value && \"message\" in value && \"stack\" in value;\n    }\n}\nclass BSONVersionError extends BSONError {\n    get name() {\n        return \"BSONVersionError\";\n    }\n    constructor(){\n        super(`Unsupported BSON version, bson types must be from bson ${BSON_MAJOR_VERSION}.x.x`);\n    }\n}\nclass BSONRuntimeError extends BSONError {\n    get name() {\n        return \"BSONRuntimeError\";\n    }\n    constructor(message){\n        super(message);\n    }\n}\nfunction nodejsMathRandomBytes(byteLength) {\n    return nodeJsByteUtils.fromNumberArray(Array.from({\n        length: byteLength\n    }, ()=>Math.floor(Math.random() * 256)));\n}\nconst nodejsRandomBytes = (()=>{\n    try {\n        return (__webpack_require__(/*! crypto */ \"crypto\").randomBytes);\n    } catch  {\n        return nodejsMathRandomBytes;\n    }\n})();\nconst nodeJsByteUtils = {\n    toLocalBufferType (potentialBuffer) {\n        if (Buffer.isBuffer(potentialBuffer)) {\n            return potentialBuffer;\n        }\n        if (ArrayBuffer.isView(potentialBuffer)) {\n            return Buffer.from(potentialBuffer.buffer, potentialBuffer.byteOffset, potentialBuffer.byteLength);\n        }\n        const stringTag = potentialBuffer?.[Symbol.toStringTag] ?? Object.prototype.toString.call(potentialBuffer);\n        if (stringTag === \"ArrayBuffer\" || stringTag === \"SharedArrayBuffer\" || stringTag === \"[object ArrayBuffer]\" || stringTag === \"[object SharedArrayBuffer]\") {\n            return Buffer.from(potentialBuffer);\n        }\n        throw new BSONError(`Cannot create Buffer from ${String(potentialBuffer)}`);\n    },\n    allocate (size) {\n        return Buffer.alloc(size);\n    },\n    equals (a, b) {\n        return nodeJsByteUtils.toLocalBufferType(a).equals(b);\n    },\n    fromNumberArray (array) {\n        return Buffer.from(array);\n    },\n    fromBase64 (base64) {\n        return Buffer.from(base64, \"base64\");\n    },\n    toBase64 (buffer) {\n        return nodeJsByteUtils.toLocalBufferType(buffer).toString(\"base64\");\n    },\n    fromISO88591 (codePoints) {\n        return Buffer.from(codePoints, \"binary\");\n    },\n    toISO88591 (buffer) {\n        return nodeJsByteUtils.toLocalBufferType(buffer).toString(\"binary\");\n    },\n    fromHex (hex) {\n        return Buffer.from(hex, \"hex\");\n    },\n    toHex (buffer) {\n        return nodeJsByteUtils.toLocalBufferType(buffer).toString(\"hex\");\n    },\n    fromUTF8 (text) {\n        return Buffer.from(text, \"utf8\");\n    },\n    toUTF8 (buffer, start, end) {\n        return nodeJsByteUtils.toLocalBufferType(buffer).toString(\"utf8\", start, end);\n    },\n    utf8ByteLength (input) {\n        return Buffer.byteLength(input, \"utf8\");\n    },\n    encodeUTF8Into (buffer, source, byteOffset) {\n        return nodeJsByteUtils.toLocalBufferType(buffer).write(source, byteOffset, undefined, \"utf8\");\n    },\n    randomBytes: nodejsRandomBytes\n};\nfunction isReactNative() {\n    const { navigator } = globalThis;\n    return typeof navigator === \"object\" && navigator.product === \"ReactNative\";\n}\nfunction webMathRandomBytes(byteLength) {\n    if (byteLength < 0) {\n        throw new RangeError(`The argument 'byteLength' is invalid. Received ${byteLength}`);\n    }\n    return webByteUtils.fromNumberArray(Array.from({\n        length: byteLength\n    }, ()=>Math.floor(Math.random() * 256)));\n}\nconst webRandomBytes = (()=>{\n    const { crypto } = globalThis;\n    if (crypto != null && typeof crypto.getRandomValues === \"function\") {\n        return (byteLength)=>{\n            return crypto.getRandomValues(webByteUtils.allocate(byteLength));\n        };\n    } else {\n        if (isReactNative()) {\n            const { console } = globalThis;\n            console?.warn?.(\"BSON: For React Native please polyfill crypto.getRandomValues, e.g. using: https://www.npmjs.com/package/react-native-get-random-values.\");\n        }\n        return webMathRandomBytes;\n    }\n})();\nconst HEX_DIGIT = /(\\d|[a-f])/i;\nconst webByteUtils = {\n    toLocalBufferType (potentialUint8array) {\n        const stringTag = potentialUint8array?.[Symbol.toStringTag] ?? Object.prototype.toString.call(potentialUint8array);\n        if (stringTag === \"Uint8Array\") {\n            return potentialUint8array;\n        }\n        if (ArrayBuffer.isView(potentialUint8array)) {\n            return new Uint8Array(potentialUint8array.buffer.slice(potentialUint8array.byteOffset, potentialUint8array.byteOffset + potentialUint8array.byteLength));\n        }\n        if (stringTag === \"ArrayBuffer\" || stringTag === \"SharedArrayBuffer\" || stringTag === \"[object ArrayBuffer]\" || stringTag === \"[object SharedArrayBuffer]\") {\n            return new Uint8Array(potentialUint8array);\n        }\n        throw new BSONError(`Cannot make a Uint8Array from ${String(potentialUint8array)}`);\n    },\n    allocate (size) {\n        if (typeof size !== \"number\") {\n            throw new TypeError(`The \"size\" argument must be of type number. Received ${String(size)}`);\n        }\n        return new Uint8Array(size);\n    },\n    equals (a, b) {\n        if (a.byteLength !== b.byteLength) {\n            return false;\n        }\n        for(let i = 0; i < a.byteLength; i++){\n            if (a[i] !== b[i]) {\n                return false;\n            }\n        }\n        return true;\n    },\n    fromNumberArray (array) {\n        return Uint8Array.from(array);\n    },\n    fromBase64 (base64) {\n        return Uint8Array.from(atob(base64), (c)=>c.charCodeAt(0));\n    },\n    toBase64 (uint8array) {\n        return btoa(webByteUtils.toISO88591(uint8array));\n    },\n    fromISO88591 (codePoints) {\n        return Uint8Array.from(codePoints, (c)=>c.charCodeAt(0) & 0xff);\n    },\n    toISO88591 (uint8array) {\n        return Array.from(Uint16Array.from(uint8array), (b)=>String.fromCharCode(b)).join(\"\");\n    },\n    fromHex (hex) {\n        const evenLengthHex = hex.length % 2 === 0 ? hex : hex.slice(0, hex.length - 1);\n        const buffer = [];\n        for(let i = 0; i < evenLengthHex.length; i += 2){\n            const firstDigit = evenLengthHex[i];\n            const secondDigit = evenLengthHex[i + 1];\n            if (!HEX_DIGIT.test(firstDigit)) {\n                break;\n            }\n            if (!HEX_DIGIT.test(secondDigit)) {\n                break;\n            }\n            const hexDigit = Number.parseInt(`${firstDigit}${secondDigit}`, 16);\n            buffer.push(hexDigit);\n        }\n        return Uint8Array.from(buffer);\n    },\n    toHex (uint8array) {\n        return Array.from(uint8array, (byte)=>byte.toString(16).padStart(2, \"0\")).join(\"\");\n    },\n    fromUTF8 (text) {\n        return new TextEncoder().encode(text);\n    },\n    toUTF8 (uint8array, start, end) {\n        return new TextDecoder(\"utf8\", {\n            fatal: false\n        }).decode(uint8array.slice(start, end));\n    },\n    utf8ByteLength (input) {\n        return webByteUtils.fromUTF8(input).byteLength;\n    },\n    encodeUTF8Into (buffer, source, byteOffset) {\n        const bytes = webByteUtils.fromUTF8(source);\n        buffer.set(bytes, byteOffset);\n        return bytes.byteLength;\n    },\n    randomBytes: webRandomBytes\n};\nconst hasGlobalBuffer = typeof Buffer === \"function\" && Buffer.prototype?._isBuffer !== true;\nconst ByteUtils = hasGlobalBuffer ? nodeJsByteUtils : webByteUtils;\nclass BSONDataView extends DataView {\n    static fromUint8Array(input) {\n        return new DataView(input.buffer, input.byteOffset, input.byteLength);\n    }\n}\nclass BSONValue {\n    get [Symbol.for(\"@@mdb.bson.version\")]() {\n        return BSON_MAJOR_VERSION;\n    }\n    [Symbol.for(\"nodejs.util.inspect.custom\")](depth, options, inspect) {\n        return this.inspect(depth, options, inspect);\n    }\n}\nclass Binary extends BSONValue {\n    get _bsontype() {\n        return \"Binary\";\n    }\n    constructor(buffer, subType){\n        super();\n        if (!(buffer == null) && typeof buffer === \"string\" && !ArrayBuffer.isView(buffer) && !isAnyArrayBuffer(buffer) && !Array.isArray(buffer)) {\n            throw new BSONError(\"Binary can only be constructed from Uint8Array or number[]\");\n        }\n        this.sub_type = subType ?? Binary.BSON_BINARY_SUBTYPE_DEFAULT;\n        if (buffer == null) {\n            this.buffer = ByteUtils.allocate(Binary.BUFFER_SIZE);\n            this.position = 0;\n        } else {\n            this.buffer = Array.isArray(buffer) ? ByteUtils.fromNumberArray(buffer) : ByteUtils.toLocalBufferType(buffer);\n            this.position = this.buffer.byteLength;\n        }\n    }\n    put(byteValue) {\n        if (typeof byteValue === \"string\" && byteValue.length !== 1) {\n            throw new BSONError(\"only accepts single character String\");\n        } else if (typeof byteValue !== \"number\" && byteValue.length !== 1) throw new BSONError(\"only accepts single character Uint8Array or Array\");\n        let decodedByte;\n        if (typeof byteValue === \"string\") {\n            decodedByte = byteValue.charCodeAt(0);\n        } else if (typeof byteValue === \"number\") {\n            decodedByte = byteValue;\n        } else {\n            decodedByte = byteValue[0];\n        }\n        if (decodedByte < 0 || decodedByte > 255) {\n            throw new BSONError(\"only accepts number in a valid unsigned byte range 0-255\");\n        }\n        if (this.buffer.byteLength > this.position) {\n            this.buffer[this.position++] = decodedByte;\n        } else {\n            const newSpace = ByteUtils.allocate(Binary.BUFFER_SIZE + this.buffer.length);\n            newSpace.set(this.buffer, 0);\n            this.buffer = newSpace;\n            this.buffer[this.position++] = decodedByte;\n        }\n    }\n    write(sequence, offset) {\n        offset = typeof offset === \"number\" ? offset : this.position;\n        if (this.buffer.byteLength < offset + sequence.length) {\n            const newSpace = ByteUtils.allocate(this.buffer.byteLength + sequence.length);\n            newSpace.set(this.buffer, 0);\n            this.buffer = newSpace;\n        }\n        if (ArrayBuffer.isView(sequence)) {\n            this.buffer.set(ByteUtils.toLocalBufferType(sequence), offset);\n            this.position = offset + sequence.byteLength > this.position ? offset + sequence.length : this.position;\n        } else if (typeof sequence === \"string\") {\n            throw new BSONError(\"input cannot be string\");\n        }\n    }\n    read(position, length) {\n        length = length && length > 0 ? length : this.position;\n        return this.buffer.slice(position, position + length);\n    }\n    value() {\n        return this.buffer.length === this.position ? this.buffer : this.buffer.subarray(0, this.position);\n    }\n    length() {\n        return this.position;\n    }\n    toJSON() {\n        return ByteUtils.toBase64(this.buffer);\n    }\n    toString(encoding) {\n        if (encoding === \"hex\") return ByteUtils.toHex(this.buffer);\n        if (encoding === \"base64\") return ByteUtils.toBase64(this.buffer);\n        if (encoding === \"utf8\" || encoding === \"utf-8\") return ByteUtils.toUTF8(this.buffer, 0, this.buffer.byteLength);\n        return ByteUtils.toUTF8(this.buffer, 0, this.buffer.byteLength);\n    }\n    toExtendedJSON(options) {\n        options = options || {};\n        const base64String = ByteUtils.toBase64(this.buffer);\n        const subType = Number(this.sub_type).toString(16);\n        if (options.legacy) {\n            return {\n                $binary: base64String,\n                $type: subType.length === 1 ? \"0\" + subType : subType\n            };\n        }\n        return {\n            $binary: {\n                base64: base64String,\n                subType: subType.length === 1 ? \"0\" + subType : subType\n            }\n        };\n    }\n    toUUID() {\n        if (this.sub_type === Binary.SUBTYPE_UUID) {\n            return new UUID(this.buffer.slice(0, this.position));\n        }\n        throw new BSONError(`Binary sub_type \"${this.sub_type}\" is not supported for converting to UUID. Only \"${Binary.SUBTYPE_UUID}\" is currently supported.`);\n    }\n    static createFromHexString(hex, subType) {\n        return new Binary(ByteUtils.fromHex(hex), subType);\n    }\n    static createFromBase64(base64, subType) {\n        return new Binary(ByteUtils.fromBase64(base64), subType);\n    }\n    static fromExtendedJSON(doc, options) {\n        options = options || {};\n        let data;\n        let type;\n        if (\"$binary\" in doc) {\n            if (options.legacy && typeof doc.$binary === \"string\" && \"$type\" in doc) {\n                type = doc.$type ? parseInt(doc.$type, 16) : 0;\n                data = ByteUtils.fromBase64(doc.$binary);\n            } else {\n                if (typeof doc.$binary !== \"string\") {\n                    type = doc.$binary.subType ? parseInt(doc.$binary.subType, 16) : 0;\n                    data = ByteUtils.fromBase64(doc.$binary.base64);\n                }\n            }\n        } else if (\"$uuid\" in doc) {\n            type = 4;\n            data = UUID.bytesFromString(doc.$uuid);\n        }\n        if (!data) {\n            throw new BSONError(`Unexpected Binary Extended JSON format ${JSON.stringify(doc)}`);\n        }\n        return type === BSON_BINARY_SUBTYPE_UUID_NEW ? new UUID(data) : new Binary(data, type);\n    }\n    inspect(depth, options, inspect) {\n        inspect ??= defaultInspect;\n        const base64 = ByteUtils.toBase64(this.buffer.subarray(0, this.position));\n        const base64Arg = inspect(base64, options);\n        const subTypeArg = inspect(this.sub_type, options);\n        return `Binary.createFromBase64(${base64Arg}, ${subTypeArg})`;\n    }\n}\nBinary.BSON_BINARY_SUBTYPE_DEFAULT = 0;\nBinary.BUFFER_SIZE = 256;\nBinary.SUBTYPE_DEFAULT = 0;\nBinary.SUBTYPE_FUNCTION = 1;\nBinary.SUBTYPE_BYTE_ARRAY = 2;\nBinary.SUBTYPE_UUID_OLD = 3;\nBinary.SUBTYPE_UUID = 4;\nBinary.SUBTYPE_MD5 = 5;\nBinary.SUBTYPE_ENCRYPTED = 6;\nBinary.SUBTYPE_COLUMN = 7;\nBinary.SUBTYPE_USER_DEFINED = 128;\nconst UUID_BYTE_LENGTH = 16;\nconst UUID_WITHOUT_DASHES = /^[0-9A-F]{32}$/i;\nconst UUID_WITH_DASHES = /^[0-9A-F]{8}-[0-9A-F]{4}-[0-9A-F]{4}-[0-9A-F]{4}-[0-9A-F]{12}$/i;\nclass UUID extends Binary {\n    constructor(input){\n        let bytes;\n        if (input == null) {\n            bytes = UUID.generate();\n        } else if (input instanceof UUID) {\n            bytes = ByteUtils.toLocalBufferType(new Uint8Array(input.buffer));\n        } else if (ArrayBuffer.isView(input) && input.byteLength === UUID_BYTE_LENGTH) {\n            bytes = ByteUtils.toLocalBufferType(input);\n        } else if (typeof input === \"string\") {\n            bytes = UUID.bytesFromString(input);\n        } else {\n            throw new BSONError(\"Argument passed in UUID constructor must be a UUID, a 16 byte Buffer or a 32/36 character hex string (dashes excluded/included, format: xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx).\");\n        }\n        super(bytes, BSON_BINARY_SUBTYPE_UUID_NEW);\n    }\n    get id() {\n        return this.buffer;\n    }\n    set id(value) {\n        this.buffer = value;\n    }\n    toHexString(includeDashes = true) {\n        if (includeDashes) {\n            return [\n                ByteUtils.toHex(this.buffer.subarray(0, 4)),\n                ByteUtils.toHex(this.buffer.subarray(4, 6)),\n                ByteUtils.toHex(this.buffer.subarray(6, 8)),\n                ByteUtils.toHex(this.buffer.subarray(8, 10)),\n                ByteUtils.toHex(this.buffer.subarray(10, 16))\n            ].join(\"-\");\n        }\n        return ByteUtils.toHex(this.buffer);\n    }\n    toString(encoding) {\n        if (encoding === \"hex\") return ByteUtils.toHex(this.id);\n        if (encoding === \"base64\") return ByteUtils.toBase64(this.id);\n        return this.toHexString();\n    }\n    toJSON() {\n        return this.toHexString();\n    }\n    equals(otherId) {\n        if (!otherId) {\n            return false;\n        }\n        if (otherId instanceof UUID) {\n            return ByteUtils.equals(otherId.id, this.id);\n        }\n        try {\n            return ByteUtils.equals(new UUID(otherId).id, this.id);\n        } catch  {\n            return false;\n        }\n    }\n    toBinary() {\n        return new Binary(this.id, Binary.SUBTYPE_UUID);\n    }\n    static generate() {\n        const bytes = ByteUtils.randomBytes(UUID_BYTE_LENGTH);\n        bytes[6] = bytes[6] & 0x0f | 0x40;\n        bytes[8] = bytes[8] & 0x3f | 0x80;\n        return bytes;\n    }\n    static isValid(input) {\n        if (!input) {\n            return false;\n        }\n        if (typeof input === \"string\") {\n            return UUID.isValidUUIDString(input);\n        }\n        if (isUint8Array(input)) {\n            return input.byteLength === UUID_BYTE_LENGTH;\n        }\n        return input._bsontype === \"Binary\" && input.sub_type === this.SUBTYPE_UUID && input.buffer.byteLength === 16;\n    }\n    static createFromHexString(hexString) {\n        const buffer = UUID.bytesFromString(hexString);\n        return new UUID(buffer);\n    }\n    static createFromBase64(base64) {\n        return new UUID(ByteUtils.fromBase64(base64));\n    }\n    static bytesFromString(representation) {\n        if (!UUID.isValidUUIDString(representation)) {\n            throw new BSONError(\"UUID string representation must be 32 hex digits or canonical hyphenated representation\");\n        }\n        return ByteUtils.fromHex(representation.replace(/-/g, \"\"));\n    }\n    static isValidUUIDString(representation) {\n        return UUID_WITHOUT_DASHES.test(representation) || UUID_WITH_DASHES.test(representation);\n    }\n    inspect(depth, options, inspect) {\n        inspect ??= defaultInspect;\n        return `new UUID(${inspect(this.toHexString(), options)})`;\n    }\n}\nclass Code extends BSONValue {\n    get _bsontype() {\n        return \"Code\";\n    }\n    constructor(code, scope){\n        super();\n        this.code = code.toString();\n        this.scope = scope ?? null;\n    }\n    toJSON() {\n        if (this.scope != null) {\n            return {\n                code: this.code,\n                scope: this.scope\n            };\n        }\n        return {\n            code: this.code\n        };\n    }\n    toExtendedJSON() {\n        if (this.scope) {\n            return {\n                $code: this.code,\n                $scope: this.scope\n            };\n        }\n        return {\n            $code: this.code\n        };\n    }\n    static fromExtendedJSON(doc) {\n        return new Code(doc.$code, doc.$scope);\n    }\n    inspect(depth, options, inspect) {\n        inspect ??= defaultInspect;\n        let parametersString = inspect(this.code, options);\n        const multiLineFn = parametersString.includes(\"\\n\");\n        if (this.scope != null) {\n            parametersString += `,${multiLineFn ? \"\\n\" : \" \"}${inspect(this.scope, options)}`;\n        }\n        const endingNewline = multiLineFn && this.scope === null;\n        return `new Code(${multiLineFn ? \"\\n\" : \"\"}${parametersString}${endingNewline ? \"\\n\" : \"\"})`;\n    }\n}\nfunction isDBRefLike(value) {\n    return value != null && typeof value === \"object\" && \"$id\" in value && value.$id != null && \"$ref\" in value && typeof value.$ref === \"string\" && (!(\"$db\" in value) || \"$db\" in value && typeof value.$db === \"string\");\n}\nclass DBRef extends BSONValue {\n    get _bsontype() {\n        return \"DBRef\";\n    }\n    constructor(collection, oid, db, fields){\n        super();\n        const parts = collection.split(\".\");\n        if (parts.length === 2) {\n            db = parts.shift();\n            collection = parts.shift();\n        }\n        this.collection = collection;\n        this.oid = oid;\n        this.db = db;\n        this.fields = fields || {};\n    }\n    get namespace() {\n        return this.collection;\n    }\n    set namespace(value) {\n        this.collection = value;\n    }\n    toJSON() {\n        const o = Object.assign({\n            $ref: this.collection,\n            $id: this.oid\n        }, this.fields);\n        if (this.db != null) o.$db = this.db;\n        return o;\n    }\n    toExtendedJSON(options) {\n        options = options || {};\n        let o = {\n            $ref: this.collection,\n            $id: this.oid\n        };\n        if (options.legacy) {\n            return o;\n        }\n        if (this.db) o.$db = this.db;\n        o = Object.assign(o, this.fields);\n        return o;\n    }\n    static fromExtendedJSON(doc) {\n        const copy = Object.assign({}, doc);\n        delete copy.$ref;\n        delete copy.$id;\n        delete copy.$db;\n        return new DBRef(doc.$ref, doc.$id, doc.$db, copy);\n    }\n    inspect(depth, options, inspect) {\n        inspect ??= defaultInspect;\n        const args = [\n            inspect(this.namespace, options),\n            inspect(this.oid, options),\n            ...this.db ? [\n                inspect(this.db, options)\n            ] : [],\n            ...Object.keys(this.fields).length > 0 ? [\n                inspect(this.fields, options)\n            ] : []\n        ];\n        args[1] = inspect === defaultInspect ? `new ObjectId(${args[1]})` : args[1];\n        return `new DBRef(${args.join(\", \")})`;\n    }\n}\nlet wasm = undefined;\ntry {\n    wasm = new WebAssembly.Instance(new WebAssembly.Module(new Uint8Array([\n        0,\n        97,\n        115,\n        109,\n        1,\n        0,\n        0,\n        0,\n        1,\n        13,\n        2,\n        96,\n        0,\n        1,\n        127,\n        96,\n        4,\n        127,\n        127,\n        127,\n        127,\n        1,\n        127,\n        3,\n        7,\n        6,\n        0,\n        1,\n        1,\n        1,\n        1,\n        1,\n        6,\n        6,\n        1,\n        127,\n        1,\n        65,\n        0,\n        11,\n        7,\n        50,\n        6,\n        3,\n        109,\n        117,\n        108,\n        0,\n        1,\n        5,\n        100,\n        105,\n        118,\n        95,\n        115,\n        0,\n        2,\n        5,\n        100,\n        105,\n        118,\n        95,\n        117,\n        0,\n        3,\n        5,\n        114,\n        101,\n        109,\n        95,\n        115,\n        0,\n        4,\n        5,\n        114,\n        101,\n        109,\n        95,\n        117,\n        0,\n        5,\n        8,\n        103,\n        101,\n        116,\n        95,\n        104,\n        105,\n        103,\n        104,\n        0,\n        0,\n        10,\n        191,\n        1,\n        6,\n        4,\n        0,\n        35,\n        0,\n        11,\n        36,\n        1,\n        1,\n        126,\n        32,\n        0,\n        173,\n        32,\n        1,\n        173,\n        66,\n        32,\n        134,\n        132,\n        32,\n        2,\n        173,\n        32,\n        3,\n        173,\n        66,\n        32,\n        134,\n        132,\n        126,\n        34,\n        4,\n        66,\n        32,\n        135,\n        167,\n        36,\n        0,\n        32,\n        4,\n        167,\n        11,\n        36,\n        1,\n        1,\n        126,\n        32,\n        0,\n        173,\n        32,\n        1,\n        173,\n        66,\n        32,\n        134,\n        132,\n        32,\n        2,\n        173,\n        32,\n        3,\n        173,\n        66,\n        32,\n        134,\n        132,\n        127,\n        34,\n        4,\n        66,\n        32,\n        135,\n        167,\n        36,\n        0,\n        32,\n        4,\n        167,\n        11,\n        36,\n        1,\n        1,\n        126,\n        32,\n        0,\n        173,\n        32,\n        1,\n        173,\n        66,\n        32,\n        134,\n        132,\n        32,\n        2,\n        173,\n        32,\n        3,\n        173,\n        66,\n        32,\n        134,\n        132,\n        128,\n        34,\n        4,\n        66,\n        32,\n        135,\n        167,\n        36,\n        0,\n        32,\n        4,\n        167,\n        11,\n        36,\n        1,\n        1,\n        126,\n        32,\n        0,\n        173,\n        32,\n        1,\n        173,\n        66,\n        32,\n        134,\n        132,\n        32,\n        2,\n        173,\n        32,\n        3,\n        173,\n        66,\n        32,\n        134,\n        132,\n        129,\n        34,\n        4,\n        66,\n        32,\n        135,\n        167,\n        36,\n        0,\n        32,\n        4,\n        167,\n        11,\n        36,\n        1,\n        1,\n        126,\n        32,\n        0,\n        173,\n        32,\n        1,\n        173,\n        66,\n        32,\n        134,\n        132,\n        32,\n        2,\n        173,\n        32,\n        3,\n        173,\n        66,\n        32,\n        134,\n        132,\n        130,\n        34,\n        4,\n        66,\n        32,\n        135,\n        167,\n        36,\n        0,\n        32,\n        4,\n        167,\n        11\n    ])), {}).exports;\n} catch  {}\nconst TWO_PWR_16_DBL = 1 << 16;\nconst TWO_PWR_24_DBL = 1 << 24;\nconst TWO_PWR_32_DBL = TWO_PWR_16_DBL * TWO_PWR_16_DBL;\nconst TWO_PWR_64_DBL = TWO_PWR_32_DBL * TWO_PWR_32_DBL;\nconst TWO_PWR_63_DBL = TWO_PWR_64_DBL / 2;\nconst INT_CACHE = {};\nconst UINT_CACHE = {};\nconst MAX_INT64_STRING_LENGTH = 20;\nconst DECIMAL_REG_EX = /^(\\+?0|(\\+|-)?[1-9][0-9]*)$/;\nclass Long extends BSONValue {\n    get _bsontype() {\n        return \"Long\";\n    }\n    get __isLong__() {\n        return true;\n    }\n    constructor(low = 0, high, unsigned){\n        super();\n        if (typeof low === \"bigint\") {\n            Object.assign(this, Long.fromBigInt(low, !!high));\n        } else if (typeof low === \"string\") {\n            Object.assign(this, Long.fromString(low, !!high));\n        } else {\n            this.low = low | 0;\n            this.high = high | 0;\n            this.unsigned = !!unsigned;\n        }\n    }\n    static fromBits(lowBits, highBits, unsigned) {\n        return new Long(lowBits, highBits, unsigned);\n    }\n    static fromInt(value, unsigned) {\n        let obj, cachedObj, cache;\n        if (unsigned) {\n            value >>>= 0;\n            if (cache = 0 <= value && value < 256) {\n                cachedObj = UINT_CACHE[value];\n                if (cachedObj) return cachedObj;\n            }\n            obj = Long.fromBits(value, (value | 0) < 0 ? -1 : 0, true);\n            if (cache) UINT_CACHE[value] = obj;\n            return obj;\n        } else {\n            value |= 0;\n            if (cache = -128 <= value && value < 128) {\n                cachedObj = INT_CACHE[value];\n                if (cachedObj) return cachedObj;\n            }\n            obj = Long.fromBits(value, value < 0 ? -1 : 0, false);\n            if (cache) INT_CACHE[value] = obj;\n            return obj;\n        }\n    }\n    static fromNumber(value, unsigned) {\n        if (isNaN(value)) return unsigned ? Long.UZERO : Long.ZERO;\n        if (unsigned) {\n            if (value < 0) return Long.UZERO;\n            if (value >= TWO_PWR_64_DBL) return Long.MAX_UNSIGNED_VALUE;\n        } else {\n            if (value <= -TWO_PWR_63_DBL) return Long.MIN_VALUE;\n            if (value + 1 >= TWO_PWR_63_DBL) return Long.MAX_VALUE;\n        }\n        if (value < 0) return Long.fromNumber(-value, unsigned).neg();\n        return Long.fromBits(value % TWO_PWR_32_DBL | 0, value / TWO_PWR_32_DBL | 0, unsigned);\n    }\n    static fromBigInt(value, unsigned) {\n        return Long.fromString(value.toString(), unsigned);\n    }\n    static fromString(str, unsigned, radix) {\n        if (str.length === 0) throw new BSONError(\"empty string\");\n        if (str === \"NaN\" || str === \"Infinity\" || str === \"+Infinity\" || str === \"-Infinity\") return Long.ZERO;\n        if (typeof unsigned === \"number\") {\n            radix = unsigned, unsigned = false;\n        } else {\n            unsigned = !!unsigned;\n        }\n        radix = radix || 10;\n        if (radix < 2 || 36 < radix) throw new BSONError(\"radix\");\n        let p;\n        if ((p = str.indexOf(\"-\")) > 0) throw new BSONError(\"interior hyphen\");\n        else if (p === 0) {\n            return Long.fromString(str.substring(1), unsigned, radix).neg();\n        }\n        const radixToPower = Long.fromNumber(Math.pow(radix, 8));\n        let result = Long.ZERO;\n        for(let i = 0; i < str.length; i += 8){\n            const size = Math.min(8, str.length - i), value = parseInt(str.substring(i, i + size), radix);\n            if (size < 8) {\n                const power = Long.fromNumber(Math.pow(radix, size));\n                result = result.mul(power).add(Long.fromNumber(value));\n            } else {\n                result = result.mul(radixToPower);\n                result = result.add(Long.fromNumber(value));\n            }\n        }\n        result.unsigned = unsigned;\n        return result;\n    }\n    static fromBytes(bytes, unsigned, le) {\n        return le ? Long.fromBytesLE(bytes, unsigned) : Long.fromBytesBE(bytes, unsigned);\n    }\n    static fromBytesLE(bytes, unsigned) {\n        return new Long(bytes[0] | bytes[1] << 8 | bytes[2] << 16 | bytes[3] << 24, bytes[4] | bytes[5] << 8 | bytes[6] << 16 | bytes[7] << 24, unsigned);\n    }\n    static fromBytesBE(bytes, unsigned) {\n        return new Long(bytes[4] << 24 | bytes[5] << 16 | bytes[6] << 8 | bytes[7], bytes[0] << 24 | bytes[1] << 16 | bytes[2] << 8 | bytes[3], unsigned);\n    }\n    static isLong(value) {\n        return value != null && typeof value === \"object\" && \"__isLong__\" in value && value.__isLong__ === true;\n    }\n    static fromValue(val, unsigned) {\n        if (typeof val === \"number\") return Long.fromNumber(val, unsigned);\n        if (typeof val === \"string\") return Long.fromString(val, unsigned);\n        return Long.fromBits(val.low, val.high, typeof unsigned === \"boolean\" ? unsigned : val.unsigned);\n    }\n    add(addend) {\n        if (!Long.isLong(addend)) addend = Long.fromValue(addend);\n        const a48 = this.high >>> 16;\n        const a32 = this.high & 0xffff;\n        const a16 = this.low >>> 16;\n        const a00 = this.low & 0xffff;\n        const b48 = addend.high >>> 16;\n        const b32 = addend.high & 0xffff;\n        const b16 = addend.low >>> 16;\n        const b00 = addend.low & 0xffff;\n        let c48 = 0, c32 = 0, c16 = 0, c00 = 0;\n        c00 += a00 + b00;\n        c16 += c00 >>> 16;\n        c00 &= 0xffff;\n        c16 += a16 + b16;\n        c32 += c16 >>> 16;\n        c16 &= 0xffff;\n        c32 += a32 + b32;\n        c48 += c32 >>> 16;\n        c32 &= 0xffff;\n        c48 += a48 + b48;\n        c48 &= 0xffff;\n        return Long.fromBits(c16 << 16 | c00, c48 << 16 | c32, this.unsigned);\n    }\n    and(other) {\n        if (!Long.isLong(other)) other = Long.fromValue(other);\n        return Long.fromBits(this.low & other.low, this.high & other.high, this.unsigned);\n    }\n    compare(other) {\n        if (!Long.isLong(other)) other = Long.fromValue(other);\n        if (this.eq(other)) return 0;\n        const thisNeg = this.isNegative(), otherNeg = other.isNegative();\n        if (thisNeg && !otherNeg) return -1;\n        if (!thisNeg && otherNeg) return 1;\n        if (!this.unsigned) return this.sub(other).isNegative() ? -1 : 1;\n        return other.high >>> 0 > this.high >>> 0 || other.high === this.high && other.low >>> 0 > this.low >>> 0 ? -1 : 1;\n    }\n    comp(other) {\n        return this.compare(other);\n    }\n    divide(divisor) {\n        if (!Long.isLong(divisor)) divisor = Long.fromValue(divisor);\n        if (divisor.isZero()) throw new BSONError(\"division by zero\");\n        if (wasm) {\n            if (!this.unsigned && this.high === -0x80000000 && divisor.low === -1 && divisor.high === -1) {\n                return this;\n            }\n            const low = (this.unsigned ? wasm.div_u : wasm.div_s)(this.low, this.high, divisor.low, divisor.high);\n            return Long.fromBits(low, wasm.get_high(), this.unsigned);\n        }\n        if (this.isZero()) return this.unsigned ? Long.UZERO : Long.ZERO;\n        let approx, rem, res;\n        if (!this.unsigned) {\n            if (this.eq(Long.MIN_VALUE)) {\n                if (divisor.eq(Long.ONE) || divisor.eq(Long.NEG_ONE)) return Long.MIN_VALUE;\n                else if (divisor.eq(Long.MIN_VALUE)) return Long.ONE;\n                else {\n                    const halfThis = this.shr(1);\n                    approx = halfThis.div(divisor).shl(1);\n                    if (approx.eq(Long.ZERO)) {\n                        return divisor.isNegative() ? Long.ONE : Long.NEG_ONE;\n                    } else {\n                        rem = this.sub(divisor.mul(approx));\n                        res = approx.add(rem.div(divisor));\n                        return res;\n                    }\n                }\n            } else if (divisor.eq(Long.MIN_VALUE)) return this.unsigned ? Long.UZERO : Long.ZERO;\n            if (this.isNegative()) {\n                if (divisor.isNegative()) return this.neg().div(divisor.neg());\n                return this.neg().div(divisor).neg();\n            } else if (divisor.isNegative()) return this.div(divisor.neg()).neg();\n            res = Long.ZERO;\n        } else {\n            if (!divisor.unsigned) divisor = divisor.toUnsigned();\n            if (divisor.gt(this)) return Long.UZERO;\n            if (divisor.gt(this.shru(1))) return Long.UONE;\n            res = Long.UZERO;\n        }\n        rem = this;\n        while(rem.gte(divisor)){\n            approx = Math.max(1, Math.floor(rem.toNumber() / divisor.toNumber()));\n            const log2 = Math.ceil(Math.log(approx) / Math.LN2);\n            const delta = log2 <= 48 ? 1 : Math.pow(2, log2 - 48);\n            let approxRes = Long.fromNumber(approx);\n            let approxRem = approxRes.mul(divisor);\n            while(approxRem.isNegative() || approxRem.gt(rem)){\n                approx -= delta;\n                approxRes = Long.fromNumber(approx, this.unsigned);\n                approxRem = approxRes.mul(divisor);\n            }\n            if (approxRes.isZero()) approxRes = Long.ONE;\n            res = res.add(approxRes);\n            rem = rem.sub(approxRem);\n        }\n        return res;\n    }\n    div(divisor) {\n        return this.divide(divisor);\n    }\n    equals(other) {\n        if (!Long.isLong(other)) other = Long.fromValue(other);\n        if (this.unsigned !== other.unsigned && this.high >>> 31 === 1 && other.high >>> 31 === 1) return false;\n        return this.high === other.high && this.low === other.low;\n    }\n    eq(other) {\n        return this.equals(other);\n    }\n    getHighBits() {\n        return this.high;\n    }\n    getHighBitsUnsigned() {\n        return this.high >>> 0;\n    }\n    getLowBits() {\n        return this.low;\n    }\n    getLowBitsUnsigned() {\n        return this.low >>> 0;\n    }\n    getNumBitsAbs() {\n        if (this.isNegative()) {\n            return this.eq(Long.MIN_VALUE) ? 64 : this.neg().getNumBitsAbs();\n        }\n        const val = this.high !== 0 ? this.high : this.low;\n        let bit;\n        for(bit = 31; bit > 0; bit--)if ((val & 1 << bit) !== 0) break;\n        return this.high !== 0 ? bit + 33 : bit + 1;\n    }\n    greaterThan(other) {\n        return this.comp(other) > 0;\n    }\n    gt(other) {\n        return this.greaterThan(other);\n    }\n    greaterThanOrEqual(other) {\n        return this.comp(other) >= 0;\n    }\n    gte(other) {\n        return this.greaterThanOrEqual(other);\n    }\n    ge(other) {\n        return this.greaterThanOrEqual(other);\n    }\n    isEven() {\n        return (this.low & 1) === 0;\n    }\n    isNegative() {\n        return !this.unsigned && this.high < 0;\n    }\n    isOdd() {\n        return (this.low & 1) === 1;\n    }\n    isPositive() {\n        return this.unsigned || this.high >= 0;\n    }\n    isZero() {\n        return this.high === 0 && this.low === 0;\n    }\n    lessThan(other) {\n        return this.comp(other) < 0;\n    }\n    lt(other) {\n        return this.lessThan(other);\n    }\n    lessThanOrEqual(other) {\n        return this.comp(other) <= 0;\n    }\n    lte(other) {\n        return this.lessThanOrEqual(other);\n    }\n    modulo(divisor) {\n        if (!Long.isLong(divisor)) divisor = Long.fromValue(divisor);\n        if (wasm) {\n            const low = (this.unsigned ? wasm.rem_u : wasm.rem_s)(this.low, this.high, divisor.low, divisor.high);\n            return Long.fromBits(low, wasm.get_high(), this.unsigned);\n        }\n        return this.sub(this.div(divisor).mul(divisor));\n    }\n    mod(divisor) {\n        return this.modulo(divisor);\n    }\n    rem(divisor) {\n        return this.modulo(divisor);\n    }\n    multiply(multiplier) {\n        if (this.isZero()) return Long.ZERO;\n        if (!Long.isLong(multiplier)) multiplier = Long.fromValue(multiplier);\n        if (wasm) {\n            const low = wasm.mul(this.low, this.high, multiplier.low, multiplier.high);\n            return Long.fromBits(low, wasm.get_high(), this.unsigned);\n        }\n        if (multiplier.isZero()) return Long.ZERO;\n        if (this.eq(Long.MIN_VALUE)) return multiplier.isOdd() ? Long.MIN_VALUE : Long.ZERO;\n        if (multiplier.eq(Long.MIN_VALUE)) return this.isOdd() ? Long.MIN_VALUE : Long.ZERO;\n        if (this.isNegative()) {\n            if (multiplier.isNegative()) return this.neg().mul(multiplier.neg());\n            else return this.neg().mul(multiplier).neg();\n        } else if (multiplier.isNegative()) return this.mul(multiplier.neg()).neg();\n        if (this.lt(Long.TWO_PWR_24) && multiplier.lt(Long.TWO_PWR_24)) return Long.fromNumber(this.toNumber() * multiplier.toNumber(), this.unsigned);\n        const a48 = this.high >>> 16;\n        const a32 = this.high & 0xffff;\n        const a16 = this.low >>> 16;\n        const a00 = this.low & 0xffff;\n        const b48 = multiplier.high >>> 16;\n        const b32 = multiplier.high & 0xffff;\n        const b16 = multiplier.low >>> 16;\n        const b00 = multiplier.low & 0xffff;\n        let c48 = 0, c32 = 0, c16 = 0, c00 = 0;\n        c00 += a00 * b00;\n        c16 += c00 >>> 16;\n        c00 &= 0xffff;\n        c16 += a16 * b00;\n        c32 += c16 >>> 16;\n        c16 &= 0xffff;\n        c16 += a00 * b16;\n        c32 += c16 >>> 16;\n        c16 &= 0xffff;\n        c32 += a32 * b00;\n        c48 += c32 >>> 16;\n        c32 &= 0xffff;\n        c32 += a16 * b16;\n        c48 += c32 >>> 16;\n        c32 &= 0xffff;\n        c32 += a00 * b32;\n        c48 += c32 >>> 16;\n        c32 &= 0xffff;\n        c48 += a48 * b00 + a32 * b16 + a16 * b32 + a00 * b48;\n        c48 &= 0xffff;\n        return Long.fromBits(c16 << 16 | c00, c48 << 16 | c32, this.unsigned);\n    }\n    mul(multiplier) {\n        return this.multiply(multiplier);\n    }\n    negate() {\n        if (!this.unsigned && this.eq(Long.MIN_VALUE)) return Long.MIN_VALUE;\n        return this.not().add(Long.ONE);\n    }\n    neg() {\n        return this.negate();\n    }\n    not() {\n        return Long.fromBits(~this.low, ~this.high, this.unsigned);\n    }\n    notEquals(other) {\n        return !this.equals(other);\n    }\n    neq(other) {\n        return this.notEquals(other);\n    }\n    ne(other) {\n        return this.notEquals(other);\n    }\n    or(other) {\n        if (!Long.isLong(other)) other = Long.fromValue(other);\n        return Long.fromBits(this.low | other.low, this.high | other.high, this.unsigned);\n    }\n    shiftLeft(numBits) {\n        if (Long.isLong(numBits)) numBits = numBits.toInt();\n        if ((numBits &= 63) === 0) return this;\n        else if (numBits < 32) return Long.fromBits(this.low << numBits, this.high << numBits | this.low >>> 32 - numBits, this.unsigned);\n        else return Long.fromBits(0, this.low << numBits - 32, this.unsigned);\n    }\n    shl(numBits) {\n        return this.shiftLeft(numBits);\n    }\n    shiftRight(numBits) {\n        if (Long.isLong(numBits)) numBits = numBits.toInt();\n        if ((numBits &= 63) === 0) return this;\n        else if (numBits < 32) return Long.fromBits(this.low >>> numBits | this.high << 32 - numBits, this.high >> numBits, this.unsigned);\n        else return Long.fromBits(this.high >> numBits - 32, this.high >= 0 ? 0 : -1, this.unsigned);\n    }\n    shr(numBits) {\n        return this.shiftRight(numBits);\n    }\n    shiftRightUnsigned(numBits) {\n        if (Long.isLong(numBits)) numBits = numBits.toInt();\n        numBits &= 63;\n        if (numBits === 0) return this;\n        else {\n            const high = this.high;\n            if (numBits < 32) {\n                const low = this.low;\n                return Long.fromBits(low >>> numBits | high << 32 - numBits, high >>> numBits, this.unsigned);\n            } else if (numBits === 32) return Long.fromBits(high, 0, this.unsigned);\n            else return Long.fromBits(high >>> numBits - 32, 0, this.unsigned);\n        }\n    }\n    shr_u(numBits) {\n        return this.shiftRightUnsigned(numBits);\n    }\n    shru(numBits) {\n        return this.shiftRightUnsigned(numBits);\n    }\n    subtract(subtrahend) {\n        if (!Long.isLong(subtrahend)) subtrahend = Long.fromValue(subtrahend);\n        return this.add(subtrahend.neg());\n    }\n    sub(subtrahend) {\n        return this.subtract(subtrahend);\n    }\n    toInt() {\n        return this.unsigned ? this.low >>> 0 : this.low;\n    }\n    toNumber() {\n        if (this.unsigned) return (this.high >>> 0) * TWO_PWR_32_DBL + (this.low >>> 0);\n        return this.high * TWO_PWR_32_DBL + (this.low >>> 0);\n    }\n    toBigInt() {\n        return BigInt(this.toString());\n    }\n    toBytes(le) {\n        return le ? this.toBytesLE() : this.toBytesBE();\n    }\n    toBytesLE() {\n        const hi = this.high, lo = this.low;\n        return [\n            lo & 0xff,\n            lo >>> 8 & 0xff,\n            lo >>> 16 & 0xff,\n            lo >>> 24,\n            hi & 0xff,\n            hi >>> 8 & 0xff,\n            hi >>> 16 & 0xff,\n            hi >>> 24\n        ];\n    }\n    toBytesBE() {\n        const hi = this.high, lo = this.low;\n        return [\n            hi >>> 24,\n            hi >>> 16 & 0xff,\n            hi >>> 8 & 0xff,\n            hi & 0xff,\n            lo >>> 24,\n            lo >>> 16 & 0xff,\n            lo >>> 8 & 0xff,\n            lo & 0xff\n        ];\n    }\n    toSigned() {\n        if (!this.unsigned) return this;\n        return Long.fromBits(this.low, this.high, false);\n    }\n    toString(radix) {\n        radix = radix || 10;\n        if (radix < 2 || 36 < radix) throw new BSONError(\"radix\");\n        if (this.isZero()) return \"0\";\n        if (this.isNegative()) {\n            if (this.eq(Long.MIN_VALUE)) {\n                const radixLong = Long.fromNumber(radix), div = this.div(radixLong), rem1 = div.mul(radixLong).sub(this);\n                return div.toString(radix) + rem1.toInt().toString(radix);\n            } else return \"-\" + this.neg().toString(radix);\n        }\n        const radixToPower = Long.fromNumber(Math.pow(radix, 6), this.unsigned);\n        let rem = this;\n        let result = \"\";\n        while(true){\n            const remDiv = rem.div(radixToPower);\n            const intval = rem.sub(remDiv.mul(radixToPower)).toInt() >>> 0;\n            let digits = intval.toString(radix);\n            rem = remDiv;\n            if (rem.isZero()) {\n                return digits + result;\n            } else {\n                while(digits.length < 6)digits = \"0\" + digits;\n                result = \"\" + digits + result;\n            }\n        }\n    }\n    toUnsigned() {\n        if (this.unsigned) return this;\n        return Long.fromBits(this.low, this.high, true);\n    }\n    xor(other) {\n        if (!Long.isLong(other)) other = Long.fromValue(other);\n        return Long.fromBits(this.low ^ other.low, this.high ^ other.high, this.unsigned);\n    }\n    eqz() {\n        return this.isZero();\n    }\n    le(other) {\n        return this.lessThanOrEqual(other);\n    }\n    toExtendedJSON(options) {\n        if (options && options.relaxed) return this.toNumber();\n        return {\n            $numberLong: this.toString()\n        };\n    }\n    static fromExtendedJSON(doc, options) {\n        const { useBigInt64 = false, relaxed = true } = {\n            ...options\n        };\n        if (doc.$numberLong.length > MAX_INT64_STRING_LENGTH) {\n            throw new BSONError(\"$numberLong string is too long\");\n        }\n        if (!DECIMAL_REG_EX.test(doc.$numberLong)) {\n            throw new BSONError(`$numberLong string \"${doc.$numberLong}\" is in an invalid format`);\n        }\n        if (useBigInt64) {\n            const bigIntResult = BigInt(doc.$numberLong);\n            return BigInt.asIntN(64, bigIntResult);\n        }\n        const longResult = Long.fromString(doc.$numberLong);\n        if (relaxed) {\n            return longResult.toNumber();\n        }\n        return longResult;\n    }\n    inspect(depth, options, inspect) {\n        inspect ??= defaultInspect;\n        const longVal = inspect(this.toString(), options);\n        const unsignedVal = this.unsigned ? `, ${inspect(this.unsigned, options)}` : \"\";\n        return `new Long(${longVal}${unsignedVal})`;\n    }\n}\nLong.TWO_PWR_24 = Long.fromInt(TWO_PWR_24_DBL);\nLong.MAX_UNSIGNED_VALUE = Long.fromBits(0xffffffff | 0, 0xffffffff | 0, true);\nLong.ZERO = Long.fromInt(0);\nLong.UZERO = Long.fromInt(0, true);\nLong.ONE = Long.fromInt(1);\nLong.UONE = Long.fromInt(1, true);\nLong.NEG_ONE = Long.fromInt(-1);\nLong.MAX_VALUE = Long.fromBits(0xffffffff | 0, 0x7fffffff | 0, false);\nLong.MIN_VALUE = Long.fromBits(0, 0x80000000 | 0, false);\nconst PARSE_STRING_REGEXP = /^(\\+|-)?(\\d+|(\\d*\\.\\d*))?(E|e)?([-+])?(\\d+)?$/;\nconst PARSE_INF_REGEXP = /^(\\+|-)?(Infinity|inf)$/i;\nconst PARSE_NAN_REGEXP = /^(\\+|-)?NaN$/i;\nconst EXPONENT_MAX = 6111;\nconst EXPONENT_MIN = -6176;\nconst EXPONENT_BIAS = 6176;\nconst MAX_DIGITS = 34;\nconst NAN_BUFFER = ByteUtils.fromNumberArray([\n    0x7c,\n    0x00,\n    0x00,\n    0x00,\n    0x00,\n    0x00,\n    0x00,\n    0x00,\n    0x00,\n    0x00,\n    0x00,\n    0x00,\n    0x00,\n    0x00,\n    0x00,\n    0x00\n].reverse());\nconst INF_NEGATIVE_BUFFER = ByteUtils.fromNumberArray([\n    0xf8,\n    0x00,\n    0x00,\n    0x00,\n    0x00,\n    0x00,\n    0x00,\n    0x00,\n    0x00,\n    0x00,\n    0x00,\n    0x00,\n    0x00,\n    0x00,\n    0x00,\n    0x00\n].reverse());\nconst INF_POSITIVE_BUFFER = ByteUtils.fromNumberArray([\n    0x78,\n    0x00,\n    0x00,\n    0x00,\n    0x00,\n    0x00,\n    0x00,\n    0x00,\n    0x00,\n    0x00,\n    0x00,\n    0x00,\n    0x00,\n    0x00,\n    0x00,\n    0x00\n].reverse());\nconst EXPONENT_REGEX = /^([-+])?(\\d+)?$/;\nconst COMBINATION_MASK = 0x1f;\nconst EXPONENT_MASK = 0x3fff;\nconst COMBINATION_INFINITY = 30;\nconst COMBINATION_NAN = 31;\nfunction isDigit(value) {\n    return !isNaN(parseInt(value, 10));\n}\nfunction divideu128(value) {\n    const DIVISOR = Long.fromNumber(1000 * 1000 * 1000);\n    let _rem = Long.fromNumber(0);\n    if (!value.parts[0] && !value.parts[1] && !value.parts[2] && !value.parts[3]) {\n        return {\n            quotient: value,\n            rem: _rem\n        };\n    }\n    for(let i = 0; i <= 3; i++){\n        _rem = _rem.shiftLeft(32);\n        _rem = _rem.add(new Long(value.parts[i], 0));\n        value.parts[i] = _rem.div(DIVISOR).low;\n        _rem = _rem.modulo(DIVISOR);\n    }\n    return {\n        quotient: value,\n        rem: _rem\n    };\n}\nfunction multiply64x2(left, right) {\n    if (!left && !right) {\n        return {\n            high: Long.fromNumber(0),\n            low: Long.fromNumber(0)\n        };\n    }\n    const leftHigh = left.shiftRightUnsigned(32);\n    const leftLow = new Long(left.getLowBits(), 0);\n    const rightHigh = right.shiftRightUnsigned(32);\n    const rightLow = new Long(right.getLowBits(), 0);\n    let productHigh = leftHigh.multiply(rightHigh);\n    let productMid = leftHigh.multiply(rightLow);\n    const productMid2 = leftLow.multiply(rightHigh);\n    let productLow = leftLow.multiply(rightLow);\n    productHigh = productHigh.add(productMid.shiftRightUnsigned(32));\n    productMid = new Long(productMid.getLowBits(), 0).add(productMid2).add(productLow.shiftRightUnsigned(32));\n    productHigh = productHigh.add(productMid.shiftRightUnsigned(32));\n    productLow = productMid.shiftLeft(32).add(new Long(productLow.getLowBits(), 0));\n    return {\n        high: productHigh,\n        low: productLow\n    };\n}\nfunction lessThan(left, right) {\n    const uhleft = left.high >>> 0;\n    const uhright = right.high >>> 0;\n    if (uhleft < uhright) {\n        return true;\n    } else if (uhleft === uhright) {\n        const ulleft = left.low >>> 0;\n        const ulright = right.low >>> 0;\n        if (ulleft < ulright) return true;\n    }\n    return false;\n}\nfunction invalidErr(string, message) {\n    throw new BSONError(`\"${string}\" is not a valid Decimal128 string - ${message}`);\n}\nclass Decimal128 extends BSONValue {\n    get _bsontype() {\n        return \"Decimal128\";\n    }\n    constructor(bytes){\n        super();\n        if (typeof bytes === \"string\") {\n            this.bytes = Decimal128.fromString(bytes).bytes;\n        } else if (isUint8Array(bytes)) {\n            if (bytes.byteLength !== 16) {\n                throw new BSONError(\"Decimal128 must take a Buffer of 16 bytes\");\n            }\n            this.bytes = bytes;\n        } else {\n            throw new BSONError(\"Decimal128 must take a Buffer or string\");\n        }\n    }\n    static fromString(representation) {\n        return Decimal128._fromString(representation, {\n            allowRounding: false\n        });\n    }\n    static fromStringWithRounding(representation) {\n        return Decimal128._fromString(representation, {\n            allowRounding: true\n        });\n    }\n    static _fromString(representation, options) {\n        let isNegative = false;\n        let sawSign = false;\n        let sawRadix = false;\n        let foundNonZero = false;\n        let significantDigits = 0;\n        let nDigitsRead = 0;\n        let nDigits = 0;\n        let radixPosition = 0;\n        let firstNonZero = 0;\n        const digits = [\n            0\n        ];\n        let nDigitsStored = 0;\n        let digitsInsert = 0;\n        let lastDigit = 0;\n        let exponent = 0;\n        let significandHigh = new Long(0, 0);\n        let significandLow = new Long(0, 0);\n        let biasedExponent = 0;\n        let index = 0;\n        if (representation.length >= 7000) {\n            throw new BSONError(\"\" + representation + \" not a valid Decimal128 string\");\n        }\n        const stringMatch = representation.match(PARSE_STRING_REGEXP);\n        const infMatch = representation.match(PARSE_INF_REGEXP);\n        const nanMatch = representation.match(PARSE_NAN_REGEXP);\n        if (!stringMatch && !infMatch && !nanMatch || representation.length === 0) {\n            throw new BSONError(\"\" + representation + \" not a valid Decimal128 string\");\n        }\n        if (stringMatch) {\n            const unsignedNumber = stringMatch[2];\n            const e = stringMatch[4];\n            const expSign = stringMatch[5];\n            const expNumber = stringMatch[6];\n            if (e && expNumber === undefined) invalidErr(representation, \"missing exponent power\");\n            if (e && unsignedNumber === undefined) invalidErr(representation, \"missing exponent base\");\n            if (e === undefined && (expSign || expNumber)) {\n                invalidErr(representation, \"missing e before exponent\");\n            }\n        }\n        if (representation[index] === \"+\" || representation[index] === \"-\") {\n            sawSign = true;\n            isNegative = representation[index++] === \"-\";\n        }\n        if (!isDigit(representation[index]) && representation[index] !== \".\") {\n            if (representation[index] === \"i\" || representation[index] === \"I\") {\n                return new Decimal128(isNegative ? INF_NEGATIVE_BUFFER : INF_POSITIVE_BUFFER);\n            } else if (representation[index] === \"N\") {\n                return new Decimal128(NAN_BUFFER);\n            }\n        }\n        while(isDigit(representation[index]) || representation[index] === \".\"){\n            if (representation[index] === \".\") {\n                if (sawRadix) invalidErr(representation, \"contains multiple periods\");\n                sawRadix = true;\n                index = index + 1;\n                continue;\n            }\n            if (nDigitsStored < MAX_DIGITS) {\n                if (representation[index] !== \"0\" || foundNonZero) {\n                    if (!foundNonZero) {\n                        firstNonZero = nDigitsRead;\n                    }\n                    foundNonZero = true;\n                    digits[digitsInsert++] = parseInt(representation[index], 10);\n                    nDigitsStored = nDigitsStored + 1;\n                }\n            }\n            if (foundNonZero) nDigits = nDigits + 1;\n            if (sawRadix) radixPosition = radixPosition + 1;\n            nDigitsRead = nDigitsRead + 1;\n            index = index + 1;\n        }\n        if (sawRadix && !nDigitsRead) throw new BSONError(\"\" + representation + \" not a valid Decimal128 string\");\n        if (representation[index] === \"e\" || representation[index] === \"E\") {\n            const match = representation.substr(++index).match(EXPONENT_REGEX);\n            if (!match || !match[2]) return new Decimal128(NAN_BUFFER);\n            exponent = parseInt(match[0], 10);\n            index = index + match[0].length;\n        }\n        if (representation[index]) return new Decimal128(NAN_BUFFER);\n        if (!nDigitsStored) {\n            digits[0] = 0;\n            nDigits = 1;\n            nDigitsStored = 1;\n            significantDigits = 0;\n        } else {\n            lastDigit = nDigitsStored - 1;\n            significantDigits = nDigits;\n            if (significantDigits !== 1) {\n                while(representation[firstNonZero + significantDigits - 1 + Number(sawSign) + Number(sawRadix)] === \"0\"){\n                    significantDigits = significantDigits - 1;\n                }\n            }\n        }\n        if (exponent <= radixPosition && radixPosition > exponent + (1 << 14)) {\n            exponent = EXPONENT_MIN;\n        } else {\n            exponent = exponent - radixPosition;\n        }\n        while(exponent > EXPONENT_MAX){\n            lastDigit = lastDigit + 1;\n            if (lastDigit >= MAX_DIGITS) {\n                if (significantDigits === 0) {\n                    exponent = EXPONENT_MAX;\n                    break;\n                }\n                invalidErr(representation, \"overflow\");\n            }\n            exponent = exponent - 1;\n        }\n        if (options.allowRounding) {\n            while(exponent < EXPONENT_MIN || nDigitsStored < nDigits){\n                if (lastDigit === 0 && significantDigits < nDigitsStored) {\n                    exponent = EXPONENT_MIN;\n                    significantDigits = 0;\n                    break;\n                }\n                if (nDigitsStored < nDigits) {\n                    nDigits = nDigits - 1;\n                } else {\n                    lastDigit = lastDigit - 1;\n                }\n                if (exponent < EXPONENT_MAX) {\n                    exponent = exponent + 1;\n                } else {\n                    const digitsString = digits.join(\"\");\n                    if (digitsString.match(/^0+$/)) {\n                        exponent = EXPONENT_MAX;\n                        break;\n                    }\n                    invalidErr(representation, \"overflow\");\n                }\n            }\n            if (lastDigit + 1 < significantDigits) {\n                let endOfString = nDigitsRead;\n                if (sawRadix) {\n                    firstNonZero = firstNonZero + 1;\n                    endOfString = endOfString + 1;\n                }\n                if (sawSign) {\n                    firstNonZero = firstNonZero + 1;\n                    endOfString = endOfString + 1;\n                }\n                const roundDigit = parseInt(representation[firstNonZero + lastDigit + 1], 10);\n                let roundBit = 0;\n                if (roundDigit >= 5) {\n                    roundBit = 1;\n                    if (roundDigit === 5) {\n                        roundBit = digits[lastDigit] % 2 === 1 ? 1 : 0;\n                        for(let i = firstNonZero + lastDigit + 2; i < endOfString; i++){\n                            if (parseInt(representation[i], 10)) {\n                                roundBit = 1;\n                                break;\n                            }\n                        }\n                    }\n                }\n                if (roundBit) {\n                    let dIdx = lastDigit;\n                    for(; dIdx >= 0; dIdx--){\n                        if (++digits[dIdx] > 9) {\n                            digits[dIdx] = 0;\n                            if (dIdx === 0) {\n                                if (exponent < EXPONENT_MAX) {\n                                    exponent = exponent + 1;\n                                    digits[dIdx] = 1;\n                                } else {\n                                    return new Decimal128(isNegative ? INF_NEGATIVE_BUFFER : INF_POSITIVE_BUFFER);\n                                }\n                            }\n                        } else {\n                            break;\n                        }\n                    }\n                }\n            }\n        } else {\n            while(exponent < EXPONENT_MIN || nDigitsStored < nDigits){\n                if (lastDigit === 0) {\n                    if (significantDigits === 0) {\n                        exponent = EXPONENT_MIN;\n                        break;\n                    }\n                    invalidErr(representation, \"exponent underflow\");\n                }\n                if (nDigitsStored < nDigits) {\n                    if (representation[nDigits - 1 + Number(sawSign) + Number(sawRadix)] !== \"0\" && significantDigits !== 0) {\n                        invalidErr(representation, \"inexact rounding\");\n                    }\n                    nDigits = nDigits - 1;\n                } else {\n                    if (digits[lastDigit] !== 0) {\n                        invalidErr(representation, \"inexact rounding\");\n                    }\n                    lastDigit = lastDigit - 1;\n                }\n                if (exponent < EXPONENT_MAX) {\n                    exponent = exponent + 1;\n                } else {\n                    invalidErr(representation, \"overflow\");\n                }\n            }\n            if (lastDigit + 1 < significantDigits) {\n                if (sawRadix) {\n                    firstNonZero = firstNonZero + 1;\n                }\n                if (sawSign) {\n                    firstNonZero = firstNonZero + 1;\n                }\n                const roundDigit = parseInt(representation[firstNonZero + lastDigit + 1], 10);\n                if (roundDigit !== 0) {\n                    invalidErr(representation, \"inexact rounding\");\n                }\n            }\n        }\n        significandHigh = Long.fromNumber(0);\n        significandLow = Long.fromNumber(0);\n        if (significantDigits === 0) {\n            significandHigh = Long.fromNumber(0);\n            significandLow = Long.fromNumber(0);\n        } else if (lastDigit < 17) {\n            let dIdx = 0;\n            significandLow = Long.fromNumber(digits[dIdx++]);\n            significandHigh = new Long(0, 0);\n            for(; dIdx <= lastDigit; dIdx++){\n                significandLow = significandLow.multiply(Long.fromNumber(10));\n                significandLow = significandLow.add(Long.fromNumber(digits[dIdx]));\n            }\n        } else {\n            let dIdx = 0;\n            significandHigh = Long.fromNumber(digits[dIdx++]);\n            for(; dIdx <= lastDigit - 17; dIdx++){\n                significandHigh = significandHigh.multiply(Long.fromNumber(10));\n                significandHigh = significandHigh.add(Long.fromNumber(digits[dIdx]));\n            }\n            significandLow = Long.fromNumber(digits[dIdx++]);\n            for(; dIdx <= lastDigit; dIdx++){\n                significandLow = significandLow.multiply(Long.fromNumber(10));\n                significandLow = significandLow.add(Long.fromNumber(digits[dIdx]));\n            }\n        }\n        const significand = multiply64x2(significandHigh, Long.fromString(\"100000000000000000\"));\n        significand.low = significand.low.add(significandLow);\n        if (lessThan(significand.low, significandLow)) {\n            significand.high = significand.high.add(Long.fromNumber(1));\n        }\n        biasedExponent = exponent + EXPONENT_BIAS;\n        const dec = {\n            low: Long.fromNumber(0),\n            high: Long.fromNumber(0)\n        };\n        if (significand.high.shiftRightUnsigned(49).and(Long.fromNumber(1)).equals(Long.fromNumber(1))) {\n            dec.high = dec.high.or(Long.fromNumber(0x3).shiftLeft(61));\n            dec.high = dec.high.or(Long.fromNumber(biasedExponent).and(Long.fromNumber(0x3fff).shiftLeft(47)));\n            dec.high = dec.high.or(significand.high.and(Long.fromNumber(0x7fffffffffff)));\n        } else {\n            dec.high = dec.high.or(Long.fromNumber(biasedExponent & 0x3fff).shiftLeft(49));\n            dec.high = dec.high.or(significand.high.and(Long.fromNumber(0x1ffffffffffff)));\n        }\n        dec.low = significand.low;\n        if (isNegative) {\n            dec.high = dec.high.or(Long.fromString(\"9223372036854775808\"));\n        }\n        const buffer = ByteUtils.allocate(16);\n        index = 0;\n        buffer[index++] = dec.low.low & 0xff;\n        buffer[index++] = dec.low.low >> 8 & 0xff;\n        buffer[index++] = dec.low.low >> 16 & 0xff;\n        buffer[index++] = dec.low.low >> 24 & 0xff;\n        buffer[index++] = dec.low.high & 0xff;\n        buffer[index++] = dec.low.high >> 8 & 0xff;\n        buffer[index++] = dec.low.high >> 16 & 0xff;\n        buffer[index++] = dec.low.high >> 24 & 0xff;\n        buffer[index++] = dec.high.low & 0xff;\n        buffer[index++] = dec.high.low >> 8 & 0xff;\n        buffer[index++] = dec.high.low >> 16 & 0xff;\n        buffer[index++] = dec.high.low >> 24 & 0xff;\n        buffer[index++] = dec.high.high & 0xff;\n        buffer[index++] = dec.high.high >> 8 & 0xff;\n        buffer[index++] = dec.high.high >> 16 & 0xff;\n        buffer[index++] = dec.high.high >> 24 & 0xff;\n        return new Decimal128(buffer);\n    }\n    toString() {\n        let biased_exponent;\n        let significand_digits = 0;\n        const significand = new Array(36);\n        for(let i = 0; i < significand.length; i++)significand[i] = 0;\n        let index = 0;\n        let is_zero = false;\n        let significand_msb;\n        let significand128 = {\n            parts: [\n                0,\n                0,\n                0,\n                0\n            ]\n        };\n        let j, k;\n        const string = [];\n        index = 0;\n        const buffer = this.bytes;\n        const low = buffer[index++] | buffer[index++] << 8 | buffer[index++] << 16 | buffer[index++] << 24;\n        const midl = buffer[index++] | buffer[index++] << 8 | buffer[index++] << 16 | buffer[index++] << 24;\n        const midh = buffer[index++] | buffer[index++] << 8 | buffer[index++] << 16 | buffer[index++] << 24;\n        const high = buffer[index++] | buffer[index++] << 8 | buffer[index++] << 16 | buffer[index++] << 24;\n        index = 0;\n        const dec = {\n            low: new Long(low, midl),\n            high: new Long(midh, high)\n        };\n        if (dec.high.lessThan(Long.ZERO)) {\n            string.push(\"-\");\n        }\n        const combination = high >> 26 & COMBINATION_MASK;\n        if (combination >> 3 === 3) {\n            if (combination === COMBINATION_INFINITY) {\n                return string.join(\"\") + \"Infinity\";\n            } else if (combination === COMBINATION_NAN) {\n                return \"NaN\";\n            } else {\n                biased_exponent = high >> 15 & EXPONENT_MASK;\n                significand_msb = 0x08 + (high >> 14 & 0x01);\n            }\n        } else {\n            significand_msb = high >> 14 & 0x07;\n            biased_exponent = high >> 17 & EXPONENT_MASK;\n        }\n        const exponent = biased_exponent - EXPONENT_BIAS;\n        significand128.parts[0] = (high & 0x3fff) + ((significand_msb & 0xf) << 14);\n        significand128.parts[1] = midh;\n        significand128.parts[2] = midl;\n        significand128.parts[3] = low;\n        if (significand128.parts[0] === 0 && significand128.parts[1] === 0 && significand128.parts[2] === 0 && significand128.parts[3] === 0) {\n            is_zero = true;\n        } else {\n            for(k = 3; k >= 0; k--){\n                let least_digits = 0;\n                const result = divideu128(significand128);\n                significand128 = result.quotient;\n                least_digits = result.rem.low;\n                if (!least_digits) continue;\n                for(j = 8; j >= 0; j--){\n                    significand[k * 9 + j] = least_digits % 10;\n                    least_digits = Math.floor(least_digits / 10);\n                }\n            }\n        }\n        if (is_zero) {\n            significand_digits = 1;\n            significand[index] = 0;\n        } else {\n            significand_digits = 36;\n            while(!significand[index]){\n                significand_digits = significand_digits - 1;\n                index = index + 1;\n            }\n        }\n        const scientific_exponent = significand_digits - 1 + exponent;\n        if (scientific_exponent >= 34 || scientific_exponent <= -7 || exponent > 0) {\n            if (significand_digits > 34) {\n                string.push(`${0}`);\n                if (exponent > 0) string.push(`E+${exponent}`);\n                else if (exponent < 0) string.push(`E${exponent}`);\n                return string.join(\"\");\n            }\n            string.push(`${significand[index++]}`);\n            significand_digits = significand_digits - 1;\n            if (significand_digits) {\n                string.push(\".\");\n            }\n            for(let i = 0; i < significand_digits; i++){\n                string.push(`${significand[index++]}`);\n            }\n            string.push(\"E\");\n            if (scientific_exponent > 0) {\n                string.push(`+${scientific_exponent}`);\n            } else {\n                string.push(`${scientific_exponent}`);\n            }\n        } else {\n            if (exponent >= 0) {\n                for(let i = 0; i < significand_digits; i++){\n                    string.push(`${significand[index++]}`);\n                }\n            } else {\n                let radix_position = significand_digits + exponent;\n                if (radix_position > 0) {\n                    for(let i = 0; i < radix_position; i++){\n                        string.push(`${significand[index++]}`);\n                    }\n                } else {\n                    string.push(\"0\");\n                }\n                string.push(\".\");\n                while(radix_position++ < 0){\n                    string.push(\"0\");\n                }\n                for(let i = 0; i < significand_digits - Math.max(radix_position - 1, 0); i++){\n                    string.push(`${significand[index++]}`);\n                }\n            }\n        }\n        return string.join(\"\");\n    }\n    toJSON() {\n        return {\n            $numberDecimal: this.toString()\n        };\n    }\n    toExtendedJSON() {\n        return {\n            $numberDecimal: this.toString()\n        };\n    }\n    static fromExtendedJSON(doc) {\n        return Decimal128.fromString(doc.$numberDecimal);\n    }\n    inspect(depth, options, inspect) {\n        inspect ??= defaultInspect;\n        const d128string = inspect(this.toString(), options);\n        return `new Decimal128(${d128string})`;\n    }\n}\nclass Double extends BSONValue {\n    get _bsontype() {\n        return \"Double\";\n    }\n    constructor(value){\n        super();\n        if (value instanceof Number) {\n            value = value.valueOf();\n        }\n        this.value = +value;\n    }\n    valueOf() {\n        return this.value;\n    }\n    toJSON() {\n        return this.value;\n    }\n    toString(radix) {\n        return this.value.toString(radix);\n    }\n    toExtendedJSON(options) {\n        if (options && (options.legacy || options.relaxed && isFinite(this.value))) {\n            return this.value;\n        }\n        if (Object.is(Math.sign(this.value), -0)) {\n            return {\n                $numberDouble: \"-0.0\"\n            };\n        }\n        return {\n            $numberDouble: Number.isInteger(this.value) ? this.value.toFixed(1) : this.value.toString()\n        };\n    }\n    static fromExtendedJSON(doc, options) {\n        const doubleValue = parseFloat(doc.$numberDouble);\n        return options && options.relaxed ? doubleValue : new Double(doubleValue);\n    }\n    inspect(depth, options, inspect) {\n        inspect ??= defaultInspect;\n        return `new Double(${inspect(this.value, options)})`;\n    }\n}\nclass Int32 extends BSONValue {\n    get _bsontype() {\n        return \"Int32\";\n    }\n    constructor(value){\n        super();\n        if (value instanceof Number) {\n            value = value.valueOf();\n        }\n        this.value = +value | 0;\n    }\n    valueOf() {\n        return this.value;\n    }\n    toString(radix) {\n        return this.value.toString(radix);\n    }\n    toJSON() {\n        return this.value;\n    }\n    toExtendedJSON(options) {\n        if (options && (options.relaxed || options.legacy)) return this.value;\n        return {\n            $numberInt: this.value.toString()\n        };\n    }\n    static fromExtendedJSON(doc, options) {\n        return options && options.relaxed ? parseInt(doc.$numberInt, 10) : new Int32(doc.$numberInt);\n    }\n    inspect(depth, options, inspect) {\n        inspect ??= defaultInspect;\n        return `new Int32(${inspect(this.value, options)})`;\n    }\n}\nclass MaxKey extends BSONValue {\n    get _bsontype() {\n        return \"MaxKey\";\n    }\n    toExtendedJSON() {\n        return {\n            $maxKey: 1\n        };\n    }\n    static fromExtendedJSON() {\n        return new MaxKey();\n    }\n    inspect() {\n        return \"new MaxKey()\";\n    }\n}\nclass MinKey extends BSONValue {\n    get _bsontype() {\n        return \"MinKey\";\n    }\n    toExtendedJSON() {\n        return {\n            $minKey: 1\n        };\n    }\n    static fromExtendedJSON() {\n        return new MinKey();\n    }\n    inspect() {\n        return \"new MinKey()\";\n    }\n}\nconst checkForHexRegExp = new RegExp(\"^[0-9a-fA-F]{24}$\");\nlet PROCESS_UNIQUE = null;\nconst kId = Symbol(\"id\");\nclass ObjectId extends BSONValue {\n    get _bsontype() {\n        return \"ObjectId\";\n    }\n    constructor(inputId){\n        super();\n        let workingId;\n        if (typeof inputId === \"object\" && inputId && \"id\" in inputId) {\n            if (typeof inputId.id !== \"string\" && !ArrayBuffer.isView(inputId.id)) {\n                throw new BSONError(\"Argument passed in must have an id that is of type string or Buffer\");\n            }\n            if (\"toHexString\" in inputId && typeof inputId.toHexString === \"function\") {\n                workingId = ByteUtils.fromHex(inputId.toHexString());\n            } else {\n                workingId = inputId.id;\n            }\n        } else {\n            workingId = inputId;\n        }\n        if (workingId == null || typeof workingId === \"number\") {\n            this[kId] = ObjectId.generate(typeof workingId === \"number\" ? workingId : undefined);\n        } else if (ArrayBuffer.isView(workingId) && workingId.byteLength === 12) {\n            this[kId] = ByteUtils.toLocalBufferType(workingId);\n        } else if (typeof workingId === \"string\") {\n            if (workingId.length === 24 && checkForHexRegExp.test(workingId)) {\n                this[kId] = ByteUtils.fromHex(workingId);\n            } else {\n                throw new BSONError(\"input must be a 24 character hex string, 12 byte Uint8Array, or an integer\");\n            }\n        } else {\n            throw new BSONError(\"Argument passed in does not match the accepted types\");\n        }\n        if (ObjectId.cacheHexString) {\n            this.__id = ByteUtils.toHex(this.id);\n        }\n    }\n    get id() {\n        return this[kId];\n    }\n    set id(value) {\n        this[kId] = value;\n        if (ObjectId.cacheHexString) {\n            this.__id = ByteUtils.toHex(value);\n        }\n    }\n    toHexString() {\n        if (ObjectId.cacheHexString && this.__id) {\n            return this.__id;\n        }\n        const hexString = ByteUtils.toHex(this.id);\n        if (ObjectId.cacheHexString && !this.__id) {\n            this.__id = hexString;\n        }\n        return hexString;\n    }\n    static getInc() {\n        return ObjectId.index = (ObjectId.index + 1) % 0xffffff;\n    }\n    static generate(time) {\n        if (\"number\" !== typeof time) {\n            time = Math.floor(Date.now() / 1000);\n        }\n        const inc = ObjectId.getInc();\n        const buffer = ByteUtils.allocate(12);\n        BSONDataView.fromUint8Array(buffer).setUint32(0, time, false);\n        if (PROCESS_UNIQUE === null) {\n            PROCESS_UNIQUE = ByteUtils.randomBytes(5);\n        }\n        buffer[4] = PROCESS_UNIQUE[0];\n        buffer[5] = PROCESS_UNIQUE[1];\n        buffer[6] = PROCESS_UNIQUE[2];\n        buffer[7] = PROCESS_UNIQUE[3];\n        buffer[8] = PROCESS_UNIQUE[4];\n        buffer[11] = inc & 0xff;\n        buffer[10] = inc >> 8 & 0xff;\n        buffer[9] = inc >> 16 & 0xff;\n        return buffer;\n    }\n    toString(encoding) {\n        if (encoding === \"base64\") return ByteUtils.toBase64(this.id);\n        if (encoding === \"hex\") return this.toHexString();\n        return this.toHexString();\n    }\n    toJSON() {\n        return this.toHexString();\n    }\n    static is(variable) {\n        return variable != null && typeof variable === \"object\" && \"_bsontype\" in variable && variable._bsontype === \"ObjectId\";\n    }\n    equals(otherId) {\n        if (otherId === undefined || otherId === null) {\n            return false;\n        }\n        if (ObjectId.is(otherId)) {\n            return this[kId][11] === otherId[kId][11] && ByteUtils.equals(this[kId], otherId[kId]);\n        }\n        if (typeof otherId === \"string\") {\n            return otherId.toLowerCase() === this.toHexString();\n        }\n        if (typeof otherId === \"object\" && typeof otherId.toHexString === \"function\") {\n            const otherIdString = otherId.toHexString();\n            const thisIdString = this.toHexString();\n            return typeof otherIdString === \"string\" && otherIdString.toLowerCase() === thisIdString;\n        }\n        return false;\n    }\n    getTimestamp() {\n        const timestamp = new Date();\n        const time = BSONDataView.fromUint8Array(this.id).getUint32(0, false);\n        timestamp.setTime(Math.floor(time) * 1000);\n        return timestamp;\n    }\n    static createPk() {\n        return new ObjectId();\n    }\n    static createFromTime(time) {\n        const buffer = ByteUtils.fromNumberArray([\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0\n        ]);\n        BSONDataView.fromUint8Array(buffer).setUint32(0, time, false);\n        return new ObjectId(buffer);\n    }\n    static createFromHexString(hexString) {\n        if (hexString?.length !== 24) {\n            throw new BSONError(\"hex string must be 24 characters\");\n        }\n        return new ObjectId(ByteUtils.fromHex(hexString));\n    }\n    static createFromBase64(base64) {\n        if (base64?.length !== 16) {\n            throw new BSONError(\"base64 string must be 16 characters\");\n        }\n        return new ObjectId(ByteUtils.fromBase64(base64));\n    }\n    static isValid(id) {\n        if (id == null) return false;\n        try {\n            new ObjectId(id);\n            return true;\n        } catch  {\n            return false;\n        }\n    }\n    toExtendedJSON() {\n        if (this.toHexString) return {\n            $oid: this.toHexString()\n        };\n        return {\n            $oid: this.toString(\"hex\")\n        };\n    }\n    static fromExtendedJSON(doc) {\n        return new ObjectId(doc.$oid);\n    }\n    inspect(depth, options, inspect) {\n        inspect ??= defaultInspect;\n        return `new ObjectId(${inspect(this.toHexString(), options)})`;\n    }\n}\nObjectId.index = Math.floor(Math.random() * 0xffffff);\nfunction internalCalculateObjectSize(object, serializeFunctions, ignoreUndefined) {\n    let totalLength = 4 + 1;\n    if (Array.isArray(object)) {\n        for(let i = 0; i < object.length; i++){\n            totalLength += calculateElement(i.toString(), object[i], serializeFunctions, true, ignoreUndefined);\n        }\n    } else {\n        if (typeof object?.toBSON === \"function\") {\n            object = object.toBSON();\n        }\n        for (const key of Object.keys(object)){\n            totalLength += calculateElement(key, object[key], serializeFunctions, false, ignoreUndefined);\n        }\n    }\n    return totalLength;\n}\nfunction calculateElement(name, value, serializeFunctions = false, isArray = false, ignoreUndefined = false) {\n    if (typeof value?.toBSON === \"function\") {\n        value = value.toBSON();\n    }\n    switch(typeof value){\n        case \"string\":\n            return 1 + ByteUtils.utf8ByteLength(name) + 1 + 4 + ByteUtils.utf8ByteLength(value) + 1;\n        case \"number\":\n            if (Math.floor(value) === value && value >= JS_INT_MIN && value <= JS_INT_MAX) {\n                if (value >= BSON_INT32_MIN && value <= BSON_INT32_MAX) {\n                    return (name != null ? ByteUtils.utf8ByteLength(name) + 1 : 0) + (4 + 1);\n                } else {\n                    return (name != null ? ByteUtils.utf8ByteLength(name) + 1 : 0) + (8 + 1);\n                }\n            } else {\n                return (name != null ? ByteUtils.utf8ByteLength(name) + 1 : 0) + (8 + 1);\n            }\n        case \"undefined\":\n            if (isArray || !ignoreUndefined) return (name != null ? ByteUtils.utf8ByteLength(name) + 1 : 0) + 1;\n            return 0;\n        case \"boolean\":\n            return (name != null ? ByteUtils.utf8ByteLength(name) + 1 : 0) + (1 + 1);\n        case \"object\":\n            if (value != null && typeof value._bsontype === \"string\" && value[Symbol.for(\"@@mdb.bson.version\")] !== BSON_MAJOR_VERSION) {\n                throw new BSONVersionError();\n            } else if (value == null || value._bsontype === \"MinKey\" || value._bsontype === \"MaxKey\") {\n                return (name != null ? ByteUtils.utf8ByteLength(name) + 1 : 0) + 1;\n            } else if (value._bsontype === \"ObjectId\") {\n                return (name != null ? ByteUtils.utf8ByteLength(name) + 1 : 0) + (12 + 1);\n            } else if (value instanceof Date || isDate(value)) {\n                return (name != null ? ByteUtils.utf8ByteLength(name) + 1 : 0) + (8 + 1);\n            } else if (ArrayBuffer.isView(value) || value instanceof ArrayBuffer || isAnyArrayBuffer(value)) {\n                return (name != null ? ByteUtils.utf8ByteLength(name) + 1 : 0) + (1 + 4 + 1) + value.byteLength;\n            } else if (value._bsontype === \"Long\" || value._bsontype === \"Double\" || value._bsontype === \"Timestamp\") {\n                return (name != null ? ByteUtils.utf8ByteLength(name) + 1 : 0) + (8 + 1);\n            } else if (value._bsontype === \"Decimal128\") {\n                return (name != null ? ByteUtils.utf8ByteLength(name) + 1 : 0) + (16 + 1);\n            } else if (value._bsontype === \"Code\") {\n                if (value.scope != null && Object.keys(value.scope).length > 0) {\n                    return (name != null ? ByteUtils.utf8ByteLength(name) + 1 : 0) + 1 + 4 + 4 + ByteUtils.utf8ByteLength(value.code.toString()) + 1 + internalCalculateObjectSize(value.scope, serializeFunctions, ignoreUndefined);\n                } else {\n                    return (name != null ? ByteUtils.utf8ByteLength(name) + 1 : 0) + 1 + 4 + ByteUtils.utf8ByteLength(value.code.toString()) + 1;\n                }\n            } else if (value._bsontype === \"Binary\") {\n                const binary = value;\n                if (binary.sub_type === Binary.SUBTYPE_BYTE_ARRAY) {\n                    return (name != null ? ByteUtils.utf8ByteLength(name) + 1 : 0) + (binary.position + 1 + 4 + 1 + 4);\n                } else {\n                    return (name != null ? ByteUtils.utf8ByteLength(name) + 1 : 0) + (binary.position + 1 + 4 + 1);\n                }\n            } else if (value._bsontype === \"Symbol\") {\n                return (name != null ? ByteUtils.utf8ByteLength(name) + 1 : 0) + ByteUtils.utf8ByteLength(value.value) + 4 + 1 + 1;\n            } else if (value._bsontype === \"DBRef\") {\n                const ordered_values = Object.assign({\n                    $ref: value.collection,\n                    $id: value.oid\n                }, value.fields);\n                if (value.db != null) {\n                    ordered_values[\"$db\"] = value.db;\n                }\n                return (name != null ? ByteUtils.utf8ByteLength(name) + 1 : 0) + 1 + internalCalculateObjectSize(ordered_values, serializeFunctions, ignoreUndefined);\n            } else if (value instanceof RegExp || isRegExp(value)) {\n                return (name != null ? ByteUtils.utf8ByteLength(name) + 1 : 0) + 1 + ByteUtils.utf8ByteLength(value.source) + 1 + (value.global ? 1 : 0) + (value.ignoreCase ? 1 : 0) + (value.multiline ? 1 : 0) + 1;\n            } else if (value._bsontype === \"BSONRegExp\") {\n                return (name != null ? ByteUtils.utf8ByteLength(name) + 1 : 0) + 1 + ByteUtils.utf8ByteLength(value.pattern) + 1 + ByteUtils.utf8ByteLength(value.options) + 1;\n            } else {\n                return (name != null ? ByteUtils.utf8ByteLength(name) + 1 : 0) + internalCalculateObjectSize(value, serializeFunctions, ignoreUndefined) + 1;\n            }\n        case \"function\":\n            if (serializeFunctions) {\n                return (name != null ? ByteUtils.utf8ByteLength(name) + 1 : 0) + 1 + 4 + ByteUtils.utf8ByteLength(value.toString()) + 1;\n            }\n    }\n    return 0;\n}\nfunction alphabetize(str) {\n    return str.split(\"\").sort().join(\"\");\n}\nclass BSONRegExp extends BSONValue {\n    get _bsontype() {\n        return \"BSONRegExp\";\n    }\n    constructor(pattern, options){\n        super();\n        this.pattern = pattern;\n        this.options = alphabetize(options ?? \"\");\n        if (this.pattern.indexOf(\"\\x00\") !== -1) {\n            throw new BSONError(`BSON Regex patterns cannot contain null bytes, found: ${JSON.stringify(this.pattern)}`);\n        }\n        if (this.options.indexOf(\"\\x00\") !== -1) {\n            throw new BSONError(`BSON Regex options cannot contain null bytes, found: ${JSON.stringify(this.options)}`);\n        }\n        for(let i = 0; i < this.options.length; i++){\n            if (!(this.options[i] === \"i\" || this.options[i] === \"m\" || this.options[i] === \"x\" || this.options[i] === \"l\" || this.options[i] === \"s\" || this.options[i] === \"u\")) {\n                throw new BSONError(`The regular expression option [${this.options[i]}] is not supported`);\n            }\n        }\n    }\n    static parseOptions(options) {\n        return options ? options.split(\"\").sort().join(\"\") : \"\";\n    }\n    toExtendedJSON(options) {\n        options = options || {};\n        if (options.legacy) {\n            return {\n                $regex: this.pattern,\n                $options: this.options\n            };\n        }\n        return {\n            $regularExpression: {\n                pattern: this.pattern,\n                options: this.options\n            }\n        };\n    }\n    static fromExtendedJSON(doc) {\n        if (\"$regex\" in doc) {\n            if (typeof doc.$regex !== \"string\") {\n                if (doc.$regex._bsontype === \"BSONRegExp\") {\n                    return doc;\n                }\n            } else {\n                return new BSONRegExp(doc.$regex, BSONRegExp.parseOptions(doc.$options));\n            }\n        }\n        if (\"$regularExpression\" in doc) {\n            return new BSONRegExp(doc.$regularExpression.pattern, BSONRegExp.parseOptions(doc.$regularExpression.options));\n        }\n        throw new BSONError(`Unexpected BSONRegExp EJSON object form: ${JSON.stringify(doc)}`);\n    }\n    inspect(depth, options, inspect) {\n        const stylize = getStylizeFunction(options) ?? ((v)=>v);\n        inspect ??= defaultInspect;\n        const pattern = stylize(inspect(this.pattern), \"regexp\");\n        const flags = stylize(inspect(this.options), \"regexp\");\n        return `new BSONRegExp(${pattern}, ${flags})`;\n    }\n}\nclass BSONSymbol extends BSONValue {\n    get _bsontype() {\n        return \"BSONSymbol\";\n    }\n    constructor(value){\n        super();\n        this.value = value;\n    }\n    valueOf() {\n        return this.value;\n    }\n    toString() {\n        return this.value;\n    }\n    toJSON() {\n        return this.value;\n    }\n    toExtendedJSON() {\n        return {\n            $symbol: this.value\n        };\n    }\n    static fromExtendedJSON(doc) {\n        return new BSONSymbol(doc.$symbol);\n    }\n    inspect(depth, options, inspect) {\n        inspect ??= defaultInspect;\n        return `new BSONSymbol(${inspect(this.value, options)})`;\n    }\n}\nconst LongWithoutOverridesClass = Long;\nclass Timestamp extends LongWithoutOverridesClass {\n    get _bsontype() {\n        return \"Timestamp\";\n    }\n    constructor(low){\n        if (low == null) {\n            super(0, 0, true);\n        } else if (typeof low === \"bigint\") {\n            super(low, true);\n        } else if (Long.isLong(low)) {\n            super(low.low, low.high, true);\n        } else if (typeof low === \"object\" && \"t\" in low && \"i\" in low) {\n            if (typeof low.t !== \"number\" && (typeof low.t !== \"object\" || low.t._bsontype !== \"Int32\")) {\n                throw new BSONError(\"Timestamp constructed from { t, i } must provide t as a number\");\n            }\n            if (typeof low.i !== \"number\" && (typeof low.i !== \"object\" || low.i._bsontype !== \"Int32\")) {\n                throw new BSONError(\"Timestamp constructed from { t, i } must provide i as a number\");\n            }\n            const t = Number(low.t);\n            const i = Number(low.i);\n            if (t < 0 || Number.isNaN(t)) {\n                throw new BSONError(\"Timestamp constructed from { t, i } must provide a positive t\");\n            }\n            if (i < 0 || Number.isNaN(i)) {\n                throw new BSONError(\"Timestamp constructed from { t, i } must provide a positive i\");\n            }\n            if (t > 4294967295) {\n                throw new BSONError(\"Timestamp constructed from { t, i } must provide t equal or less than uint32 max\");\n            }\n            if (i > 4294967295) {\n                throw new BSONError(\"Timestamp constructed from { t, i } must provide i equal or less than uint32 max\");\n            }\n            super(i, t, true);\n        } else {\n            throw new BSONError(\"A Timestamp can only be constructed with: bigint, Long, or { t: number; i: number }\");\n        }\n    }\n    toJSON() {\n        return {\n            $timestamp: this.toString()\n        };\n    }\n    static fromInt(value) {\n        return new Timestamp(Long.fromInt(value, true));\n    }\n    static fromNumber(value) {\n        return new Timestamp(Long.fromNumber(value, true));\n    }\n    static fromBits(lowBits, highBits) {\n        return new Timestamp({\n            i: lowBits,\n            t: highBits\n        });\n    }\n    static fromString(str, optRadix) {\n        return new Timestamp(Long.fromString(str, true, optRadix));\n    }\n    toExtendedJSON() {\n        return {\n            $timestamp: {\n                t: this.high >>> 0,\n                i: this.low >>> 0\n            }\n        };\n    }\n    static fromExtendedJSON(doc) {\n        const i = Long.isLong(doc.$timestamp.i) ? doc.$timestamp.i.getLowBitsUnsigned() : doc.$timestamp.i;\n        const t = Long.isLong(doc.$timestamp.t) ? doc.$timestamp.t.getLowBitsUnsigned() : doc.$timestamp.t;\n        return new Timestamp({\n            t,\n            i\n        });\n    }\n    inspect(depth, options, inspect) {\n        inspect ??= defaultInspect;\n        const t = inspect(this.high >>> 0, options);\n        const i = inspect(this.low >>> 0, options);\n        return `new Timestamp({ t: ${t}, i: ${i} })`;\n    }\n}\nTimestamp.MAX_VALUE = Long.MAX_UNSIGNED_VALUE;\nconst FIRST_BIT = 0x80;\nconst FIRST_TWO_BITS = 0xc0;\nconst FIRST_THREE_BITS = 0xe0;\nconst FIRST_FOUR_BITS = 0xf0;\nconst FIRST_FIVE_BITS = 0xf8;\nconst TWO_BIT_CHAR = 0xc0;\nconst THREE_BIT_CHAR = 0xe0;\nconst FOUR_BIT_CHAR = 0xf0;\nconst CONTINUING_CHAR = 0x80;\nfunction validateUtf8(bytes, start, end) {\n    let continuation = 0;\n    for(let i = start; i < end; i += 1){\n        const byte = bytes[i];\n        if (continuation) {\n            if ((byte & FIRST_TWO_BITS) !== CONTINUING_CHAR) {\n                return false;\n            }\n            continuation -= 1;\n        } else if (byte & FIRST_BIT) {\n            if ((byte & FIRST_THREE_BITS) === TWO_BIT_CHAR) {\n                continuation = 1;\n            } else if ((byte & FIRST_FOUR_BITS) === THREE_BIT_CHAR) {\n                continuation = 2;\n            } else if ((byte & FIRST_FIVE_BITS) === FOUR_BIT_CHAR) {\n                continuation = 3;\n            } else {\n                return false;\n            }\n        }\n    }\n    return !continuation;\n}\nconst JS_INT_MAX_LONG = Long.fromNumber(JS_INT_MAX);\nconst JS_INT_MIN_LONG = Long.fromNumber(JS_INT_MIN);\nfunction internalDeserialize(buffer, options, isArray) {\n    options = options == null ? {} : options;\n    const index = options && options.index ? options.index : 0;\n    const size = buffer[index] | buffer[index + 1] << 8 | buffer[index + 2] << 16 | buffer[index + 3] << 24;\n    if (size < 5) {\n        throw new BSONError(`bson size must be >= 5, is ${size}`);\n    }\n    if (options.allowObjectSmallerThanBufferSize && buffer.length < size) {\n        throw new BSONError(`buffer length ${buffer.length} must be >= bson size ${size}`);\n    }\n    if (!options.allowObjectSmallerThanBufferSize && buffer.length !== size) {\n        throw new BSONError(`buffer length ${buffer.length} must === bson size ${size}`);\n    }\n    if (size + index > buffer.byteLength) {\n        throw new BSONError(`(bson size ${size} + options.index ${index} must be <= buffer length ${buffer.byteLength})`);\n    }\n    if (buffer[index + size - 1] !== 0) {\n        throw new BSONError(\"One object, sized correctly, with a spot for an EOO, but the EOO isn't 0x00\");\n    }\n    return deserializeObject(buffer, index, options, isArray);\n}\nconst allowedDBRefKeys = /^\\$ref$|^\\$id$|^\\$db$/;\nfunction deserializeObject(buffer, index, options, isArray = false) {\n    const fieldsAsRaw = options[\"fieldsAsRaw\"] == null ? null : options[\"fieldsAsRaw\"];\n    const raw = options[\"raw\"] == null ? false : options[\"raw\"];\n    const bsonRegExp = typeof options[\"bsonRegExp\"] === \"boolean\" ? options[\"bsonRegExp\"] : false;\n    const promoteBuffers = options.promoteBuffers ?? false;\n    const promoteLongs = options.promoteLongs ?? true;\n    const promoteValues = options.promoteValues ?? true;\n    const useBigInt64 = options.useBigInt64 ?? false;\n    if (useBigInt64 && !promoteValues) {\n        throw new BSONError(\"Must either request bigint or Long for int64 deserialization\");\n    }\n    if (useBigInt64 && !promoteLongs) {\n        throw new BSONError(\"Must either request bigint or Long for int64 deserialization\");\n    }\n    const validation = options.validation == null ? {\n        utf8: true\n    } : options.validation;\n    let globalUTFValidation = true;\n    let validationSetting;\n    const utf8KeysSet = new Set();\n    const utf8ValidatedKeys = validation.utf8;\n    if (typeof utf8ValidatedKeys === \"boolean\") {\n        validationSetting = utf8ValidatedKeys;\n    } else {\n        globalUTFValidation = false;\n        const utf8ValidationValues = Object.keys(utf8ValidatedKeys).map(function(key) {\n            return utf8ValidatedKeys[key];\n        });\n        if (utf8ValidationValues.length === 0) {\n            throw new BSONError(\"UTF-8 validation setting cannot be empty\");\n        }\n        if (typeof utf8ValidationValues[0] !== \"boolean\") {\n            throw new BSONError(\"Invalid UTF-8 validation option, must specify boolean values\");\n        }\n        validationSetting = utf8ValidationValues[0];\n        if (!utf8ValidationValues.every((item)=>item === validationSetting)) {\n            throw new BSONError(\"Invalid UTF-8 validation option - keys must be all true or all false\");\n        }\n    }\n    if (!globalUTFValidation) {\n        for (const key of Object.keys(utf8ValidatedKeys)){\n            utf8KeysSet.add(key);\n        }\n    }\n    const startIndex = index;\n    if (buffer.length < 5) throw new BSONError(\"corrupt bson message < 5 bytes long\");\n    const size = buffer[index++] | buffer[index++] << 8 | buffer[index++] << 16 | buffer[index++] << 24;\n    if (size < 5 || size > buffer.length) throw new BSONError(\"corrupt bson message\");\n    const object = isArray ? [] : {};\n    let arrayIndex = 0;\n    const done = false;\n    let isPossibleDBRef = isArray ? false : null;\n    const dataview = new DataView(buffer.buffer, buffer.byteOffset, buffer.byteLength);\n    while(!done){\n        const elementType = buffer[index++];\n        if (elementType === 0) break;\n        let i = index;\n        while(buffer[i] !== 0x00 && i < buffer.length){\n            i++;\n        }\n        if (i >= buffer.byteLength) throw new BSONError(\"Bad BSON Document: illegal CString\");\n        const name = isArray ? arrayIndex++ : ByteUtils.toUTF8(buffer, index, i);\n        let shouldValidateKey = true;\n        if (globalUTFValidation || utf8KeysSet.has(name)) {\n            shouldValidateKey = validationSetting;\n        } else {\n            shouldValidateKey = !validationSetting;\n        }\n        if (isPossibleDBRef !== false && name[0] === \"$\") {\n            isPossibleDBRef = allowedDBRefKeys.test(name);\n        }\n        let value;\n        index = i + 1;\n        if (elementType === BSON_DATA_STRING) {\n            const stringSize = buffer[index++] | buffer[index++] << 8 | buffer[index++] << 16 | buffer[index++] << 24;\n            if (stringSize <= 0 || stringSize > buffer.length - index || buffer[index + stringSize - 1] !== 0) {\n                throw new BSONError(\"bad string length in bson\");\n            }\n            value = getValidatedString(buffer, index, index + stringSize - 1, shouldValidateKey);\n            index = index + stringSize;\n        } else if (elementType === BSON_DATA_OID) {\n            const oid = ByteUtils.allocate(12);\n            oid.set(buffer.subarray(index, index + 12));\n            value = new ObjectId(oid);\n            index = index + 12;\n        } else if (elementType === BSON_DATA_INT && promoteValues === false) {\n            value = new Int32(buffer[index++] | buffer[index++] << 8 | buffer[index++] << 16 | buffer[index++] << 24);\n        } else if (elementType === BSON_DATA_INT) {\n            value = buffer[index++] | buffer[index++] << 8 | buffer[index++] << 16 | buffer[index++] << 24;\n        } else if (elementType === BSON_DATA_NUMBER && promoteValues === false) {\n            value = new Double(dataview.getFloat64(index, true));\n            index = index + 8;\n        } else if (elementType === BSON_DATA_NUMBER) {\n            value = dataview.getFloat64(index, true);\n            index = index + 8;\n        } else if (elementType === BSON_DATA_DATE) {\n            const lowBits = buffer[index++] | buffer[index++] << 8 | buffer[index++] << 16 | buffer[index++] << 24;\n            const highBits = buffer[index++] | buffer[index++] << 8 | buffer[index++] << 16 | buffer[index++] << 24;\n            value = new Date(new Long(lowBits, highBits).toNumber());\n        } else if (elementType === BSON_DATA_BOOLEAN) {\n            if (buffer[index] !== 0 && buffer[index] !== 1) throw new BSONError(\"illegal boolean type value\");\n            value = buffer[index++] === 1;\n        } else if (elementType === BSON_DATA_OBJECT) {\n            const _index = index;\n            const objectSize = buffer[index] | buffer[index + 1] << 8 | buffer[index + 2] << 16 | buffer[index + 3] << 24;\n            if (objectSize <= 0 || objectSize > buffer.length - index) throw new BSONError(\"bad embedded document length in bson\");\n            if (raw) {\n                value = buffer.slice(index, index + objectSize);\n            } else {\n                let objectOptions = options;\n                if (!globalUTFValidation) {\n                    objectOptions = {\n                        ...options,\n                        validation: {\n                            utf8: shouldValidateKey\n                        }\n                    };\n                }\n                value = deserializeObject(buffer, _index, objectOptions, false);\n            }\n            index = index + objectSize;\n        } else if (elementType === BSON_DATA_ARRAY) {\n            const _index = index;\n            const objectSize = buffer[index] | buffer[index + 1] << 8 | buffer[index + 2] << 16 | buffer[index + 3] << 24;\n            let arrayOptions = options;\n            const stopIndex = index + objectSize;\n            if (fieldsAsRaw && fieldsAsRaw[name]) {\n                arrayOptions = {\n                    ...options,\n                    raw: true\n                };\n            }\n            if (!globalUTFValidation) {\n                arrayOptions = {\n                    ...arrayOptions,\n                    validation: {\n                        utf8: shouldValidateKey\n                    }\n                };\n            }\n            value = deserializeObject(buffer, _index, arrayOptions, true);\n            index = index + objectSize;\n            if (buffer[index - 1] !== 0) throw new BSONError(\"invalid array terminator byte\");\n            if (index !== stopIndex) throw new BSONError(\"corrupted array bson\");\n        } else if (elementType === BSON_DATA_UNDEFINED) {\n            value = undefined;\n        } else if (elementType === BSON_DATA_NULL) {\n            value = null;\n        } else if (elementType === BSON_DATA_LONG) {\n            const dataview = BSONDataView.fromUint8Array(buffer.subarray(index, index + 8));\n            const lowBits = buffer[index++] | buffer[index++] << 8 | buffer[index++] << 16 | buffer[index++] << 24;\n            const highBits = buffer[index++] | buffer[index++] << 8 | buffer[index++] << 16 | buffer[index++] << 24;\n            const long = new Long(lowBits, highBits);\n            if (useBigInt64) {\n                value = dataview.getBigInt64(0, true);\n            } else if (promoteLongs && promoteValues === true) {\n                value = long.lessThanOrEqual(JS_INT_MAX_LONG) && long.greaterThanOrEqual(JS_INT_MIN_LONG) ? long.toNumber() : long;\n            } else {\n                value = long;\n            }\n        } else if (elementType === BSON_DATA_DECIMAL128) {\n            const bytes = ByteUtils.allocate(16);\n            bytes.set(buffer.subarray(index, index + 16), 0);\n            index = index + 16;\n            value = new Decimal128(bytes);\n        } else if (elementType === BSON_DATA_BINARY) {\n            let binarySize = buffer[index++] | buffer[index++] << 8 | buffer[index++] << 16 | buffer[index++] << 24;\n            const totalBinarySize = binarySize;\n            const subType = buffer[index++];\n            if (binarySize < 0) throw new BSONError(\"Negative binary type element size found\");\n            if (binarySize > buffer.byteLength) throw new BSONError(\"Binary type size larger than document size\");\n            if (buffer[\"slice\"] != null) {\n                if (subType === Binary.SUBTYPE_BYTE_ARRAY) {\n                    binarySize = buffer[index++] | buffer[index++] << 8 | buffer[index++] << 16 | buffer[index++] << 24;\n                    if (binarySize < 0) throw new BSONError(\"Negative binary type element size found for subtype 0x02\");\n                    if (binarySize > totalBinarySize - 4) throw new BSONError(\"Binary type with subtype 0x02 contains too long binary size\");\n                    if (binarySize < totalBinarySize - 4) throw new BSONError(\"Binary type with subtype 0x02 contains too short binary size\");\n                }\n                if (promoteBuffers && promoteValues) {\n                    value = ByteUtils.toLocalBufferType(buffer.slice(index, index + binarySize));\n                } else {\n                    value = new Binary(buffer.slice(index, index + binarySize), subType);\n                    if (subType === BSON_BINARY_SUBTYPE_UUID_NEW && UUID.isValid(value)) {\n                        value = value.toUUID();\n                    }\n                }\n            } else {\n                const _buffer = ByteUtils.allocate(binarySize);\n                if (subType === Binary.SUBTYPE_BYTE_ARRAY) {\n                    binarySize = buffer[index++] | buffer[index++] << 8 | buffer[index++] << 16 | buffer[index++] << 24;\n                    if (binarySize < 0) throw new BSONError(\"Negative binary type element size found for subtype 0x02\");\n                    if (binarySize > totalBinarySize - 4) throw new BSONError(\"Binary type with subtype 0x02 contains too long binary size\");\n                    if (binarySize < totalBinarySize - 4) throw new BSONError(\"Binary type with subtype 0x02 contains too short binary size\");\n                }\n                for(i = 0; i < binarySize; i++){\n                    _buffer[i] = buffer[index + i];\n                }\n                if (promoteBuffers && promoteValues) {\n                    value = _buffer;\n                } else {\n                    value = new Binary(buffer.slice(index, index + binarySize), subType);\n                    if (subType === BSON_BINARY_SUBTYPE_UUID_NEW && UUID.isValid(value)) {\n                        value = value.toUUID();\n                    }\n                }\n            }\n            index = index + binarySize;\n        } else if (elementType === BSON_DATA_REGEXP && bsonRegExp === false) {\n            i = index;\n            while(buffer[i] !== 0x00 && i < buffer.length){\n                i++;\n            }\n            if (i >= buffer.length) throw new BSONError(\"Bad BSON Document: illegal CString\");\n            const source = ByteUtils.toUTF8(buffer, index, i);\n            index = i + 1;\n            i = index;\n            while(buffer[i] !== 0x00 && i < buffer.length){\n                i++;\n            }\n            if (i >= buffer.length) throw new BSONError(\"Bad BSON Document: illegal CString\");\n            const regExpOptions = ByteUtils.toUTF8(buffer, index, i);\n            index = i + 1;\n            const optionsArray = new Array(regExpOptions.length);\n            for(i = 0; i < regExpOptions.length; i++){\n                switch(regExpOptions[i]){\n                    case \"m\":\n                        optionsArray[i] = \"m\";\n                        break;\n                    case \"s\":\n                        optionsArray[i] = \"g\";\n                        break;\n                    case \"i\":\n                        optionsArray[i] = \"i\";\n                        break;\n                }\n            }\n            value = new RegExp(source, optionsArray.join(\"\"));\n        } else if (elementType === BSON_DATA_REGEXP && bsonRegExp === true) {\n            i = index;\n            while(buffer[i] !== 0x00 && i < buffer.length){\n                i++;\n            }\n            if (i >= buffer.length) throw new BSONError(\"Bad BSON Document: illegal CString\");\n            const source = ByteUtils.toUTF8(buffer, index, i);\n            index = i + 1;\n            i = index;\n            while(buffer[i] !== 0x00 && i < buffer.length){\n                i++;\n            }\n            if (i >= buffer.length) throw new BSONError(\"Bad BSON Document: illegal CString\");\n            const regExpOptions = ByteUtils.toUTF8(buffer, index, i);\n            index = i + 1;\n            value = new BSONRegExp(source, regExpOptions);\n        } else if (elementType === BSON_DATA_SYMBOL) {\n            const stringSize = buffer[index++] | buffer[index++] << 8 | buffer[index++] << 16 | buffer[index++] << 24;\n            if (stringSize <= 0 || stringSize > buffer.length - index || buffer[index + stringSize - 1] !== 0) {\n                throw new BSONError(\"bad string length in bson\");\n            }\n            const symbol = getValidatedString(buffer, index, index + stringSize - 1, shouldValidateKey);\n            value = promoteValues ? symbol : new BSONSymbol(symbol);\n            index = index + stringSize;\n        } else if (elementType === BSON_DATA_TIMESTAMP) {\n            const i = buffer[index++] + buffer[index++] * (1 << 8) + buffer[index++] * (1 << 16) + buffer[index++] * (1 << 24);\n            const t = buffer[index++] + buffer[index++] * (1 << 8) + buffer[index++] * (1 << 16) + buffer[index++] * (1 << 24);\n            value = new Timestamp({\n                i,\n                t\n            });\n        } else if (elementType === BSON_DATA_MIN_KEY) {\n            value = new MinKey();\n        } else if (elementType === BSON_DATA_MAX_KEY) {\n            value = new MaxKey();\n        } else if (elementType === BSON_DATA_CODE) {\n            const stringSize = buffer[index++] | buffer[index++] << 8 | buffer[index++] << 16 | buffer[index++] << 24;\n            if (stringSize <= 0 || stringSize > buffer.length - index || buffer[index + stringSize - 1] !== 0) {\n                throw new BSONError(\"bad string length in bson\");\n            }\n            const functionString = getValidatedString(buffer, index, index + stringSize - 1, shouldValidateKey);\n            value = new Code(functionString);\n            index = index + stringSize;\n        } else if (elementType === BSON_DATA_CODE_W_SCOPE) {\n            const totalSize = buffer[index++] | buffer[index++] << 8 | buffer[index++] << 16 | buffer[index++] << 24;\n            if (totalSize < 4 + 4 + 4 + 1) {\n                throw new BSONError(\"code_w_scope total size shorter minimum expected length\");\n            }\n            const stringSize = buffer[index++] | buffer[index++] << 8 | buffer[index++] << 16 | buffer[index++] << 24;\n            if (stringSize <= 0 || stringSize > buffer.length - index || buffer[index + stringSize - 1] !== 0) {\n                throw new BSONError(\"bad string length in bson\");\n            }\n            const functionString = getValidatedString(buffer, index, index + stringSize - 1, shouldValidateKey);\n            index = index + stringSize;\n            const _index = index;\n            const objectSize = buffer[index] | buffer[index + 1] << 8 | buffer[index + 2] << 16 | buffer[index + 3] << 24;\n            const scopeObject = deserializeObject(buffer, _index, options, false);\n            index = index + objectSize;\n            if (totalSize < 4 + 4 + objectSize + stringSize) {\n                throw new BSONError(\"code_w_scope total size is too short, truncating scope\");\n            }\n            if (totalSize > 4 + 4 + objectSize + stringSize) {\n                throw new BSONError(\"code_w_scope total size is too long, clips outer document\");\n            }\n            value = new Code(functionString, scopeObject);\n        } else if (elementType === BSON_DATA_DBPOINTER) {\n            const stringSize = buffer[index++] | buffer[index++] << 8 | buffer[index++] << 16 | buffer[index++] << 24;\n            if (stringSize <= 0 || stringSize > buffer.length - index || buffer[index + stringSize - 1] !== 0) throw new BSONError(\"bad string length in bson\");\n            if (validation != null && validation.utf8) {\n                if (!validateUtf8(buffer, index, index + stringSize - 1)) {\n                    throw new BSONError(\"Invalid UTF-8 string in BSON document\");\n                }\n            }\n            const namespace = ByteUtils.toUTF8(buffer, index, index + stringSize - 1);\n            index = index + stringSize;\n            const oidBuffer = ByteUtils.allocate(12);\n            oidBuffer.set(buffer.subarray(index, index + 12), 0);\n            const oid = new ObjectId(oidBuffer);\n            index = index + 12;\n            value = new DBRef(namespace, oid);\n        } else {\n            throw new BSONError(`Detected unknown BSON type ${elementType.toString(16)} for fieldname \"${name}\"`);\n        }\n        if (name === \"__proto__\") {\n            Object.defineProperty(object, name, {\n                value,\n                writable: true,\n                enumerable: true,\n                configurable: true\n            });\n        } else {\n            object[name] = value;\n        }\n    }\n    if (size !== index - startIndex) {\n        if (isArray) throw new BSONError(\"corrupt array bson\");\n        throw new BSONError(\"corrupt object bson\");\n    }\n    if (!isPossibleDBRef) return object;\n    if (isDBRefLike(object)) {\n        const copy = Object.assign({}, object);\n        delete copy.$ref;\n        delete copy.$id;\n        delete copy.$db;\n        return new DBRef(object.$ref, object.$id, object.$db, copy);\n    }\n    return object;\n}\nfunction getValidatedString(buffer, start, end, shouldValidateUtf8) {\n    const value = ByteUtils.toUTF8(buffer, start, end);\n    if (shouldValidateUtf8) {\n        for(let i = 0; i < value.length; i++){\n            if (value.charCodeAt(i) === 0xfffd) {\n                if (!validateUtf8(buffer, start, end)) {\n                    throw new BSONError(\"Invalid UTF-8 string in BSON document\");\n                }\n                break;\n            }\n        }\n    }\n    return value;\n}\nconst regexp = /\\x00/;\nconst ignoreKeys = new Set([\n    \"$db\",\n    \"$ref\",\n    \"$id\",\n    \"$clusterTime\"\n]);\nfunction serializeString(buffer, key, value, index) {\n    buffer[index++] = BSON_DATA_STRING;\n    const numberOfWrittenBytes = ByteUtils.encodeUTF8Into(buffer, key, index);\n    index = index + numberOfWrittenBytes + 1;\n    buffer[index - 1] = 0;\n    const size = ByteUtils.encodeUTF8Into(buffer, value, index + 4);\n    buffer[index + 3] = size + 1 >> 24 & 0xff;\n    buffer[index + 2] = size + 1 >> 16 & 0xff;\n    buffer[index + 1] = size + 1 >> 8 & 0xff;\n    buffer[index] = size + 1 & 0xff;\n    index = index + 4 + size;\n    buffer[index++] = 0;\n    return index;\n}\nconst NUMBER_SPACE = new DataView(new ArrayBuffer(8), 0, 8);\nconst FOUR_BYTE_VIEW_ON_NUMBER = new Uint8Array(NUMBER_SPACE.buffer, 0, 4);\nconst EIGHT_BYTE_VIEW_ON_NUMBER = new Uint8Array(NUMBER_SPACE.buffer, 0, 8);\nfunction serializeNumber(buffer, key, value, index) {\n    const isNegativeZero = Object.is(value, -0);\n    const type = !isNegativeZero && Number.isSafeInteger(value) && value <= BSON_INT32_MAX && value >= BSON_INT32_MIN ? BSON_DATA_INT : BSON_DATA_NUMBER;\n    if (type === BSON_DATA_INT) {\n        NUMBER_SPACE.setInt32(0, value, true);\n    } else {\n        NUMBER_SPACE.setFloat64(0, value, true);\n    }\n    const bytes = type === BSON_DATA_INT ? FOUR_BYTE_VIEW_ON_NUMBER : EIGHT_BYTE_VIEW_ON_NUMBER;\n    buffer[index++] = type;\n    const numberOfWrittenBytes = ByteUtils.encodeUTF8Into(buffer, key, index);\n    index = index + numberOfWrittenBytes;\n    buffer[index++] = 0x00;\n    buffer.set(bytes, index);\n    index += bytes.byteLength;\n    return index;\n}\nfunction serializeBigInt(buffer, key, value, index) {\n    buffer[index++] = BSON_DATA_LONG;\n    const numberOfWrittenBytes = ByteUtils.encodeUTF8Into(buffer, key, index);\n    index += numberOfWrittenBytes;\n    buffer[index++] = 0;\n    NUMBER_SPACE.setBigInt64(0, value, true);\n    buffer.set(EIGHT_BYTE_VIEW_ON_NUMBER, index);\n    index += EIGHT_BYTE_VIEW_ON_NUMBER.byteLength;\n    return index;\n}\nfunction serializeNull(buffer, key, _, index) {\n    buffer[index++] = BSON_DATA_NULL;\n    const numberOfWrittenBytes = ByteUtils.encodeUTF8Into(buffer, key, index);\n    index = index + numberOfWrittenBytes;\n    buffer[index++] = 0;\n    return index;\n}\nfunction serializeBoolean(buffer, key, value, index) {\n    buffer[index++] = BSON_DATA_BOOLEAN;\n    const numberOfWrittenBytes = ByteUtils.encodeUTF8Into(buffer, key, index);\n    index = index + numberOfWrittenBytes;\n    buffer[index++] = 0;\n    buffer[index++] = value ? 1 : 0;\n    return index;\n}\nfunction serializeDate(buffer, key, value, index) {\n    buffer[index++] = BSON_DATA_DATE;\n    const numberOfWrittenBytes = ByteUtils.encodeUTF8Into(buffer, key, index);\n    index = index + numberOfWrittenBytes;\n    buffer[index++] = 0;\n    const dateInMilis = Long.fromNumber(value.getTime());\n    const lowBits = dateInMilis.getLowBits();\n    const highBits = dateInMilis.getHighBits();\n    buffer[index++] = lowBits & 0xff;\n    buffer[index++] = lowBits >> 8 & 0xff;\n    buffer[index++] = lowBits >> 16 & 0xff;\n    buffer[index++] = lowBits >> 24 & 0xff;\n    buffer[index++] = highBits & 0xff;\n    buffer[index++] = highBits >> 8 & 0xff;\n    buffer[index++] = highBits >> 16 & 0xff;\n    buffer[index++] = highBits >> 24 & 0xff;\n    return index;\n}\nfunction serializeRegExp(buffer, key, value, index) {\n    buffer[index++] = BSON_DATA_REGEXP;\n    const numberOfWrittenBytes = ByteUtils.encodeUTF8Into(buffer, key, index);\n    index = index + numberOfWrittenBytes;\n    buffer[index++] = 0;\n    if (value.source && value.source.match(regexp) != null) {\n        throw new BSONError(\"value \" + value.source + \" must not contain null bytes\");\n    }\n    index = index + ByteUtils.encodeUTF8Into(buffer, value.source, index);\n    buffer[index++] = 0x00;\n    if (value.ignoreCase) buffer[index++] = 0x69;\n    if (value.global) buffer[index++] = 0x73;\n    if (value.multiline) buffer[index++] = 0x6d;\n    buffer[index++] = 0x00;\n    return index;\n}\nfunction serializeBSONRegExp(buffer, key, value, index) {\n    buffer[index++] = BSON_DATA_REGEXP;\n    const numberOfWrittenBytes = ByteUtils.encodeUTF8Into(buffer, key, index);\n    index = index + numberOfWrittenBytes;\n    buffer[index++] = 0;\n    if (value.pattern.match(regexp) != null) {\n        throw new BSONError(\"pattern \" + value.pattern + \" must not contain null bytes\");\n    }\n    index = index + ByteUtils.encodeUTF8Into(buffer, value.pattern, index);\n    buffer[index++] = 0x00;\n    const sortedOptions = value.options.split(\"\").sort().join(\"\");\n    index = index + ByteUtils.encodeUTF8Into(buffer, sortedOptions, index);\n    buffer[index++] = 0x00;\n    return index;\n}\nfunction serializeMinMax(buffer, key, value, index) {\n    if (value === null) {\n        buffer[index++] = BSON_DATA_NULL;\n    } else if (value._bsontype === \"MinKey\") {\n        buffer[index++] = BSON_DATA_MIN_KEY;\n    } else {\n        buffer[index++] = BSON_DATA_MAX_KEY;\n    }\n    const numberOfWrittenBytes = ByteUtils.encodeUTF8Into(buffer, key, index);\n    index = index + numberOfWrittenBytes;\n    buffer[index++] = 0;\n    return index;\n}\nfunction serializeObjectId(buffer, key, value, index) {\n    buffer[index++] = BSON_DATA_OID;\n    const numberOfWrittenBytes = ByteUtils.encodeUTF8Into(buffer, key, index);\n    index = index + numberOfWrittenBytes;\n    buffer[index++] = 0;\n    const idValue = value.id;\n    if (isUint8Array(idValue)) {\n        for(let i = 0; i < 12; i++){\n            buffer[index++] = idValue[i];\n        }\n    } else {\n        throw new BSONError(\"object [\" + JSON.stringify(value) + \"] is not a valid ObjectId\");\n    }\n    return index;\n}\nfunction serializeBuffer(buffer, key, value, index) {\n    buffer[index++] = BSON_DATA_BINARY;\n    const numberOfWrittenBytes = ByteUtils.encodeUTF8Into(buffer, key, index);\n    index = index + numberOfWrittenBytes;\n    buffer[index++] = 0;\n    const size = value.length;\n    buffer[index++] = size & 0xff;\n    buffer[index++] = size >> 8 & 0xff;\n    buffer[index++] = size >> 16 & 0xff;\n    buffer[index++] = size >> 24 & 0xff;\n    buffer[index++] = BSON_BINARY_SUBTYPE_DEFAULT;\n    buffer.set(value, index);\n    index = index + size;\n    return index;\n}\nfunction serializeObject(buffer, key, value, index, checkKeys, depth, serializeFunctions, ignoreUndefined, path) {\n    if (path.has(value)) {\n        throw new BSONError(\"Cannot convert circular structure to BSON\");\n    }\n    path.add(value);\n    buffer[index++] = Array.isArray(value) ? BSON_DATA_ARRAY : BSON_DATA_OBJECT;\n    const numberOfWrittenBytes = ByteUtils.encodeUTF8Into(buffer, key, index);\n    index = index + numberOfWrittenBytes;\n    buffer[index++] = 0;\n    const endIndex = serializeInto(buffer, value, checkKeys, index, depth + 1, serializeFunctions, ignoreUndefined, path);\n    path.delete(value);\n    return endIndex;\n}\nfunction serializeDecimal128(buffer, key, value, index) {\n    buffer[index++] = BSON_DATA_DECIMAL128;\n    const numberOfWrittenBytes = ByteUtils.encodeUTF8Into(buffer, key, index);\n    index = index + numberOfWrittenBytes;\n    buffer[index++] = 0;\n    buffer.set(value.bytes.subarray(0, 16), index);\n    return index + 16;\n}\nfunction serializeLong(buffer, key, value, index) {\n    buffer[index++] = value._bsontype === \"Long\" ? BSON_DATA_LONG : BSON_DATA_TIMESTAMP;\n    const numberOfWrittenBytes = ByteUtils.encodeUTF8Into(buffer, key, index);\n    index = index + numberOfWrittenBytes;\n    buffer[index++] = 0;\n    const lowBits = value.getLowBits();\n    const highBits = value.getHighBits();\n    buffer[index++] = lowBits & 0xff;\n    buffer[index++] = lowBits >> 8 & 0xff;\n    buffer[index++] = lowBits >> 16 & 0xff;\n    buffer[index++] = lowBits >> 24 & 0xff;\n    buffer[index++] = highBits & 0xff;\n    buffer[index++] = highBits >> 8 & 0xff;\n    buffer[index++] = highBits >> 16 & 0xff;\n    buffer[index++] = highBits >> 24 & 0xff;\n    return index;\n}\nfunction serializeInt32(buffer, key, value, index) {\n    value = value.valueOf();\n    buffer[index++] = BSON_DATA_INT;\n    const numberOfWrittenBytes = ByteUtils.encodeUTF8Into(buffer, key, index);\n    index = index + numberOfWrittenBytes;\n    buffer[index++] = 0;\n    buffer[index++] = value & 0xff;\n    buffer[index++] = value >> 8 & 0xff;\n    buffer[index++] = value >> 16 & 0xff;\n    buffer[index++] = value >> 24 & 0xff;\n    return index;\n}\nfunction serializeDouble(buffer, key, value, index) {\n    buffer[index++] = BSON_DATA_NUMBER;\n    const numberOfWrittenBytes = ByteUtils.encodeUTF8Into(buffer, key, index);\n    index = index + numberOfWrittenBytes;\n    buffer[index++] = 0;\n    NUMBER_SPACE.setFloat64(0, value.value, true);\n    buffer.set(EIGHT_BYTE_VIEW_ON_NUMBER, index);\n    index = index + 8;\n    return index;\n}\nfunction serializeFunction(buffer, key, value, index) {\n    buffer[index++] = BSON_DATA_CODE;\n    const numberOfWrittenBytes = ByteUtils.encodeUTF8Into(buffer, key, index);\n    index = index + numberOfWrittenBytes;\n    buffer[index++] = 0;\n    const functionString = value.toString();\n    const size = ByteUtils.encodeUTF8Into(buffer, functionString, index + 4) + 1;\n    buffer[index] = size & 0xff;\n    buffer[index + 1] = size >> 8 & 0xff;\n    buffer[index + 2] = size >> 16 & 0xff;\n    buffer[index + 3] = size >> 24 & 0xff;\n    index = index + 4 + size - 1;\n    buffer[index++] = 0;\n    return index;\n}\nfunction serializeCode(buffer, key, value, index, checkKeys = false, depth = 0, serializeFunctions = false, ignoreUndefined = true, path) {\n    if (value.scope && typeof value.scope === \"object\") {\n        buffer[index++] = BSON_DATA_CODE_W_SCOPE;\n        const numberOfWrittenBytes = ByteUtils.encodeUTF8Into(buffer, key, index);\n        index = index + numberOfWrittenBytes;\n        buffer[index++] = 0;\n        let startIndex = index;\n        const functionString = value.code;\n        index = index + 4;\n        const codeSize = ByteUtils.encodeUTF8Into(buffer, functionString, index + 4) + 1;\n        buffer[index] = codeSize & 0xff;\n        buffer[index + 1] = codeSize >> 8 & 0xff;\n        buffer[index + 2] = codeSize >> 16 & 0xff;\n        buffer[index + 3] = codeSize >> 24 & 0xff;\n        buffer[index + 4 + codeSize - 1] = 0;\n        index = index + codeSize + 4;\n        const endIndex = serializeInto(buffer, value.scope, checkKeys, index, depth + 1, serializeFunctions, ignoreUndefined, path);\n        index = endIndex - 1;\n        const totalSize = endIndex - startIndex;\n        buffer[startIndex++] = totalSize & 0xff;\n        buffer[startIndex++] = totalSize >> 8 & 0xff;\n        buffer[startIndex++] = totalSize >> 16 & 0xff;\n        buffer[startIndex++] = totalSize >> 24 & 0xff;\n        buffer[index++] = 0;\n    } else {\n        buffer[index++] = BSON_DATA_CODE;\n        const numberOfWrittenBytes = ByteUtils.encodeUTF8Into(buffer, key, index);\n        index = index + numberOfWrittenBytes;\n        buffer[index++] = 0;\n        const functionString = value.code.toString();\n        const size = ByteUtils.encodeUTF8Into(buffer, functionString, index + 4) + 1;\n        buffer[index] = size & 0xff;\n        buffer[index + 1] = size >> 8 & 0xff;\n        buffer[index + 2] = size >> 16 & 0xff;\n        buffer[index + 3] = size >> 24 & 0xff;\n        index = index + 4 + size - 1;\n        buffer[index++] = 0;\n    }\n    return index;\n}\nfunction serializeBinary(buffer, key, value, index) {\n    buffer[index++] = BSON_DATA_BINARY;\n    const numberOfWrittenBytes = ByteUtils.encodeUTF8Into(buffer, key, index);\n    index = index + numberOfWrittenBytes;\n    buffer[index++] = 0;\n    const data = value.buffer;\n    let size = value.position;\n    if (value.sub_type === Binary.SUBTYPE_BYTE_ARRAY) size = size + 4;\n    buffer[index++] = size & 0xff;\n    buffer[index++] = size >> 8 & 0xff;\n    buffer[index++] = size >> 16 & 0xff;\n    buffer[index++] = size >> 24 & 0xff;\n    buffer[index++] = value.sub_type;\n    if (value.sub_type === Binary.SUBTYPE_BYTE_ARRAY) {\n        size = size - 4;\n        buffer[index++] = size & 0xff;\n        buffer[index++] = size >> 8 & 0xff;\n        buffer[index++] = size >> 16 & 0xff;\n        buffer[index++] = size >> 24 & 0xff;\n    }\n    buffer.set(data, index);\n    index = index + value.position;\n    return index;\n}\nfunction serializeSymbol(buffer, key, value, index) {\n    buffer[index++] = BSON_DATA_SYMBOL;\n    const numberOfWrittenBytes = ByteUtils.encodeUTF8Into(buffer, key, index);\n    index = index + numberOfWrittenBytes;\n    buffer[index++] = 0;\n    const size = ByteUtils.encodeUTF8Into(buffer, value.value, index + 4) + 1;\n    buffer[index] = size & 0xff;\n    buffer[index + 1] = size >> 8 & 0xff;\n    buffer[index + 2] = size >> 16 & 0xff;\n    buffer[index + 3] = size >> 24 & 0xff;\n    index = index + 4 + size - 1;\n    buffer[index++] = 0x00;\n    return index;\n}\nfunction serializeDBRef(buffer, key, value, index, depth, serializeFunctions, path) {\n    buffer[index++] = BSON_DATA_OBJECT;\n    const numberOfWrittenBytes = ByteUtils.encodeUTF8Into(buffer, key, index);\n    index = index + numberOfWrittenBytes;\n    buffer[index++] = 0;\n    let startIndex = index;\n    let output = {\n        $ref: value.collection || value.namespace,\n        $id: value.oid\n    };\n    if (value.db != null) {\n        output.$db = value.db;\n    }\n    output = Object.assign(output, value.fields);\n    const endIndex = serializeInto(buffer, output, false, index, depth + 1, serializeFunctions, true, path);\n    const size = endIndex - startIndex;\n    buffer[startIndex++] = size & 0xff;\n    buffer[startIndex++] = size >> 8 & 0xff;\n    buffer[startIndex++] = size >> 16 & 0xff;\n    buffer[startIndex++] = size >> 24 & 0xff;\n    return endIndex;\n}\nfunction serializeInto(buffer, object, checkKeys, startingIndex, depth, serializeFunctions, ignoreUndefined, path) {\n    if (path == null) {\n        if (object == null) {\n            buffer[0] = 0x05;\n            buffer[1] = 0x00;\n            buffer[2] = 0x00;\n            buffer[3] = 0x00;\n            buffer[4] = 0x00;\n            return 5;\n        }\n        if (Array.isArray(object)) {\n            throw new BSONError(\"serialize does not support an array as the root input\");\n        }\n        if (typeof object !== \"object\") {\n            throw new BSONError(\"serialize does not support non-object as the root input\");\n        } else if (\"_bsontype\" in object && typeof object._bsontype === \"string\") {\n            throw new BSONError(`BSON types cannot be serialized as a document`);\n        } else if (isDate(object) || isRegExp(object) || isUint8Array(object) || isAnyArrayBuffer(object)) {\n            throw new BSONError(`date, regexp, typedarray, and arraybuffer cannot be BSON documents`);\n        }\n        path = new Set();\n    }\n    path.add(object);\n    let index = startingIndex + 4;\n    if (Array.isArray(object)) {\n        for(let i = 0; i < object.length; i++){\n            const key = `${i}`;\n            let value = object[i];\n            if (typeof value?.toBSON === \"function\") {\n                value = value.toBSON();\n            }\n            if (typeof value === \"string\") {\n                index = serializeString(buffer, key, value, index);\n            } else if (typeof value === \"number\") {\n                index = serializeNumber(buffer, key, value, index);\n            } else if (typeof value === \"bigint\") {\n                index = serializeBigInt(buffer, key, value, index);\n            } else if (typeof value === \"boolean\") {\n                index = serializeBoolean(buffer, key, value, index);\n            } else if (value instanceof Date || isDate(value)) {\n                index = serializeDate(buffer, key, value, index);\n            } else if (value === undefined) {\n                index = serializeNull(buffer, key, value, index);\n            } else if (value === null) {\n                index = serializeNull(buffer, key, value, index);\n            } else if (isUint8Array(value)) {\n                index = serializeBuffer(buffer, key, value, index);\n            } else if (value instanceof RegExp || isRegExp(value)) {\n                index = serializeRegExp(buffer, key, value, index);\n            } else if (typeof value === \"object\" && value._bsontype == null) {\n                index = serializeObject(buffer, key, value, index, checkKeys, depth, serializeFunctions, ignoreUndefined, path);\n            } else if (typeof value === \"object\" && value[Symbol.for(\"@@mdb.bson.version\")] !== BSON_MAJOR_VERSION) {\n                throw new BSONVersionError();\n            } else if (value._bsontype === \"ObjectId\") {\n                index = serializeObjectId(buffer, key, value, index);\n            } else if (value._bsontype === \"Decimal128\") {\n                index = serializeDecimal128(buffer, key, value, index);\n            } else if (value._bsontype === \"Long\" || value._bsontype === \"Timestamp\") {\n                index = serializeLong(buffer, key, value, index);\n            } else if (value._bsontype === \"Double\") {\n                index = serializeDouble(buffer, key, value, index);\n            } else if (typeof value === \"function\" && serializeFunctions) {\n                index = serializeFunction(buffer, key, value, index);\n            } else if (value._bsontype === \"Code\") {\n                index = serializeCode(buffer, key, value, index, checkKeys, depth, serializeFunctions, ignoreUndefined, path);\n            } else if (value._bsontype === \"Binary\") {\n                index = serializeBinary(buffer, key, value, index);\n            } else if (value._bsontype === \"BSONSymbol\") {\n                index = serializeSymbol(buffer, key, value, index);\n            } else if (value._bsontype === \"DBRef\") {\n                index = serializeDBRef(buffer, key, value, index, depth, serializeFunctions, path);\n            } else if (value._bsontype === \"BSONRegExp\") {\n                index = serializeBSONRegExp(buffer, key, value, index);\n            } else if (value._bsontype === \"Int32\") {\n                index = serializeInt32(buffer, key, value, index);\n            } else if (value._bsontype === \"MinKey\" || value._bsontype === \"MaxKey\") {\n                index = serializeMinMax(buffer, key, value, index);\n            } else if (typeof value._bsontype !== \"undefined\") {\n                throw new BSONError(`Unrecognized or invalid _bsontype: ${String(value._bsontype)}`);\n            }\n        }\n    } else if (object instanceof Map || isMap(object)) {\n        const iterator = object.entries();\n        let done = false;\n        while(!done){\n            const entry = iterator.next();\n            done = !!entry.done;\n            if (done) continue;\n            const key = entry.value[0];\n            let value = entry.value[1];\n            if (typeof value?.toBSON === \"function\") {\n                value = value.toBSON();\n            }\n            const type = typeof value;\n            if (typeof key === \"string\" && !ignoreKeys.has(key)) {\n                if (key.match(regexp) != null) {\n                    throw new BSONError(\"key \" + key + \" must not contain null bytes\");\n                }\n                if (checkKeys) {\n                    if (\"$\" === key[0]) {\n                        throw new BSONError(\"key \" + key + \" must not start with '$'\");\n                    } else if (~key.indexOf(\".\")) {\n                        throw new BSONError(\"key \" + key + \" must not contain '.'\");\n                    }\n                }\n            }\n            if (type === \"string\") {\n                index = serializeString(buffer, key, value, index);\n            } else if (type === \"number\") {\n                index = serializeNumber(buffer, key, value, index);\n            } else if (type === \"bigint\") {\n                index = serializeBigInt(buffer, key, value, index);\n            } else if (type === \"boolean\") {\n                index = serializeBoolean(buffer, key, value, index);\n            } else if (value instanceof Date || isDate(value)) {\n                index = serializeDate(buffer, key, value, index);\n            } else if (value === null || value === undefined && ignoreUndefined === false) {\n                index = serializeNull(buffer, key, value, index);\n            } else if (isUint8Array(value)) {\n                index = serializeBuffer(buffer, key, value, index);\n            } else if (value instanceof RegExp || isRegExp(value)) {\n                index = serializeRegExp(buffer, key, value, index);\n            } else if (type === \"object\" && value._bsontype == null) {\n                index = serializeObject(buffer, key, value, index, checkKeys, depth, serializeFunctions, ignoreUndefined, path);\n            } else if (typeof value === \"object\" && value[Symbol.for(\"@@mdb.bson.version\")] !== BSON_MAJOR_VERSION) {\n                throw new BSONVersionError();\n            } else if (value._bsontype === \"ObjectId\") {\n                index = serializeObjectId(buffer, key, value, index);\n            } else if (type === \"object\" && value._bsontype === \"Decimal128\") {\n                index = serializeDecimal128(buffer, key, value, index);\n            } else if (value._bsontype === \"Long\" || value._bsontype === \"Timestamp\") {\n                index = serializeLong(buffer, key, value, index);\n            } else if (value._bsontype === \"Double\") {\n                index = serializeDouble(buffer, key, value, index);\n            } else if (value._bsontype === \"Code\") {\n                index = serializeCode(buffer, key, value, index, checkKeys, depth, serializeFunctions, ignoreUndefined, path);\n            } else if (typeof value === \"function\" && serializeFunctions) {\n                index = serializeFunction(buffer, key, value, index);\n            } else if (value._bsontype === \"Binary\") {\n                index = serializeBinary(buffer, key, value, index);\n            } else if (value._bsontype === \"BSONSymbol\") {\n                index = serializeSymbol(buffer, key, value, index);\n            } else if (value._bsontype === \"DBRef\") {\n                index = serializeDBRef(buffer, key, value, index, depth, serializeFunctions, path);\n            } else if (value._bsontype === \"BSONRegExp\") {\n                index = serializeBSONRegExp(buffer, key, value, index);\n            } else if (value._bsontype === \"Int32\") {\n                index = serializeInt32(buffer, key, value, index);\n            } else if (value._bsontype === \"MinKey\" || value._bsontype === \"MaxKey\") {\n                index = serializeMinMax(buffer, key, value, index);\n            } else if (typeof value._bsontype !== \"undefined\") {\n                throw new BSONError(`Unrecognized or invalid _bsontype: ${String(value._bsontype)}`);\n            }\n        }\n    } else {\n        if (typeof object?.toBSON === \"function\") {\n            object = object.toBSON();\n            if (object != null && typeof object !== \"object\") {\n                throw new BSONError(\"toBSON function did not return an object\");\n            }\n        }\n        for (const key of Object.keys(object)){\n            let value = object[key];\n            if (typeof value?.toBSON === \"function\") {\n                value = value.toBSON();\n            }\n            const type = typeof value;\n            if (typeof key === \"string\" && !ignoreKeys.has(key)) {\n                if (key.match(regexp) != null) {\n                    throw new BSONError(\"key \" + key + \" must not contain null bytes\");\n                }\n                if (checkKeys) {\n                    if (\"$\" === key[0]) {\n                        throw new BSONError(\"key \" + key + \" must not start with '$'\");\n                    } else if (~key.indexOf(\".\")) {\n                        throw new BSONError(\"key \" + key + \" must not contain '.'\");\n                    }\n                }\n            }\n            if (type === \"string\") {\n                index = serializeString(buffer, key, value, index);\n            } else if (type === \"number\") {\n                index = serializeNumber(buffer, key, value, index);\n            } else if (type === \"bigint\") {\n                index = serializeBigInt(buffer, key, value, index);\n            } else if (type === \"boolean\") {\n                index = serializeBoolean(buffer, key, value, index);\n            } else if (value instanceof Date || isDate(value)) {\n                index = serializeDate(buffer, key, value, index);\n            } else if (value === undefined) {\n                if (ignoreUndefined === false) index = serializeNull(buffer, key, value, index);\n            } else if (value === null) {\n                index = serializeNull(buffer, key, value, index);\n            } else if (isUint8Array(value)) {\n                index = serializeBuffer(buffer, key, value, index);\n            } else if (value instanceof RegExp || isRegExp(value)) {\n                index = serializeRegExp(buffer, key, value, index);\n            } else if (type === \"object\" && value._bsontype == null) {\n                index = serializeObject(buffer, key, value, index, checkKeys, depth, serializeFunctions, ignoreUndefined, path);\n            } else if (typeof value === \"object\" && value[Symbol.for(\"@@mdb.bson.version\")] !== BSON_MAJOR_VERSION) {\n                throw new BSONVersionError();\n            } else if (value._bsontype === \"ObjectId\") {\n                index = serializeObjectId(buffer, key, value, index);\n            } else if (type === \"object\" && value._bsontype === \"Decimal128\") {\n                index = serializeDecimal128(buffer, key, value, index);\n            } else if (value._bsontype === \"Long\" || value._bsontype === \"Timestamp\") {\n                index = serializeLong(buffer, key, value, index);\n            } else if (value._bsontype === \"Double\") {\n                index = serializeDouble(buffer, key, value, index);\n            } else if (value._bsontype === \"Code\") {\n                index = serializeCode(buffer, key, value, index, checkKeys, depth, serializeFunctions, ignoreUndefined, path);\n            } else if (typeof value === \"function\" && serializeFunctions) {\n                index = serializeFunction(buffer, key, value, index);\n            } else if (value._bsontype === \"Binary\") {\n                index = serializeBinary(buffer, key, value, index);\n            } else if (value._bsontype === \"BSONSymbol\") {\n                index = serializeSymbol(buffer, key, value, index);\n            } else if (value._bsontype === \"DBRef\") {\n                index = serializeDBRef(buffer, key, value, index, depth, serializeFunctions, path);\n            } else if (value._bsontype === \"BSONRegExp\") {\n                index = serializeBSONRegExp(buffer, key, value, index);\n            } else if (value._bsontype === \"Int32\") {\n                index = serializeInt32(buffer, key, value, index);\n            } else if (value._bsontype === \"MinKey\" || value._bsontype === \"MaxKey\") {\n                index = serializeMinMax(buffer, key, value, index);\n            } else if (typeof value._bsontype !== \"undefined\") {\n                throw new BSONError(`Unrecognized or invalid _bsontype: ${String(value._bsontype)}`);\n            }\n        }\n    }\n    path.delete(object);\n    buffer[index++] = 0x00;\n    const size = index - startingIndex;\n    buffer[startingIndex++] = size & 0xff;\n    buffer[startingIndex++] = size >> 8 & 0xff;\n    buffer[startingIndex++] = size >> 16 & 0xff;\n    buffer[startingIndex++] = size >> 24 & 0xff;\n    return index;\n}\nfunction isBSONType(value) {\n    return value != null && typeof value === \"object\" && \"_bsontype\" in value && typeof value._bsontype === \"string\";\n}\nconst keysToCodecs = {\n    $oid: ObjectId,\n    $binary: Binary,\n    $uuid: Binary,\n    $symbol: BSONSymbol,\n    $numberInt: Int32,\n    $numberDecimal: Decimal128,\n    $numberDouble: Double,\n    $numberLong: Long,\n    $minKey: MinKey,\n    $maxKey: MaxKey,\n    $regex: BSONRegExp,\n    $regularExpression: BSONRegExp,\n    $timestamp: Timestamp\n};\nfunction deserializeValue(value, options = {}) {\n    if (typeof value === \"number\") {\n        const in32BitRange = value <= BSON_INT32_MAX && value >= BSON_INT32_MIN;\n        const in64BitRange = value <= BSON_INT64_MAX && value >= BSON_INT64_MIN;\n        if (options.relaxed || options.legacy) {\n            return value;\n        }\n        if (Number.isInteger(value) && !Object.is(value, -0)) {\n            if (in32BitRange) {\n                return new Int32(value);\n            }\n            if (in64BitRange) {\n                if (options.useBigInt64) {\n                    return BigInt(value);\n                }\n                return Long.fromNumber(value);\n            }\n        }\n        return new Double(value);\n    }\n    if (value == null || typeof value !== \"object\") return value;\n    if (value.$undefined) return null;\n    const keys = Object.keys(value).filter((k)=>k.startsWith(\"$\") && value[k] != null);\n    for(let i = 0; i < keys.length; i++){\n        const c = keysToCodecs[keys[i]];\n        if (c) return c.fromExtendedJSON(value, options);\n    }\n    if (value.$date != null) {\n        const d = value.$date;\n        const date = new Date();\n        if (options.legacy) {\n            if (typeof d === \"number\") date.setTime(d);\n            else if (typeof d === \"string\") date.setTime(Date.parse(d));\n            else if (typeof d === \"bigint\") date.setTime(Number(d));\n            else throw new BSONRuntimeError(`Unrecognized type for EJSON date: ${typeof d}`);\n        } else {\n            if (typeof d === \"string\") date.setTime(Date.parse(d));\n            else if (Long.isLong(d)) date.setTime(d.toNumber());\n            else if (typeof d === \"number\" && options.relaxed) date.setTime(d);\n            else if (typeof d === \"bigint\") date.setTime(Number(d));\n            else throw new BSONRuntimeError(`Unrecognized type for EJSON date: ${typeof d}`);\n        }\n        return date;\n    }\n    if (value.$code != null) {\n        const copy = Object.assign({}, value);\n        if (value.$scope) {\n            copy.$scope = deserializeValue(value.$scope);\n        }\n        return Code.fromExtendedJSON(value);\n    }\n    if (isDBRefLike(value) || value.$dbPointer) {\n        const v = value.$ref ? value : value.$dbPointer;\n        if (v instanceof DBRef) return v;\n        const dollarKeys = Object.keys(v).filter((k)=>k.startsWith(\"$\"));\n        let valid = true;\n        dollarKeys.forEach((k)=>{\n            if ([\n                \"$ref\",\n                \"$id\",\n                \"$db\"\n            ].indexOf(k) === -1) valid = false;\n        });\n        if (valid) return DBRef.fromExtendedJSON(v);\n    }\n    return value;\n}\nfunction serializeArray(array, options) {\n    return array.map((v, index)=>{\n        options.seenObjects.push({\n            propertyName: `index ${index}`,\n            obj: null\n        });\n        try {\n            return serializeValue(v, options);\n        } finally{\n            options.seenObjects.pop();\n        }\n    });\n}\nfunction getISOString(date) {\n    const isoStr = date.toISOString();\n    return date.getUTCMilliseconds() !== 0 ? isoStr : isoStr.slice(0, -5) + \"Z\";\n}\nfunction serializeValue(value, options) {\n    if (value instanceof Map || isMap(value)) {\n        const obj = Object.create(null);\n        for (const [k, v] of value){\n            if (typeof k !== \"string\") {\n                throw new BSONError(\"Can only serialize maps with string keys\");\n            }\n            obj[k] = v;\n        }\n        return serializeValue(obj, options);\n    }\n    if ((typeof value === \"object\" || typeof value === \"function\") && value !== null) {\n        const index = options.seenObjects.findIndex((entry)=>entry.obj === value);\n        if (index !== -1) {\n            const props = options.seenObjects.map((entry)=>entry.propertyName);\n            const leadingPart = props.slice(0, index).map((prop)=>`${prop} -> `).join(\"\");\n            const alreadySeen = props[index];\n            const circularPart = \" -> \" + props.slice(index + 1, props.length - 1).map((prop)=>`${prop} -> `).join(\"\");\n            const current = props[props.length - 1];\n            const leadingSpace = \" \".repeat(leadingPart.length + alreadySeen.length / 2);\n            const dashes = \"-\".repeat(circularPart.length + (alreadySeen.length + current.length) / 2 - 1);\n            throw new BSONError(\"Converting circular structure to EJSON:\\n\" + `    ${leadingPart}${alreadySeen}${circularPart}${current}\\n` + `    ${leadingSpace}\\\\${dashes}/`);\n        }\n        options.seenObjects[options.seenObjects.length - 1].obj = value;\n    }\n    if (Array.isArray(value)) return serializeArray(value, options);\n    if (value === undefined) return null;\n    if (value instanceof Date || isDate(value)) {\n        const dateNum = value.getTime(), inRange = dateNum > -1 && dateNum < 253402318800000;\n        if (options.legacy) {\n            return options.relaxed && inRange ? {\n                $date: value.getTime()\n            } : {\n                $date: getISOString(value)\n            };\n        }\n        return options.relaxed && inRange ? {\n            $date: getISOString(value)\n        } : {\n            $date: {\n                $numberLong: value.getTime().toString()\n            }\n        };\n    }\n    if (typeof value === \"number\" && (!options.relaxed || !isFinite(value))) {\n        if (Number.isInteger(value) && !Object.is(value, -0)) {\n            if (value >= BSON_INT32_MIN && value <= BSON_INT32_MAX) {\n                return {\n                    $numberInt: value.toString()\n                };\n            }\n            if (value >= BSON_INT64_MIN && value <= BSON_INT64_MAX) {\n                return {\n                    $numberLong: value.toString()\n                };\n            }\n        }\n        return {\n            $numberDouble: Object.is(value, -0) ? \"-0.0\" : value.toString()\n        };\n    }\n    if (typeof value === \"bigint\") {\n        if (!options.relaxed) {\n            return {\n                $numberLong: BigInt.asIntN(64, value).toString()\n            };\n        }\n        return Number(BigInt.asIntN(64, value));\n    }\n    if (value instanceof RegExp || isRegExp(value)) {\n        let flags = value.flags;\n        if (flags === undefined) {\n            const match = value.toString().match(/[gimuy]*$/);\n            if (match) {\n                flags = match[0];\n            }\n        }\n        const rx = new BSONRegExp(value.source, flags);\n        return rx.toExtendedJSON(options);\n    }\n    if (value != null && typeof value === \"object\") return serializeDocument(value, options);\n    return value;\n}\nconst BSON_TYPE_MAPPINGS = {\n    Binary: (o)=>new Binary(o.value(), o.sub_type),\n    Code: (o)=>new Code(o.code, o.scope),\n    DBRef: (o)=>new DBRef(o.collection || o.namespace, o.oid, o.db, o.fields),\n    Decimal128: (o)=>new Decimal128(o.bytes),\n    Double: (o)=>new Double(o.value),\n    Int32: (o)=>new Int32(o.value),\n    Long: (o)=>Long.fromBits(o.low != null ? o.low : o.low_, o.low != null ? o.high : o.high_, o.low != null ? o.unsigned : o.unsigned_),\n    MaxKey: ()=>new MaxKey(),\n    MinKey: ()=>new MinKey(),\n    ObjectId: (o)=>new ObjectId(o),\n    BSONRegExp: (o)=>new BSONRegExp(o.pattern, o.options),\n    BSONSymbol: (o)=>new BSONSymbol(o.value),\n    Timestamp: (o)=>Timestamp.fromBits(o.low, o.high)\n};\nfunction serializeDocument(doc, options) {\n    if (doc == null || typeof doc !== \"object\") throw new BSONError(\"not an object instance\");\n    const bsontype = doc._bsontype;\n    if (typeof bsontype === \"undefined\") {\n        const _doc = {};\n        for (const name of Object.keys(doc)){\n            options.seenObjects.push({\n                propertyName: name,\n                obj: null\n            });\n            try {\n                const value = serializeValue(doc[name], options);\n                if (name === \"__proto__\") {\n                    Object.defineProperty(_doc, name, {\n                        value,\n                        writable: true,\n                        enumerable: true,\n                        configurable: true\n                    });\n                } else {\n                    _doc[name] = value;\n                }\n            } finally{\n                options.seenObjects.pop();\n            }\n        }\n        return _doc;\n    } else if (doc != null && typeof doc === \"object\" && typeof doc._bsontype === \"string\" && doc[Symbol.for(\"@@mdb.bson.version\")] !== BSON_MAJOR_VERSION) {\n        throw new BSONVersionError();\n    } else if (isBSONType(doc)) {\n        let outDoc = doc;\n        if (typeof outDoc.toExtendedJSON !== \"function\") {\n            const mapper = BSON_TYPE_MAPPINGS[doc._bsontype];\n            if (!mapper) {\n                throw new BSONError(\"Unrecognized or invalid _bsontype: \" + doc._bsontype);\n            }\n            outDoc = mapper(outDoc);\n        }\n        if (bsontype === \"Code\" && outDoc.scope) {\n            outDoc = new Code(outDoc.code, serializeValue(outDoc.scope, options));\n        } else if (bsontype === \"DBRef\" && outDoc.oid) {\n            outDoc = new DBRef(serializeValue(outDoc.collection, options), serializeValue(outDoc.oid, options), serializeValue(outDoc.db, options), serializeValue(outDoc.fields, options));\n        }\n        return outDoc.toExtendedJSON(options);\n    } else {\n        throw new BSONError(\"_bsontype must be a string, but was: \" + typeof bsontype);\n    }\n}\nfunction parse(text, options) {\n    const ejsonOptions = {\n        useBigInt64: options?.useBigInt64 ?? false,\n        relaxed: options?.relaxed ?? true,\n        legacy: options?.legacy ?? false\n    };\n    return JSON.parse(text, (key, value)=>{\n        if (key.indexOf(\"\\x00\") !== -1) {\n            throw new BSONError(`BSON Document field names cannot contain null bytes, found: ${JSON.stringify(key)}`);\n        }\n        return deserializeValue(value, ejsonOptions);\n    });\n}\nfunction stringify(value, replacer, space, options) {\n    if (space != null && typeof space === \"object\") {\n        options = space;\n        space = 0;\n    }\n    if (replacer != null && typeof replacer === \"object\" && !Array.isArray(replacer)) {\n        options = replacer;\n        replacer = undefined;\n        space = 0;\n    }\n    const serializeOptions = Object.assign({\n        relaxed: true,\n        legacy: false\n    }, options, {\n        seenObjects: [\n            {\n                propertyName: \"(root)\",\n                obj: null\n            }\n        ]\n    });\n    const doc = serializeValue(value, serializeOptions);\n    return JSON.stringify(doc, replacer, space);\n}\nfunction EJSONserialize(value, options) {\n    options = options || {};\n    return JSON.parse(stringify(value, options));\n}\nfunction EJSONdeserialize(ejson, options) {\n    options = options || {};\n    return parse(JSON.stringify(ejson), options);\n}\nconst EJSON = Object.create(null);\nEJSON.parse = parse;\nEJSON.stringify = stringify;\nEJSON.serialize = EJSONserialize;\nEJSON.deserialize = EJSONdeserialize;\nObject.freeze(EJSON);\nconst MAXSIZE = 1024 * 1024 * 17;\nlet buffer = ByteUtils.allocate(MAXSIZE);\nfunction setInternalBufferSize(size) {\n    if (buffer.length < size) {\n        buffer = ByteUtils.allocate(size);\n    }\n}\nfunction serialize(object, options = {}) {\n    const checkKeys = typeof options.checkKeys === \"boolean\" ? options.checkKeys : false;\n    const serializeFunctions = typeof options.serializeFunctions === \"boolean\" ? options.serializeFunctions : false;\n    const ignoreUndefined = typeof options.ignoreUndefined === \"boolean\" ? options.ignoreUndefined : true;\n    const minInternalBufferSize = typeof options.minInternalBufferSize === \"number\" ? options.minInternalBufferSize : MAXSIZE;\n    if (buffer.length < minInternalBufferSize) {\n        buffer = ByteUtils.allocate(minInternalBufferSize);\n    }\n    const serializationIndex = serializeInto(buffer, object, checkKeys, 0, 0, serializeFunctions, ignoreUndefined, null);\n    const finishedBuffer = ByteUtils.allocate(serializationIndex);\n    finishedBuffer.set(buffer.subarray(0, serializationIndex), 0);\n    return finishedBuffer;\n}\nfunction serializeWithBufferAndIndex(object, finalBuffer, options = {}) {\n    const checkKeys = typeof options.checkKeys === \"boolean\" ? options.checkKeys : false;\n    const serializeFunctions = typeof options.serializeFunctions === \"boolean\" ? options.serializeFunctions : false;\n    const ignoreUndefined = typeof options.ignoreUndefined === \"boolean\" ? options.ignoreUndefined : true;\n    const startIndex = typeof options.index === \"number\" ? options.index : 0;\n    const serializationIndex = serializeInto(buffer, object, checkKeys, 0, 0, serializeFunctions, ignoreUndefined, null);\n    finalBuffer.set(buffer.subarray(0, serializationIndex), startIndex);\n    return startIndex + serializationIndex - 1;\n}\nfunction deserialize(buffer, options = {}) {\n    return internalDeserialize(ByteUtils.toLocalBufferType(buffer), options);\n}\nfunction calculateObjectSize(object, options = {}) {\n    options = options || {};\n    const serializeFunctions = typeof options.serializeFunctions === \"boolean\" ? options.serializeFunctions : false;\n    const ignoreUndefined = typeof options.ignoreUndefined === \"boolean\" ? options.ignoreUndefined : true;\n    return internalCalculateObjectSize(object, serializeFunctions, ignoreUndefined);\n}\nfunction deserializeStream(data, startIndex, numberOfDocuments, documents, docStartIndex, options) {\n    const internalOptions = Object.assign({\n        allowObjectSmallerThanBufferSize: true,\n        index: 0\n    }, options);\n    const bufferData = ByteUtils.toLocalBufferType(data);\n    let index = startIndex;\n    for(let i = 0; i < numberOfDocuments; i++){\n        const size = bufferData[index] | bufferData[index + 1] << 8 | bufferData[index + 2] << 16 | bufferData[index + 3] << 24;\n        internalOptions.index = index;\n        documents[docStartIndex + i] = internalDeserialize(bufferData, internalOptions);\n        index = index + size;\n    }\n    return index;\n}\nvar bson = /*#__PURE__*/ Object.freeze({\n    __proto__: null,\n    BSONError: BSONError,\n    BSONRegExp: BSONRegExp,\n    BSONRuntimeError: BSONRuntimeError,\n    BSONSymbol: BSONSymbol,\n    BSONType: BSONType,\n    BSONValue: BSONValue,\n    BSONVersionError: BSONVersionError,\n    Binary: Binary,\n    Code: Code,\n    DBRef: DBRef,\n    Decimal128: Decimal128,\n    Double: Double,\n    EJSON: EJSON,\n    Int32: Int32,\n    Long: Long,\n    MaxKey: MaxKey,\n    MinKey: MinKey,\n    ObjectId: ObjectId,\n    Timestamp: Timestamp,\n    UUID: UUID,\n    calculateObjectSize: calculateObjectSize,\n    deserialize: deserialize,\n    deserializeStream: deserializeStream,\n    serialize: serialize,\n    serializeWithBufferAndIndex: serializeWithBufferAndIndex,\n    setInternalBufferSize: setInternalBufferSize\n});\nexports.BSON = bson;\nexports.BSONError = BSONError;\nexports.BSONRegExp = BSONRegExp;\nexports.BSONRuntimeError = BSONRuntimeError;\nexports.BSONSymbol = BSONSymbol;\nexports.BSONType = BSONType;\nexports.BSONValue = BSONValue;\nexports.BSONVersionError = BSONVersionError;\nexports.Binary = Binary;\nexports.Code = Code;\nexports.DBRef = DBRef;\nexports.Decimal128 = Decimal128;\nexports.Double = Double;\nexports.EJSON = EJSON;\nexports.Int32 = Int32;\nexports.Long = Long;\nexports.MaxKey = MaxKey;\nexports.MinKey = MinKey;\nexports.ObjectId = ObjectId;\nexports.Timestamp = Timestamp;\nexports.UUID = UUID;\nexports.calculateObjectSize = calculateObjectSize;\nexports.deserialize = deserialize;\nexports.deserializeStream = deserializeStream;\nexports.serialize = serialize;\nexports.serializeWithBufferAndIndex = serializeWithBufferAndIndex;\nexports.setInternalBufferSize = setInternalBufferSize; //# sourceMappingURL=bson.cjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/bson/lib/bson.cjs\n");

/***/ })

};
;