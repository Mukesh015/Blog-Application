"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/mongodb";
exports.ids = ["vendor-chunks/mongodb"];
exports.modules = {

/***/ "(ssr)/./node_modules/mongodb/lib/admin.js":
/*!*******************************************!*\
  !*** ./node_modules/mongodb/lib/admin.js ***!
  \*******************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.Admin = void 0;\nconst bson_1 = __webpack_require__(/*! ./bson */ \"(ssr)/./node_modules/mongodb/lib/bson.js\");\nconst execute_operation_1 = __webpack_require__(/*! ./operations/execute_operation */ \"(ssr)/./node_modules/mongodb/lib/operations/execute_operation.js\");\nconst list_databases_1 = __webpack_require__(/*! ./operations/list_databases */ \"(ssr)/./node_modules/mongodb/lib/operations/list_databases.js\");\nconst remove_user_1 = __webpack_require__(/*! ./operations/remove_user */ \"(ssr)/./node_modules/mongodb/lib/operations/remove_user.js\");\nconst run_command_1 = __webpack_require__(/*! ./operations/run_command */ \"(ssr)/./node_modules/mongodb/lib/operations/run_command.js\");\nconst validate_collection_1 = __webpack_require__(/*! ./operations/validate_collection */ \"(ssr)/./node_modules/mongodb/lib/operations/validate_collection.js\");\n/**\n * The **Admin** class is an internal class that allows convenient access to\n * the admin functionality and commands for MongoDB.\n *\n * **ADMIN Cannot directly be instantiated**\n * @public\n *\n * @example\n * ```ts\n * import { MongoClient } from 'mongodb';\n *\n * const client = new MongoClient('mongodb://localhost:27017');\n * const admin = client.db().admin();\n * const dbInfo = await admin.listDatabases();\n * for (const db of dbInfo.databases) {\n *   console.log(db.name);\n * }\n * ```\n */ class Admin {\n    /**\n     * Create a new Admin instance\n     * @internal\n     */ constructor(db){\n        this.s = {\n            db\n        };\n    }\n    /**\n     * Execute a command\n     *\n     * The driver will ensure the following fields are attached to the command sent to the server:\n     * - `lsid` - sourced from an implicit session or options.session\n     * - `$readPreference` - defaults to primary or can be configured by options.readPreference\n     * - `$db` - sourced from the name of this database\n     *\n     * If the client has a serverApi setting:\n     * - `apiVersion`\n     * - `apiStrict`\n     * - `apiDeprecationErrors`\n     *\n     * When in a transaction:\n     * - `readConcern` - sourced from readConcern set on the TransactionOptions\n     * - `writeConcern` - sourced from writeConcern set on the TransactionOptions\n     *\n     * Attaching any of the above fields to the command will have no effect as the driver will overwrite the value.\n     *\n     * @param command - The command to execute\n     * @param options - Optional settings for the command\n     */ async command(command, options) {\n        return (0, execute_operation_1.executeOperation)(this.s.db.client, new run_command_1.RunAdminCommandOperation(command, {\n            ...(0, bson_1.resolveBSONOptions)(options),\n            session: options?.session,\n            readPreference: options?.readPreference\n        }));\n    }\n    /**\n     * Retrieve the server build information\n     *\n     * @param options - Optional settings for the command\n     */ async buildInfo(options) {\n        return this.command({\n            buildinfo: 1\n        }, options);\n    }\n    /**\n     * Retrieve the server build information\n     *\n     * @param options - Optional settings for the command\n     */ async serverInfo(options) {\n        return this.command({\n            buildinfo: 1\n        }, options);\n    }\n    /**\n     * Retrieve this db's server status.\n     *\n     * @param options - Optional settings for the command\n     */ async serverStatus(options) {\n        return this.command({\n            serverStatus: 1\n        }, options);\n    }\n    /**\n     * Ping the MongoDB server and retrieve results\n     *\n     * @param options - Optional settings for the command\n     */ async ping(options) {\n        return this.command({\n            ping: 1\n        }, options);\n    }\n    /**\n     * Remove a user from a database\n     *\n     * @param username - The username to remove\n     * @param options - Optional settings for the command\n     */ async removeUser(username, options) {\n        return (0, execute_operation_1.executeOperation)(this.s.db.client, new remove_user_1.RemoveUserOperation(this.s.db, username, {\n            dbName: \"admin\",\n            ...options\n        }));\n    }\n    /**\n     * Validate an existing collection\n     *\n     * @param collectionName - The name of the collection to validate.\n     * @param options - Optional settings for the command\n     */ async validateCollection(collectionName, options = {}) {\n        return (0, execute_operation_1.executeOperation)(this.s.db.client, new validate_collection_1.ValidateCollectionOperation(this, collectionName, options));\n    }\n    /**\n     * List the available databases\n     *\n     * @param options - Optional settings for the command\n     */ async listDatabases(options) {\n        return (0, execute_operation_1.executeOperation)(this.s.db.client, new list_databases_1.ListDatabasesOperation(this.s.db, options));\n    }\n    /**\n     * Get ReplicaSet status\n     *\n     * @param options - Optional settings for the command\n     */ async replSetGetStatus(options) {\n        return this.command({\n            replSetGetStatus: 1\n        }, options);\n    }\n}\nexports.Admin = Admin; //# sourceMappingURL=admin.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbW9uZ29kYi9saWIvYWRtaW4uanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYkEsOENBQTZDO0lBQUVHLE9BQU87QUFBSyxDQUFDLEVBQUM7QUFDN0RELGFBQWEsR0FBRyxLQUFLO0FBQ3JCLE1BQU1HLFNBQVNDLG1CQUFPQSxDQUFDLHdEQUFRO0FBQy9CLE1BQU1DLHNCQUFzQkQsbUJBQU9BLENBQUMsd0dBQWdDO0FBQ3BFLE1BQU1FLG1CQUFtQkYsbUJBQU9BLENBQUMsa0dBQTZCO0FBQzlELE1BQU1HLGdCQUFnQkgsbUJBQU9BLENBQUMsNEZBQTBCO0FBQ3hELE1BQU1JLGdCQUFnQkosbUJBQU9BLENBQUMsNEZBQTBCO0FBQ3hELE1BQU1LLHdCQUF3QkwsbUJBQU9BLENBQUMsNEdBQWtDO0FBQ3hFOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Q0FrQkMsR0FDRCxNQUFNRjtJQUNGOzs7S0FHQyxHQUNEUSxZQUFZQyxFQUFFLENBQUU7UUFDWixJQUFJLENBQUNDLENBQUMsR0FBRztZQUFFRDtRQUFHO0lBQ2xCO0lBQ0E7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztLQXFCQyxHQUNELE1BQU1FLFFBQVFBLE9BQU8sRUFBRUMsT0FBTyxFQUFFO1FBQzVCLE9BQU8sQ0FBQyxHQUFHVCxvQkFBb0JVLGdCQUFnQixFQUFFLElBQUksQ0FBQ0gsQ0FBQyxDQUFDRCxFQUFFLENBQUNLLE1BQU0sRUFBRSxJQUFJUixjQUFjUyx3QkFBd0IsQ0FBQ0osU0FBUztZQUNuSCxHQUFHLENBQUMsR0FBR1YsT0FBT2Usa0JBQWtCLEVBQUVKLFFBQVE7WUFDMUNLLFNBQVNMLFNBQVNLO1lBQ2xCQyxnQkFBZ0JOLFNBQVNNO1FBQzdCO0lBQ0o7SUFDQTs7OztLQUlDLEdBQ0QsTUFBTUMsVUFBVVAsT0FBTyxFQUFFO1FBQ3JCLE9BQU8sSUFBSSxDQUFDRCxPQUFPLENBQUM7WUFBRVMsV0FBVztRQUFFLEdBQUdSO0lBQzFDO0lBQ0E7Ozs7S0FJQyxHQUNELE1BQU1TLFdBQVdULE9BQU8sRUFBRTtRQUN0QixPQUFPLElBQUksQ0FBQ0QsT0FBTyxDQUFDO1lBQUVTLFdBQVc7UUFBRSxHQUFHUjtJQUMxQztJQUNBOzs7O0tBSUMsR0FDRCxNQUFNVSxhQUFhVixPQUFPLEVBQUU7UUFDeEIsT0FBTyxJQUFJLENBQUNELE9BQU8sQ0FBQztZQUFFVyxjQUFjO1FBQUUsR0FBR1Y7SUFDN0M7SUFDQTs7OztLQUlDLEdBQ0QsTUFBTVcsS0FBS1gsT0FBTyxFQUFFO1FBQ2hCLE9BQU8sSUFBSSxDQUFDRCxPQUFPLENBQUM7WUFBRVksTUFBTTtRQUFFLEdBQUdYO0lBQ3JDO0lBQ0E7Ozs7O0tBS0MsR0FDRCxNQUFNWSxXQUFXQyxRQUFRLEVBQUViLE9BQU8sRUFBRTtRQUNoQyxPQUFPLENBQUMsR0FBR1Qsb0JBQW9CVSxnQkFBZ0IsRUFBRSxJQUFJLENBQUNILENBQUMsQ0FBQ0QsRUFBRSxDQUFDSyxNQUFNLEVBQUUsSUFBSVQsY0FBY3FCLG1CQUFtQixDQUFDLElBQUksQ0FBQ2hCLENBQUMsQ0FBQ0QsRUFBRSxFQUFFZ0IsVUFBVTtZQUFFRSxRQUFRO1lBQVMsR0FBR2YsT0FBTztRQUFDO0lBQ2hLO0lBQ0E7Ozs7O0tBS0MsR0FDRCxNQUFNZ0IsbUJBQW1CQyxjQUFjLEVBQUVqQixVQUFVLENBQUMsQ0FBQyxFQUFFO1FBQ25ELE9BQU8sQ0FBQyxHQUFHVCxvQkFBb0JVLGdCQUFnQixFQUFFLElBQUksQ0FBQ0gsQ0FBQyxDQUFDRCxFQUFFLENBQUNLLE1BQU0sRUFBRSxJQUFJUCxzQkFBc0J1QiwyQkFBMkIsQ0FBQyxJQUFJLEVBQUVELGdCQUFnQmpCO0lBQ25KO0lBQ0E7Ozs7S0FJQyxHQUNELE1BQU1tQixjQUFjbkIsT0FBTyxFQUFFO1FBQ3pCLE9BQU8sQ0FBQyxHQUFHVCxvQkFBb0JVLGdCQUFnQixFQUFFLElBQUksQ0FBQ0gsQ0FBQyxDQUFDRCxFQUFFLENBQUNLLE1BQU0sRUFBRSxJQUFJVixpQkFBaUI0QixzQkFBc0IsQ0FBQyxJQUFJLENBQUN0QixDQUFDLENBQUNELEVBQUUsRUFBRUc7SUFDOUg7SUFDQTs7OztLQUlDLEdBQ0QsTUFBTXFCLGlCQUFpQnJCLE9BQU8sRUFBRTtRQUM1QixPQUFPLElBQUksQ0FBQ0QsT0FBTyxDQUFDO1lBQUVzQixrQkFBa0I7UUFBRSxHQUFHckI7SUFDakQ7QUFDSjtBQUNBZCxhQUFhLEdBQUdFLE9BQ2hCLGlDQUFpQyIsInNvdXJjZXMiOlsid2VicGFjazovL2Jsb2ctYXBwbGljYXRpb24vLi9ub2RlX21vZHVsZXMvbW9uZ29kYi9saWIvYWRtaW4uanM/ZWUxZCJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuQWRtaW4gPSB2b2lkIDA7XG5jb25zdCBic29uXzEgPSByZXF1aXJlKFwiLi9ic29uXCIpO1xuY29uc3QgZXhlY3V0ZV9vcGVyYXRpb25fMSA9IHJlcXVpcmUoXCIuL29wZXJhdGlvbnMvZXhlY3V0ZV9vcGVyYXRpb25cIik7XG5jb25zdCBsaXN0X2RhdGFiYXNlc18xID0gcmVxdWlyZShcIi4vb3BlcmF0aW9ucy9saXN0X2RhdGFiYXNlc1wiKTtcbmNvbnN0IHJlbW92ZV91c2VyXzEgPSByZXF1aXJlKFwiLi9vcGVyYXRpb25zL3JlbW92ZV91c2VyXCIpO1xuY29uc3QgcnVuX2NvbW1hbmRfMSA9IHJlcXVpcmUoXCIuL29wZXJhdGlvbnMvcnVuX2NvbW1hbmRcIik7XG5jb25zdCB2YWxpZGF0ZV9jb2xsZWN0aW9uXzEgPSByZXF1aXJlKFwiLi9vcGVyYXRpb25zL3ZhbGlkYXRlX2NvbGxlY3Rpb25cIik7XG4vKipcbiAqIFRoZSAqKkFkbWluKiogY2xhc3MgaXMgYW4gaW50ZXJuYWwgY2xhc3MgdGhhdCBhbGxvd3MgY29udmVuaWVudCBhY2Nlc3MgdG9cbiAqIHRoZSBhZG1pbiBmdW5jdGlvbmFsaXR5IGFuZCBjb21tYW5kcyBmb3IgTW9uZ29EQi5cbiAqXG4gKiAqKkFETUlOIENhbm5vdCBkaXJlY3RseSBiZSBpbnN0YW50aWF0ZWQqKlxuICogQHB1YmxpY1xuICpcbiAqIEBleGFtcGxlXG4gKiBgYGB0c1xuICogaW1wb3J0IHsgTW9uZ29DbGllbnQgfSBmcm9tICdtb25nb2RiJztcbiAqXG4gKiBjb25zdCBjbGllbnQgPSBuZXcgTW9uZ29DbGllbnQoJ21vbmdvZGI6Ly9sb2NhbGhvc3Q6MjcwMTcnKTtcbiAqIGNvbnN0IGFkbWluID0gY2xpZW50LmRiKCkuYWRtaW4oKTtcbiAqIGNvbnN0IGRiSW5mbyA9IGF3YWl0IGFkbWluLmxpc3REYXRhYmFzZXMoKTtcbiAqIGZvciAoY29uc3QgZGIgb2YgZGJJbmZvLmRhdGFiYXNlcykge1xuICogICBjb25zb2xlLmxvZyhkYi5uYW1lKTtcbiAqIH1cbiAqIGBgYFxuICovXG5jbGFzcyBBZG1pbiB7XG4gICAgLyoqXG4gICAgICogQ3JlYXRlIGEgbmV3IEFkbWluIGluc3RhbmNlXG4gICAgICogQGludGVybmFsXG4gICAgICovXG4gICAgY29uc3RydWN0b3IoZGIpIHtcbiAgICAgICAgdGhpcy5zID0geyBkYiB9O1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBFeGVjdXRlIGEgY29tbWFuZFxuICAgICAqXG4gICAgICogVGhlIGRyaXZlciB3aWxsIGVuc3VyZSB0aGUgZm9sbG93aW5nIGZpZWxkcyBhcmUgYXR0YWNoZWQgdG8gdGhlIGNvbW1hbmQgc2VudCB0byB0aGUgc2VydmVyOlxuICAgICAqIC0gYGxzaWRgIC0gc291cmNlZCBmcm9tIGFuIGltcGxpY2l0IHNlc3Npb24gb3Igb3B0aW9ucy5zZXNzaW9uXG4gICAgICogLSBgJHJlYWRQcmVmZXJlbmNlYCAtIGRlZmF1bHRzIHRvIHByaW1hcnkgb3IgY2FuIGJlIGNvbmZpZ3VyZWQgYnkgb3B0aW9ucy5yZWFkUHJlZmVyZW5jZVxuICAgICAqIC0gYCRkYmAgLSBzb3VyY2VkIGZyb20gdGhlIG5hbWUgb2YgdGhpcyBkYXRhYmFzZVxuICAgICAqXG4gICAgICogSWYgdGhlIGNsaWVudCBoYXMgYSBzZXJ2ZXJBcGkgc2V0dGluZzpcbiAgICAgKiAtIGBhcGlWZXJzaW9uYFxuICAgICAqIC0gYGFwaVN0cmljdGBcbiAgICAgKiAtIGBhcGlEZXByZWNhdGlvbkVycm9yc2BcbiAgICAgKlxuICAgICAqIFdoZW4gaW4gYSB0cmFuc2FjdGlvbjpcbiAgICAgKiAtIGByZWFkQ29uY2VybmAgLSBzb3VyY2VkIGZyb20gcmVhZENvbmNlcm4gc2V0IG9uIHRoZSBUcmFuc2FjdGlvbk9wdGlvbnNcbiAgICAgKiAtIGB3cml0ZUNvbmNlcm5gIC0gc291cmNlZCBmcm9tIHdyaXRlQ29uY2VybiBzZXQgb24gdGhlIFRyYW5zYWN0aW9uT3B0aW9uc1xuICAgICAqXG4gICAgICogQXR0YWNoaW5nIGFueSBvZiB0aGUgYWJvdmUgZmllbGRzIHRvIHRoZSBjb21tYW5kIHdpbGwgaGF2ZSBubyBlZmZlY3QgYXMgdGhlIGRyaXZlciB3aWxsIG92ZXJ3cml0ZSB0aGUgdmFsdWUuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gY29tbWFuZCAtIFRoZSBjb21tYW5kIHRvIGV4ZWN1dGVcbiAgICAgKiBAcGFyYW0gb3B0aW9ucyAtIE9wdGlvbmFsIHNldHRpbmdzIGZvciB0aGUgY29tbWFuZFxuICAgICAqL1xuICAgIGFzeW5jIGNvbW1hbmQoY29tbWFuZCwgb3B0aW9ucykge1xuICAgICAgICByZXR1cm4gKDAsIGV4ZWN1dGVfb3BlcmF0aW9uXzEuZXhlY3V0ZU9wZXJhdGlvbikodGhpcy5zLmRiLmNsaWVudCwgbmV3IHJ1bl9jb21tYW5kXzEuUnVuQWRtaW5Db21tYW5kT3BlcmF0aW9uKGNvbW1hbmQsIHtcbiAgICAgICAgICAgIC4uLigwLCBic29uXzEucmVzb2x2ZUJTT05PcHRpb25zKShvcHRpb25zKSxcbiAgICAgICAgICAgIHNlc3Npb246IG9wdGlvbnM/LnNlc3Npb24sXG4gICAgICAgICAgICByZWFkUHJlZmVyZW5jZTogb3B0aW9ucz8ucmVhZFByZWZlcmVuY2VcbiAgICAgICAgfSkpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBSZXRyaWV2ZSB0aGUgc2VydmVyIGJ1aWxkIGluZm9ybWF0aW9uXG4gICAgICpcbiAgICAgKiBAcGFyYW0gb3B0aW9ucyAtIE9wdGlvbmFsIHNldHRpbmdzIGZvciB0aGUgY29tbWFuZFxuICAgICAqL1xuICAgIGFzeW5jIGJ1aWxkSW5mbyhvcHRpb25zKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmNvbW1hbmQoeyBidWlsZGluZm86IDEgfSwgb3B0aW9ucyk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFJldHJpZXZlIHRoZSBzZXJ2ZXIgYnVpbGQgaW5mb3JtYXRpb25cbiAgICAgKlxuICAgICAqIEBwYXJhbSBvcHRpb25zIC0gT3B0aW9uYWwgc2V0dGluZ3MgZm9yIHRoZSBjb21tYW5kXG4gICAgICovXG4gICAgYXN5bmMgc2VydmVySW5mbyhvcHRpb25zKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmNvbW1hbmQoeyBidWlsZGluZm86IDEgfSwgb3B0aW9ucyk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFJldHJpZXZlIHRoaXMgZGIncyBzZXJ2ZXIgc3RhdHVzLlxuICAgICAqXG4gICAgICogQHBhcmFtIG9wdGlvbnMgLSBPcHRpb25hbCBzZXR0aW5ncyBmb3IgdGhlIGNvbW1hbmRcbiAgICAgKi9cbiAgICBhc3luYyBzZXJ2ZXJTdGF0dXMob3B0aW9ucykge1xuICAgICAgICByZXR1cm4gdGhpcy5jb21tYW5kKHsgc2VydmVyU3RhdHVzOiAxIH0sIG9wdGlvbnMpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBQaW5nIHRoZSBNb25nb0RCIHNlcnZlciBhbmQgcmV0cmlldmUgcmVzdWx0c1xuICAgICAqXG4gICAgICogQHBhcmFtIG9wdGlvbnMgLSBPcHRpb25hbCBzZXR0aW5ncyBmb3IgdGhlIGNvbW1hbmRcbiAgICAgKi9cbiAgICBhc3luYyBwaW5nKG9wdGlvbnMpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuY29tbWFuZCh7IHBpbmc6IDEgfSwgb3B0aW9ucyk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFJlbW92ZSBhIHVzZXIgZnJvbSBhIGRhdGFiYXNlXG4gICAgICpcbiAgICAgKiBAcGFyYW0gdXNlcm5hbWUgLSBUaGUgdXNlcm5hbWUgdG8gcmVtb3ZlXG4gICAgICogQHBhcmFtIG9wdGlvbnMgLSBPcHRpb25hbCBzZXR0aW5ncyBmb3IgdGhlIGNvbW1hbmRcbiAgICAgKi9cbiAgICBhc3luYyByZW1vdmVVc2VyKHVzZXJuYW1lLCBvcHRpb25zKSB7XG4gICAgICAgIHJldHVybiAoMCwgZXhlY3V0ZV9vcGVyYXRpb25fMS5leGVjdXRlT3BlcmF0aW9uKSh0aGlzLnMuZGIuY2xpZW50LCBuZXcgcmVtb3ZlX3VzZXJfMS5SZW1vdmVVc2VyT3BlcmF0aW9uKHRoaXMucy5kYiwgdXNlcm5hbWUsIHsgZGJOYW1lOiAnYWRtaW4nLCAuLi5vcHRpb25zIH0pKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogVmFsaWRhdGUgYW4gZXhpc3RpbmcgY29sbGVjdGlvblxuICAgICAqXG4gICAgICogQHBhcmFtIGNvbGxlY3Rpb25OYW1lIC0gVGhlIG5hbWUgb2YgdGhlIGNvbGxlY3Rpb24gdG8gdmFsaWRhdGUuXG4gICAgICogQHBhcmFtIG9wdGlvbnMgLSBPcHRpb25hbCBzZXR0aW5ncyBmb3IgdGhlIGNvbW1hbmRcbiAgICAgKi9cbiAgICBhc3luYyB2YWxpZGF0ZUNvbGxlY3Rpb24oY29sbGVjdGlvbk5hbWUsIG9wdGlvbnMgPSB7fSkge1xuICAgICAgICByZXR1cm4gKDAsIGV4ZWN1dGVfb3BlcmF0aW9uXzEuZXhlY3V0ZU9wZXJhdGlvbikodGhpcy5zLmRiLmNsaWVudCwgbmV3IHZhbGlkYXRlX2NvbGxlY3Rpb25fMS5WYWxpZGF0ZUNvbGxlY3Rpb25PcGVyYXRpb24odGhpcywgY29sbGVjdGlvbk5hbWUsIG9wdGlvbnMpKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogTGlzdCB0aGUgYXZhaWxhYmxlIGRhdGFiYXNlc1xuICAgICAqXG4gICAgICogQHBhcmFtIG9wdGlvbnMgLSBPcHRpb25hbCBzZXR0aW5ncyBmb3IgdGhlIGNvbW1hbmRcbiAgICAgKi9cbiAgICBhc3luYyBsaXN0RGF0YWJhc2VzKG9wdGlvbnMpIHtcbiAgICAgICAgcmV0dXJuICgwLCBleGVjdXRlX29wZXJhdGlvbl8xLmV4ZWN1dGVPcGVyYXRpb24pKHRoaXMucy5kYi5jbGllbnQsIG5ldyBsaXN0X2RhdGFiYXNlc18xLkxpc3REYXRhYmFzZXNPcGVyYXRpb24odGhpcy5zLmRiLCBvcHRpb25zKSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEdldCBSZXBsaWNhU2V0IHN0YXR1c1xuICAgICAqXG4gICAgICogQHBhcmFtIG9wdGlvbnMgLSBPcHRpb25hbCBzZXR0aW5ncyBmb3IgdGhlIGNvbW1hbmRcbiAgICAgKi9cbiAgICBhc3luYyByZXBsU2V0R2V0U3RhdHVzKG9wdGlvbnMpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuY29tbWFuZCh7IHJlcGxTZXRHZXRTdGF0dXM6IDEgfSwgb3B0aW9ucyk7XG4gICAgfVxufVxuZXhwb3J0cy5BZG1pbiA9IEFkbWluO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9YWRtaW4uanMubWFwIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiQWRtaW4iLCJic29uXzEiLCJyZXF1aXJlIiwiZXhlY3V0ZV9vcGVyYXRpb25fMSIsImxpc3RfZGF0YWJhc2VzXzEiLCJyZW1vdmVfdXNlcl8xIiwicnVuX2NvbW1hbmRfMSIsInZhbGlkYXRlX2NvbGxlY3Rpb25fMSIsImNvbnN0cnVjdG9yIiwiZGIiLCJzIiwiY29tbWFuZCIsIm9wdGlvbnMiLCJleGVjdXRlT3BlcmF0aW9uIiwiY2xpZW50IiwiUnVuQWRtaW5Db21tYW5kT3BlcmF0aW9uIiwicmVzb2x2ZUJTT05PcHRpb25zIiwic2Vzc2lvbiIsInJlYWRQcmVmZXJlbmNlIiwiYnVpbGRJbmZvIiwiYnVpbGRpbmZvIiwic2VydmVySW5mbyIsInNlcnZlclN0YXR1cyIsInBpbmciLCJyZW1vdmVVc2VyIiwidXNlcm5hbWUiLCJSZW1vdmVVc2VyT3BlcmF0aW9uIiwiZGJOYW1lIiwidmFsaWRhdGVDb2xsZWN0aW9uIiwiY29sbGVjdGlvbk5hbWUiLCJWYWxpZGF0ZUNvbGxlY3Rpb25PcGVyYXRpb24iLCJsaXN0RGF0YWJhc2VzIiwiTGlzdERhdGFiYXNlc09wZXJhdGlvbiIsInJlcGxTZXRHZXRTdGF0dXMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongodb/lib/admin.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongodb/lib/bson.js":
/*!******************************************!*\
  !*** ./node_modules/mongodb/lib/bson.js ***!
  \******************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.resolveBSONOptions = exports.pluckBSONSerializeOptions = exports.UUID = exports.Timestamp = exports.serialize = exports.ObjectId = exports.MinKey = exports.MaxKey = exports.Long = exports.Int32 = exports.Double = exports.deserialize = exports.Decimal128 = exports.DBRef = exports.Code = exports.calculateObjectSize = exports.BSONType = exports.BSONSymbol = exports.BSONRegExp = exports.BSON = exports.Binary = void 0;\nvar bson_1 = __webpack_require__(/*! bson */ \"(ssr)/./node_modules/bson/lib/bson.cjs\");\nObject.defineProperty(exports, \"Binary\", ({\n    enumerable: true,\n    get: function() {\n        return bson_1.Binary;\n    }\n}));\nObject.defineProperty(exports, \"BSON\", ({\n    enumerable: true,\n    get: function() {\n        return bson_1.BSON;\n    }\n}));\nObject.defineProperty(exports, \"BSONRegExp\", ({\n    enumerable: true,\n    get: function() {\n        return bson_1.BSONRegExp;\n    }\n}));\nObject.defineProperty(exports, \"BSONSymbol\", ({\n    enumerable: true,\n    get: function() {\n        return bson_1.BSONSymbol;\n    }\n}));\nObject.defineProperty(exports, \"BSONType\", ({\n    enumerable: true,\n    get: function() {\n        return bson_1.BSONType;\n    }\n}));\nObject.defineProperty(exports, \"calculateObjectSize\", ({\n    enumerable: true,\n    get: function() {\n        return bson_1.calculateObjectSize;\n    }\n}));\nObject.defineProperty(exports, \"Code\", ({\n    enumerable: true,\n    get: function() {\n        return bson_1.Code;\n    }\n}));\nObject.defineProperty(exports, \"DBRef\", ({\n    enumerable: true,\n    get: function() {\n        return bson_1.DBRef;\n    }\n}));\nObject.defineProperty(exports, \"Decimal128\", ({\n    enumerable: true,\n    get: function() {\n        return bson_1.Decimal128;\n    }\n}));\nObject.defineProperty(exports, \"deserialize\", ({\n    enumerable: true,\n    get: function() {\n        return bson_1.deserialize;\n    }\n}));\nObject.defineProperty(exports, \"Double\", ({\n    enumerable: true,\n    get: function() {\n        return bson_1.Double;\n    }\n}));\nObject.defineProperty(exports, \"Int32\", ({\n    enumerable: true,\n    get: function() {\n        return bson_1.Int32;\n    }\n}));\nObject.defineProperty(exports, \"Long\", ({\n    enumerable: true,\n    get: function() {\n        return bson_1.Long;\n    }\n}));\nObject.defineProperty(exports, \"MaxKey\", ({\n    enumerable: true,\n    get: function() {\n        return bson_1.MaxKey;\n    }\n}));\nObject.defineProperty(exports, \"MinKey\", ({\n    enumerable: true,\n    get: function() {\n        return bson_1.MinKey;\n    }\n}));\nObject.defineProperty(exports, \"ObjectId\", ({\n    enumerable: true,\n    get: function() {\n        return bson_1.ObjectId;\n    }\n}));\nObject.defineProperty(exports, \"serialize\", ({\n    enumerable: true,\n    get: function() {\n        return bson_1.serialize;\n    }\n}));\nObject.defineProperty(exports, \"Timestamp\", ({\n    enumerable: true,\n    get: function() {\n        return bson_1.Timestamp;\n    }\n}));\nObject.defineProperty(exports, \"UUID\", ({\n    enumerable: true,\n    get: function() {\n        return bson_1.UUID;\n    }\n}));\nfunction pluckBSONSerializeOptions(options) {\n    const { fieldsAsRaw, useBigInt64, promoteValues, promoteBuffers, promoteLongs, serializeFunctions, ignoreUndefined, bsonRegExp, raw, enableUtf8Validation } = options;\n    return {\n        fieldsAsRaw,\n        useBigInt64,\n        promoteValues,\n        promoteBuffers,\n        promoteLongs,\n        serializeFunctions,\n        ignoreUndefined,\n        bsonRegExp,\n        raw,\n        enableUtf8Validation\n    };\n}\nexports.pluckBSONSerializeOptions = pluckBSONSerializeOptions;\n/**\n * Merge the given BSONSerializeOptions, preferring options over the parent's options, and\n * substituting defaults for values not set.\n *\n * @internal\n */ function resolveBSONOptions(options, parent) {\n    const parentOptions = parent?.bsonOptions;\n    return {\n        raw: options?.raw ?? parentOptions?.raw ?? false,\n        useBigInt64: options?.useBigInt64 ?? parentOptions?.useBigInt64 ?? false,\n        promoteLongs: options?.promoteLongs ?? parentOptions?.promoteLongs ?? true,\n        promoteValues: options?.promoteValues ?? parentOptions?.promoteValues ?? true,\n        promoteBuffers: options?.promoteBuffers ?? parentOptions?.promoteBuffers ?? false,\n        ignoreUndefined: options?.ignoreUndefined ?? parentOptions?.ignoreUndefined ?? false,\n        bsonRegExp: options?.bsonRegExp ?? parentOptions?.bsonRegExp ?? false,\n        serializeFunctions: options?.serializeFunctions ?? parentOptions?.serializeFunctions ?? false,\n        fieldsAsRaw: options?.fieldsAsRaw ?? parentOptions?.fieldsAsRaw ?? {},\n        enableUtf8Validation: options?.enableUtf8Validation ?? parentOptions?.enableUtf8Validation ?? true\n    };\n}\nexports.resolveBSONOptions = resolveBSONOptions; //# sourceMappingURL=bson.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbW9uZ29kYi9saWIvYnNvbi5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiQSw4Q0FBNkM7SUFBRUcsT0FBTztBQUFLLENBQUMsRUFBQztBQUM3REQsMEJBQTBCLEdBQUdBLGlDQUFpQyxHQUFHQSxZQUFZLEdBQUdBLGlCQUFpQixHQUFHQSxpQkFBaUIsR0FBR0EsZ0JBQWdCLEdBQUdBLGNBQWMsR0FBR0EsY0FBYyxHQUFHQSxZQUFZLEdBQUdBLGFBQWEsR0FBR0EsY0FBYyxHQUFHQSxtQkFBbUIsR0FBR0Esa0JBQWtCLEdBQUdBLGFBQWEsR0FBR0EsWUFBWSxHQUFHQSwyQkFBMkIsR0FBR0EsZ0JBQWdCLEdBQUdBLGtCQUFrQixHQUFHQSxrQkFBa0IsR0FBR0EsWUFBWSxHQUFHQSxjQUFjLEdBQUcsS0FBSztBQUN2YSxJQUFJdUIsU0FBU0MsbUJBQU9BLENBQUMsb0RBQU07QUFDM0IxQiwwQ0FBeUM7SUFBRTJCLFlBQVk7SUFBTUMsS0FBSztRQUFjLE9BQU9ILE9BQU9ELE1BQU07SUFBRTtBQUFFLENBQUMsRUFBQztBQUMxR3hCLHdDQUF1QztJQUFFMkIsWUFBWTtJQUFNQyxLQUFLO1FBQWMsT0FBT0gsT0FBT0YsSUFBSTtJQUFFO0FBQUUsQ0FBQyxFQUFDO0FBQ3RHdkIsOENBQTZDO0lBQUUyQixZQUFZO0lBQU1DLEtBQUs7UUFBYyxPQUFPSCxPQUFPSCxVQUFVO0lBQUU7QUFBRSxDQUFDLEVBQUM7QUFDbEh0Qiw4Q0FBNkM7SUFBRTJCLFlBQVk7SUFBTUMsS0FBSztRQUFjLE9BQU9ILE9BQU9KLFVBQVU7SUFBRTtBQUFFLENBQUMsRUFBQztBQUNsSHJCLDRDQUEyQztJQUFFMkIsWUFBWTtJQUFNQyxLQUFLO1FBQWMsT0FBT0gsT0FBT0wsUUFBUTtJQUFFO0FBQUUsQ0FBQyxFQUFDO0FBQzlHcEIsdURBQXNEO0lBQUUyQixZQUFZO0lBQU1DLEtBQUs7UUFBYyxPQUFPSCxPQUFPTixtQkFBbUI7SUFBRTtBQUFFLENBQUMsRUFBQztBQUNwSW5CLHdDQUF1QztJQUFFMkIsWUFBWTtJQUFNQyxLQUFLO1FBQWMsT0FBT0gsT0FBT1AsSUFBSTtJQUFFO0FBQUUsQ0FBQyxFQUFDO0FBQ3RHbEIseUNBQXdDO0lBQUUyQixZQUFZO0lBQU1DLEtBQUs7UUFBYyxPQUFPSCxPQUFPUixLQUFLO0lBQUU7QUFBRSxDQUFDLEVBQUM7QUFDeEdqQiw4Q0FBNkM7SUFBRTJCLFlBQVk7SUFBTUMsS0FBSztRQUFjLE9BQU9ILE9BQU9ULFVBQVU7SUFBRTtBQUFFLENBQUMsRUFBQztBQUNsSGhCLCtDQUE4QztJQUFFMkIsWUFBWTtJQUFNQyxLQUFLO1FBQWMsT0FBT0gsT0FBT1YsV0FBVztJQUFFO0FBQUUsQ0FBQyxFQUFDO0FBQ3BIZiwwQ0FBeUM7SUFBRTJCLFlBQVk7SUFBTUMsS0FBSztRQUFjLE9BQU9ILE9BQU9YLE1BQU07SUFBRTtBQUFFLENBQUMsRUFBQztBQUMxR2QseUNBQXdDO0lBQUUyQixZQUFZO0lBQU1DLEtBQUs7UUFBYyxPQUFPSCxPQUFPWixLQUFLO0lBQUU7QUFBRSxDQUFDLEVBQUM7QUFDeEdiLHdDQUF1QztJQUFFMkIsWUFBWTtJQUFNQyxLQUFLO1FBQWMsT0FBT0gsT0FBT2IsSUFBSTtJQUFFO0FBQUUsQ0FBQyxFQUFDO0FBQ3RHWiwwQ0FBeUM7SUFBRTJCLFlBQVk7SUFBTUMsS0FBSztRQUFjLE9BQU9ILE9BQU9kLE1BQU07SUFBRTtBQUFFLENBQUMsRUFBQztBQUMxR1gsMENBQXlDO0lBQUUyQixZQUFZO0lBQU1DLEtBQUs7UUFBYyxPQUFPSCxPQUFPZixNQUFNO0lBQUU7QUFBRSxDQUFDLEVBQUM7QUFDMUdWLDRDQUEyQztJQUFFMkIsWUFBWTtJQUFNQyxLQUFLO1FBQWMsT0FBT0gsT0FBT2hCLFFBQVE7SUFBRTtBQUFFLENBQUMsRUFBQztBQUM5R1QsNkNBQTRDO0lBQUUyQixZQUFZO0lBQU1DLEtBQUs7UUFBYyxPQUFPSCxPQUFPakIsU0FBUztJQUFFO0FBQUUsQ0FBQyxFQUFDO0FBQ2hIUiw2Q0FBNEM7SUFBRTJCLFlBQVk7SUFBTUMsS0FBSztRQUFjLE9BQU9ILE9BQU9sQixTQUFTO0lBQUU7QUFBRSxDQUFDLEVBQUM7QUFDaEhQLHdDQUF1QztJQUFFMkIsWUFBWTtJQUFNQyxLQUFLO1FBQWMsT0FBT0gsT0FBT25CLElBQUk7SUFBRTtBQUFFLENBQUMsRUFBQztBQUN0RyxTQUFTRCwwQkFBMEJ3QixPQUFPO0lBQ3RDLE1BQU0sRUFBRUMsV0FBVyxFQUFFQyxXQUFXLEVBQUVDLGFBQWEsRUFBRUMsY0FBYyxFQUFFQyxZQUFZLEVBQUVDLGtCQUFrQixFQUFFQyxlQUFlLEVBQUVDLFVBQVUsRUFBRUMsR0FBRyxFQUFFQyxvQkFBb0IsRUFBRSxHQUFHVjtJQUM5SixPQUFPO1FBQ0hDO1FBQ0FDO1FBQ0FDO1FBQ0FDO1FBQ0FDO1FBQ0FDO1FBQ0FDO1FBQ0FDO1FBQ0FDO1FBQ0FDO0lBQ0o7QUFDSjtBQUNBckMsaUNBQWlDLEdBQUdHO0FBQ3BDOzs7OztDQUtDLEdBQ0QsU0FBU0QsbUJBQW1CeUIsT0FBTyxFQUFFVyxNQUFNO0lBQ3ZDLE1BQU1DLGdCQUFnQkQsUUFBUUU7SUFDOUIsT0FBTztRQUNISixLQUFLVCxTQUFTUyxPQUFPRyxlQUFlSCxPQUFPO1FBQzNDUCxhQUFhRixTQUFTRSxlQUFlVSxlQUFlVixlQUFlO1FBQ25FRyxjQUFjTCxTQUFTSyxnQkFBZ0JPLGVBQWVQLGdCQUFnQjtRQUN0RUYsZUFBZUgsU0FBU0csaUJBQWlCUyxlQUFlVCxpQkFBaUI7UUFDekVDLGdCQUFnQkosU0FBU0ksa0JBQWtCUSxlQUFlUixrQkFBa0I7UUFDNUVHLGlCQUFpQlAsU0FBU08sbUJBQW1CSyxlQUFlTCxtQkFBbUI7UUFDL0VDLFlBQVlSLFNBQVNRLGNBQWNJLGVBQWVKLGNBQWM7UUFDaEVGLG9CQUFvQk4sU0FBU00sc0JBQXNCTSxlQUFlTixzQkFBc0I7UUFDeEZMLGFBQWFELFNBQVNDLGVBQWVXLGVBQWVYLGVBQWUsQ0FBQztRQUNwRVMsc0JBQXNCVixTQUFTVSx3QkFBd0JFLGVBQWVGLHdCQUF3QjtJQUNsRztBQUNKO0FBQ0FyQywwQkFBMEIsR0FBR0Usb0JBQzdCLGdDQUFnQyIsInNvdXJjZXMiOlsid2VicGFjazovL2Jsb2ctYXBwbGljYXRpb24vLi9ub2RlX21vZHVsZXMvbW9uZ29kYi9saWIvYnNvbi5qcz8xZWNhIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5yZXNvbHZlQlNPTk9wdGlvbnMgPSBleHBvcnRzLnBsdWNrQlNPTlNlcmlhbGl6ZU9wdGlvbnMgPSBleHBvcnRzLlVVSUQgPSBleHBvcnRzLlRpbWVzdGFtcCA9IGV4cG9ydHMuc2VyaWFsaXplID0gZXhwb3J0cy5PYmplY3RJZCA9IGV4cG9ydHMuTWluS2V5ID0gZXhwb3J0cy5NYXhLZXkgPSBleHBvcnRzLkxvbmcgPSBleHBvcnRzLkludDMyID0gZXhwb3J0cy5Eb3VibGUgPSBleHBvcnRzLmRlc2VyaWFsaXplID0gZXhwb3J0cy5EZWNpbWFsMTI4ID0gZXhwb3J0cy5EQlJlZiA9IGV4cG9ydHMuQ29kZSA9IGV4cG9ydHMuY2FsY3VsYXRlT2JqZWN0U2l6ZSA9IGV4cG9ydHMuQlNPTlR5cGUgPSBleHBvcnRzLkJTT05TeW1ib2wgPSBleHBvcnRzLkJTT05SZWdFeHAgPSBleHBvcnRzLkJTT04gPSBleHBvcnRzLkJpbmFyeSA9IHZvaWQgMDtcbnZhciBic29uXzEgPSByZXF1aXJlKFwiYnNvblwiKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIkJpbmFyeVwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gYnNvbl8xLkJpbmFyeTsgfSB9KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIkJTT05cIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGJzb25fMS5CU09OOyB9IH0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiQlNPTlJlZ0V4cFwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gYnNvbl8xLkJTT05SZWdFeHA7IH0gfSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJCU09OU3ltYm9sXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBic29uXzEuQlNPTlN5bWJvbDsgfSB9KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIkJTT05UeXBlXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBic29uXzEuQlNPTlR5cGU7IH0gfSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJjYWxjdWxhdGVPYmplY3RTaXplXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBic29uXzEuY2FsY3VsYXRlT2JqZWN0U2l6ZTsgfSB9KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIkNvZGVcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGJzb25fMS5Db2RlOyB9IH0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiREJSZWZcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGJzb25fMS5EQlJlZjsgfSB9KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIkRlY2ltYWwxMjhcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGJzb25fMS5EZWNpbWFsMTI4OyB9IH0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiZGVzZXJpYWxpemVcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGJzb25fMS5kZXNlcmlhbGl6ZTsgfSB9KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIkRvdWJsZVwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gYnNvbl8xLkRvdWJsZTsgfSB9KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIkludDMyXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBic29uXzEuSW50MzI7IH0gfSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJMb25nXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBic29uXzEuTG9uZzsgfSB9KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIk1heEtleVwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gYnNvbl8xLk1heEtleTsgfSB9KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIk1pbktleVwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gYnNvbl8xLk1pbktleTsgfSB9KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIk9iamVjdElkXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBic29uXzEuT2JqZWN0SWQ7IH0gfSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJzZXJpYWxpemVcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGJzb25fMS5zZXJpYWxpemU7IH0gfSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJUaW1lc3RhbXBcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGJzb25fMS5UaW1lc3RhbXA7IH0gfSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJVVUlEXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBic29uXzEuVVVJRDsgfSB9KTtcbmZ1bmN0aW9uIHBsdWNrQlNPTlNlcmlhbGl6ZU9wdGlvbnMob3B0aW9ucykge1xuICAgIGNvbnN0IHsgZmllbGRzQXNSYXcsIHVzZUJpZ0ludDY0LCBwcm9tb3RlVmFsdWVzLCBwcm9tb3RlQnVmZmVycywgcHJvbW90ZUxvbmdzLCBzZXJpYWxpemVGdW5jdGlvbnMsIGlnbm9yZVVuZGVmaW5lZCwgYnNvblJlZ0V4cCwgcmF3LCBlbmFibGVVdGY4VmFsaWRhdGlvbiB9ID0gb3B0aW9ucztcbiAgICByZXR1cm4ge1xuICAgICAgICBmaWVsZHNBc1JhdyxcbiAgICAgICAgdXNlQmlnSW50NjQsXG4gICAgICAgIHByb21vdGVWYWx1ZXMsXG4gICAgICAgIHByb21vdGVCdWZmZXJzLFxuICAgICAgICBwcm9tb3RlTG9uZ3MsXG4gICAgICAgIHNlcmlhbGl6ZUZ1bmN0aW9ucyxcbiAgICAgICAgaWdub3JlVW5kZWZpbmVkLFxuICAgICAgICBic29uUmVnRXhwLFxuICAgICAgICByYXcsXG4gICAgICAgIGVuYWJsZVV0ZjhWYWxpZGF0aW9uXG4gICAgfTtcbn1cbmV4cG9ydHMucGx1Y2tCU09OU2VyaWFsaXplT3B0aW9ucyA9IHBsdWNrQlNPTlNlcmlhbGl6ZU9wdGlvbnM7XG4vKipcbiAqIE1lcmdlIHRoZSBnaXZlbiBCU09OU2VyaWFsaXplT3B0aW9ucywgcHJlZmVycmluZyBvcHRpb25zIG92ZXIgdGhlIHBhcmVudCdzIG9wdGlvbnMsIGFuZFxuICogc3Vic3RpdHV0aW5nIGRlZmF1bHRzIGZvciB2YWx1ZXMgbm90IHNldC5cbiAqXG4gKiBAaW50ZXJuYWxcbiAqL1xuZnVuY3Rpb24gcmVzb2x2ZUJTT05PcHRpb25zKG9wdGlvbnMsIHBhcmVudCkge1xuICAgIGNvbnN0IHBhcmVudE9wdGlvbnMgPSBwYXJlbnQ/LmJzb25PcHRpb25zO1xuICAgIHJldHVybiB7XG4gICAgICAgIHJhdzogb3B0aW9ucz8ucmF3ID8/IHBhcmVudE9wdGlvbnM/LnJhdyA/PyBmYWxzZSxcbiAgICAgICAgdXNlQmlnSW50NjQ6IG9wdGlvbnM/LnVzZUJpZ0ludDY0ID8/IHBhcmVudE9wdGlvbnM/LnVzZUJpZ0ludDY0ID8/IGZhbHNlLFxuICAgICAgICBwcm9tb3RlTG9uZ3M6IG9wdGlvbnM/LnByb21vdGVMb25ncyA/PyBwYXJlbnRPcHRpb25zPy5wcm9tb3RlTG9uZ3MgPz8gdHJ1ZSxcbiAgICAgICAgcHJvbW90ZVZhbHVlczogb3B0aW9ucz8ucHJvbW90ZVZhbHVlcyA/PyBwYXJlbnRPcHRpb25zPy5wcm9tb3RlVmFsdWVzID8/IHRydWUsXG4gICAgICAgIHByb21vdGVCdWZmZXJzOiBvcHRpb25zPy5wcm9tb3RlQnVmZmVycyA/PyBwYXJlbnRPcHRpb25zPy5wcm9tb3RlQnVmZmVycyA/PyBmYWxzZSxcbiAgICAgICAgaWdub3JlVW5kZWZpbmVkOiBvcHRpb25zPy5pZ25vcmVVbmRlZmluZWQgPz8gcGFyZW50T3B0aW9ucz8uaWdub3JlVW5kZWZpbmVkID8/IGZhbHNlLFxuICAgICAgICBic29uUmVnRXhwOiBvcHRpb25zPy5ic29uUmVnRXhwID8/IHBhcmVudE9wdGlvbnM/LmJzb25SZWdFeHAgPz8gZmFsc2UsXG4gICAgICAgIHNlcmlhbGl6ZUZ1bmN0aW9uczogb3B0aW9ucz8uc2VyaWFsaXplRnVuY3Rpb25zID8/IHBhcmVudE9wdGlvbnM/LnNlcmlhbGl6ZUZ1bmN0aW9ucyA/PyBmYWxzZSxcbiAgICAgICAgZmllbGRzQXNSYXc6IG9wdGlvbnM/LmZpZWxkc0FzUmF3ID8/IHBhcmVudE9wdGlvbnM/LmZpZWxkc0FzUmF3ID8/IHt9LFxuICAgICAgICBlbmFibGVVdGY4VmFsaWRhdGlvbjogb3B0aW9ucz8uZW5hYmxlVXRmOFZhbGlkYXRpb24gPz8gcGFyZW50T3B0aW9ucz8uZW5hYmxlVXRmOFZhbGlkYXRpb24gPz8gdHJ1ZVxuICAgIH07XG59XG5leHBvcnRzLnJlc29sdmVCU09OT3B0aW9ucyA9IHJlc29sdmVCU09OT3B0aW9ucztcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWJzb24uanMubWFwIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwicmVzb2x2ZUJTT05PcHRpb25zIiwicGx1Y2tCU09OU2VyaWFsaXplT3B0aW9ucyIsIlVVSUQiLCJUaW1lc3RhbXAiLCJzZXJpYWxpemUiLCJPYmplY3RJZCIsIk1pbktleSIsIk1heEtleSIsIkxvbmciLCJJbnQzMiIsIkRvdWJsZSIsImRlc2VyaWFsaXplIiwiRGVjaW1hbDEyOCIsIkRCUmVmIiwiQ29kZSIsImNhbGN1bGF0ZU9iamVjdFNpemUiLCJCU09OVHlwZSIsIkJTT05TeW1ib2wiLCJCU09OUmVnRXhwIiwiQlNPTiIsIkJpbmFyeSIsImJzb25fMSIsInJlcXVpcmUiLCJlbnVtZXJhYmxlIiwiZ2V0Iiwib3B0aW9ucyIsImZpZWxkc0FzUmF3IiwidXNlQmlnSW50NjQiLCJwcm9tb3RlVmFsdWVzIiwicHJvbW90ZUJ1ZmZlcnMiLCJwcm9tb3RlTG9uZ3MiLCJzZXJpYWxpemVGdW5jdGlvbnMiLCJpZ25vcmVVbmRlZmluZWQiLCJic29uUmVnRXhwIiwicmF3IiwiZW5hYmxlVXRmOFZhbGlkYXRpb24iLCJwYXJlbnQiLCJwYXJlbnRPcHRpb25zIiwiYnNvbk9wdGlvbnMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongodb/lib/bson.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongodb/lib/bulk/common.js":
/*!*************************************************!*\
  !*** ./node_modules/mongodb/lib/bulk/common.js ***!
  \*************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.BulkOperationBase = exports.FindOperators = exports.MongoBulkWriteError = exports.mergeBatchResults = exports.WriteError = exports.WriteConcernError = exports.BulkWriteResult = exports.Batch = exports.BatchType = void 0;\nconst util_1 = __webpack_require__(/*! util */ \"util\");\nconst bson_1 = __webpack_require__(/*! ../bson */ \"(ssr)/./node_modules/mongodb/lib/bson.js\");\nconst error_1 = __webpack_require__(/*! ../error */ \"(ssr)/./node_modules/mongodb/lib/error.js\");\nconst delete_1 = __webpack_require__(/*! ../operations/delete */ \"(ssr)/./node_modules/mongodb/lib/operations/delete.js\");\nconst execute_operation_1 = __webpack_require__(/*! ../operations/execute_operation */ \"(ssr)/./node_modules/mongodb/lib/operations/execute_operation.js\");\nconst insert_1 = __webpack_require__(/*! ../operations/insert */ \"(ssr)/./node_modules/mongodb/lib/operations/insert.js\");\nconst operation_1 = __webpack_require__(/*! ../operations/operation */ \"(ssr)/./node_modules/mongodb/lib/operations/operation.js\");\nconst update_1 = __webpack_require__(/*! ../operations/update */ \"(ssr)/./node_modules/mongodb/lib/operations/update.js\");\nconst utils_1 = __webpack_require__(/*! ../utils */ \"(ssr)/./node_modules/mongodb/lib/utils.js\");\nconst write_concern_1 = __webpack_require__(/*! ../write_concern */ \"(ssr)/./node_modules/mongodb/lib/write_concern.js\");\n/** @internal */ const kServerError = Symbol(\"serverError\");\n/** @public */ exports.BatchType = Object.freeze({\n    INSERT: 1,\n    UPDATE: 2,\n    DELETE: 3\n});\n/**\n * Keeps the state of a unordered batch so we can rewrite the results\n * correctly after command execution\n *\n * @public\n */ class Batch {\n    constructor(batchType, originalZeroIndex){\n        this.originalZeroIndex = originalZeroIndex;\n        this.currentIndex = 0;\n        this.originalIndexes = [];\n        this.batchType = batchType;\n        this.operations = [];\n        this.size = 0;\n        this.sizeBytes = 0;\n    }\n}\nexports.Batch = Batch;\n/**\n * @public\n * The result of a bulk write.\n */ class BulkWriteResult {\n    static generateIdMap(ids) {\n        const idMap = {};\n        for (const doc of ids){\n            idMap[doc.index] = doc._id;\n        }\n        return idMap;\n    }\n    /**\n     * Create a new BulkWriteResult instance\n     * @internal\n     */ constructor(bulkResult, isOrdered){\n        this.result = bulkResult;\n        this.insertedCount = this.result.nInserted ?? 0;\n        this.matchedCount = this.result.nMatched ?? 0;\n        this.modifiedCount = this.result.nModified ?? 0;\n        this.deletedCount = this.result.nRemoved ?? 0;\n        this.upsertedCount = this.result.upserted.length ?? 0;\n        this.upsertedIds = BulkWriteResult.generateIdMap(this.result.upserted);\n        this.insertedIds = BulkWriteResult.generateIdMap(this.getSuccessfullyInsertedIds(bulkResult, isOrdered));\n        Object.defineProperty(this, \"result\", {\n            value: this.result,\n            enumerable: false\n        });\n    }\n    /** Evaluates to true if the bulk operation correctly executes */ get ok() {\n        return this.result.ok;\n    }\n    /**\n     * Returns document_ids that were actually inserted\n     * @internal\n     */ getSuccessfullyInsertedIds(bulkResult, isOrdered) {\n        if (bulkResult.writeErrors.length === 0) return bulkResult.insertedIds;\n        if (isOrdered) {\n            return bulkResult.insertedIds.slice(0, bulkResult.writeErrors[0].index);\n        }\n        return bulkResult.insertedIds.filter(({ index })=>!bulkResult.writeErrors.some((writeError)=>index === writeError.index));\n    }\n    /** Returns the upserted id at the given index */ getUpsertedIdAt(index) {\n        return this.result.upserted[index];\n    }\n    /** Returns raw internal result */ getRawResponse() {\n        return this.result;\n    }\n    /** Returns true if the bulk operation contains a write error */ hasWriteErrors() {\n        return this.result.writeErrors.length > 0;\n    }\n    /** Returns the number of write errors off the bulk operation */ getWriteErrorCount() {\n        return this.result.writeErrors.length;\n    }\n    /** Returns a specific write error object */ getWriteErrorAt(index) {\n        return index < this.result.writeErrors.length ? this.result.writeErrors[index] : undefined;\n    }\n    /** Retrieve all write errors */ getWriteErrors() {\n        return this.result.writeErrors;\n    }\n    /** Retrieve the write concern error if one exists */ getWriteConcernError() {\n        if (this.result.writeConcernErrors.length === 0) {\n            return;\n        } else if (this.result.writeConcernErrors.length === 1) {\n            // Return the error\n            return this.result.writeConcernErrors[0];\n        } else {\n            // Combine the errors\n            let errmsg = \"\";\n            for(let i = 0; i < this.result.writeConcernErrors.length; i++){\n                const err = this.result.writeConcernErrors[i];\n                errmsg = errmsg + err.errmsg;\n                // TODO: Something better\n                if (i === 0) errmsg = errmsg + \" and \";\n            }\n            return new WriteConcernError({\n                errmsg,\n                code: error_1.MONGODB_ERROR_CODES.WriteConcernFailed\n            });\n        }\n    }\n    toString() {\n        return `BulkWriteResult(${this.result})`;\n    }\n    isOk() {\n        return this.result.ok === 1;\n    }\n}\nexports.BulkWriteResult = BulkWriteResult;\n/**\n * An error representing a failure by the server to apply the requested write concern to the bulk operation.\n * @public\n * @category Error\n */ class WriteConcernError {\n    constructor(error){\n        this[kServerError] = error;\n    }\n    /** Write concern error code. */ get code() {\n        return this[kServerError].code;\n    }\n    /** Write concern error message. */ get errmsg() {\n        return this[kServerError].errmsg;\n    }\n    /** Write concern error info. */ get errInfo() {\n        return this[kServerError].errInfo;\n    }\n    toJSON() {\n        return this[kServerError];\n    }\n    toString() {\n        return `WriteConcernError(${this.errmsg})`;\n    }\n}\nexports.WriteConcernError = WriteConcernError;\n/**\n * An error that occurred during a BulkWrite on the server.\n * @public\n * @category Error\n */ class WriteError {\n    constructor(err){\n        this.err = err;\n    }\n    /** WriteError code. */ get code() {\n        return this.err.code;\n    }\n    /** WriteError original bulk operation index. */ get index() {\n        return this.err.index;\n    }\n    /** WriteError message. */ get errmsg() {\n        return this.err.errmsg;\n    }\n    /** WriteError details. */ get errInfo() {\n        return this.err.errInfo;\n    }\n    /** Returns the underlying operation that caused the error */ getOperation() {\n        return this.err.op;\n    }\n    toJSON() {\n        return {\n            code: this.err.code,\n            index: this.err.index,\n            errmsg: this.err.errmsg,\n            op: this.err.op\n        };\n    }\n    toString() {\n        return `WriteError(${JSON.stringify(this.toJSON())})`;\n    }\n}\nexports.WriteError = WriteError;\n/** Merges results into shared data structure */ function mergeBatchResults(batch, bulkResult, err, result) {\n    // If we have an error set the result to be the err object\n    if (err) {\n        result = err;\n    } else if (result && result.result) {\n        result = result.result;\n    }\n    if (result == null) {\n        return;\n    }\n    // Do we have a top level error stop processing and return\n    if (result.ok === 0 && bulkResult.ok === 1) {\n        bulkResult.ok = 0;\n        const writeError = {\n            index: 0,\n            code: result.code || 0,\n            errmsg: result.message,\n            errInfo: result.errInfo,\n            op: batch.operations[0]\n        };\n        bulkResult.writeErrors.push(new WriteError(writeError));\n        return;\n    } else if (result.ok === 0 && bulkResult.ok === 0) {\n        return;\n    }\n    // If we have an insert Batch type\n    if (isInsertBatch(batch) && result.n) {\n        bulkResult.nInserted = bulkResult.nInserted + result.n;\n    }\n    // If we have an insert Batch type\n    if (isDeleteBatch(batch) && result.n) {\n        bulkResult.nRemoved = bulkResult.nRemoved + result.n;\n    }\n    let nUpserted = 0;\n    // We have an array of upserted values, we need to rewrite the indexes\n    if (Array.isArray(result.upserted)) {\n        nUpserted = result.upserted.length;\n        for(let i = 0; i < result.upserted.length; i++){\n            bulkResult.upserted.push({\n                index: result.upserted[i].index + batch.originalZeroIndex,\n                _id: result.upserted[i]._id\n            });\n        }\n    } else if (result.upserted) {\n        nUpserted = 1;\n        bulkResult.upserted.push({\n            index: batch.originalZeroIndex,\n            _id: result.upserted\n        });\n    }\n    // If we have an update Batch type\n    if (isUpdateBatch(batch) && result.n) {\n        const nModified = result.nModified;\n        bulkResult.nUpserted = bulkResult.nUpserted + nUpserted;\n        bulkResult.nMatched = bulkResult.nMatched + (result.n - nUpserted);\n        if (typeof nModified === \"number\") {\n            bulkResult.nModified = bulkResult.nModified + nModified;\n        } else {\n            bulkResult.nModified = 0;\n        }\n    }\n    if (Array.isArray(result.writeErrors)) {\n        for(let i = 0; i < result.writeErrors.length; i++){\n            const writeError = {\n                index: batch.originalIndexes[result.writeErrors[i].index],\n                code: result.writeErrors[i].code,\n                errmsg: result.writeErrors[i].errmsg,\n                errInfo: result.writeErrors[i].errInfo,\n                op: batch.operations[result.writeErrors[i].index]\n            };\n            bulkResult.writeErrors.push(new WriteError(writeError));\n        }\n    }\n    if (result.writeConcernError) {\n        bulkResult.writeConcernErrors.push(new WriteConcernError(result.writeConcernError));\n    }\n}\nexports.mergeBatchResults = mergeBatchResults;\nfunction executeCommands(bulkOperation, options, callback) {\n    if (bulkOperation.s.batches.length === 0) {\n        return callback(undefined, new BulkWriteResult(bulkOperation.s.bulkResult, bulkOperation.isOrdered));\n    }\n    const batch = bulkOperation.s.batches.shift();\n    function resultHandler(err, result) {\n        // Error is a driver related error not a bulk op error, return early\n        if (err && \"message\" in err && !(err instanceof error_1.MongoWriteConcernError)) {\n            return callback(new MongoBulkWriteError(err, new BulkWriteResult(bulkOperation.s.bulkResult, bulkOperation.isOrdered)));\n        }\n        if (err instanceof error_1.MongoWriteConcernError) {\n            return handleMongoWriteConcernError(batch, bulkOperation.s.bulkResult, bulkOperation.isOrdered, err, callback);\n        }\n        // Merge the results together\n        mergeBatchResults(batch, bulkOperation.s.bulkResult, err, result);\n        const writeResult = new BulkWriteResult(bulkOperation.s.bulkResult, bulkOperation.isOrdered);\n        if (bulkOperation.handleWriteError(callback, writeResult)) return;\n        // Execute the next command in line\n        executeCommands(bulkOperation, options, callback);\n    }\n    const finalOptions = (0, utils_1.resolveOptions)(bulkOperation, {\n        ...options,\n        ordered: bulkOperation.isOrdered\n    });\n    if (finalOptions.bypassDocumentValidation !== true) {\n        delete finalOptions.bypassDocumentValidation;\n    }\n    // Set an operationIf if provided\n    if (bulkOperation.operationId) {\n        resultHandler.operationId = bulkOperation.operationId;\n    }\n    // Is the bypassDocumentValidation options specific\n    if (bulkOperation.s.bypassDocumentValidation === true) {\n        finalOptions.bypassDocumentValidation = true;\n    }\n    // Is the checkKeys option disabled\n    if (bulkOperation.s.checkKeys === false) {\n        finalOptions.checkKeys = false;\n    }\n    if (finalOptions.retryWrites) {\n        if (isUpdateBatch(batch)) {\n            finalOptions.retryWrites = finalOptions.retryWrites && !batch.operations.some((op)=>op.multi);\n        }\n        if (isDeleteBatch(batch)) {\n            finalOptions.retryWrites = finalOptions.retryWrites && !batch.operations.some((op)=>op.limit === 0);\n        }\n    }\n    try {\n        if (isInsertBatch(batch)) {\n            (0, execute_operation_1.executeOperation)(bulkOperation.s.collection.client, new insert_1.InsertOperation(bulkOperation.s.namespace, batch.operations, finalOptions), resultHandler);\n        } else if (isUpdateBatch(batch)) {\n            (0, execute_operation_1.executeOperation)(bulkOperation.s.collection.client, new update_1.UpdateOperation(bulkOperation.s.namespace, batch.operations, finalOptions), resultHandler);\n        } else if (isDeleteBatch(batch)) {\n            (0, execute_operation_1.executeOperation)(bulkOperation.s.collection.client, new delete_1.DeleteOperation(bulkOperation.s.namespace, batch.operations, finalOptions), resultHandler);\n        }\n    } catch (err) {\n        // Force top level error\n        err.ok = 0;\n        // Merge top level error and return\n        mergeBatchResults(batch, bulkOperation.s.bulkResult, err, undefined);\n        callback();\n    }\n}\nfunction handleMongoWriteConcernError(batch, bulkResult, isOrdered, err, callback) {\n    mergeBatchResults(batch, bulkResult, undefined, err.result);\n    callback(new MongoBulkWriteError({\n        message: err.result?.writeConcernError.errmsg,\n        code: err.result?.writeConcernError.result\n    }, new BulkWriteResult(bulkResult, isOrdered)));\n}\n/**\n * An error indicating an unsuccessful Bulk Write\n * @public\n * @category Error\n */ class MongoBulkWriteError extends error_1.MongoServerError {\n    /**\n     * **Do not use this constructor!**\n     *\n     * Meant for internal use only.\n     *\n     * @remarks\n     * This class is only meant to be constructed within the driver. This constructor is\n     * not subject to semantic versioning compatibility guarantees and may change at any time.\n     *\n     * @public\n     **/ constructor(error, result){\n        super(error);\n        this.writeErrors = [];\n        if (error instanceof WriteConcernError) this.err = error;\n        else if (!(error instanceof Error)) {\n            this.message = error.message;\n            this.code = error.code;\n            this.writeErrors = error.writeErrors ?? [];\n        }\n        this.result = result;\n        Object.assign(this, error);\n    }\n    get name() {\n        return \"MongoBulkWriteError\";\n    }\n    /** Number of documents inserted. */ get insertedCount() {\n        return this.result.insertedCount;\n    }\n    /** Number of documents matched for update. */ get matchedCount() {\n        return this.result.matchedCount;\n    }\n    /** Number of documents modified. */ get modifiedCount() {\n        return this.result.modifiedCount;\n    }\n    /** Number of documents deleted. */ get deletedCount() {\n        return this.result.deletedCount;\n    }\n    /** Number of documents upserted. */ get upsertedCount() {\n        return this.result.upsertedCount;\n    }\n    /** Inserted document generated Id's, hash key is the index of the originating operation */ get insertedIds() {\n        return this.result.insertedIds;\n    }\n    /** Upserted document generated Id's, hash key is the index of the originating operation */ get upsertedIds() {\n        return this.result.upsertedIds;\n    }\n}\nexports.MongoBulkWriteError = MongoBulkWriteError;\n/**\n * A builder object that is returned from {@link BulkOperationBase#find}.\n * Is used to build a write operation that involves a query filter.\n *\n * @public\n */ class FindOperators {\n    /**\n     * Creates a new FindOperators object.\n     * @internal\n     */ constructor(bulkOperation){\n        this.bulkOperation = bulkOperation;\n    }\n    /** Add a multiple update operation to the bulk operation */ update(updateDocument) {\n        const currentOp = buildCurrentOp(this.bulkOperation);\n        return this.bulkOperation.addToOperationsList(exports.BatchType.UPDATE, (0, update_1.makeUpdateStatement)(currentOp.selector, updateDocument, {\n            ...currentOp,\n            multi: true\n        }));\n    }\n    /** Add a single update operation to the bulk operation */ updateOne(updateDocument) {\n        if (!(0, utils_1.hasAtomicOperators)(updateDocument)) {\n            throw new error_1.MongoInvalidArgumentError(\"Update document requires atomic operators\");\n        }\n        const currentOp = buildCurrentOp(this.bulkOperation);\n        return this.bulkOperation.addToOperationsList(exports.BatchType.UPDATE, (0, update_1.makeUpdateStatement)(currentOp.selector, updateDocument, {\n            ...currentOp,\n            multi: false\n        }));\n    }\n    /** Add a replace one operation to the bulk operation */ replaceOne(replacement) {\n        if ((0, utils_1.hasAtomicOperators)(replacement)) {\n            throw new error_1.MongoInvalidArgumentError(\"Replacement document must not use atomic operators\");\n        }\n        const currentOp = buildCurrentOp(this.bulkOperation);\n        return this.bulkOperation.addToOperationsList(exports.BatchType.UPDATE, (0, update_1.makeUpdateStatement)(currentOp.selector, replacement, {\n            ...currentOp,\n            multi: false\n        }));\n    }\n    /** Add a delete one operation to the bulk operation */ deleteOne() {\n        const currentOp = buildCurrentOp(this.bulkOperation);\n        return this.bulkOperation.addToOperationsList(exports.BatchType.DELETE, (0, delete_1.makeDeleteStatement)(currentOp.selector, {\n            ...currentOp,\n            limit: 1\n        }));\n    }\n    /** Add a delete many operation to the bulk operation */ delete() {\n        const currentOp = buildCurrentOp(this.bulkOperation);\n        return this.bulkOperation.addToOperationsList(exports.BatchType.DELETE, (0, delete_1.makeDeleteStatement)(currentOp.selector, {\n            ...currentOp,\n            limit: 0\n        }));\n    }\n    /** Upsert modifier for update bulk operation, noting that this operation is an upsert. */ upsert() {\n        if (!this.bulkOperation.s.currentOp) {\n            this.bulkOperation.s.currentOp = {};\n        }\n        this.bulkOperation.s.currentOp.upsert = true;\n        return this;\n    }\n    /** Specifies the collation for the query condition. */ collation(collation) {\n        if (!this.bulkOperation.s.currentOp) {\n            this.bulkOperation.s.currentOp = {};\n        }\n        this.bulkOperation.s.currentOp.collation = collation;\n        return this;\n    }\n    /** Specifies arrayFilters for UpdateOne or UpdateMany bulk operations. */ arrayFilters(arrayFilters) {\n        if (!this.bulkOperation.s.currentOp) {\n            this.bulkOperation.s.currentOp = {};\n        }\n        this.bulkOperation.s.currentOp.arrayFilters = arrayFilters;\n        return this;\n    }\n    /** Specifies hint for the bulk operation. */ hint(hint) {\n        if (!this.bulkOperation.s.currentOp) {\n            this.bulkOperation.s.currentOp = {};\n        }\n        this.bulkOperation.s.currentOp.hint = hint;\n        return this;\n    }\n}\nexports.FindOperators = FindOperators;\nconst executeCommandsAsync = (0, util_1.promisify)(executeCommands);\n/**\n * TODO(NODE-4063)\n * BulkWrites merge complexity is implemented in executeCommands\n * This provides a vehicle to treat bulkOperations like any other operation (hence \"shim\")\n * We would like this logic to simply live inside the BulkWriteOperation class\n * @internal\n */ class BulkWriteShimOperation extends operation_1.AbstractOperation {\n    constructor(bulkOperation, options){\n        super(options);\n        this.bulkOperation = bulkOperation;\n    }\n    execute(_server, session) {\n        if (this.options.session == null) {\n            // An implicit session could have been created by 'executeOperation'\n            // So if we stick it on finalOptions here, each bulk operation\n            // will use this same session, it'll be passed in the same way\n            // an explicit session would be\n            this.options.session = session;\n        }\n        return executeCommandsAsync(this.bulkOperation, this.options);\n    }\n}\n/** @public */ class BulkOperationBase {\n    /**\n     * Create a new OrderedBulkOperation or UnorderedBulkOperation instance\n     * @internal\n     */ constructor(collection, options, isOrdered){\n        // determine whether bulkOperation is ordered or unordered\n        this.isOrdered = isOrdered;\n        const topology = (0, utils_1.getTopology)(collection);\n        options = options == null ? {} : options;\n        // TODO Bring from driver information in hello\n        // Get the namespace for the write operations\n        const namespace = collection.s.namespace;\n        // Used to mark operation as executed\n        const executed = false;\n        // Current item\n        const currentOp = undefined;\n        // Set max byte size\n        const hello = topology.lastHello();\n        // If we have autoEncryption on, batch-splitting must be done on 2mb chunks, but single documents\n        // over 2mb are still allowed\n        const usingAutoEncryption = !!(topology.s.options && topology.s.options.autoEncrypter);\n        const maxBsonObjectSize = hello && hello.maxBsonObjectSize ? hello.maxBsonObjectSize : 1024 * 1024 * 16;\n        const maxBatchSizeBytes = usingAutoEncryption ? 1024 * 1024 * 2 : maxBsonObjectSize;\n        const maxWriteBatchSize = hello && hello.maxWriteBatchSize ? hello.maxWriteBatchSize : 1000;\n        // Calculates the largest possible size of an Array key, represented as a BSON string\n        // element. This calculation:\n        //     1 byte for BSON type\n        //     # of bytes = length of (string representation of (maxWriteBatchSize - 1))\n        //   + 1 bytes for null terminator\n        const maxKeySize = (maxWriteBatchSize - 1).toString(10).length + 2;\n        // Final options for retryable writes\n        let finalOptions = Object.assign({}, options);\n        finalOptions = (0, utils_1.applyRetryableWrites)(finalOptions, collection.s.db);\n        // Final results\n        const bulkResult = {\n            ok: 1,\n            writeErrors: [],\n            writeConcernErrors: [],\n            insertedIds: [],\n            nInserted: 0,\n            nUpserted: 0,\n            nMatched: 0,\n            nModified: 0,\n            nRemoved: 0,\n            upserted: []\n        };\n        // Internal state\n        this.s = {\n            // Final result\n            bulkResult,\n            // Current batch state\n            currentBatch: undefined,\n            currentIndex: 0,\n            // ordered specific\n            currentBatchSize: 0,\n            currentBatchSizeBytes: 0,\n            // unordered specific\n            currentInsertBatch: undefined,\n            currentUpdateBatch: undefined,\n            currentRemoveBatch: undefined,\n            batches: [],\n            // Write concern\n            writeConcern: write_concern_1.WriteConcern.fromOptions(options),\n            // Max batch size options\n            maxBsonObjectSize,\n            maxBatchSizeBytes,\n            maxWriteBatchSize,\n            maxKeySize,\n            // Namespace\n            namespace,\n            // Topology\n            topology,\n            // Options\n            options: finalOptions,\n            // BSON options\n            bsonOptions: (0, bson_1.resolveBSONOptions)(options),\n            // Current operation\n            currentOp,\n            // Executed\n            executed,\n            // Collection\n            collection,\n            // Fundamental error\n            err: undefined,\n            // check keys\n            checkKeys: typeof options.checkKeys === \"boolean\" ? options.checkKeys : false\n        };\n        // bypass Validation\n        if (options.bypassDocumentValidation === true) {\n            this.s.bypassDocumentValidation = true;\n        }\n    }\n    /**\n     * Add a single insert document to the bulk operation\n     *\n     * @example\n     * ```ts\n     * const bulkOp = collection.initializeOrderedBulkOp();\n     *\n     * // Adds three inserts to the bulkOp.\n     * bulkOp\n     *   .insert({ a: 1 })\n     *   .insert({ b: 2 })\n     *   .insert({ c: 3 });\n     * await bulkOp.execute();\n     * ```\n     */ insert(document) {\n        if (document._id == null && !shouldForceServerObjectId(this)) {\n            document._id = new bson_1.ObjectId();\n        }\n        return this.addToOperationsList(exports.BatchType.INSERT, document);\n    }\n    /**\n     * Builds a find operation for an update/updateOne/delete/deleteOne/replaceOne.\n     * Returns a builder object used to complete the definition of the operation.\n     *\n     * @example\n     * ```ts\n     * const bulkOp = collection.initializeOrderedBulkOp();\n     *\n     * // Add an updateOne to the bulkOp\n     * bulkOp.find({ a: 1 }).updateOne({ $set: { b: 2 } });\n     *\n     * // Add an updateMany to the bulkOp\n     * bulkOp.find({ c: 3 }).update({ $set: { d: 4 } });\n     *\n     * // Add an upsert\n     * bulkOp.find({ e: 5 }).upsert().updateOne({ $set: { f: 6 } });\n     *\n     * // Add a deletion\n     * bulkOp.find({ g: 7 }).deleteOne();\n     *\n     * // Add a multi deletion\n     * bulkOp.find({ h: 8 }).delete();\n     *\n     * // Add a replaceOne\n     * bulkOp.find({ i: 9 }).replaceOne({writeConcern: { j: 10 }});\n     *\n     * // Update using a pipeline (requires Mongodb 4.2 or higher)\n     * bulk.find({ k: 11, y: { $exists: true }, z: { $exists: true } }).updateOne([\n     *   { $set: { total: { $sum: [ '$y', '$z' ] } } }\n     * ]);\n     *\n     * // All of the ops will now be executed\n     * await bulkOp.execute();\n     * ```\n     */ find(selector) {\n        if (!selector) {\n            throw new error_1.MongoInvalidArgumentError(\"Bulk find operation must specify a selector\");\n        }\n        // Save a current selector\n        this.s.currentOp = {\n            selector: selector\n        };\n        return new FindOperators(this);\n    }\n    /** Specifies a raw operation to perform in the bulk write. */ raw(op) {\n        if (op == null || typeof op !== \"object\") {\n            throw new error_1.MongoInvalidArgumentError(\"Operation must be an object with an operation key\");\n        }\n        if (\"insertOne\" in op) {\n            const forceServerObjectId = shouldForceServerObjectId(this);\n            if (op.insertOne && op.insertOne.document == null) {\n                // NOTE: provided for legacy support, but this is a malformed operation\n                if (forceServerObjectId !== true && op.insertOne._id == null) {\n                    op.insertOne._id = new bson_1.ObjectId();\n                }\n                return this.addToOperationsList(exports.BatchType.INSERT, op.insertOne);\n            }\n            if (forceServerObjectId !== true && op.insertOne.document._id == null) {\n                op.insertOne.document._id = new bson_1.ObjectId();\n            }\n            return this.addToOperationsList(exports.BatchType.INSERT, op.insertOne.document);\n        }\n        if (\"replaceOne\" in op || \"updateOne\" in op || \"updateMany\" in op) {\n            if (\"replaceOne\" in op) {\n                if (\"q\" in op.replaceOne) {\n                    throw new error_1.MongoInvalidArgumentError(\"Raw operations are not allowed\");\n                }\n                const updateStatement = (0, update_1.makeUpdateStatement)(op.replaceOne.filter, op.replaceOne.replacement, {\n                    ...op.replaceOne,\n                    multi: false\n                });\n                if ((0, utils_1.hasAtomicOperators)(updateStatement.u)) {\n                    throw new error_1.MongoInvalidArgumentError(\"Replacement document must not use atomic operators\");\n                }\n                return this.addToOperationsList(exports.BatchType.UPDATE, updateStatement);\n            }\n            if (\"updateOne\" in op) {\n                if (\"q\" in op.updateOne) {\n                    throw new error_1.MongoInvalidArgumentError(\"Raw operations are not allowed\");\n                }\n                const updateStatement = (0, update_1.makeUpdateStatement)(op.updateOne.filter, op.updateOne.update, {\n                    ...op.updateOne,\n                    multi: false\n                });\n                if (!(0, utils_1.hasAtomicOperators)(updateStatement.u)) {\n                    throw new error_1.MongoInvalidArgumentError(\"Update document requires atomic operators\");\n                }\n                return this.addToOperationsList(exports.BatchType.UPDATE, updateStatement);\n            }\n            if (\"updateMany\" in op) {\n                if (\"q\" in op.updateMany) {\n                    throw new error_1.MongoInvalidArgumentError(\"Raw operations are not allowed\");\n                }\n                const updateStatement = (0, update_1.makeUpdateStatement)(op.updateMany.filter, op.updateMany.update, {\n                    ...op.updateMany,\n                    multi: true\n                });\n                if (!(0, utils_1.hasAtomicOperators)(updateStatement.u)) {\n                    throw new error_1.MongoInvalidArgumentError(\"Update document requires atomic operators\");\n                }\n                return this.addToOperationsList(exports.BatchType.UPDATE, updateStatement);\n            }\n        }\n        if (\"deleteOne\" in op) {\n            if (\"q\" in op.deleteOne) {\n                throw new error_1.MongoInvalidArgumentError(\"Raw operations are not allowed\");\n            }\n            return this.addToOperationsList(exports.BatchType.DELETE, (0, delete_1.makeDeleteStatement)(op.deleteOne.filter, {\n                ...op.deleteOne,\n                limit: 1\n            }));\n        }\n        if (\"deleteMany\" in op) {\n            if (\"q\" in op.deleteMany) {\n                throw new error_1.MongoInvalidArgumentError(\"Raw operations are not allowed\");\n            }\n            return this.addToOperationsList(exports.BatchType.DELETE, (0, delete_1.makeDeleteStatement)(op.deleteMany.filter, {\n                ...op.deleteMany,\n                limit: 0\n            }));\n        }\n        // otherwise an unknown operation was provided\n        throw new error_1.MongoInvalidArgumentError(\"bulkWrite only supports insertOne, updateOne, updateMany, deleteOne, deleteMany\");\n    }\n    get bsonOptions() {\n        return this.s.bsonOptions;\n    }\n    get writeConcern() {\n        return this.s.writeConcern;\n    }\n    get batches() {\n        const batches = [\n            ...this.s.batches\n        ];\n        if (this.isOrdered) {\n            if (this.s.currentBatch) batches.push(this.s.currentBatch);\n        } else {\n            if (this.s.currentInsertBatch) batches.push(this.s.currentInsertBatch);\n            if (this.s.currentUpdateBatch) batches.push(this.s.currentUpdateBatch);\n            if (this.s.currentRemoveBatch) batches.push(this.s.currentRemoveBatch);\n        }\n        return batches;\n    }\n    async execute(options = {}) {\n        if (this.s.executed) {\n            throw new error_1.MongoBatchReExecutionError();\n        }\n        const writeConcern = write_concern_1.WriteConcern.fromOptions(options);\n        if (writeConcern) {\n            this.s.writeConcern = writeConcern;\n        }\n        // If we have current batch\n        if (this.isOrdered) {\n            if (this.s.currentBatch) this.s.batches.push(this.s.currentBatch);\n        } else {\n            if (this.s.currentInsertBatch) this.s.batches.push(this.s.currentInsertBatch);\n            if (this.s.currentUpdateBatch) this.s.batches.push(this.s.currentUpdateBatch);\n            if (this.s.currentRemoveBatch) this.s.batches.push(this.s.currentRemoveBatch);\n        }\n        // If we have no operations in the bulk raise an error\n        if (this.s.batches.length === 0) {\n            throw new error_1.MongoInvalidArgumentError(\"Invalid BulkOperation, Batch cannot be empty\");\n        }\n        this.s.executed = true;\n        const finalOptions = {\n            ...this.s.options,\n            ...options\n        };\n        const operation = new BulkWriteShimOperation(this, finalOptions);\n        return (0, execute_operation_1.executeOperation)(this.s.collection.client, operation);\n    }\n    /**\n     * Handles the write error before executing commands\n     * @internal\n     */ handleWriteError(callback, writeResult) {\n        if (this.s.bulkResult.writeErrors.length > 0) {\n            const msg = this.s.bulkResult.writeErrors[0].errmsg ? this.s.bulkResult.writeErrors[0].errmsg : \"write operation failed\";\n            callback(new MongoBulkWriteError({\n                message: msg,\n                code: this.s.bulkResult.writeErrors[0].code,\n                writeErrors: this.s.bulkResult.writeErrors\n            }, writeResult));\n            return true;\n        }\n        const writeConcernError = writeResult.getWriteConcernError();\n        if (writeConcernError) {\n            callback(new MongoBulkWriteError(writeConcernError, writeResult));\n            return true;\n        }\n        return false;\n    }\n}\nexports.BulkOperationBase = BulkOperationBase;\nObject.defineProperty(BulkOperationBase.prototype, \"length\", {\n    enumerable: true,\n    get () {\n        return this.s.currentIndex;\n    }\n});\nfunction shouldForceServerObjectId(bulkOperation) {\n    if (typeof bulkOperation.s.options.forceServerObjectId === \"boolean\") {\n        return bulkOperation.s.options.forceServerObjectId;\n    }\n    if (typeof bulkOperation.s.collection.s.db.options?.forceServerObjectId === \"boolean\") {\n        return bulkOperation.s.collection.s.db.options?.forceServerObjectId;\n    }\n    return false;\n}\nfunction isInsertBatch(batch) {\n    return batch.batchType === exports.BatchType.INSERT;\n}\nfunction isUpdateBatch(batch) {\n    return batch.batchType === exports.BatchType.UPDATE;\n}\nfunction isDeleteBatch(batch) {\n    return batch.batchType === exports.BatchType.DELETE;\n}\nfunction buildCurrentOp(bulkOp) {\n    let { currentOp } = bulkOp.s;\n    bulkOp.s.currentOp = undefined;\n    if (!currentOp) currentOp = {};\n    return currentOp;\n} //# sourceMappingURL=common.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongodb/lib/bulk/common.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongodb/lib/bulk/ordered.js":
/*!**************************************************!*\
  !*** ./node_modules/mongodb/lib/bulk/ordered.js ***!
  \**************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.OrderedBulkOperation = void 0;\nconst BSON = __webpack_require__(/*! ../bson */ \"(ssr)/./node_modules/mongodb/lib/bson.js\");\nconst error_1 = __webpack_require__(/*! ../error */ \"(ssr)/./node_modules/mongodb/lib/error.js\");\nconst common_1 = __webpack_require__(/*! ./common */ \"(ssr)/./node_modules/mongodb/lib/bulk/common.js\");\n/** @public */ class OrderedBulkOperation extends common_1.BulkOperationBase {\n    /** @internal */ constructor(collection, options){\n        super(collection, options, true);\n    }\n    addToOperationsList(batchType, document) {\n        // Get the bsonSize\n        const bsonSize = BSON.calculateObjectSize(document, {\n            checkKeys: false,\n            // Since we don't know what the user selected for BSON options here,\n            // err on the safe side, and check the size with ignoreUndefined: false.\n            ignoreUndefined: false\n        });\n        // Throw error if the doc is bigger than the max BSON size\n        if (bsonSize >= this.s.maxBsonObjectSize) // TODO(NODE-3483): Change this to MongoBSONError\n        throw new error_1.MongoInvalidArgumentError(`Document is larger than the maximum size ${this.s.maxBsonObjectSize}`);\n        // Create a new batch object if we don't have a current one\n        if (this.s.currentBatch == null) {\n            this.s.currentBatch = new common_1.Batch(batchType, this.s.currentIndex);\n        }\n        const maxKeySize = this.s.maxKeySize;\n        // Check if we need to create a new batch\n        if (// New batch if we exceed the max batch op size\n        this.s.currentBatchSize + 1 >= this.s.maxWriteBatchSize || // New batch if we exceed the maxBatchSizeBytes. Only matters if batch already has a doc,\n        // since we can't sent an empty batch\n        this.s.currentBatchSize > 0 && this.s.currentBatchSizeBytes + maxKeySize + bsonSize >= this.s.maxBatchSizeBytes || // New batch if the new op does not have the same op type as the current batch\n        this.s.currentBatch.batchType !== batchType) {\n            // Save the batch to the execution stack\n            this.s.batches.push(this.s.currentBatch);\n            // Create a new batch\n            this.s.currentBatch = new common_1.Batch(batchType, this.s.currentIndex);\n            // Reset the current size trackers\n            this.s.currentBatchSize = 0;\n            this.s.currentBatchSizeBytes = 0;\n        }\n        if (batchType === common_1.BatchType.INSERT) {\n            this.s.bulkResult.insertedIds.push({\n                index: this.s.currentIndex,\n                _id: document._id\n            });\n        }\n        // We have an array of documents\n        if (Array.isArray(document)) {\n            throw new error_1.MongoInvalidArgumentError(\"Operation passed in cannot be an Array\");\n        }\n        this.s.currentBatch.originalIndexes.push(this.s.currentIndex);\n        this.s.currentBatch.operations.push(document);\n        this.s.currentBatchSize += 1;\n        this.s.currentBatchSizeBytes += maxKeySize + bsonSize;\n        this.s.currentIndex += 1;\n        return this;\n    }\n}\nexports.OrderedBulkOperation = OrderedBulkOperation; //# sourceMappingURL=ordered.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongodb/lib/bulk/ordered.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongodb/lib/bulk/unordered.js":
/*!****************************************************!*\
  !*** ./node_modules/mongodb/lib/bulk/unordered.js ***!
  \****************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.UnorderedBulkOperation = void 0;\nconst BSON = __webpack_require__(/*! ../bson */ \"(ssr)/./node_modules/mongodb/lib/bson.js\");\nconst error_1 = __webpack_require__(/*! ../error */ \"(ssr)/./node_modules/mongodb/lib/error.js\");\nconst common_1 = __webpack_require__(/*! ./common */ \"(ssr)/./node_modules/mongodb/lib/bulk/common.js\");\n/** @public */ class UnorderedBulkOperation extends common_1.BulkOperationBase {\n    /** @internal */ constructor(collection, options){\n        super(collection, options, false);\n    }\n    handleWriteError(callback, writeResult) {\n        if (this.s.batches.length) {\n            return false;\n        }\n        return super.handleWriteError(callback, writeResult);\n    }\n    addToOperationsList(batchType, document) {\n        // Get the bsonSize\n        const bsonSize = BSON.calculateObjectSize(document, {\n            checkKeys: false,\n            // Since we don't know what the user selected for BSON options here,\n            // err on the safe side, and check the size with ignoreUndefined: false.\n            ignoreUndefined: false\n        });\n        // Throw error if the doc is bigger than the max BSON size\n        if (bsonSize >= this.s.maxBsonObjectSize) {\n            // TODO(NODE-3483): Change this to MongoBSONError\n            throw new error_1.MongoInvalidArgumentError(`Document is larger than the maximum size ${this.s.maxBsonObjectSize}`);\n        }\n        // Holds the current batch\n        this.s.currentBatch = undefined;\n        // Get the right type of batch\n        if (batchType === common_1.BatchType.INSERT) {\n            this.s.currentBatch = this.s.currentInsertBatch;\n        } else if (batchType === common_1.BatchType.UPDATE) {\n            this.s.currentBatch = this.s.currentUpdateBatch;\n        } else if (batchType === common_1.BatchType.DELETE) {\n            this.s.currentBatch = this.s.currentRemoveBatch;\n        }\n        const maxKeySize = this.s.maxKeySize;\n        // Create a new batch object if we don't have a current one\n        if (this.s.currentBatch == null) {\n            this.s.currentBatch = new common_1.Batch(batchType, this.s.currentIndex);\n        }\n        // Check if we need to create a new batch\n        if (// New batch if we exceed the max batch op size\n        this.s.currentBatch.size + 1 >= this.s.maxWriteBatchSize || // New batch if we exceed the maxBatchSizeBytes. Only matters if batch already has a doc,\n        // since we can't sent an empty batch\n        this.s.currentBatch.size > 0 && this.s.currentBatch.sizeBytes + maxKeySize + bsonSize >= this.s.maxBatchSizeBytes || // New batch if the new op does not have the same op type as the current batch\n        this.s.currentBatch.batchType !== batchType) {\n            // Save the batch to the execution stack\n            this.s.batches.push(this.s.currentBatch);\n            // Create a new batch\n            this.s.currentBatch = new common_1.Batch(batchType, this.s.currentIndex);\n        }\n        // We have an array of documents\n        if (Array.isArray(document)) {\n            throw new error_1.MongoInvalidArgumentError(\"Operation passed in cannot be an Array\");\n        }\n        this.s.currentBatch.operations.push(document);\n        this.s.currentBatch.originalIndexes.push(this.s.currentIndex);\n        this.s.currentIndex = this.s.currentIndex + 1;\n        // Save back the current Batch to the right type\n        if (batchType === common_1.BatchType.INSERT) {\n            this.s.currentInsertBatch = this.s.currentBatch;\n            this.s.bulkResult.insertedIds.push({\n                index: this.s.bulkResult.insertedIds.length,\n                _id: document._id\n            });\n        } else if (batchType === common_1.BatchType.UPDATE) {\n            this.s.currentUpdateBatch = this.s.currentBatch;\n        } else if (batchType === common_1.BatchType.DELETE) {\n            this.s.currentRemoveBatch = this.s.currentBatch;\n        }\n        // Update current batch size\n        this.s.currentBatch.size += 1;\n        this.s.currentBatch.sizeBytes += maxKeySize + bsonSize;\n        return this;\n    }\n}\nexports.UnorderedBulkOperation = UnorderedBulkOperation; //# sourceMappingURL=unordered.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongodb/lib/bulk/unordered.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongodb/lib/change_stream.js":
/*!***************************************************!*\
  !*** ./node_modules/mongodb/lib/change_stream.js ***!
  \***************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.ChangeStream = void 0;\nconst collection_1 = __webpack_require__(/*! ./collection */ \"(ssr)/./node_modules/mongodb/lib/collection.js\");\nconst constants_1 = __webpack_require__(/*! ./constants */ \"(ssr)/./node_modules/mongodb/lib/constants.js\");\nconst change_stream_cursor_1 = __webpack_require__(/*! ./cursor/change_stream_cursor */ \"(ssr)/./node_modules/mongodb/lib/cursor/change_stream_cursor.js\");\nconst db_1 = __webpack_require__(/*! ./db */ \"(ssr)/./node_modules/mongodb/lib/db.js\");\nconst error_1 = __webpack_require__(/*! ./error */ \"(ssr)/./node_modules/mongodb/lib/error.js\");\nconst mongo_client_1 = __webpack_require__(/*! ./mongo_client */ \"(ssr)/./node_modules/mongodb/lib/mongo_client.js\");\nconst mongo_types_1 = __webpack_require__(/*! ./mongo_types */ \"(ssr)/./node_modules/mongodb/lib/mongo_types.js\");\nconst utils_1 = __webpack_require__(/*! ./utils */ \"(ssr)/./node_modules/mongodb/lib/utils.js\");\n/** @internal */ const kCursorStream = Symbol(\"cursorStream\");\n/** @internal */ const kClosed = Symbol(\"closed\");\n/** @internal */ const kMode = Symbol(\"mode\");\nconst CHANGE_STREAM_OPTIONS = [\n    \"resumeAfter\",\n    \"startAfter\",\n    \"startAtOperationTime\",\n    \"fullDocument\",\n    \"fullDocumentBeforeChange\",\n    \"showExpandedEvents\"\n];\nconst CHANGE_DOMAIN_TYPES = {\n    COLLECTION: Symbol(\"Collection\"),\n    DATABASE: Symbol(\"Database\"),\n    CLUSTER: Symbol(\"Cluster\")\n};\nconst CHANGE_STREAM_EVENTS = [\n    constants_1.RESUME_TOKEN_CHANGED,\n    constants_1.END,\n    constants_1.CLOSE\n];\nconst NO_RESUME_TOKEN_ERROR = \"A change stream document has been received that lacks a resume token (_id).\";\nconst CHANGESTREAM_CLOSED_ERROR = \"ChangeStream is closed\";\n/**\n * Creates a new Change Stream instance. Normally created using {@link Collection#watch|Collection.watch()}.\n * @public\n */ class ChangeStream extends mongo_types_1.TypedEventEmitter {\n    /**\n     * @internal\n     *\n     * @param parent - The parent object that created this change stream\n     * @param pipeline - An array of {@link https://www.mongodb.com/docs/manual/reference/operator/aggregation-pipeline/|aggregation pipeline stages} through which to pass change stream documents\n     */ constructor(parent, pipeline = [], options = {}){\n        super();\n        this.pipeline = pipeline;\n        this.options = {\n            ...options\n        };\n        delete this.options.writeConcern;\n        if (parent instanceof collection_1.Collection) {\n            this.type = CHANGE_DOMAIN_TYPES.COLLECTION;\n        } else if (parent instanceof db_1.Db) {\n            this.type = CHANGE_DOMAIN_TYPES.DATABASE;\n        } else if (parent instanceof mongo_client_1.MongoClient) {\n            this.type = CHANGE_DOMAIN_TYPES.CLUSTER;\n        } else {\n            throw new error_1.MongoChangeStreamError(\"Parent provided to ChangeStream constructor must be an instance of Collection, Db, or MongoClient\");\n        }\n        this.parent = parent;\n        this.namespace = parent.s.namespace;\n        if (!this.options.readPreference && parent.readPreference) {\n            this.options.readPreference = parent.readPreference;\n        }\n        // Create contained Change Stream cursor\n        this.cursor = this._createChangeStreamCursor(options);\n        this[kClosed] = false;\n        this[kMode] = false;\n        // Listen for any `change` listeners being added to ChangeStream\n        this.on(\"newListener\", (eventName)=>{\n            if (eventName === \"change\" && this.cursor && this.listenerCount(\"change\") === 0) {\n                this._streamEvents(this.cursor);\n            }\n        });\n        this.on(\"removeListener\", (eventName)=>{\n            if (eventName === \"change\" && this.listenerCount(\"change\") === 0 && this.cursor) {\n                this[kCursorStream]?.removeAllListeners(\"data\");\n            }\n        });\n    }\n    /** @internal */ get cursorStream() {\n        return this[kCursorStream];\n    }\n    /** The cached resume token that is used to resume after the most recently returned change. */ get resumeToken() {\n        return this.cursor?.resumeToken;\n    }\n    /** Check if there is any document still available in the Change Stream */ async hasNext() {\n        this._setIsIterator();\n        // Change streams must resume indefinitely while each resume event succeeds.\n        // This loop continues until either a change event is received or until a resume attempt\n        // fails.\n        // eslint-disable-next-line no-constant-condition\n        while(true){\n            try {\n                const hasNext = await this.cursor.hasNext();\n                return hasNext;\n            } catch (error) {\n                try {\n                    await this._processErrorIteratorMode(error);\n                } catch (error) {\n                    try {\n                        await this.close();\n                    } catch  {\n                    // We are not concerned with errors from close()\n                    }\n                    throw error;\n                }\n            }\n        }\n    }\n    /** Get the next available document from the Change Stream. */ async next() {\n        this._setIsIterator();\n        // Change streams must resume indefinitely while each resume event succeeds.\n        // This loop continues until either a change event is received or until a resume attempt\n        // fails.\n        // eslint-disable-next-line no-constant-condition\n        while(true){\n            try {\n                const change = await this.cursor.next();\n                const processedChange = this._processChange(change ?? null);\n                return processedChange;\n            } catch (error) {\n                try {\n                    await this._processErrorIteratorMode(error);\n                } catch (error) {\n                    try {\n                        await this.close();\n                    } catch  {\n                    // We are not concerned with errors from close()\n                    }\n                    throw error;\n                }\n            }\n        }\n    }\n    /**\n     * Try to get the next available document from the Change Stream's cursor or `null` if an empty batch is returned\n     */ async tryNext() {\n        this._setIsIterator();\n        // Change streams must resume indefinitely while each resume event succeeds.\n        // This loop continues until either a change event is received or until a resume attempt\n        // fails.\n        // eslint-disable-next-line no-constant-condition\n        while(true){\n            try {\n                const change = await this.cursor.tryNext();\n                return change ?? null;\n            } catch (error) {\n                try {\n                    await this._processErrorIteratorMode(error);\n                } catch (error) {\n                    try {\n                        await this.close();\n                    } catch  {\n                    // We are not concerned with errors from close()\n                    }\n                    throw error;\n                }\n            }\n        }\n    }\n    async *[Symbol.asyncIterator]() {\n        if (this.closed) {\n            return;\n        }\n        try {\n            // Change streams run indefinitely as long as errors are resumable\n            // So the only loop breaking condition is if `next()` throws\n            while(true){\n                yield await this.next();\n            }\n        } finally{\n            try {\n                await this.close();\n            } catch  {\n            // we're not concerned with errors from close()\n            }\n        }\n    }\n    /** Is the cursor closed */ get closed() {\n        return this[kClosed] || this.cursor.closed;\n    }\n    /** Close the Change Stream */ async close() {\n        this[kClosed] = true;\n        const cursor = this.cursor;\n        try {\n            await cursor.close();\n        } finally{\n            this._endStream();\n        }\n    }\n    /**\n     * Return a modified Readable stream including a possible transform method.\n     *\n     * NOTE: When using a Stream to process change stream events, the stream will\n     * NOT automatically resume in the case a resumable error is encountered.\n     *\n     * @throws MongoChangeStreamError if the underlying cursor or the change stream is closed\n     */ stream(options) {\n        if (this.closed) {\n            throw new error_1.MongoChangeStreamError(CHANGESTREAM_CLOSED_ERROR);\n        }\n        this.streamOptions = options;\n        return this.cursor.stream(options);\n    }\n    /** @internal */ _setIsEmitter() {\n        if (this[kMode] === \"iterator\") {\n            // TODO(NODE-3485): Replace with MongoChangeStreamModeError\n            throw new error_1.MongoAPIError(\"ChangeStream cannot be used as an EventEmitter after being used as an iterator\");\n        }\n        this[kMode] = \"emitter\";\n    }\n    /** @internal */ _setIsIterator() {\n        if (this[kMode] === \"emitter\") {\n            // TODO(NODE-3485): Replace with MongoChangeStreamModeError\n            throw new error_1.MongoAPIError(\"ChangeStream cannot be used as an iterator after being used as an EventEmitter\");\n        }\n        this[kMode] = \"iterator\";\n    }\n    /**\n     * Create a new change stream cursor based on self's configuration\n     * @internal\n     */ _createChangeStreamCursor(options) {\n        const changeStreamStageOptions = (0, utils_1.filterOptions)(options, CHANGE_STREAM_OPTIONS);\n        if (this.type === CHANGE_DOMAIN_TYPES.CLUSTER) {\n            changeStreamStageOptions.allChangesForCluster = true;\n        }\n        const pipeline = [\n            {\n                $changeStream: changeStreamStageOptions\n            },\n            ...this.pipeline\n        ];\n        const client = this.type === CHANGE_DOMAIN_TYPES.CLUSTER ? this.parent : this.type === CHANGE_DOMAIN_TYPES.DATABASE ? this.parent.client : this.type === CHANGE_DOMAIN_TYPES.COLLECTION ? this.parent.client : null;\n        if (client == null) {\n            // This should never happen because of the assertion in the constructor\n            throw new error_1.MongoRuntimeError(`Changestream type should only be one of cluster, database, collection. Found ${this.type.toString()}`);\n        }\n        const changeStreamCursor = new change_stream_cursor_1.ChangeStreamCursor(client, this.namespace, pipeline, options);\n        for (const event of CHANGE_STREAM_EVENTS){\n            changeStreamCursor.on(event, (e)=>this.emit(event, e));\n        }\n        if (this.listenerCount(ChangeStream.CHANGE) > 0) {\n            this._streamEvents(changeStreamCursor);\n        }\n        return changeStreamCursor;\n    }\n    /** @internal */ _closeEmitterModeWithError(error) {\n        this.emit(ChangeStream.ERROR, error);\n        this.close().catch(()=>null);\n    }\n    /** @internal */ _streamEvents(cursor) {\n        this._setIsEmitter();\n        const stream = this[kCursorStream] ?? cursor.stream();\n        this[kCursorStream] = stream;\n        stream.on(\"data\", (change)=>{\n            try {\n                const processedChange = this._processChange(change);\n                this.emit(ChangeStream.CHANGE, processedChange);\n            } catch (error) {\n                this.emit(ChangeStream.ERROR, error);\n            }\n        });\n        stream.on(\"error\", (error)=>this._processErrorStreamMode(error));\n    }\n    /** @internal */ _endStream() {\n        const cursorStream = this[kCursorStream];\n        if (cursorStream) {\n            [\n                \"data\",\n                \"close\",\n                \"end\",\n                \"error\"\n            ].forEach((event)=>cursorStream.removeAllListeners(event));\n            cursorStream.destroy();\n        }\n        this[kCursorStream] = undefined;\n    }\n    /** @internal */ _processChange(change) {\n        if (this[kClosed]) {\n            // TODO(NODE-3485): Replace with MongoChangeStreamClosedError\n            throw new error_1.MongoAPIError(CHANGESTREAM_CLOSED_ERROR);\n        }\n        // a null change means the cursor has been notified, implicitly closing the change stream\n        if (change == null) {\n            // TODO(NODE-3485): Replace with MongoChangeStreamClosedError\n            throw new error_1.MongoRuntimeError(CHANGESTREAM_CLOSED_ERROR);\n        }\n        if (change && !change._id) {\n            throw new error_1.MongoChangeStreamError(NO_RESUME_TOKEN_ERROR);\n        }\n        // cache the resume token\n        this.cursor.cacheResumeToken(change._id);\n        // wipe the startAtOperationTime if there was one so that there won't be a conflict\n        // between resumeToken and startAtOperationTime if we need to reconnect the cursor\n        this.options.startAtOperationTime = undefined;\n        return change;\n    }\n    /** @internal */ _processErrorStreamMode(changeStreamError) {\n        // If the change stream has been closed explicitly, do not process error.\n        if (this[kClosed]) return;\n        if ((0, error_1.isResumableError)(changeStreamError, this.cursor.maxWireVersion)) {\n            this._endStream();\n            this.cursor.close().catch(()=>null);\n            const topology = (0, utils_1.getTopology)(this.parent);\n            topology.selectServer(this.cursor.readPreference, {}, (serverSelectionError)=>{\n                if (serverSelectionError) return this._closeEmitterModeWithError(changeStreamError);\n                this.cursor = this._createChangeStreamCursor(this.cursor.resumeOptions);\n            });\n        } else {\n            this._closeEmitterModeWithError(changeStreamError);\n        }\n    }\n    /** @internal */ async _processErrorIteratorMode(changeStreamError) {\n        if (this[kClosed]) {\n            // TODO(NODE-3485): Replace with MongoChangeStreamClosedError\n            throw new error_1.MongoAPIError(CHANGESTREAM_CLOSED_ERROR);\n        }\n        if (!(0, error_1.isResumableError)(changeStreamError, this.cursor.maxWireVersion)) {\n            try {\n                await this.close();\n            } catch  {\n            // ignore errors from close\n            }\n            throw changeStreamError;\n        }\n        await this.cursor.close().catch(()=>null);\n        const topology = (0, utils_1.getTopology)(this.parent);\n        try {\n            await topology.selectServerAsync(this.cursor.readPreference, {});\n            this.cursor = this._createChangeStreamCursor(this.cursor.resumeOptions);\n        } catch  {\n            // if the topology can't reconnect, close the stream\n            await this.close();\n            throw changeStreamError;\n        }\n    }\n}\n/** @event */ ChangeStream.RESPONSE = constants_1.RESPONSE;\n/** @event */ ChangeStream.MORE = constants_1.MORE;\n/** @event */ ChangeStream.INIT = constants_1.INIT;\n/** @event */ ChangeStream.CLOSE = constants_1.CLOSE;\n/**\n * Fired for each new matching change in the specified namespace. Attaching a `change`\n * event listener to a Change Stream will switch the stream into flowing mode. Data will\n * then be passed as soon as it is available.\n * @event\n */ ChangeStream.CHANGE = constants_1.CHANGE;\n/** @event */ ChangeStream.END = constants_1.END;\n/** @event */ ChangeStream.ERROR = constants_1.ERROR;\n/**\n * Emitted each time the change stream stores a new resume token.\n * @event\n */ ChangeStream.RESUME_TOKEN_CHANGED = constants_1.RESUME_TOKEN_CHANGED;\nexports.ChangeStream = ChangeStream; //# sourceMappingURL=change_stream.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongodb/lib/change_stream.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongodb/lib/client-side-encryption/auto_encrypter.js":
/*!***************************************************************************!*\
  !*** ./node_modules/mongodb/lib/client-side-encryption/auto_encrypter.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nvar _a;\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.AutoEncrypter = exports.AutoEncryptionLoggerLevel = void 0;\nconst bson_1 = __webpack_require__(/*! ../bson */ \"(ssr)/./node_modules/mongodb/lib/bson.js\");\nconst deps_1 = __webpack_require__(/*! ../deps */ \"(ssr)/./node_modules/mongodb/lib/deps.js\");\nconst error_1 = __webpack_require__(/*! ../error */ \"(ssr)/./node_modules/mongodb/lib/error.js\");\nconst mongo_client_1 = __webpack_require__(/*! ../mongo_client */ \"(ssr)/./node_modules/mongodb/lib/mongo_client.js\");\nconst utils_1 = __webpack_require__(/*! ../utils */ \"(ssr)/./node_modules/mongodb/lib/utils.js\");\nconst cryptoCallbacks = __webpack_require__(/*! ./crypto_callbacks */ \"(ssr)/./node_modules/mongodb/lib/client-side-encryption/crypto_callbacks.js\");\nconst errors_1 = __webpack_require__(/*! ./errors */ \"(ssr)/./node_modules/mongodb/lib/client-side-encryption/errors.js\");\nconst mongocryptd_manager_1 = __webpack_require__(/*! ./mongocryptd_manager */ \"(ssr)/./node_modules/mongodb/lib/client-side-encryption/mongocryptd_manager.js\");\nconst providers_1 = __webpack_require__(/*! ./providers */ \"(ssr)/./node_modules/mongodb/lib/client-side-encryption/providers/index.js\");\nconst state_machine_1 = __webpack_require__(/*! ./state_machine */ \"(ssr)/./node_modules/mongodb/lib/client-side-encryption/state_machine.js\");\n/** @public */ exports.AutoEncryptionLoggerLevel = Object.freeze({\n    FatalError: 0,\n    Error: 1,\n    Warning: 2,\n    Info: 3,\n    Trace: 4\n});\n// Typescript errors if we index objects with `Symbol.for(...)`, so\n// to avoid TS errors we pull them out into variables.  Then we can type\n// the objects (and class) that we expect to see them on and prevent TS\n// errors.\n/** @internal */ const kDecorateResult = Symbol.for(\"@@mdb.decorateDecryptionResult\");\n/** @internal */ const kDecoratedKeys = Symbol.for(\"@@mdb.decryptedKeys\");\n/**\n * @internal An internal class to be used by the driver for auto encryption\n * **NOTE**: Not meant to be instantiated directly, this is for internal use only.\n */ class AutoEncrypter {\n    /** @internal */ static getMongoCrypt() {\n        const encryption = (0, deps_1.getMongoDBClientEncryption)();\n        if (\"kModuleError\" in encryption) {\n            throw encryption.kModuleError;\n        }\n        return encryption.MongoCrypt;\n    }\n    /**\n     * Create an AutoEncrypter\n     *\n     * **Note**: Do not instantiate this class directly. Rather, supply the relevant options to a MongoClient\n     *\n     * **Note**: Supplying `options.schemaMap` provides more security than relying on JSON Schemas obtained from the server.\n     * It protects against a malicious server advertising a false JSON Schema, which could trick the client into sending unencrypted data that should be encrypted.\n     * Schemas supplied in the schemaMap only apply to configuring automatic encryption for Client-Side Field Level Encryption.\n     * Other validation rules in the JSON schema will not be enforced by the driver and will result in an error.\n     *\n     * @example <caption>Create an AutoEncrypter that makes use of mongocryptd</caption>\n     * ```ts\n     * // Enabling autoEncryption via a MongoClient using mongocryptd\n     * const { MongoClient } = require('mongodb');\n     * const client = new MongoClient(URL, {\n     *   autoEncryption: {\n     *     kmsProviders: {\n     *       aws: {\n     *         accessKeyId: AWS_ACCESS_KEY,\n     *         secretAccessKey: AWS_SECRET_KEY\n     *       }\n     *     }\n     *   }\n     * });\n     * ```\n     *\n     * await client.connect();\n     * // From here on, the client will be encrypting / decrypting automatically\n     * @example <caption>Create an AutoEncrypter that makes use of libmongocrypt's CSFLE shared library</caption>\n     * ```ts\n     * // Enabling autoEncryption via a MongoClient using CSFLE shared library\n     * const { MongoClient } = require('mongodb');\n     * const client = new MongoClient(URL, {\n     *   autoEncryption: {\n     *     kmsProviders: {\n     *       aws: {}\n     *     },\n     *     extraOptions: {\n     *       cryptSharedLibPath: '/path/to/local/crypt/shared/lib',\n     *       cryptSharedLibRequired: true\n     *     }\n     *   }\n     * });\n     * ```\n     *\n     * await client.connect();\n     * // From here on, the client will be encrypting / decrypting automatically\n     */ constructor(client, options){\n        /**\n         * Used by devtools to enable decorating decryption results.\n         *\n         * When set and enabled, `decrypt` will automatically recursively\n         * traverse a decrypted document and if a field has been decrypted,\n         * it will mark it as decrypted.  Compass uses this to determine which\n         * fields were decrypted.\n         */ this[_a] = false;\n        this._client = client;\n        this._bypassEncryption = options.bypassAutoEncryption === true;\n        this._keyVaultNamespace = options.keyVaultNamespace || \"admin.datakeys\";\n        this._keyVaultClient = options.keyVaultClient || client;\n        this._metaDataClient = options.metadataClient || client;\n        this._proxyOptions = options.proxyOptions || {};\n        this._tlsOptions = options.tlsOptions || {};\n        this._kmsProviders = options.kmsProviders || {};\n        const mongoCryptOptions = {\n            cryptoCallbacks\n        };\n        if (options.schemaMap) {\n            mongoCryptOptions.schemaMap = Buffer.isBuffer(options.schemaMap) ? options.schemaMap : (0, bson_1.serialize)(options.schemaMap);\n        }\n        if (options.encryptedFieldsMap) {\n            mongoCryptOptions.encryptedFieldsMap = Buffer.isBuffer(options.encryptedFieldsMap) ? options.encryptedFieldsMap : (0, bson_1.serialize)(options.encryptedFieldsMap);\n        }\n        mongoCryptOptions.kmsProviders = !Buffer.isBuffer(this._kmsProviders) ? (0, bson_1.serialize)(this._kmsProviders) : this._kmsProviders;\n        if (options.options?.logger) {\n            mongoCryptOptions.logger = options.options.logger;\n        }\n        if (options.extraOptions && options.extraOptions.cryptSharedLibPath) {\n            mongoCryptOptions.cryptSharedLibPath = options.extraOptions.cryptSharedLibPath;\n        }\n        if (options.bypassQueryAnalysis) {\n            mongoCryptOptions.bypassQueryAnalysis = options.bypassQueryAnalysis;\n        }\n        this._bypassMongocryptdAndCryptShared = this._bypassEncryption || !!options.bypassQueryAnalysis;\n        if (options.extraOptions && options.extraOptions.cryptSharedLibSearchPaths) {\n            // Only for driver testing\n            mongoCryptOptions.cryptSharedLibSearchPaths = options.extraOptions.cryptSharedLibSearchPaths;\n        } else if (!this._bypassMongocryptdAndCryptShared) {\n            mongoCryptOptions.cryptSharedLibSearchPaths = [\n                \"$SYSTEM\"\n            ];\n        }\n        const MongoCrypt = AutoEncrypter.getMongoCrypt();\n        this._mongocrypt = new MongoCrypt(mongoCryptOptions);\n        this._contextCounter = 0;\n        if (options.extraOptions && options.extraOptions.cryptSharedLibRequired && !this.cryptSharedLibVersionInfo) {\n            throw new errors_1.MongoCryptInvalidArgumentError(\"`cryptSharedLibRequired` set but no crypt_shared library loaded\");\n        }\n        // Only instantiate mongocryptd manager/client once we know for sure\n        // that we are not using the CSFLE shared library.\n        if (!this._bypassMongocryptdAndCryptShared && !this.cryptSharedLibVersionInfo) {\n            this._mongocryptdManager = new mongocryptd_manager_1.MongocryptdManager(options.extraOptions);\n            const clientOptions = {\n                serverSelectionTimeoutMS: 10000\n            };\n            if (options.extraOptions == null || typeof options.extraOptions.mongocryptdURI !== \"string\") {\n                clientOptions.family = 4;\n            }\n            this._mongocryptdClient = new mongo_client_1.MongoClient(this._mongocryptdManager.uri, clientOptions);\n        }\n    }\n    /**\n     * Initializes the auto encrypter by spawning a mongocryptd and connecting to it.\n     *\n     * This function is a no-op when bypassSpawn is set or the crypt shared library is used.\n     */ async init() {\n        if (this._bypassMongocryptdAndCryptShared || this.cryptSharedLibVersionInfo) {\n            return;\n        }\n        if (!this._mongocryptdManager) {\n            throw new error_1.MongoRuntimeError(\"Reached impossible state: mongocryptdManager is undefined when neither bypassSpawn nor the shared lib are specified.\");\n        }\n        if (!this._mongocryptdClient) {\n            throw new error_1.MongoRuntimeError(\"Reached impossible state: mongocryptdClient is undefined when neither bypassSpawn nor the shared lib are specified.\");\n        }\n        if (!this._mongocryptdManager.bypassSpawn) {\n            await this._mongocryptdManager.spawn();\n        }\n        try {\n            const client = await this._mongocryptdClient.connect();\n            return client;\n        } catch (error) {\n            const { message } = error;\n            if (message && (message.match(/timed out after/) || message.match(/ENOTFOUND/))) {\n                throw new error_1.MongoRuntimeError(\"Unable to connect to `mongocryptd`, please make sure it is running or in your PATH for auto-spawn\", {\n                    cause: error\n                });\n            }\n            throw error;\n        }\n    }\n    /**\n     * Cleans up the `_mongocryptdClient`, if present.\n     */ async teardown(force) {\n        await this._mongocryptdClient?.close(force);\n    }\n    /**\n     * Encrypt a command for a given namespace.\n     */ async encrypt(ns, cmd, options = {}) {\n        if (this._bypassEncryption) {\n            // If `bypassAutoEncryption` has been specified, don't encrypt\n            return cmd;\n        }\n        const commandBuffer = Buffer.isBuffer(cmd) ? cmd : (0, bson_1.serialize)(cmd, options);\n        const context = this._mongocrypt.makeEncryptionContext(utils_1.MongoDBCollectionNamespace.fromString(ns).db, commandBuffer);\n        context.id = this._contextCounter++;\n        context.ns = ns;\n        context.document = cmd;\n        const stateMachine = new state_machine_1.StateMachine({\n            promoteValues: false,\n            promoteLongs: false,\n            proxyOptions: this._proxyOptions,\n            tlsOptions: this._tlsOptions\n        });\n        return stateMachine.execute(this, context);\n    }\n    /**\n     * Decrypt a command response\n     */ async decrypt(response, options = {}) {\n        const buffer = Buffer.isBuffer(response) ? response : (0, bson_1.serialize)(response, options);\n        const context = this._mongocrypt.makeDecryptionContext(buffer);\n        context.id = this._contextCounter++;\n        const stateMachine = new state_machine_1.StateMachine({\n            ...options,\n            proxyOptions: this._proxyOptions,\n            tlsOptions: this._tlsOptions\n        });\n        const decorateResult = this[kDecorateResult];\n        const result = await stateMachine.execute(this, context);\n        if (decorateResult) {\n            decorateDecryptionResult(result, response);\n        }\n        return result;\n    }\n    /**\n     * Ask the user for KMS credentials.\n     *\n     * This returns anything that looks like the kmsProviders original input\n     * option. It can be empty, and any provider specified here will override\n     * the original ones.\n     */ async askForKMSCredentials() {\n        return (0, providers_1.refreshKMSCredentials)(this._kmsProviders);\n    }\n    /**\n     * Return the current libmongocrypt's CSFLE shared library version\n     * as `{ version: bigint, versionStr: string }`, or `null` if no CSFLE\n     * shared library was loaded.\n     */ get cryptSharedLibVersionInfo() {\n        return this._mongocrypt.cryptSharedLibVersionInfo;\n    }\n    static get libmongocryptVersion() {\n        return AutoEncrypter.getMongoCrypt().libmongocryptVersion;\n    }\n}\nexports.AutoEncrypter = AutoEncrypter;\n_a = kDecorateResult;\n/**\n * Recurse through the (identically-shaped) `decrypted` and `original`\n * objects and attach a `decryptedKeys` property on each sub-object that\n * contained encrypted fields. Because we only call this on BSON responses,\n * we do not need to worry about circular references.\n *\n * @internal\n */ function decorateDecryptionResult(decrypted, original, isTopLevelDecorateCall = true) {\n    if (isTopLevelDecorateCall) {\n        // The original value could have been either a JS object or a BSON buffer\n        if (Buffer.isBuffer(original)) {\n            original = (0, bson_1.deserialize)(original);\n        }\n        if (Buffer.isBuffer(decrypted)) {\n            throw new error_1.MongoRuntimeError(\"Expected result of decryption to be deserialized BSON object\");\n        }\n    }\n    if (!decrypted || typeof decrypted !== \"object\") return;\n    for (const k of Object.keys(decrypted)){\n        const originalValue = original[k];\n        // An object was decrypted by libmongocrypt if and only if it was\n        // a BSON Binary object with subtype 6.\n        if (originalValue && originalValue._bsontype === \"Binary\" && originalValue.sub_type === 6) {\n            if (!decrypted[kDecoratedKeys]) {\n                Object.defineProperty(decrypted, kDecoratedKeys, {\n                    value: [],\n                    configurable: true,\n                    enumerable: false,\n                    writable: false\n                });\n            }\n            // this is defined in the preceding if-statement\n            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n            decrypted[kDecoratedKeys].push(k);\n            continue;\n        }\n        decorateDecryptionResult(decrypted[k], originalValue, false);\n    }\n} //# sourceMappingURL=auto_encrypter.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongodb/lib/client-side-encryption/auto_encrypter.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongodb/lib/client-side-encryption/client_encryption.js":
/*!******************************************************************************!*\
  !*** ./node_modules/mongodb/lib/client-side-encryption/client_encryption.js ***!
  \******************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.ClientEncryption = void 0;\nconst bson_1 = __webpack_require__(/*! ../bson */ \"(ssr)/./node_modules/mongodb/lib/bson.js\");\nconst deps_1 = __webpack_require__(/*! ../deps */ \"(ssr)/./node_modules/mongodb/lib/deps.js\");\nconst utils_1 = __webpack_require__(/*! ../utils */ \"(ssr)/./node_modules/mongodb/lib/utils.js\");\nconst cryptoCallbacks = __webpack_require__(/*! ./crypto_callbacks */ \"(ssr)/./node_modules/mongodb/lib/client-side-encryption/crypto_callbacks.js\");\nconst errors_1 = __webpack_require__(/*! ./errors */ \"(ssr)/./node_modules/mongodb/lib/client-side-encryption/errors.js\");\nconst index_1 = __webpack_require__(/*! ./providers/index */ \"(ssr)/./node_modules/mongodb/lib/client-side-encryption/providers/index.js\");\nconst state_machine_1 = __webpack_require__(/*! ./state_machine */ \"(ssr)/./node_modules/mongodb/lib/client-side-encryption/state_machine.js\");\n/**\n * @public\n * The public interface for explicit in-use encryption\n */ class ClientEncryption {\n    /** @internal */ static getMongoCrypt() {\n        const encryption = (0, deps_1.getMongoDBClientEncryption)();\n        if (\"kModuleError\" in encryption) {\n            throw encryption.kModuleError;\n        }\n        return encryption.MongoCrypt;\n    }\n    /**\n     * Create a new encryption instance\n     *\n     * @example\n     * ```ts\n     * new ClientEncryption(mongoClient, {\n     *   keyVaultNamespace: 'client.encryption',\n     *   kmsProviders: {\n     *     local: {\n     *       key: masterKey // The master key used for encryption/decryption. A 96-byte long Buffer\n     *     }\n     *   }\n     * });\n     * ```\n     *\n     * @example\n     * ```ts\n     * new ClientEncryption(mongoClient, {\n     *   keyVaultNamespace: 'client.encryption',\n     *   kmsProviders: {\n     *     aws: {\n     *       accessKeyId: AWS_ACCESS_KEY,\n     *       secretAccessKey: AWS_SECRET_KEY\n     *     }\n     *   }\n     * });\n     * ```\n     */ constructor(client, options){\n        this._client = client;\n        this._proxyOptions = options.proxyOptions ?? {};\n        this._tlsOptions = options.tlsOptions ?? {};\n        this._kmsProviders = options.kmsProviders || {};\n        if (options.keyVaultNamespace == null) {\n            throw new errors_1.MongoCryptInvalidArgumentError(\"Missing required option `keyVaultNamespace`\");\n        }\n        const mongoCryptOptions = {\n            ...options,\n            cryptoCallbacks,\n            kmsProviders: !Buffer.isBuffer(this._kmsProviders) ? (0, bson_1.serialize)(this._kmsProviders) : this._kmsProviders\n        };\n        this._keyVaultNamespace = options.keyVaultNamespace;\n        this._keyVaultClient = options.keyVaultClient || client;\n        const MongoCrypt = ClientEncryption.getMongoCrypt();\n        this._mongoCrypt = new MongoCrypt(mongoCryptOptions);\n    }\n    /**\n     * Creates a data key used for explicit encryption and inserts it into the key vault namespace\n     *\n     * @example\n     * ```ts\n     * // Using async/await to create a local key\n     * const dataKeyId = await clientEncryption.createDataKey('local');\n     * ```\n     *\n     * @example\n     * ```ts\n     * // Using async/await to create an aws key\n     * const dataKeyId = await clientEncryption.createDataKey('aws', {\n     *   masterKey: {\n     *     region: 'us-east-1',\n     *     key: 'xxxxxxxxxxxxxx' // CMK ARN here\n     *   }\n     * });\n     * ```\n     *\n     * @example\n     * ```ts\n     * // Using async/await to create an aws key with a keyAltName\n     * const dataKeyId = await clientEncryption.createDataKey('aws', {\n     *   masterKey: {\n     *     region: 'us-east-1',\n     *     key: 'xxxxxxxxxxxxxx' // CMK ARN here\n     *   },\n     *   keyAltNames: [ 'mySpecialKey' ]\n     * });\n     * ```\n     */ async createDataKey(provider, options = {}) {\n        if (options.keyAltNames && !Array.isArray(options.keyAltNames)) {\n            throw new errors_1.MongoCryptInvalidArgumentError(`Option \"keyAltNames\" must be an array of strings, but was of type ${typeof options.keyAltNames}.`);\n        }\n        let keyAltNames = undefined;\n        if (options.keyAltNames && options.keyAltNames.length > 0) {\n            keyAltNames = options.keyAltNames.map((keyAltName, i)=>{\n                if (typeof keyAltName !== \"string\") {\n                    throw new errors_1.MongoCryptInvalidArgumentError(`Option \"keyAltNames\" must be an array of strings, but item at index ${i} was of type ${typeof keyAltName}`);\n                }\n                return (0, bson_1.serialize)({\n                    keyAltName\n                });\n            });\n        }\n        let keyMaterial = undefined;\n        if (options.keyMaterial) {\n            keyMaterial = (0, bson_1.serialize)({\n                keyMaterial: options.keyMaterial\n            });\n        }\n        const dataKeyBson = (0, bson_1.serialize)({\n            provider,\n            ...options.masterKey\n        });\n        const context = this._mongoCrypt.makeDataKeyContext(dataKeyBson, {\n            keyAltNames,\n            keyMaterial\n        });\n        const stateMachine = new state_machine_1.StateMachine({\n            proxyOptions: this._proxyOptions,\n            tlsOptions: this._tlsOptions\n        });\n        const dataKey = await stateMachine.execute(this, context);\n        const { db: dbName, collection: collectionName } = utils_1.MongoDBCollectionNamespace.fromString(this._keyVaultNamespace);\n        const { insertedId } = await this._keyVaultClient.db(dbName).collection(collectionName).insertOne(dataKey, {\n            writeConcern: {\n                w: \"majority\"\n            }\n        });\n        return insertedId;\n    }\n    /**\n     * Searches the keyvault for any data keys matching the provided filter.  If there are matches, rewrapManyDataKey then attempts to re-wrap the data keys using the provided options.\n     *\n     * If no matches are found, then no bulk write is performed.\n     *\n     * @example\n     * ```ts\n     * // rewrapping all data data keys (using a filter that matches all documents)\n     * const filter = {};\n     *\n     * const result = await clientEncryption.rewrapManyDataKey(filter);\n     * if (result.bulkWriteResult != null) {\n     *  // keys were re-wrapped, results will be available in the bulkWrite object.\n     * }\n     * ```\n     *\n     * @example\n     * ```ts\n     * // attempting to rewrap all data keys with no matches\n     * const filter = { _id: new Binary() } // assume _id matches no documents in the database\n     * const result = await clientEncryption.rewrapManyDataKey(filter);\n     *\n     * if (result.bulkWriteResult == null) {\n     *  // no keys matched, `bulkWriteResult` does not exist on the result object\n     * }\n     * ```\n     */ async rewrapManyDataKey(filter, options) {\n        let keyEncryptionKeyBson = undefined;\n        if (options) {\n            const keyEncryptionKey = Object.assign({\n                provider: options.provider\n            }, options.masterKey);\n            keyEncryptionKeyBson = (0, bson_1.serialize)(keyEncryptionKey);\n        }\n        const filterBson = (0, bson_1.serialize)(filter);\n        const context = this._mongoCrypt.makeRewrapManyDataKeyContext(filterBson, keyEncryptionKeyBson);\n        const stateMachine = new state_machine_1.StateMachine({\n            proxyOptions: this._proxyOptions,\n            tlsOptions: this._tlsOptions\n        });\n        const { v: dataKeys } = await stateMachine.execute(this, context);\n        if (dataKeys.length === 0) {\n            return {};\n        }\n        const { db: dbName, collection: collectionName } = utils_1.MongoDBCollectionNamespace.fromString(this._keyVaultNamespace);\n        const replacements = dataKeys.map((key)=>({\n                updateOne: {\n                    filter: {\n                        _id: key._id\n                    },\n                    update: {\n                        $set: {\n                            masterKey: key.masterKey,\n                            keyMaterial: key.keyMaterial\n                        },\n                        $currentDate: {\n                            updateDate: true\n                        }\n                    }\n                }\n            }));\n        const result = await this._keyVaultClient.db(dbName).collection(collectionName).bulkWrite(replacements, {\n            writeConcern: {\n                w: \"majority\"\n            }\n        });\n        return {\n            bulkWriteResult: result\n        };\n    }\n    /**\n     * Deletes the key with the provided id from the keyvault, if it exists.\n     *\n     * @example\n     * ```ts\n     * // delete a key by _id\n     * const id = new Binary(); // id is a bson binary subtype 4 object\n     * const { deletedCount } = await clientEncryption.deleteKey(id);\n     *\n     * if (deletedCount != null && deletedCount > 0) {\n     *   // successful deletion\n     * }\n     * ```\n     *\n     */ async deleteKey(_id) {\n        const { db: dbName, collection: collectionName } = utils_1.MongoDBCollectionNamespace.fromString(this._keyVaultNamespace);\n        return this._keyVaultClient.db(dbName).collection(collectionName).deleteOne({\n            _id\n        }, {\n            writeConcern: {\n                w: \"majority\"\n            }\n        });\n    }\n    /**\n     * Finds all the keys currently stored in the keyvault.\n     *\n     * This method will not throw.\n     *\n     * @returns a FindCursor over all keys in the keyvault.\n     * @example\n     * ```ts\n     * // fetching all keys\n     * const keys = await clientEncryption.getKeys().toArray();\n     * ```\n     */ getKeys() {\n        const { db: dbName, collection: collectionName } = utils_1.MongoDBCollectionNamespace.fromString(this._keyVaultNamespace);\n        return this._keyVaultClient.db(dbName).collection(collectionName).find({}, {\n            readConcern: {\n                level: \"majority\"\n            }\n        });\n    }\n    /**\n     * Finds a key in the keyvault with the specified _id.\n     *\n     * Returns a promise that either resolves to a {@link DataKey} if a document matches the key or null if no documents\n     * match the id.  The promise rejects with an error if an error is thrown.\n     * @example\n     * ```ts\n     * // getting a key by id\n     * const id = new Binary(); // id is a bson binary subtype 4 object\n     * const key = await clientEncryption.getKey(id);\n     * if (!key) {\n     *  // key is null if there was no matching key\n     * }\n     * ```\n     */ async getKey(_id) {\n        const { db: dbName, collection: collectionName } = utils_1.MongoDBCollectionNamespace.fromString(this._keyVaultNamespace);\n        return this._keyVaultClient.db(dbName).collection(collectionName).findOne({\n            _id\n        }, {\n            readConcern: {\n                level: \"majority\"\n            }\n        });\n    }\n    /**\n     * Finds a key in the keyvault which has the specified keyAltName.\n     *\n     * @param keyAltName - a keyAltName to search for a key\n     * @returns Returns a promise that either resolves to a {@link DataKey} if a document matches the key or null if no documents\n     * match the keyAltName.  The promise rejects with an error if an error is thrown.\n     * @example\n     * ```ts\n     * // get a key by alt name\n     * const keyAltName = 'keyAltName';\n     * const key = await clientEncryption.getKeyByAltName(keyAltName);\n     * if (!key) {\n     *  // key is null if there is no matching key\n     * }\n     * ```\n     */ async getKeyByAltName(keyAltName) {\n        const { db: dbName, collection: collectionName } = utils_1.MongoDBCollectionNamespace.fromString(this._keyVaultNamespace);\n        return this._keyVaultClient.db(dbName).collection(collectionName).findOne({\n            keyAltNames: keyAltName\n        }, {\n            readConcern: {\n                level: \"majority\"\n            }\n        });\n    }\n    /**\n     * Adds a keyAltName to a key identified by the provided _id.\n     *\n     * This method resolves to/returns the *old* key value (prior to adding the new altKeyName).\n     *\n     * @param _id - The id of the document to update.\n     * @param keyAltName - a keyAltName to search for a key\n     * @returns Returns a promise that either resolves to a {@link DataKey} if a document matches the key or null if no documents\n     * match the id.  The promise rejects with an error if an error is thrown.\n     * @example\n     * ```ts\n     * // adding an keyAltName to a data key\n     * const id = new Binary();  // id is a bson binary subtype 4 object\n     * const keyAltName = 'keyAltName';\n     * const oldKey = await clientEncryption.addKeyAltName(id, keyAltName);\n     * if (!oldKey) {\n     *  // null is returned if there is no matching document with an id matching the supplied id\n     * }\n     * ```\n     */ async addKeyAltName(_id, keyAltName) {\n        const { db: dbName, collection: collectionName } = utils_1.MongoDBCollectionNamespace.fromString(this._keyVaultNamespace);\n        const value = await this._keyVaultClient.db(dbName).collection(collectionName).findOneAndUpdate({\n            _id\n        }, {\n            $addToSet: {\n                keyAltNames: keyAltName\n            }\n        }, {\n            writeConcern: {\n                w: \"majority\"\n            },\n            returnDocument: \"before\"\n        });\n        return value;\n    }\n    /**\n     * Adds a keyAltName to a key identified by the provided _id.\n     *\n     * This method resolves to/returns the *old* key value (prior to removing the new altKeyName).\n     *\n     * If the removed keyAltName is the last keyAltName for that key, the `altKeyNames` property is unset from the document.\n     *\n     * @param _id - The id of the document to update.\n     * @param keyAltName - a keyAltName to search for a key\n     * @returns Returns a promise that either resolves to a {@link DataKey} if a document matches the key or null if no documents\n     * match the id.  The promise rejects with an error if an error is thrown.\n     * @example\n     * ```ts\n     * // removing a key alt name from a data key\n     * const id = new Binary();  // id is a bson binary subtype 4 object\n     * const keyAltName = 'keyAltName';\n     * const oldKey = await clientEncryption.removeKeyAltName(id, keyAltName);\n     *\n     * if (!oldKey) {\n     *  // null is returned if there is no matching document with an id matching the supplied id\n     * }\n     * ```\n     */ async removeKeyAltName(_id, keyAltName) {\n        const { db: dbName, collection: collectionName } = utils_1.MongoDBCollectionNamespace.fromString(this._keyVaultNamespace);\n        const pipeline = [\n            {\n                $set: {\n                    keyAltNames: {\n                        $cond: [\n                            {\n                                $eq: [\n                                    \"$keyAltNames\",\n                                    [\n                                        keyAltName\n                                    ]\n                                ]\n                            },\n                            \"$$REMOVE\",\n                            {\n                                $filter: {\n                                    input: \"$keyAltNames\",\n                                    cond: {\n                                        $ne: [\n                                            \"$$this\",\n                                            keyAltName\n                                        ]\n                                    }\n                                }\n                            }\n                        ]\n                    }\n                }\n            }\n        ];\n        const value = await this._keyVaultClient.db(dbName).collection(collectionName).findOneAndUpdate({\n            _id\n        }, pipeline, {\n            writeConcern: {\n                w: \"majority\"\n            },\n            returnDocument: \"before\"\n        });\n        return value;\n    }\n    /**\n     * A convenience method for creating an encrypted collection.\n     * This method will create data keys for any encryptedFields that do not have a `keyId` defined\n     * and then create a new collection with the full set of encryptedFields.\n     *\n     * @param db - A Node.js driver Db object with which to create the collection\n     * @param name - The name of the collection to be created\n     * @param options - Options for createDataKey and for createCollection\n     * @returns created collection and generated encryptedFields\n     * @throws MongoCryptCreateDataKeyError - If part way through the process a createDataKey invocation fails, an error will be rejected that has the partial `encryptedFields` that were created.\n     * @throws MongoCryptCreateEncryptedCollectionError - If creating the collection fails, an error will be rejected that has the entire `encryptedFields` that were created.\n     */ async createEncryptedCollection(db, name, options) {\n        const { provider, masterKey, createCollectionOptions: { encryptedFields: { ...encryptedFields }, ...createCollectionOptions } } = options;\n        if (Array.isArray(encryptedFields.fields)) {\n            const createDataKeyPromises = encryptedFields.fields.map(async (field)=>field == null || typeof field !== \"object\" || field.keyId != null ? field : {\n                    ...field,\n                    keyId: await this.createDataKey(provider, {\n                        masterKey\n                    })\n                });\n            const createDataKeyResolutions = await Promise.allSettled(createDataKeyPromises);\n            encryptedFields.fields = createDataKeyResolutions.map((resolution, index)=>resolution.status === \"fulfilled\" ? resolution.value : encryptedFields.fields[index]);\n            const rejection = createDataKeyResolutions.find((result)=>result.status === \"rejected\");\n            if (rejection != null) {\n                throw new errors_1.MongoCryptCreateDataKeyError(encryptedFields, {\n                    cause: rejection.reason\n                });\n            }\n        }\n        try {\n            const collection = await db.createCollection(name, {\n                ...createCollectionOptions,\n                encryptedFields\n            });\n            return {\n                collection,\n                encryptedFields\n            };\n        } catch (cause) {\n            throw new errors_1.MongoCryptCreateEncryptedCollectionError(encryptedFields, {\n                cause\n            });\n        }\n    }\n    /**\n     * Explicitly encrypt a provided value. Note that either `options.keyId` or `options.keyAltName` must\n     * be specified. Specifying both `options.keyId` and `options.keyAltName` is considered an error.\n     *\n     * @param value - The value that you wish to serialize. Must be of a type that can be serialized into BSON\n     * @param options -\n     * @returns a Promise that either resolves with the encrypted value, or rejects with an error.\n     *\n     * @example\n     * ```ts\n     * // Encryption with async/await api\n     * async function encryptMyData(value) {\n     *   const keyId = await clientEncryption.createDataKey('local');\n     *   return clientEncryption.encrypt(value, { keyId, algorithm: 'AEAD_AES_256_CBC_HMAC_SHA_512-Deterministic' });\n     * }\n     * ```\n     *\n     * @example\n     * ```ts\n     * // Encryption using a keyAltName\n     * async function encryptMyData(value) {\n     *   await clientEncryption.createDataKey('local', { keyAltNames: 'mySpecialKey' });\n     *   return clientEncryption.encrypt(value, { keyAltName: 'mySpecialKey', algorithm: 'AEAD_AES_256_CBC_HMAC_SHA_512-Deterministic' });\n     * }\n     * ```\n     */ async encrypt(value, options) {\n        return this._encrypt(value, false, options);\n    }\n    /**\n     * Encrypts a Match Expression or Aggregate Expression to query a range index.\n     *\n     * Only supported when queryType is \"rangePreview\" and algorithm is \"RangePreview\".\n     *\n     * @experimental The Range algorithm is experimental only. It is not intended for production use. It is subject to breaking changes.\n     *\n     * @param expression - a BSON document of one of the following forms:\n     *  1. A Match Expression of this form:\n     *      `{$and: [{<field>: {$gt: <value1>}}, {<field>: {$lt: <value2> }}]}`\n     *  2. An Aggregate Expression of this form:\n     *      `{$and: [{$gt: [<fieldpath>, <value1>]}, {$lt: [<fieldpath>, <value2>]}]}`\n     *\n     *    `$gt` may also be `$gte`. `$lt` may also be `$lte`.\n     *\n     * @param options -\n     * @returns Returns a Promise that either resolves with the encrypted value or rejects with an error.\n     */ async encryptExpression(expression, options) {\n        return this._encrypt(expression, true, options);\n    }\n    /**\n     * Explicitly decrypt a provided encrypted value\n     *\n     * @param value - An encrypted value\n     * @returns a Promise that either resolves with the decrypted value, or rejects with an error\n     *\n     * @example\n     * ```ts\n     * // Decrypting value with async/await API\n     * async function decryptMyValue(value) {\n     *   return clientEncryption.decrypt(value);\n     * }\n     * ```\n     */ async decrypt(value) {\n        const valueBuffer = (0, bson_1.serialize)({\n            v: value\n        });\n        const context = this._mongoCrypt.makeExplicitDecryptionContext(valueBuffer);\n        const stateMachine = new state_machine_1.StateMachine({\n            proxyOptions: this._proxyOptions,\n            tlsOptions: this._tlsOptions\n        });\n        const { v } = await stateMachine.execute(this, context);\n        return v;\n    }\n    /**\n     * @internal\n     * Ask the user for KMS credentials.\n     *\n     * This returns anything that looks like the kmsProviders original input\n     * option. It can be empty, and any provider specified here will override\n     * the original ones.\n     */ async askForKMSCredentials() {\n        return (0, index_1.refreshKMSCredentials)(this._kmsProviders);\n    }\n    static get libmongocryptVersion() {\n        return ClientEncryption.getMongoCrypt().libmongocryptVersion;\n    }\n    /**\n     * @internal\n     * A helper that perform explicit encryption of values and expressions.\n     * Explicitly encrypt a provided value. Note that either `options.keyId` or `options.keyAltName` must\n     * be specified. Specifying both `options.keyId` and `options.keyAltName` is considered an error.\n     *\n     * @param value - The value that you wish to encrypt. Must be of a type that can be serialized into BSON\n     * @param expressionMode - a boolean that indicates whether or not to encrypt the value as an expression\n     * @param options - options to pass to encrypt\n     * @returns the raw result of the call to stateMachine.execute().  When expressionMode is set to true, the return\n     *          value will be a bson document.  When false, the value will be a BSON Binary.\n     *\n     */ async _encrypt(value, expressionMode, options) {\n        const { algorithm, keyId, keyAltName, contentionFactor, queryType, rangeOptions } = options;\n        const contextOptions = {\n            expressionMode,\n            algorithm\n        };\n        if (keyId) {\n            contextOptions.keyId = keyId.buffer;\n        }\n        if (keyAltName) {\n            if (keyId) {\n                throw new errors_1.MongoCryptInvalidArgumentError(`\"options\" cannot contain both \"keyId\" and \"keyAltName\"`);\n            }\n            if (typeof keyAltName !== \"string\") {\n                throw new errors_1.MongoCryptInvalidArgumentError(`\"options.keyAltName\" must be of type string, but was of type ${typeof keyAltName}`);\n            }\n            contextOptions.keyAltName = (0, bson_1.serialize)({\n                keyAltName\n            });\n        }\n        if (typeof contentionFactor === \"number\" || typeof contentionFactor === \"bigint\") {\n            contextOptions.contentionFactor = contentionFactor;\n        }\n        if (typeof queryType === \"string\") {\n            contextOptions.queryType = queryType;\n        }\n        if (typeof rangeOptions === \"object\") {\n            contextOptions.rangeOptions = (0, bson_1.serialize)(rangeOptions);\n        }\n        const valueBuffer = (0, bson_1.serialize)({\n            v: value\n        });\n        const stateMachine = new state_machine_1.StateMachine({\n            proxyOptions: this._proxyOptions,\n            tlsOptions: this._tlsOptions\n        });\n        const context = this._mongoCrypt.makeExplicitEncryptionContext(valueBuffer, contextOptions);\n        const result = await stateMachine.execute(this, context);\n        return result.v;\n    }\n}\nexports.ClientEncryption = ClientEncryption; //# sourceMappingURL=client_encryption.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongodb/lib/client-side-encryption/client_encryption.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongodb/lib/client-side-encryption/crypto_callbacks.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/mongodb/lib/client-side-encryption/crypto_callbacks.js ***!
  \*****************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.hmacSha256Hook = exports.hmacSha512Hook = exports.aes256CtrDecryptHook = exports.aes256CtrEncryptHook = exports.aes256CbcDecryptHook = exports.aes256CbcEncryptHook = exports.signRsaSha256Hook = exports.makeHmacHook = exports.sha256Hook = exports.randomHook = exports.makeAES256Hook = void 0;\nconst crypto = __webpack_require__(/*! crypto */ \"crypto\");\nfunction makeAES256Hook(method, mode) {\n    return function(key, iv, input, output) {\n        let result;\n        try {\n            const cipher = crypto[method](mode, key, iv);\n            cipher.setAutoPadding(false);\n            result = cipher.update(input);\n            const final = cipher.final();\n            if (final.length > 0) {\n                result = Buffer.concat([\n                    result,\n                    final\n                ]);\n            }\n        } catch (e) {\n            return e;\n        }\n        result.copy(output);\n        return result.length;\n    };\n}\nexports.makeAES256Hook = makeAES256Hook;\nfunction randomHook(buffer, count) {\n    try {\n        crypto.randomFillSync(buffer, 0, count);\n    } catch (e) {\n        return e;\n    }\n    return count;\n}\nexports.randomHook = randomHook;\nfunction sha256Hook(input, output) {\n    let result;\n    try {\n        result = crypto.createHash(\"sha256\").update(input).digest();\n    } catch (e) {\n        return e;\n    }\n    result.copy(output);\n    return result.length;\n}\nexports.sha256Hook = sha256Hook;\nfunction makeHmacHook(algorithm) {\n    return (key, input, output)=>{\n        let result;\n        try {\n            result = crypto.createHmac(algorithm, key).update(input).digest();\n        } catch (e) {\n            return e;\n        }\n        result.copy(output);\n        return result.length;\n    };\n}\nexports.makeHmacHook = makeHmacHook;\nfunction signRsaSha256Hook(key, input, output) {\n    let result;\n    try {\n        const signer = crypto.createSign(\"sha256WithRSAEncryption\");\n        const privateKey = Buffer.from(`-----BEGIN PRIVATE KEY-----\\n${key.toString(\"base64\")}\\n-----END PRIVATE KEY-----\\n`);\n        result = signer.update(input).end().sign(privateKey);\n    } catch (e) {\n        return e;\n    }\n    result.copy(output);\n    return result.length;\n}\nexports.signRsaSha256Hook = signRsaSha256Hook;\nexports.aes256CbcEncryptHook = makeAES256Hook(\"createCipheriv\", \"aes-256-cbc\");\nexports.aes256CbcDecryptHook = makeAES256Hook(\"createDecipheriv\", \"aes-256-cbc\");\nexports.aes256CtrEncryptHook = makeAES256Hook(\"createCipheriv\", \"aes-256-ctr\");\nexports.aes256CtrDecryptHook = makeAES256Hook(\"createDecipheriv\", \"aes-256-ctr\");\nexports.hmacSha512Hook = makeHmacHook(\"sha512\");\nexports.hmacSha256Hook = makeHmacHook(\"sha256\"); //# sourceMappingURL=crypto_callbacks.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbW9uZ29kYi9saWIvY2xpZW50LXNpZGUtZW5jcnlwdGlvbi9jcnlwdG9fY2FsbGJhY2tzLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2JBLDhDQUE2QztJQUFFRyxPQUFPO0FBQUssQ0FBQyxFQUFDO0FBQzdERCxzQkFBc0IsR0FBR0Esc0JBQXNCLEdBQUdBLDRCQUE0QixHQUFHQSw0QkFBNEIsR0FBR0EsNEJBQTRCLEdBQUdBLDRCQUE0QixHQUFHQSx5QkFBeUIsR0FBR0Esb0JBQW9CLEdBQUdBLGtCQUFrQixHQUFHQSxrQkFBa0IsR0FBR0Esc0JBQXNCLEdBQUcsS0FBSztBQUN6UyxNQUFNYSxTQUFTQyxtQkFBT0EsQ0FBQyxzQkFBUTtBQUMvQixTQUFTRixlQUFlRyxNQUFNLEVBQUVDLElBQUk7SUFDaEMsT0FBTyxTQUFVQyxHQUFHLEVBQUVDLEVBQUUsRUFBRUMsS0FBSyxFQUFFQyxNQUFNO1FBQ25DLElBQUlDO1FBQ0osSUFBSTtZQUNBLE1BQU1DLFNBQVNULE1BQU0sQ0FBQ0UsT0FBTyxDQUFDQyxNQUFNQyxLQUFLQztZQUN6Q0ksT0FBT0MsY0FBYyxDQUFDO1lBQ3RCRixTQUFTQyxPQUFPRSxNQUFNLENBQUNMO1lBQ3ZCLE1BQU1NLFFBQVFILE9BQU9HLEtBQUs7WUFDMUIsSUFBSUEsTUFBTUMsTUFBTSxHQUFHLEdBQUc7Z0JBQ2xCTCxTQUFTTSxPQUFPQyxNQUFNLENBQUM7b0JBQUNQO29CQUFRSTtpQkFBTTtZQUMxQztRQUNKLEVBQ0EsT0FBT0ksR0FBRztZQUNOLE9BQU9BO1FBQ1g7UUFDQVIsT0FBT1MsSUFBSSxDQUFDVjtRQUNaLE9BQU9DLE9BQU9LLE1BQU07SUFDeEI7QUFDSjtBQUNBMUIsc0JBQXNCLEdBQUdZO0FBQ3pCLFNBQVNELFdBQVdvQixNQUFNLEVBQUVDLEtBQUs7SUFDN0IsSUFBSTtRQUNBbkIsT0FBT29CLGNBQWMsQ0FBQ0YsUUFBUSxHQUFHQztJQUNyQyxFQUNBLE9BQU9ILEdBQUc7UUFDTixPQUFPQTtJQUNYO0lBQ0EsT0FBT0c7QUFDWDtBQUNBaEMsa0JBQWtCLEdBQUdXO0FBQ3JCLFNBQVNELFdBQVdTLEtBQUssRUFBRUMsTUFBTTtJQUM3QixJQUFJQztJQUNKLElBQUk7UUFDQUEsU0FBU1IsT0FBT3FCLFVBQVUsQ0FBQyxVQUFVVixNQUFNLENBQUNMLE9BQU9nQixNQUFNO0lBQzdELEVBQ0EsT0FBT04sR0FBRztRQUNOLE9BQU9BO0lBQ1g7SUFDQVIsT0FBT1MsSUFBSSxDQUFDVjtJQUNaLE9BQU9DLE9BQU9LLE1BQU07QUFDeEI7QUFDQTFCLGtCQUFrQixHQUFHVTtBQUNyQixTQUFTRCxhQUFhMkIsU0FBUztJQUMzQixPQUFPLENBQUNuQixLQUFLRSxPQUFPQztRQUNoQixJQUFJQztRQUNKLElBQUk7WUFDQUEsU0FBU1IsT0FBT3dCLFVBQVUsQ0FBQ0QsV0FBV25CLEtBQUtPLE1BQU0sQ0FBQ0wsT0FBT2dCLE1BQU07UUFDbkUsRUFDQSxPQUFPTixHQUFHO1lBQ04sT0FBT0E7UUFDWDtRQUNBUixPQUFPUyxJQUFJLENBQUNWO1FBQ1osT0FBT0MsT0FBT0ssTUFBTTtJQUN4QjtBQUNKO0FBQ0ExQixvQkFBb0IsR0FBR1M7QUFDdkIsU0FBU0Qsa0JBQWtCUyxHQUFHLEVBQUVFLEtBQUssRUFBRUMsTUFBTTtJQUN6QyxJQUFJQztJQUNKLElBQUk7UUFDQSxNQUFNaUIsU0FBU3pCLE9BQU8wQixVQUFVLENBQUM7UUFDakMsTUFBTUMsYUFBYWIsT0FBT2MsSUFBSSxDQUFDLENBQUMsNkJBQTZCLEVBQUV4QixJQUFJeUIsUUFBUSxDQUFDLFVBQVUsNkJBQTZCLENBQUM7UUFDcEhyQixTQUFTaUIsT0FBT2QsTUFBTSxDQUFDTCxPQUFPd0IsR0FBRyxHQUFHQyxJQUFJLENBQUNKO0lBQzdDLEVBQ0EsT0FBT1gsR0FBRztRQUNOLE9BQU9BO0lBQ1g7SUFDQVIsT0FBT1MsSUFBSSxDQUFDVjtJQUNaLE9BQU9DLE9BQU9LLE1BQU07QUFDeEI7QUFDQTFCLHlCQUF5QixHQUFHUTtBQUM1QlIsNEJBQTRCLEdBQUdZLGVBQWUsa0JBQWtCO0FBQ2hFWiw0QkFBNEIsR0FBR1ksZUFBZSxvQkFBb0I7QUFDbEVaLDRCQUE0QixHQUFHWSxlQUFlLGtCQUFrQjtBQUNoRVosNEJBQTRCLEdBQUdZLGVBQWUsb0JBQW9CO0FBQ2xFWixzQkFBc0IsR0FBR1MsYUFBYTtBQUN0Q1Qsc0JBQXNCLEdBQUdTLGFBQWEsV0FDdEMsNENBQTRDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYmxvZy1hcHBsaWNhdGlvbi8uL25vZGVfbW9kdWxlcy9tb25nb2RiL2xpYi9jbGllbnQtc2lkZS1lbmNyeXB0aW9uL2NyeXB0b19jYWxsYmFja3MuanM/OWQ4MyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuaG1hY1NoYTI1Nkhvb2sgPSBleHBvcnRzLmhtYWNTaGE1MTJIb29rID0gZXhwb3J0cy5hZXMyNTZDdHJEZWNyeXB0SG9vayA9IGV4cG9ydHMuYWVzMjU2Q3RyRW5jcnlwdEhvb2sgPSBleHBvcnRzLmFlczI1NkNiY0RlY3J5cHRIb29rID0gZXhwb3J0cy5hZXMyNTZDYmNFbmNyeXB0SG9vayA9IGV4cG9ydHMuc2lnblJzYVNoYTI1Nkhvb2sgPSBleHBvcnRzLm1ha2VIbWFjSG9vayA9IGV4cG9ydHMuc2hhMjU2SG9vayA9IGV4cG9ydHMucmFuZG9tSG9vayA9IGV4cG9ydHMubWFrZUFFUzI1Nkhvb2sgPSB2b2lkIDA7XG5jb25zdCBjcnlwdG8gPSByZXF1aXJlKFwiY3J5cHRvXCIpO1xuZnVuY3Rpb24gbWFrZUFFUzI1Nkhvb2sobWV0aG9kLCBtb2RlKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChrZXksIGl2LCBpbnB1dCwgb3V0cHV0KSB7XG4gICAgICAgIGxldCByZXN1bHQ7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBjb25zdCBjaXBoZXIgPSBjcnlwdG9bbWV0aG9kXShtb2RlLCBrZXksIGl2KTtcbiAgICAgICAgICAgIGNpcGhlci5zZXRBdXRvUGFkZGluZyhmYWxzZSk7XG4gICAgICAgICAgICByZXN1bHQgPSBjaXBoZXIudXBkYXRlKGlucHV0KTtcbiAgICAgICAgICAgIGNvbnN0IGZpbmFsID0gY2lwaGVyLmZpbmFsKCk7XG4gICAgICAgICAgICBpZiAoZmluYWwubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgICAgIHJlc3VsdCA9IEJ1ZmZlci5jb25jYXQoW3Jlc3VsdCwgZmluYWxdKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBjYXRjaCAoZSkge1xuICAgICAgICAgICAgcmV0dXJuIGU7XG4gICAgICAgIH1cbiAgICAgICAgcmVzdWx0LmNvcHkob3V0cHV0KTtcbiAgICAgICAgcmV0dXJuIHJlc3VsdC5sZW5ndGg7XG4gICAgfTtcbn1cbmV4cG9ydHMubWFrZUFFUzI1Nkhvb2sgPSBtYWtlQUVTMjU2SG9vaztcbmZ1bmN0aW9uIHJhbmRvbUhvb2soYnVmZmVyLCBjb3VudCkge1xuICAgIHRyeSB7XG4gICAgICAgIGNyeXB0by5yYW5kb21GaWxsU3luYyhidWZmZXIsIDAsIGNvdW50KTtcbiAgICB9XG4gICAgY2F0Y2ggKGUpIHtcbiAgICAgICAgcmV0dXJuIGU7XG4gICAgfVxuICAgIHJldHVybiBjb3VudDtcbn1cbmV4cG9ydHMucmFuZG9tSG9vayA9IHJhbmRvbUhvb2s7XG5mdW5jdGlvbiBzaGEyNTZIb29rKGlucHV0LCBvdXRwdXQpIHtcbiAgICBsZXQgcmVzdWx0O1xuICAgIHRyeSB7XG4gICAgICAgIHJlc3VsdCA9IGNyeXB0by5jcmVhdGVIYXNoKCdzaGEyNTYnKS51cGRhdGUoaW5wdXQpLmRpZ2VzdCgpO1xuICAgIH1cbiAgICBjYXRjaCAoZSkge1xuICAgICAgICByZXR1cm4gZTtcbiAgICB9XG4gICAgcmVzdWx0LmNvcHkob3V0cHV0KTtcbiAgICByZXR1cm4gcmVzdWx0Lmxlbmd0aDtcbn1cbmV4cG9ydHMuc2hhMjU2SG9vayA9IHNoYTI1Nkhvb2s7XG5mdW5jdGlvbiBtYWtlSG1hY0hvb2soYWxnb3JpdGhtKSB7XG4gICAgcmV0dXJuIChrZXksIGlucHV0LCBvdXRwdXQpID0+IHtcbiAgICAgICAgbGV0IHJlc3VsdDtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHJlc3VsdCA9IGNyeXB0by5jcmVhdGVIbWFjKGFsZ29yaXRobSwga2V5KS51cGRhdGUoaW5wdXQpLmRpZ2VzdCgpO1xuICAgICAgICB9XG4gICAgICAgIGNhdGNoIChlKSB7XG4gICAgICAgICAgICByZXR1cm4gZTtcbiAgICAgICAgfVxuICAgICAgICByZXN1bHQuY29weShvdXRwdXQpO1xuICAgICAgICByZXR1cm4gcmVzdWx0Lmxlbmd0aDtcbiAgICB9O1xufVxuZXhwb3J0cy5tYWtlSG1hY0hvb2sgPSBtYWtlSG1hY0hvb2s7XG5mdW5jdGlvbiBzaWduUnNhU2hhMjU2SG9vayhrZXksIGlucHV0LCBvdXRwdXQpIHtcbiAgICBsZXQgcmVzdWx0O1xuICAgIHRyeSB7XG4gICAgICAgIGNvbnN0IHNpZ25lciA9IGNyeXB0by5jcmVhdGVTaWduKCdzaGEyNTZXaXRoUlNBRW5jcnlwdGlvbicpO1xuICAgICAgICBjb25zdCBwcml2YXRlS2V5ID0gQnVmZmVyLmZyb20oYC0tLS0tQkVHSU4gUFJJVkFURSBLRVktLS0tLVxcbiR7a2V5LnRvU3RyaW5nKCdiYXNlNjQnKX1cXG4tLS0tLUVORCBQUklWQVRFIEtFWS0tLS0tXFxuYCk7XG4gICAgICAgIHJlc3VsdCA9IHNpZ25lci51cGRhdGUoaW5wdXQpLmVuZCgpLnNpZ24ocHJpdmF0ZUtleSk7XG4gICAgfVxuICAgIGNhdGNoIChlKSB7XG4gICAgICAgIHJldHVybiBlO1xuICAgIH1cbiAgICByZXN1bHQuY29weShvdXRwdXQpO1xuICAgIHJldHVybiByZXN1bHQubGVuZ3RoO1xufVxuZXhwb3J0cy5zaWduUnNhU2hhMjU2SG9vayA9IHNpZ25Sc2FTaGEyNTZIb29rO1xuZXhwb3J0cy5hZXMyNTZDYmNFbmNyeXB0SG9vayA9IG1ha2VBRVMyNTZIb29rKCdjcmVhdGVDaXBoZXJpdicsICdhZXMtMjU2LWNiYycpO1xuZXhwb3J0cy5hZXMyNTZDYmNEZWNyeXB0SG9vayA9IG1ha2VBRVMyNTZIb29rKCdjcmVhdGVEZWNpcGhlcml2JywgJ2Flcy0yNTYtY2JjJyk7XG5leHBvcnRzLmFlczI1NkN0ckVuY3J5cHRIb29rID0gbWFrZUFFUzI1Nkhvb2soJ2NyZWF0ZUNpcGhlcml2JywgJ2Flcy0yNTYtY3RyJyk7XG5leHBvcnRzLmFlczI1NkN0ckRlY3J5cHRIb29rID0gbWFrZUFFUzI1Nkhvb2soJ2NyZWF0ZURlY2lwaGVyaXYnLCAnYWVzLTI1Ni1jdHInKTtcbmV4cG9ydHMuaG1hY1NoYTUxMkhvb2sgPSBtYWtlSG1hY0hvb2soJ3NoYTUxMicpO1xuZXhwb3J0cy5obWFjU2hhMjU2SG9vayA9IG1ha2VIbWFjSG9vaygnc2hhMjU2Jyk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1jcnlwdG9fY2FsbGJhY2tzLmpzLm1hcCJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsImhtYWNTaGEyNTZIb29rIiwiaG1hY1NoYTUxMkhvb2siLCJhZXMyNTZDdHJEZWNyeXB0SG9vayIsImFlczI1NkN0ckVuY3J5cHRIb29rIiwiYWVzMjU2Q2JjRGVjcnlwdEhvb2siLCJhZXMyNTZDYmNFbmNyeXB0SG9vayIsInNpZ25Sc2FTaGEyNTZIb29rIiwibWFrZUhtYWNIb29rIiwic2hhMjU2SG9vayIsInJhbmRvbUhvb2siLCJtYWtlQUVTMjU2SG9vayIsImNyeXB0byIsInJlcXVpcmUiLCJtZXRob2QiLCJtb2RlIiwia2V5IiwiaXYiLCJpbnB1dCIsIm91dHB1dCIsInJlc3VsdCIsImNpcGhlciIsInNldEF1dG9QYWRkaW5nIiwidXBkYXRlIiwiZmluYWwiLCJsZW5ndGgiLCJCdWZmZXIiLCJjb25jYXQiLCJlIiwiY29weSIsImJ1ZmZlciIsImNvdW50IiwicmFuZG9tRmlsbFN5bmMiLCJjcmVhdGVIYXNoIiwiZGlnZXN0IiwiYWxnb3JpdGhtIiwiY3JlYXRlSG1hYyIsInNpZ25lciIsImNyZWF0ZVNpZ24iLCJwcml2YXRlS2V5IiwiZnJvbSIsInRvU3RyaW5nIiwiZW5kIiwic2lnbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongodb/lib/client-side-encryption/crypto_callbacks.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongodb/lib/client-side-encryption/errors.js":
/*!*******************************************************************!*\
  !*** ./node_modules/mongodb/lib/client-side-encryption/errors.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.MongoCryptKMSRequestNetworkTimeoutError = exports.MongoCryptAzureKMSRequestError = exports.MongoCryptCreateEncryptedCollectionError = exports.MongoCryptCreateDataKeyError = exports.MongoCryptInvalidArgumentError = exports.MongoCryptError = void 0;\nconst error_1 = __webpack_require__(/*! ../error */ \"(ssr)/./node_modules/mongodb/lib/error.js\");\n/**\n * @public\n * An error indicating that something went wrong specifically with MongoDB Client Encryption\n */ class MongoCryptError extends error_1.MongoError {\n    /**\n     * **Do not use this constructor!**\n     *\n     * Meant for internal use only.\n     *\n     * @remarks\n     * This class is only meant to be constructed within the driver. This constructor is\n     * not subject to semantic versioning compatibility guarantees and may change at any time.\n     *\n     * @public\n     **/ constructor(message, options = {}){\n        super(message, options);\n    }\n    get name() {\n        return \"MongoCryptError\";\n    }\n}\nexports.MongoCryptError = MongoCryptError;\n/**\n * @public\n *\n * An error indicating an invalid argument was provided to an encryption API.\n */ class MongoCryptInvalidArgumentError extends MongoCryptError {\n    /**\n     * **Do not use this constructor!**\n     *\n     * Meant for internal use only.\n     *\n     * @remarks\n     * This class is only meant to be constructed within the driver. This constructor is\n     * not subject to semantic versioning compatibility guarantees and may change at any time.\n     *\n     * @public\n     **/ constructor(message){\n        super(message);\n    }\n    get name() {\n        return \"MongoCryptInvalidArgumentError\";\n    }\n}\nexports.MongoCryptInvalidArgumentError = MongoCryptInvalidArgumentError;\n/**\n * @public\n * An error indicating that `ClientEncryption.createEncryptedCollection()` failed to create data keys\n */ class MongoCryptCreateDataKeyError extends MongoCryptError {\n    /**\n     * **Do not use this constructor!**\n     *\n     * Meant for internal use only.\n     *\n     * @remarks\n     * This class is only meant to be constructed within the driver. This constructor is\n     * not subject to semantic versioning compatibility guarantees and may change at any time.\n     *\n     * @public\n     **/ constructor(encryptedFields, { cause }){\n        super(`Unable to complete creating data keys: ${cause.message}`, {\n            cause\n        });\n        this.encryptedFields = encryptedFields;\n    }\n    get name() {\n        return \"MongoCryptCreateDataKeyError\";\n    }\n}\nexports.MongoCryptCreateDataKeyError = MongoCryptCreateDataKeyError;\n/**\n * @public\n * An error indicating that `ClientEncryption.createEncryptedCollection()` failed to create a collection\n */ class MongoCryptCreateEncryptedCollectionError extends MongoCryptError {\n    /**\n     * **Do not use this constructor!**\n     *\n     * Meant for internal use only.\n     *\n     * @remarks\n     * This class is only meant to be constructed within the driver. This constructor is\n     * not subject to semantic versioning compatibility guarantees and may change at any time.\n     *\n     * @public\n     **/ constructor(encryptedFields, { cause }){\n        super(`Unable to create collection: ${cause.message}`, {\n            cause\n        });\n        this.encryptedFields = encryptedFields;\n    }\n    get name() {\n        return \"MongoCryptCreateEncryptedCollectionError\";\n    }\n}\nexports.MongoCryptCreateEncryptedCollectionError = MongoCryptCreateEncryptedCollectionError;\n/**\n * @public\n * An error indicating that mongodb-client-encryption failed to auto-refresh Azure KMS credentials.\n */ class MongoCryptAzureKMSRequestError extends MongoCryptError {\n    /**\n     * **Do not use this constructor!**\n     *\n     * Meant for internal use only.\n     *\n     * @remarks\n     * This class is only meant to be constructed within the driver. This constructor is\n     * not subject to semantic versioning compatibility guarantees and may change at any time.\n     *\n     * @public\n     **/ constructor(message, body){\n        super(message);\n        this.body = body;\n    }\n    get name() {\n        return \"MongoCryptAzureKMSRequestError\";\n    }\n}\nexports.MongoCryptAzureKMSRequestError = MongoCryptAzureKMSRequestError;\n/** @public */ class MongoCryptKMSRequestNetworkTimeoutError extends MongoCryptError {\n    get name() {\n        return \"MongoCryptKMSRequestNetworkTimeoutError\";\n    }\n}\nexports.MongoCryptKMSRequestNetworkTimeoutError = MongoCryptKMSRequestNetworkTimeoutError; //# sourceMappingURL=errors.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongodb/lib/client-side-encryption/errors.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongodb/lib/client-side-encryption/mongocryptd_manager.js":
/*!********************************************************************************!*\
  !*** ./node_modules/mongodb/lib/client-side-encryption/mongocryptd_manager.js ***!
  \********************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.MongocryptdManager = void 0;\nconst error_1 = __webpack_require__(/*! ../error */ \"(ssr)/./node_modules/mongodb/lib/error.js\");\n/**\n * @internal\n * An internal class that handles spawning a mongocryptd.\n */ class MongocryptdManager {\n    constructor(extraOptions = {}){\n        this.uri = typeof extraOptions.mongocryptdURI === \"string\" && extraOptions.mongocryptdURI.length > 0 ? extraOptions.mongocryptdURI : MongocryptdManager.DEFAULT_MONGOCRYPTD_URI;\n        this.bypassSpawn = !!extraOptions.mongocryptdBypassSpawn;\n        this.spawnPath = extraOptions.mongocryptdSpawnPath || \"\";\n        this.spawnArgs = [];\n        if (Array.isArray(extraOptions.mongocryptdSpawnArgs)) {\n            this.spawnArgs = this.spawnArgs.concat(extraOptions.mongocryptdSpawnArgs);\n        }\n        if (this.spawnArgs.filter((arg)=>typeof arg === \"string\").every((arg)=>arg.indexOf(\"--idleShutdownTimeoutSecs\") < 0)) {\n            this.spawnArgs.push(\"--idleShutdownTimeoutSecs\", \"60\");\n        }\n    }\n    /**\n     * Will check to see if a mongocryptd is up. If it is not up, it will attempt\n     * to spawn a mongocryptd in a detached process, and then wait for it to be up.\n     */ async spawn() {\n        const cmdName = this.spawnPath || \"mongocryptd\";\n        // eslint-disable-next-line @typescript-eslint/no-var-requires\n        const { spawn } = __webpack_require__(/*! child_process */ \"child_process\");\n        // Spawned with stdio: ignore and detached: true\n        // to ensure child can outlive parent.\n        this._child = spawn(cmdName, this.spawnArgs, {\n            stdio: \"ignore\",\n            detached: true\n        });\n        this._child.on(\"error\", ()=>{\n        // From the FLE spec:\n        // \"The stdout and stderr of the spawned process MUST not be exposed in the driver\n        // (e.g. redirect to /dev/null). Users can pass the argument --logpath to\n        // extraOptions.mongocryptdSpawnArgs if they need to inspect mongocryptd logs.\n        // If spawning is necessary, the driver MUST spawn mongocryptd whenever server\n        // selection on the MongoClient to mongocryptd fails. If the MongoClient fails to\n        // connect after spawning, the server selection error is propagated to the user.\"\n        // The AutoEncrypter and MongoCryptdManager should work together to spawn\n        // mongocryptd whenever necessary.  Additionally, the `mongocryptd` intentionally\n        // shuts down after 60s and gets respawned when necessary.  We rely on server\n        // selection timeouts when connecting to the `mongocryptd` to inform users that something\n        // has been configured incorrectly.  For those reasons, we suppress stderr from\n        // the `mongocryptd` process and immediately unref the process.\n        });\n        // unref child to remove handle from event loop\n        this._child.unref();\n    }\n    /**\n     * @returns the result of `fn` or rejects with an error.\n     */ async withRespawn(fn) {\n        try {\n            const result = await fn();\n            return result;\n        } catch (err) {\n            // If we are not bypassing spawning, then we should retry once on a MongoTimeoutError (server selection error)\n            const shouldSpawn = err instanceof error_1.MongoNetworkTimeoutError && !this.bypassSpawn;\n            if (!shouldSpawn) {\n                throw err;\n            }\n        }\n        await this.spawn();\n        const result = await fn();\n        return result;\n    }\n}\nMongocryptdManager.DEFAULT_MONGOCRYPTD_URI = \"mongodb://localhost:27020\";\nexports.MongocryptdManager = MongocryptdManager; //# sourceMappingURL=mongocryptd_manager.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongodb/lib/client-side-encryption/mongocryptd_manager.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongodb/lib/client-side-encryption/providers/aws.js":
/*!**************************************************************************!*\
  !*** ./node_modules/mongodb/lib/client-side-encryption/providers/aws.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.loadAWSCredentials = void 0;\nconst deps_1 = __webpack_require__(/*! ../../deps */ \"(ssr)/./node_modules/mongodb/lib/deps.js\");\n/**\n * @internal\n */ async function loadAWSCredentials(kmsProviders) {\n    const credentialProvider = (0, deps_1.getAwsCredentialProvider)();\n    if (\"kModuleError\" in credentialProvider) {\n        return kmsProviders;\n    }\n    const { fromNodeProviderChain } = credentialProvider;\n    const provider = fromNodeProviderChain();\n    // The state machine is the only place calling this so it will\n    // catch if there is a rejection here.\n    const aws = await provider();\n    return {\n        ...kmsProviders,\n        aws\n    };\n}\nexports.loadAWSCredentials = loadAWSCredentials; //# sourceMappingURL=aws.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbW9uZ29kYi9saWIvY2xpZW50LXNpZGUtZW5jcnlwdGlvbi9wcm92aWRlcnMvYXdzLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2JBLDhDQUE2QztJQUFFRyxPQUFPO0FBQUssQ0FBQyxFQUFDO0FBQzdERCwwQkFBMEIsR0FBRyxLQUFLO0FBQ2xDLE1BQU1HLFNBQVNDLG1CQUFPQSxDQUFDLDREQUFZO0FBQ25DOztDQUVDLEdBQ0QsZUFBZUYsbUJBQW1CRyxZQUFZO0lBQzFDLE1BQU1DLHFCQUFxQixDQUFDLEdBQUdILE9BQU9JLHdCQUF3QjtJQUM5RCxJQUFJLGtCQUFrQkQsb0JBQW9CO1FBQ3RDLE9BQU9EO0lBQ1g7SUFDQSxNQUFNLEVBQUVHLHFCQUFxQixFQUFFLEdBQUdGO0lBQ2xDLE1BQU1HLFdBQVdEO0lBQ2pCLDhEQUE4RDtJQUM5RCxzQ0FBc0M7SUFDdEMsTUFBTUUsTUFBTSxNQUFNRDtJQUNsQixPQUFPO1FBQUUsR0FBR0osWUFBWTtRQUFFSztJQUFJO0FBQ2xDO0FBQ0FWLDBCQUEwQixHQUFHRSxvQkFDN0IsK0JBQStCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYmxvZy1hcHBsaWNhdGlvbi8uL25vZGVfbW9kdWxlcy9tb25nb2RiL2xpYi9jbGllbnQtc2lkZS1lbmNyeXB0aW9uL3Byb3ZpZGVycy9hd3MuanM/NDAzNiJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMubG9hZEFXU0NyZWRlbnRpYWxzID0gdm9pZCAwO1xuY29uc3QgZGVwc18xID0gcmVxdWlyZShcIi4uLy4uL2RlcHNcIik7XG4vKipcbiAqIEBpbnRlcm5hbFxuICovXG5hc3luYyBmdW5jdGlvbiBsb2FkQVdTQ3JlZGVudGlhbHMoa21zUHJvdmlkZXJzKSB7XG4gICAgY29uc3QgY3JlZGVudGlhbFByb3ZpZGVyID0gKDAsIGRlcHNfMS5nZXRBd3NDcmVkZW50aWFsUHJvdmlkZXIpKCk7XG4gICAgaWYgKCdrTW9kdWxlRXJyb3InIGluIGNyZWRlbnRpYWxQcm92aWRlcikge1xuICAgICAgICByZXR1cm4ga21zUHJvdmlkZXJzO1xuICAgIH1cbiAgICBjb25zdCB7IGZyb21Ob2RlUHJvdmlkZXJDaGFpbiB9ID0gY3JlZGVudGlhbFByb3ZpZGVyO1xuICAgIGNvbnN0IHByb3ZpZGVyID0gZnJvbU5vZGVQcm92aWRlckNoYWluKCk7XG4gICAgLy8gVGhlIHN0YXRlIG1hY2hpbmUgaXMgdGhlIG9ubHkgcGxhY2UgY2FsbGluZyB0aGlzIHNvIGl0IHdpbGxcbiAgICAvLyBjYXRjaCBpZiB0aGVyZSBpcyBhIHJlamVjdGlvbiBoZXJlLlxuICAgIGNvbnN0IGF3cyA9IGF3YWl0IHByb3ZpZGVyKCk7XG4gICAgcmV0dXJuIHsgLi4ua21zUHJvdmlkZXJzLCBhd3MgfTtcbn1cbmV4cG9ydHMubG9hZEFXU0NyZWRlbnRpYWxzID0gbG9hZEFXU0NyZWRlbnRpYWxzO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9YXdzLmpzLm1hcCJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsImxvYWRBV1NDcmVkZW50aWFscyIsImRlcHNfMSIsInJlcXVpcmUiLCJrbXNQcm92aWRlcnMiLCJjcmVkZW50aWFsUHJvdmlkZXIiLCJnZXRBd3NDcmVkZW50aWFsUHJvdmlkZXIiLCJmcm9tTm9kZVByb3ZpZGVyQ2hhaW4iLCJwcm92aWRlciIsImF3cyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongodb/lib/client-side-encryption/providers/aws.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongodb/lib/client-side-encryption/providers/azure.js":
/*!****************************************************************************!*\
  !*** ./node_modules/mongodb/lib/client-side-encryption/providers/azure.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.loadAzureCredentials = exports.fetchAzureKMSToken = exports.prepareRequest = exports.tokenCache = exports.AzureCredentialCache = void 0;\nconst errors_1 = __webpack_require__(/*! ../errors */ \"(ssr)/./node_modules/mongodb/lib/client-side-encryption/errors.js\");\nconst utils_1 = __webpack_require__(/*! ./utils */ \"(ssr)/./node_modules/mongodb/lib/client-side-encryption/providers/utils.js\");\nconst MINIMUM_TOKEN_REFRESH_IN_MILLISECONDS = 6000;\n/**\n * @internal\n */ class AzureCredentialCache {\n    constructor(){\n        this.cachedToken = null;\n    }\n    async getToken() {\n        if (this.cachedToken == null || this.needsRefresh(this.cachedToken)) {\n            this.cachedToken = await this._getToken();\n        }\n        return {\n            accessToken: this.cachedToken.accessToken\n        };\n    }\n    needsRefresh(token) {\n        const timeUntilExpirationMS = token.expiresOnTimestamp - Date.now();\n        return timeUntilExpirationMS <= MINIMUM_TOKEN_REFRESH_IN_MILLISECONDS;\n    }\n    /**\n     * exposed for testing\n     */ resetCache() {\n        this.cachedToken = null;\n    }\n    /**\n     * exposed for testing\n     */ _getToken() {\n        return fetchAzureKMSToken();\n    }\n}\nexports.AzureCredentialCache = AzureCredentialCache;\n/** @internal */ exports.tokenCache = new AzureCredentialCache();\n/** @internal */ async function parseResponse(response) {\n    const { status, body: rawBody } = response;\n    const body = (()=>{\n        try {\n            return JSON.parse(rawBody);\n        } catch  {\n            throw new errors_1.MongoCryptAzureKMSRequestError(\"Malformed JSON body in GET request.\");\n        }\n    })();\n    if (status !== 200) {\n        throw new errors_1.MongoCryptAzureKMSRequestError(\"Unable to complete request.\", body);\n    }\n    if (!body.access_token) {\n        throw new errors_1.MongoCryptAzureKMSRequestError(\"Malformed response body - missing field `access_token`.\");\n    }\n    if (!body.expires_in) {\n        throw new errors_1.MongoCryptAzureKMSRequestError(\"Malformed response body - missing field `expires_in`.\");\n    }\n    const expiresInMS = Number(body.expires_in) * 1000;\n    if (Number.isNaN(expiresInMS)) {\n        throw new errors_1.MongoCryptAzureKMSRequestError(\"Malformed response body - unable to parse int from `expires_in` field.\");\n    }\n    return {\n        accessToken: body.access_token,\n        expiresOnTimestamp: Date.now() + expiresInMS\n    };\n}\n/**\n * @internal\n *\n * parses any options provided by prose tests to `fetchAzureKMSToken` and merges them with\n * the default values for headers and the request url.\n */ function prepareRequest(options) {\n    const url = new URL(options.url?.toString() ?? \"http://169.254.169.254/metadata/identity/oauth2/token\");\n    url.searchParams.append(\"api-version\", \"2018-02-01\");\n    url.searchParams.append(\"resource\", \"https://vault.azure.net\");\n    const headers = {\n        ...options.headers,\n        \"Content-Type\": \"application/json\",\n        Metadata: true\n    };\n    return {\n        headers,\n        url\n    };\n}\nexports.prepareRequest = prepareRequest;\n/**\n * @internal\n *\n * `AzureKMSRequestOptions` allows prose tests to modify the http request sent to the idms\n * servers.  This is required to simulate different server conditions.  No options are expected to\n * be set outside of tests.\n *\n * exposed for CSFLE\n * [prose test 18](https://github.com/mongodb/specifications/tree/master/source/client-side-encryption/tests#azure-imds-credentials)\n */ async function fetchAzureKMSToken(options = {}) {\n    const { headers, url } = prepareRequest(options);\n    const response = await (0, utils_1.get)(url, {\n        headers\n    }).catch((error)=>{\n        if (error instanceof errors_1.MongoCryptKMSRequestNetworkTimeoutError) {\n            throw new errors_1.MongoCryptAzureKMSRequestError(`[Azure KMS] ${error.message}`);\n        }\n        throw error;\n    });\n    return parseResponse(response);\n}\nexports.fetchAzureKMSToken = fetchAzureKMSToken;\n/**\n * @internal\n *\n * @throws Will reject with a `MongoCryptError` if the http request fails or the http response is malformed.\n */ async function loadAzureCredentials(kmsProviders) {\n    const azure = await exports.tokenCache.getToken();\n    return {\n        ...kmsProviders,\n        azure\n    };\n}\nexports.loadAzureCredentials = loadAzureCredentials; //# sourceMappingURL=azure.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongodb/lib/client-side-encryption/providers/azure.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongodb/lib/client-side-encryption/providers/gcp.js":
/*!**************************************************************************!*\
  !*** ./node_modules/mongodb/lib/client-side-encryption/providers/gcp.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.loadGCPCredentials = void 0;\nconst deps_1 = __webpack_require__(/*! ../../deps */ \"(ssr)/./node_modules/mongodb/lib/deps.js\");\n/** @internal */ async function loadGCPCredentials(kmsProviders) {\n    const gcpMetadata = (0, deps_1.getGcpMetadata)();\n    if (\"kModuleError\" in gcpMetadata) {\n        return kmsProviders;\n    }\n    const { access_token: accessToken } = await gcpMetadata.instance({\n        property: \"service-accounts/default/token\"\n    });\n    return {\n        ...kmsProviders,\n        gcp: {\n            accessToken\n        }\n    };\n}\nexports.loadGCPCredentials = loadGCPCredentials; //# sourceMappingURL=gcp.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbW9uZ29kYi9saWIvY2xpZW50LXNpZGUtZW5jcnlwdGlvbi9wcm92aWRlcnMvZ2NwLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2JBLDhDQUE2QztJQUFFRyxPQUFPO0FBQUssQ0FBQyxFQUFDO0FBQzdERCwwQkFBMEIsR0FBRyxLQUFLO0FBQ2xDLE1BQU1HLFNBQVNDLG1CQUFPQSxDQUFDLDREQUFZO0FBQ25DLGNBQWMsR0FDZCxlQUFlRixtQkFBbUJHLFlBQVk7SUFDMUMsTUFBTUMsY0FBYyxDQUFDLEdBQUdILE9BQU9JLGNBQWM7SUFDN0MsSUFBSSxrQkFBa0JELGFBQWE7UUFDL0IsT0FBT0Q7SUFDWDtJQUNBLE1BQU0sRUFBRUcsY0FBY0MsV0FBVyxFQUFFLEdBQUcsTUFBTUgsWUFBWUksUUFBUSxDQUFDO1FBQzdEQyxVQUFVO0lBQ2Q7SUFDQSxPQUFPO1FBQUUsR0FBR04sWUFBWTtRQUFFTyxLQUFLO1lBQUVIO1FBQVk7SUFBRTtBQUNuRDtBQUNBVCwwQkFBMEIsR0FBR0Usb0JBQzdCLCtCQUErQiIsInNvdXJjZXMiOlsid2VicGFjazovL2Jsb2ctYXBwbGljYXRpb24vLi9ub2RlX21vZHVsZXMvbW9uZ29kYi9saWIvY2xpZW50LXNpZGUtZW5jcnlwdGlvbi9wcm92aWRlcnMvZ2NwLmpzP2YzODIiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLmxvYWRHQ1BDcmVkZW50aWFscyA9IHZvaWQgMDtcbmNvbnN0IGRlcHNfMSA9IHJlcXVpcmUoXCIuLi8uLi9kZXBzXCIpO1xuLyoqIEBpbnRlcm5hbCAqL1xuYXN5bmMgZnVuY3Rpb24gbG9hZEdDUENyZWRlbnRpYWxzKGttc1Byb3ZpZGVycykge1xuICAgIGNvbnN0IGdjcE1ldGFkYXRhID0gKDAsIGRlcHNfMS5nZXRHY3BNZXRhZGF0YSkoKTtcbiAgICBpZiAoJ2tNb2R1bGVFcnJvcicgaW4gZ2NwTWV0YWRhdGEpIHtcbiAgICAgICAgcmV0dXJuIGttc1Byb3ZpZGVycztcbiAgICB9XG4gICAgY29uc3QgeyBhY2Nlc3NfdG9rZW46IGFjY2Vzc1Rva2VuIH0gPSBhd2FpdCBnY3BNZXRhZGF0YS5pbnN0YW5jZSh7XG4gICAgICAgIHByb3BlcnR5OiAnc2VydmljZS1hY2NvdW50cy9kZWZhdWx0L3Rva2VuJ1xuICAgIH0pO1xuICAgIHJldHVybiB7IC4uLmttc1Byb3ZpZGVycywgZ2NwOiB7IGFjY2Vzc1Rva2VuIH0gfTtcbn1cbmV4cG9ydHMubG9hZEdDUENyZWRlbnRpYWxzID0gbG9hZEdDUENyZWRlbnRpYWxzO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Z2NwLmpzLm1hcCJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsImxvYWRHQ1BDcmVkZW50aWFscyIsImRlcHNfMSIsInJlcXVpcmUiLCJrbXNQcm92aWRlcnMiLCJnY3BNZXRhZGF0YSIsImdldEdjcE1ldGFkYXRhIiwiYWNjZXNzX3Rva2VuIiwiYWNjZXNzVG9rZW4iLCJpbnN0YW5jZSIsInByb3BlcnR5IiwiZ2NwIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongodb/lib/client-side-encryption/providers/gcp.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongodb/lib/client-side-encryption/providers/index.js":
/*!****************************************************************************!*\
  !*** ./node_modules/mongodb/lib/client-side-encryption/providers/index.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.refreshKMSCredentials = exports.isEmptyCredentials = void 0;\nconst aws_1 = __webpack_require__(/*! ./aws */ \"(ssr)/./node_modules/mongodb/lib/client-side-encryption/providers/aws.js\");\nconst azure_1 = __webpack_require__(/*! ./azure */ \"(ssr)/./node_modules/mongodb/lib/client-side-encryption/providers/azure.js\");\nconst gcp_1 = __webpack_require__(/*! ./gcp */ \"(ssr)/./node_modules/mongodb/lib/client-side-encryption/providers/gcp.js\");\n/**\n * Auto credential fetching should only occur when the provider is defined on the kmsProviders map\n * and the settings are an empty object.\n *\n * This is distinct from a nullish provider key.\n *\n * @internal - exposed for testing purposes only\n */ function isEmptyCredentials(providerName, kmsProviders) {\n    const provider = kmsProviders[providerName];\n    if (provider == null) {\n        return false;\n    }\n    return typeof provider === \"object\" && Object.keys(provider).length === 0;\n}\nexports.isEmptyCredentials = isEmptyCredentials;\n/**\n * Load cloud provider credentials for the user provided KMS providers.\n * Credentials will only attempt to get loaded if they do not exist\n * and no existing credentials will get overwritten.\n *\n * @internal\n */ async function refreshKMSCredentials(kmsProviders) {\n    let finalKMSProviders = kmsProviders;\n    if (isEmptyCredentials(\"aws\", kmsProviders)) {\n        finalKMSProviders = await (0, aws_1.loadAWSCredentials)(finalKMSProviders);\n    }\n    if (isEmptyCredentials(\"gcp\", kmsProviders)) {\n        finalKMSProviders = await (0, gcp_1.loadGCPCredentials)(finalKMSProviders);\n    }\n    if (isEmptyCredentials(\"azure\", kmsProviders)) {\n        finalKMSProviders = await (0, azure_1.loadAzureCredentials)(finalKMSProviders);\n    }\n    return finalKMSProviders;\n}\nexports.refreshKMSCredentials = refreshKMSCredentials; //# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbW9uZ29kYi9saWIvY2xpZW50LXNpZGUtZW5jcnlwdGlvbi9wcm92aWRlcnMvaW5kZXguanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYkEsOENBQTZDO0lBQUVHLE9BQU87QUFBSyxDQUFDLEVBQUM7QUFDN0RELDZCQUE2QixHQUFHQSwwQkFBMEIsR0FBRyxLQUFLO0FBQ2xFLE1BQU1JLFFBQVFDLG1CQUFPQSxDQUFDLHVGQUFPO0FBQzdCLE1BQU1DLFVBQVVELG1CQUFPQSxDQUFDLDJGQUFTO0FBQ2pDLE1BQU1FLFFBQVFGLG1CQUFPQSxDQUFDLHVGQUFPO0FBQzdCOzs7Ozs7O0NBT0MsR0FDRCxTQUFTRixtQkFBbUJLLFlBQVksRUFBRUMsWUFBWTtJQUNsRCxNQUFNQyxXQUFXRCxZQUFZLENBQUNELGFBQWE7SUFDM0MsSUFBSUUsWUFBWSxNQUFNO1FBQ2xCLE9BQU87SUFDWDtJQUNBLE9BQU8sT0FBT0EsYUFBYSxZQUFZWixPQUFPYSxJQUFJLENBQUNELFVBQVVFLE1BQU0sS0FBSztBQUM1RTtBQUNBWiwwQkFBMEIsR0FBR0c7QUFDN0I7Ozs7OztDQU1DLEdBQ0QsZUFBZUQsc0JBQXNCTyxZQUFZO0lBQzdDLElBQUlJLG9CQUFvQko7SUFDeEIsSUFBSU4sbUJBQW1CLE9BQU9NLGVBQWU7UUFDekNJLG9CQUFvQixNQUFNLENBQUMsR0FBR1QsTUFBTVUsa0JBQWtCLEVBQUVEO0lBQzVEO0lBQ0EsSUFBSVYsbUJBQW1CLE9BQU9NLGVBQWU7UUFDekNJLG9CQUFvQixNQUFNLENBQUMsR0FBR04sTUFBTVEsa0JBQWtCLEVBQUVGO0lBQzVEO0lBQ0EsSUFBSVYsbUJBQW1CLFNBQVNNLGVBQWU7UUFDM0NJLG9CQUFvQixNQUFNLENBQUMsR0FBR1AsUUFBUVUsb0JBQW9CLEVBQUVIO0lBQ2hFO0lBQ0EsT0FBT0E7QUFDWDtBQUNBYiw2QkFBNkIsR0FBR0UsdUJBQ2hDLGlDQUFpQyIsInNvdXJjZXMiOlsid2VicGFjazovL2Jsb2ctYXBwbGljYXRpb24vLi9ub2RlX21vZHVsZXMvbW9uZ29kYi9saWIvY2xpZW50LXNpZGUtZW5jcnlwdGlvbi9wcm92aWRlcnMvaW5kZXguanM/N2IyZiJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMucmVmcmVzaEtNU0NyZWRlbnRpYWxzID0gZXhwb3J0cy5pc0VtcHR5Q3JlZGVudGlhbHMgPSB2b2lkIDA7XG5jb25zdCBhd3NfMSA9IHJlcXVpcmUoXCIuL2F3c1wiKTtcbmNvbnN0IGF6dXJlXzEgPSByZXF1aXJlKFwiLi9henVyZVwiKTtcbmNvbnN0IGdjcF8xID0gcmVxdWlyZShcIi4vZ2NwXCIpO1xuLyoqXG4gKiBBdXRvIGNyZWRlbnRpYWwgZmV0Y2hpbmcgc2hvdWxkIG9ubHkgb2NjdXIgd2hlbiB0aGUgcHJvdmlkZXIgaXMgZGVmaW5lZCBvbiB0aGUga21zUHJvdmlkZXJzIG1hcFxuICogYW5kIHRoZSBzZXR0aW5ncyBhcmUgYW4gZW1wdHkgb2JqZWN0LlxuICpcbiAqIFRoaXMgaXMgZGlzdGluY3QgZnJvbSBhIG51bGxpc2ggcHJvdmlkZXIga2V5LlxuICpcbiAqIEBpbnRlcm5hbCAtIGV4cG9zZWQgZm9yIHRlc3RpbmcgcHVycG9zZXMgb25seVxuICovXG5mdW5jdGlvbiBpc0VtcHR5Q3JlZGVudGlhbHMocHJvdmlkZXJOYW1lLCBrbXNQcm92aWRlcnMpIHtcbiAgICBjb25zdCBwcm92aWRlciA9IGttc1Byb3ZpZGVyc1twcm92aWRlck5hbWVdO1xuICAgIGlmIChwcm92aWRlciA9PSBudWxsKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgcmV0dXJuIHR5cGVvZiBwcm92aWRlciA9PT0gJ29iamVjdCcgJiYgT2JqZWN0LmtleXMocHJvdmlkZXIpLmxlbmd0aCA9PT0gMDtcbn1cbmV4cG9ydHMuaXNFbXB0eUNyZWRlbnRpYWxzID0gaXNFbXB0eUNyZWRlbnRpYWxzO1xuLyoqXG4gKiBMb2FkIGNsb3VkIHByb3ZpZGVyIGNyZWRlbnRpYWxzIGZvciB0aGUgdXNlciBwcm92aWRlZCBLTVMgcHJvdmlkZXJzLlxuICogQ3JlZGVudGlhbHMgd2lsbCBvbmx5IGF0dGVtcHQgdG8gZ2V0IGxvYWRlZCBpZiB0aGV5IGRvIG5vdCBleGlzdFxuICogYW5kIG5vIGV4aXN0aW5nIGNyZWRlbnRpYWxzIHdpbGwgZ2V0IG92ZXJ3cml0dGVuLlxuICpcbiAqIEBpbnRlcm5hbFxuICovXG5hc3luYyBmdW5jdGlvbiByZWZyZXNoS01TQ3JlZGVudGlhbHMoa21zUHJvdmlkZXJzKSB7XG4gICAgbGV0IGZpbmFsS01TUHJvdmlkZXJzID0ga21zUHJvdmlkZXJzO1xuICAgIGlmIChpc0VtcHR5Q3JlZGVudGlhbHMoJ2F3cycsIGttc1Byb3ZpZGVycykpIHtcbiAgICAgICAgZmluYWxLTVNQcm92aWRlcnMgPSBhd2FpdCAoMCwgYXdzXzEubG9hZEFXU0NyZWRlbnRpYWxzKShmaW5hbEtNU1Byb3ZpZGVycyk7XG4gICAgfVxuICAgIGlmIChpc0VtcHR5Q3JlZGVudGlhbHMoJ2djcCcsIGttc1Byb3ZpZGVycykpIHtcbiAgICAgICAgZmluYWxLTVNQcm92aWRlcnMgPSBhd2FpdCAoMCwgZ2NwXzEubG9hZEdDUENyZWRlbnRpYWxzKShmaW5hbEtNU1Byb3ZpZGVycyk7XG4gICAgfVxuICAgIGlmIChpc0VtcHR5Q3JlZGVudGlhbHMoJ2F6dXJlJywga21zUHJvdmlkZXJzKSkge1xuICAgICAgICBmaW5hbEtNU1Byb3ZpZGVycyA9IGF3YWl0ICgwLCBhenVyZV8xLmxvYWRBenVyZUNyZWRlbnRpYWxzKShmaW5hbEtNU1Byb3ZpZGVycyk7XG4gICAgfVxuICAgIHJldHVybiBmaW5hbEtNU1Byb3ZpZGVycztcbn1cbmV4cG9ydHMucmVmcmVzaEtNU0NyZWRlbnRpYWxzID0gcmVmcmVzaEtNU0NyZWRlbnRpYWxzO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXguanMubWFwIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwicmVmcmVzaEtNU0NyZWRlbnRpYWxzIiwiaXNFbXB0eUNyZWRlbnRpYWxzIiwiYXdzXzEiLCJyZXF1aXJlIiwiYXp1cmVfMSIsImdjcF8xIiwicHJvdmlkZXJOYW1lIiwia21zUHJvdmlkZXJzIiwicHJvdmlkZXIiLCJrZXlzIiwibGVuZ3RoIiwiZmluYWxLTVNQcm92aWRlcnMiLCJsb2FkQVdTQ3JlZGVudGlhbHMiLCJsb2FkR0NQQ3JlZGVudGlhbHMiLCJsb2FkQXp1cmVDcmVkZW50aWFscyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongodb/lib/client-side-encryption/providers/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongodb/lib/client-side-encryption/providers/utils.js":
/*!****************************************************************************!*\
  !*** ./node_modules/mongodb/lib/client-side-encryption/providers/utils.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.get = void 0;\nconst http = __webpack_require__(/*! http */ \"http\");\nconst timers_1 = __webpack_require__(/*! timers */ \"timers\");\nconst errors_1 = __webpack_require__(/*! ../errors */ \"(ssr)/./node_modules/mongodb/lib/client-side-encryption/errors.js\");\n/**\n * @internal\n */ function get(url, options = {}) {\n    return new Promise((resolve, reject)=>{\n        /* eslint-disable prefer-const */ let timeoutId;\n        const request = http.get(url, options, (response)=>{\n            response.setEncoding(\"utf8\");\n            let body = \"\";\n            response.on(\"data\", (chunk)=>body += chunk);\n            response.on(\"end\", ()=>{\n                (0, timers_1.clearTimeout)(timeoutId);\n                resolve({\n                    status: response.statusCode,\n                    body\n                });\n            });\n        }).on(\"error\", (error)=>{\n            (0, timers_1.clearTimeout)(timeoutId);\n            reject(error);\n        }).end();\n        timeoutId = (0, timers_1.setTimeout)(()=>{\n            request.destroy(new errors_1.MongoCryptKMSRequestNetworkTimeoutError(`request timed out after 10 seconds`));\n        }, 10000);\n    });\n}\nexports.get = get; //# sourceMappingURL=utils.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbW9uZ29kYi9saWIvY2xpZW50LXNpZGUtZW5jcnlwdGlvbi9wcm92aWRlcnMvdXRpbHMuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYkEsOENBQTZDO0lBQUVHLE9BQU87QUFBSyxDQUFDLEVBQUM7QUFDN0RELFdBQVcsR0FBRyxLQUFLO0FBQ25CLE1BQU1HLE9BQU9DLG1CQUFPQSxDQUFDLGtCQUFNO0FBQzNCLE1BQU1DLFdBQVdELG1CQUFPQSxDQUFDLHNCQUFRO0FBQ2pDLE1BQU1FLFdBQVdGLG1CQUFPQSxDQUFDLG9GQUFXO0FBQ3BDOztDQUVDLEdBQ0QsU0FBU0YsSUFBSUssR0FBRyxFQUFFQyxVQUFVLENBQUMsQ0FBQztJQUMxQixPQUFPLElBQUlDLFFBQVEsQ0FBQ0MsU0FBU0M7UUFDekIsK0JBQStCLEdBQy9CLElBQUlDO1FBQ0osTUFBTUMsVUFBVVYsS0FDWEQsR0FBRyxDQUFDSyxLQUFLQyxTQUFTTSxDQUFBQTtZQUNuQkEsU0FBU0MsV0FBVyxDQUFDO1lBQ3JCLElBQUlDLE9BQU87WUFDWEYsU0FBU0csRUFBRSxDQUFDLFFBQVFDLENBQUFBLFFBQVVGLFFBQVFFO1lBQ3RDSixTQUFTRyxFQUFFLENBQUMsT0FBTztnQkFDZCxJQUFHWixTQUFTYyxZQUFZLEVBQUVQO2dCQUMzQkYsUUFBUTtvQkFBRVUsUUFBUU4sU0FBU08sVUFBVTtvQkFBRUw7Z0JBQUs7WUFDaEQ7UUFDSixHQUNLQyxFQUFFLENBQUMsU0FBU0ssQ0FBQUE7WUFDWixJQUFHakIsU0FBU2MsWUFBWSxFQUFFUDtZQUMzQkQsT0FBT1c7UUFDWCxHQUNLQyxHQUFHO1FBQ1JYLFlBQVksQ0FBQyxHQUFHUCxTQUFTbUIsVUFBVSxFQUFFO1lBQ2pDWCxRQUFRWSxPQUFPLENBQUMsSUFBSW5CLFNBQVNvQix1Q0FBdUMsQ0FBQyxDQUFDLGtDQUFrQyxDQUFDO1FBQzdHLEdBQUc7SUFDUDtBQUNKO0FBQ0ExQixXQUFXLEdBQUdFLEtBQ2QsaUNBQWlDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYmxvZy1hcHBsaWNhdGlvbi8uL25vZGVfbW9kdWxlcy9tb25nb2RiL2xpYi9jbGllbnQtc2lkZS1lbmNyeXB0aW9uL3Byb3ZpZGVycy91dGlscy5qcz84NzRmIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5nZXQgPSB2b2lkIDA7XG5jb25zdCBodHRwID0gcmVxdWlyZShcImh0dHBcIik7XG5jb25zdCB0aW1lcnNfMSA9IHJlcXVpcmUoXCJ0aW1lcnNcIik7XG5jb25zdCBlcnJvcnNfMSA9IHJlcXVpcmUoXCIuLi9lcnJvcnNcIik7XG4vKipcbiAqIEBpbnRlcm5hbFxuICovXG5mdW5jdGlvbiBnZXQodXJsLCBvcHRpb25zID0ge30pIHtcbiAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgICAvKiBlc2xpbnQtZGlzYWJsZSBwcmVmZXItY29uc3QgKi9cbiAgICAgICAgbGV0IHRpbWVvdXRJZDtcbiAgICAgICAgY29uc3QgcmVxdWVzdCA9IGh0dHBcbiAgICAgICAgICAgIC5nZXQodXJsLCBvcHRpb25zLCByZXNwb25zZSA9PiB7XG4gICAgICAgICAgICByZXNwb25zZS5zZXRFbmNvZGluZygndXRmOCcpO1xuICAgICAgICAgICAgbGV0IGJvZHkgPSAnJztcbiAgICAgICAgICAgIHJlc3BvbnNlLm9uKCdkYXRhJywgY2h1bmsgPT4gKGJvZHkgKz0gY2h1bmspKTtcbiAgICAgICAgICAgIHJlc3BvbnNlLm9uKCdlbmQnLCAoKSA9PiB7XG4gICAgICAgICAgICAgICAgKDAsIHRpbWVyc18xLmNsZWFyVGltZW91dCkodGltZW91dElkKTtcbiAgICAgICAgICAgICAgICByZXNvbHZlKHsgc3RhdHVzOiByZXNwb25zZS5zdGF0dXNDb2RlLCBib2R5IH0pO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pXG4gICAgICAgICAgICAub24oJ2Vycm9yJywgZXJyb3IgPT4ge1xuICAgICAgICAgICAgKDAsIHRpbWVyc18xLmNsZWFyVGltZW91dCkodGltZW91dElkKTtcbiAgICAgICAgICAgIHJlamVjdChlcnJvcik7XG4gICAgICAgIH0pXG4gICAgICAgICAgICAuZW5kKCk7XG4gICAgICAgIHRpbWVvdXRJZCA9ICgwLCB0aW1lcnNfMS5zZXRUaW1lb3V0KSgoKSA9PiB7XG4gICAgICAgICAgICByZXF1ZXN0LmRlc3Ryb3kobmV3IGVycm9yc18xLk1vbmdvQ3J5cHRLTVNSZXF1ZXN0TmV0d29ya1RpbWVvdXRFcnJvcihgcmVxdWVzdCB0aW1lZCBvdXQgYWZ0ZXIgMTAgc2Vjb25kc2ApKTtcbiAgICAgICAgfSwgMTAwMDApO1xuICAgIH0pO1xufVxuZXhwb3J0cy5nZXQgPSBnZXQ7XG4vLyMgc291cmNlTWFwcGluZ1VSTD11dGlscy5qcy5tYXAiXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJnZXQiLCJodHRwIiwicmVxdWlyZSIsInRpbWVyc18xIiwiZXJyb3JzXzEiLCJ1cmwiLCJvcHRpb25zIiwiUHJvbWlzZSIsInJlc29sdmUiLCJyZWplY3QiLCJ0aW1lb3V0SWQiLCJyZXF1ZXN0IiwicmVzcG9uc2UiLCJzZXRFbmNvZGluZyIsImJvZHkiLCJvbiIsImNodW5rIiwiY2xlYXJUaW1lb3V0Iiwic3RhdHVzIiwic3RhdHVzQ29kZSIsImVycm9yIiwiZW5kIiwic2V0VGltZW91dCIsImRlc3Ryb3kiLCJNb25nb0NyeXB0S01TUmVxdWVzdE5ldHdvcmtUaW1lb3V0RXJyb3IiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongodb/lib/client-side-encryption/providers/utils.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongodb/lib/client-side-encryption/state_machine.js":
/*!**************************************************************************!*\
  !*** ./node_modules/mongodb/lib/client-side-encryption/state_machine.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.StateMachine = void 0;\nconst fs = __webpack_require__(/*! fs/promises */ \"fs/promises\");\nconst net = __webpack_require__(/*! net */ \"net\");\nconst tls = __webpack_require__(/*! tls */ \"tls\");\nconst bson_1 = __webpack_require__(/*! ../bson */ \"(ssr)/./node_modules/mongodb/lib/bson.js\");\nconst deps_1 = __webpack_require__(/*! ../deps */ \"(ssr)/./node_modules/mongodb/lib/deps.js\");\nconst utils_1 = __webpack_require__(/*! ../utils */ \"(ssr)/./node_modules/mongodb/lib/utils.js\");\nconst errors_1 = __webpack_require__(/*! ./errors */ \"(ssr)/./node_modules/mongodb/lib/client-side-encryption/errors.js\");\nlet socks = null;\nfunction loadSocks() {\n    if (socks == null) {\n        const socksImport = (0, deps_1.getSocks)();\n        if (\"kModuleError\" in socksImport) {\n            throw socksImport.kModuleError;\n        }\n        socks = socksImport;\n    }\n    return socks;\n}\n// libmongocrypt states\nconst MONGOCRYPT_CTX_ERROR = 0;\nconst MONGOCRYPT_CTX_NEED_MONGO_COLLINFO = 1;\nconst MONGOCRYPT_CTX_NEED_MONGO_MARKINGS = 2;\nconst MONGOCRYPT_CTX_NEED_MONGO_KEYS = 3;\nconst MONGOCRYPT_CTX_NEED_KMS_CREDENTIALS = 7;\nconst MONGOCRYPT_CTX_NEED_KMS = 4;\nconst MONGOCRYPT_CTX_READY = 5;\nconst MONGOCRYPT_CTX_DONE = 6;\nconst HTTPS_PORT = 443;\nconst stateToString = new Map([\n    [\n        MONGOCRYPT_CTX_ERROR,\n        \"MONGOCRYPT_CTX_ERROR\"\n    ],\n    [\n        MONGOCRYPT_CTX_NEED_MONGO_COLLINFO,\n        \"MONGOCRYPT_CTX_NEED_MONGO_COLLINFO\"\n    ],\n    [\n        MONGOCRYPT_CTX_NEED_MONGO_MARKINGS,\n        \"MONGOCRYPT_CTX_NEED_MONGO_MARKINGS\"\n    ],\n    [\n        MONGOCRYPT_CTX_NEED_MONGO_KEYS,\n        \"MONGOCRYPT_CTX_NEED_MONGO_KEYS\"\n    ],\n    [\n        MONGOCRYPT_CTX_NEED_KMS_CREDENTIALS,\n        \"MONGOCRYPT_CTX_NEED_KMS_CREDENTIALS\"\n    ],\n    [\n        MONGOCRYPT_CTX_NEED_KMS,\n        \"MONGOCRYPT_CTX_NEED_KMS\"\n    ],\n    [\n        MONGOCRYPT_CTX_READY,\n        \"MONGOCRYPT_CTX_READY\"\n    ],\n    [\n        MONGOCRYPT_CTX_DONE,\n        \"MONGOCRYPT_CTX_DONE\"\n    ]\n]);\nconst INSECURE_TLS_OPTIONS = [\n    \"tlsInsecure\",\n    \"tlsAllowInvalidCertificates\",\n    \"tlsAllowInvalidHostnames\",\n    // These options are disallowed by the spec, so we explicitly filter them out if provided, even\n    // though the StateMachine does not declare support for these options.\n    \"tlsDisableOCSPEndpointCheck\",\n    \"tlsDisableCertificateRevocationCheck\"\n];\n/**\n * Helper function for logging. Enabled by setting the environment flag MONGODB_CRYPT_DEBUG.\n * @param msg - Anything you want to be logged.\n */ function debug(msg) {\n    if (process.env.MONGODB_CRYPT_DEBUG) {\n        // eslint-disable-next-line no-console\n        console.error(msg);\n    }\n}\n/**\n * @internal\n * An internal class that executes across a MongoCryptContext until either\n * a finishing state or an error is reached. Do not instantiate directly.\n */ class StateMachine {\n    constructor(options, bsonOptions = (0, bson_1.pluckBSONSerializeOptions)(options)){\n        this.options = options;\n        this.bsonOptions = bsonOptions;\n    }\n    /**\n     * Executes the state machine according to the specification\n     */ async execute(executor, context) {\n        const keyVaultNamespace = executor._keyVaultNamespace;\n        const keyVaultClient = executor._keyVaultClient;\n        const metaDataClient = executor._metaDataClient;\n        const mongocryptdClient = executor._mongocryptdClient;\n        const mongocryptdManager = executor._mongocryptdManager;\n        let result = null;\n        while(context.state !== MONGOCRYPT_CTX_DONE && context.state !== MONGOCRYPT_CTX_ERROR){\n            debug(`[context#${context.id}] ${stateToString.get(context.state) || context.state}`);\n            switch(context.state){\n                case MONGOCRYPT_CTX_NEED_MONGO_COLLINFO:\n                    {\n                        const filter = (0, bson_1.deserialize)(context.nextMongoOperation());\n                        if (!metaDataClient) {\n                            throw new errors_1.MongoCryptError(\"unreachable state machine state: entered MONGOCRYPT_CTX_NEED_MONGO_COLLINFO but metadata client is undefined\");\n                        }\n                        const collInfo = await this.fetchCollectionInfo(metaDataClient, context.ns, filter);\n                        if (collInfo) {\n                            context.addMongoOperationResponse(collInfo);\n                        }\n                        context.finishMongoOperation();\n                        break;\n                    }\n                case MONGOCRYPT_CTX_NEED_MONGO_MARKINGS:\n                    {\n                        const command = context.nextMongoOperation();\n                        if (!mongocryptdClient) {\n                            throw new errors_1.MongoCryptError(\"unreachable state machine state: entered MONGOCRYPT_CTX_NEED_MONGO_MARKINGS but mongocryptdClient is undefined\");\n                        }\n                        // When we are using the shared library, we don't have a mongocryptd manager.\n                        const markedCommand = mongocryptdManager ? await mongocryptdManager.withRespawn(this.markCommand.bind(this, mongocryptdClient, context.ns, command)) : await this.markCommand(mongocryptdClient, context.ns, command);\n                        context.addMongoOperationResponse(markedCommand);\n                        context.finishMongoOperation();\n                        break;\n                    }\n                case MONGOCRYPT_CTX_NEED_MONGO_KEYS:\n                    {\n                        const filter = context.nextMongoOperation();\n                        const keys = await this.fetchKeys(keyVaultClient, keyVaultNamespace, filter);\n                        if (keys.length === 0) {\n                            // This is kind of a hack.  For `rewrapManyDataKey`, we have tests that\n                            // guarantee that when there are no matching keys, `rewrapManyDataKey` returns\n                            // nothing.  We also have tests for auto encryption that guarantee for `encrypt`\n                            // we return an error when there are no matching keys.  This error is generated in\n                            // subsequent iterations of the state machine.\n                            // Some apis (`encrypt`) throw if there are no filter matches and others (`rewrapManyDataKey`)\n                            // do not.  We set the result manually here, and let the state machine continue.  `libmongocrypt`\n                            // will inform us if we need to error by setting the state to `MONGOCRYPT_CTX_ERROR` but\n                            // otherwise we'll return `{ v: [] }`.\n                            result = {\n                                v: []\n                            };\n                        }\n                        for await (const key of keys){\n                            context.addMongoOperationResponse((0, bson_1.serialize)(key));\n                        }\n                        context.finishMongoOperation();\n                        break;\n                    }\n                case MONGOCRYPT_CTX_NEED_KMS_CREDENTIALS:\n                    {\n                        const kmsProviders = await executor.askForKMSCredentials();\n                        context.provideKMSProviders((0, bson_1.serialize)(kmsProviders));\n                        break;\n                    }\n                case MONGOCRYPT_CTX_NEED_KMS:\n                    {\n                        const requests = Array.from(this.requests(context));\n                        await Promise.all(requests);\n                        context.finishKMSRequests();\n                        break;\n                    }\n                case MONGOCRYPT_CTX_READY:\n                    {\n                        const finalizedContext = context.finalize();\n                        // @ts-expect-error finalize can change the state, check for error\n                        if (context.state === MONGOCRYPT_CTX_ERROR) {\n                            const message = context.status.message || \"Finalization error\";\n                            throw new errors_1.MongoCryptError(message);\n                        }\n                        result = (0, bson_1.deserialize)(finalizedContext, this.options);\n                        break;\n                    }\n                default:\n                    throw new errors_1.MongoCryptError(`Unknown state: ${context.state}`);\n            }\n        }\n        if (context.state === MONGOCRYPT_CTX_ERROR || result == null) {\n            const message = context.status.message;\n            if (!message) {\n                debug(`unidentifiable error in MongoCrypt - received an error status from \\`libmongocrypt\\` but received no error message.`);\n            }\n            throw new errors_1.MongoCryptError(message ?? \"unidentifiable error in MongoCrypt - received an error status from `libmongocrypt` but received no error message.\");\n        }\n        return result;\n    }\n    /**\n     * Handles the request to the KMS service. Exposed for testing purposes. Do not directly invoke.\n     * @param kmsContext - A C++ KMS context returned from the bindings\n     * @returns A promise that resolves when the KMS reply has be fully parsed\n     */ kmsRequest(request) {\n        const parsedUrl = request.endpoint.split(\":\");\n        const port = parsedUrl[1] != null ? Number.parseInt(parsedUrl[1], 10) : HTTPS_PORT;\n        const options = {\n            host: parsedUrl[0],\n            servername: parsedUrl[0],\n            port\n        };\n        const message = request.message;\n        // TODO(NODE-3959): We can adopt `for-await on(socket, 'data')` with logic to control abort\n        // eslint-disable-next-line @typescript-eslint/no-misused-promises, no-async-promise-executor\n        return new Promise(async (resolve, reject)=>{\n            const buffer = new utils_1.BufferPool();\n            // eslint-disable-next-line prefer-const\n            let socket;\n            let rawSocket;\n            function destroySockets() {\n                for (const sock of [\n                    socket,\n                    rawSocket\n                ]){\n                    if (sock) {\n                        sock.removeAllListeners();\n                        sock.destroy();\n                    }\n                }\n            }\n            function ontimeout() {\n                destroySockets();\n                reject(new errors_1.MongoCryptError(\"KMS request timed out\"));\n            }\n            function onerror(err) {\n                destroySockets();\n                const mcError = new errors_1.MongoCryptError(\"KMS request failed\", {\n                    cause: err\n                });\n                reject(mcError);\n            }\n            if (this.options.proxyOptions && this.options.proxyOptions.proxyHost) {\n                rawSocket = net.connect({\n                    host: this.options.proxyOptions.proxyHost,\n                    port: this.options.proxyOptions.proxyPort || 1080\n                });\n                rawSocket.on(\"timeout\", ontimeout);\n                rawSocket.on(\"error\", onerror);\n                try {\n                    // eslint-disable-next-line @typescript-eslint/no-var-requires\n                    const events = __webpack_require__(/*! events */ \"events\");\n                    await events.once(rawSocket, \"connect\");\n                    socks ??= loadSocks();\n                    options.socket = (await socks.SocksClient.createConnection({\n                        existing_socket: rawSocket,\n                        command: \"connect\",\n                        destination: {\n                            host: options.host,\n                            port: options.port\n                        },\n                        proxy: {\n                            // host and port are ignored because we pass existing_socket\n                            host: \"iLoveJavaScript\",\n                            port: 0,\n                            type: 5,\n                            userId: this.options.proxyOptions.proxyUsername,\n                            password: this.options.proxyOptions.proxyPassword\n                        }\n                    })).socket;\n                } catch (err) {\n                    return onerror(err);\n                }\n            }\n            const tlsOptions = this.options.tlsOptions;\n            if (tlsOptions) {\n                const kmsProvider = request.kmsProvider;\n                const providerTlsOptions = tlsOptions[kmsProvider];\n                if (providerTlsOptions) {\n                    const error = this.validateTlsOptions(kmsProvider, providerTlsOptions);\n                    if (error) reject(error);\n                    try {\n                        await this.setTlsOptions(providerTlsOptions, options);\n                    } catch (error) {\n                        return onerror(error);\n                    }\n                }\n            }\n            socket = tls.connect(options, ()=>{\n                socket.write(message);\n            });\n            socket.once(\"timeout\", ontimeout);\n            socket.once(\"error\", onerror);\n            socket.on(\"data\", (data)=>{\n                buffer.append(data);\n                while(request.bytesNeeded > 0 && buffer.length){\n                    const bytesNeeded = Math.min(request.bytesNeeded, buffer.length);\n                    request.addResponse(buffer.read(bytesNeeded));\n                }\n                if (request.bytesNeeded <= 0) {\n                    // There's no need for any more activity on this socket at this point.\n                    destroySockets();\n                    resolve();\n                }\n            });\n        });\n    }\n    *requests(context) {\n        for(let request = context.nextKMSRequest(); request != null; request = context.nextKMSRequest()){\n            yield this.kmsRequest(request);\n        }\n    }\n    /**\n     * Validates the provided TLS options are secure.\n     *\n     * @param kmsProvider - The KMS provider name.\n     * @param tlsOptions - The client TLS options for the provider.\n     *\n     * @returns An error if any option is invalid.\n     */ validateTlsOptions(kmsProvider, tlsOptions) {\n        const tlsOptionNames = Object.keys(tlsOptions);\n        for (const option of INSECURE_TLS_OPTIONS){\n            if (tlsOptionNames.includes(option)) {\n                return new errors_1.MongoCryptError(`Insecure TLS options prohibited for ${kmsProvider}: ${option}`);\n            }\n        }\n    }\n    /**\n     * Sets only the valid secure TLS options.\n     *\n     * @param tlsOptions - The client TLS options for the provider.\n     * @param options - The existing connection options.\n     */ async setTlsOptions(tlsOptions, options) {\n        if (tlsOptions.tlsCertificateKeyFile) {\n            const cert = await fs.readFile(tlsOptions.tlsCertificateKeyFile);\n            options.cert = options.key = cert;\n        }\n        if (tlsOptions.tlsCAFile) {\n            options.ca = await fs.readFile(tlsOptions.tlsCAFile);\n        }\n        if (tlsOptions.tlsCertificateKeyFilePassword) {\n            options.passphrase = tlsOptions.tlsCertificateKeyFilePassword;\n        }\n    }\n    /**\n     * Fetches collection info for a provided namespace, when libmongocrypt\n     * enters the `MONGOCRYPT_CTX_NEED_MONGO_COLLINFO` state. The result is\n     * used to inform libmongocrypt of the schema associated with this\n     * namespace. Exposed for testing purposes. Do not directly invoke.\n     *\n     * @param client - A MongoClient connected to the topology\n     * @param ns - The namespace to list collections from\n     * @param filter - A filter for the listCollections command\n     * @param callback - Invoked with the info of the requested collection, or with an error\n     */ async fetchCollectionInfo(client, ns, filter) {\n        const { db } = utils_1.MongoDBCollectionNamespace.fromString(ns);\n        const collections = await client.db(db).listCollections(filter, {\n            promoteLongs: false,\n            promoteValues: false\n        }).toArray();\n        const info = collections.length > 0 ? (0, bson_1.serialize)(collections[0]) : null;\n        return info;\n    }\n    /**\n     * Calls to the mongocryptd to provide markings for a command.\n     * Exposed for testing purposes. Do not directly invoke.\n     * @param client - A MongoClient connected to a mongocryptd\n     * @param ns - The namespace (database.collection) the command is being executed on\n     * @param command - The command to execute.\n     * @param callback - Invoked with the serialized and marked bson command, or with an error\n     */ async markCommand(client, ns, command) {\n        const options = {\n            promoteLongs: false,\n            promoteValues: false\n        };\n        const { db } = utils_1.MongoDBCollectionNamespace.fromString(ns);\n        const rawCommand = (0, bson_1.deserialize)(command, options);\n        const response = await client.db(db).command(rawCommand, options);\n        return (0, bson_1.serialize)(response, this.bsonOptions);\n    }\n    /**\n     * Requests keys from the keyVault collection on the topology.\n     * Exposed for testing purposes. Do not directly invoke.\n     * @param client - A MongoClient connected to the topology\n     * @param keyVaultNamespace - The namespace (database.collection) of the keyVault Collection\n     * @param filter - The filter for the find query against the keyVault Collection\n     * @param callback - Invoked with the found keys, or with an error\n     */ fetchKeys(client, keyVaultNamespace, filter) {\n        const { db: dbName, collection: collectionName } = utils_1.MongoDBCollectionNamespace.fromString(keyVaultNamespace);\n        return client.db(dbName).collection(collectionName, {\n            readConcern: {\n                level: \"majority\"\n            }\n        }).find((0, bson_1.deserialize)(filter)).toArray();\n    }\n}\nexports.StateMachine = StateMachine; //# sourceMappingURL=state_machine.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongodb/lib/client-side-encryption/state_machine.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongodb/lib/cmap/auth/auth_provider.js":
/*!*************************************************************!*\
  !*** ./node_modules/mongodb/lib/cmap/auth/auth_provider.js ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.AuthProvider = exports.AuthContext = void 0;\nconst error_1 = __webpack_require__(/*! ../../error */ \"(ssr)/./node_modules/mongodb/lib/error.js\");\n/**\n * Context used during authentication\n * @internal\n */ class AuthContext {\n    constructor(connection, credentials, options){\n        /** If the context is for reauthentication. */ this.reauthenticating = false;\n        this.connection = connection;\n        this.credentials = credentials;\n        this.options = options;\n    }\n}\nexports.AuthContext = AuthContext;\nclass AuthProvider {\n    /**\n     * Prepare the handshake document before the initial handshake.\n     *\n     * @param handshakeDoc - The document used for the initial handshake on a connection\n     * @param authContext - Context for authentication flow\n     */ async prepare(handshakeDoc, _authContext) {\n        return handshakeDoc;\n    }\n    /**\n     * Reauthenticate.\n     * @param context - The shared auth context.\n     */ async reauth(context) {\n        if (context.reauthenticating) {\n            throw new error_1.MongoRuntimeError(\"Reauthentication already in progress.\");\n        }\n        try {\n            context.reauthenticating = true;\n            await this.auth(context);\n        } finally{\n            context.reauthenticating = false;\n        }\n    }\n}\nexports.AuthProvider = AuthProvider; //# sourceMappingURL=auth_provider.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbW9uZ29kYi9saWIvY21hcC9hdXRoL2F1dGhfcHJvdmlkZXIuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYkEsOENBQTZDO0lBQUVHLE9BQU87QUFBSyxDQUFDLEVBQUM7QUFDN0RELG9CQUFvQixHQUFHQSxtQkFBbUIsR0FBRyxLQUFLO0FBQ2xELE1BQU1JLFVBQVVDLG1CQUFPQSxDQUFDLDhEQUFhO0FBQ3JDOzs7Q0FHQyxHQUNELE1BQU1GO0lBQ0ZHLFlBQVlDLFVBQVUsRUFBRUMsV0FBVyxFQUFFQyxPQUFPLENBQUU7UUFDMUMsNENBQTRDLEdBQzVDLElBQUksQ0FBQ0MsZ0JBQWdCLEdBQUc7UUFDeEIsSUFBSSxDQUFDSCxVQUFVLEdBQUdBO1FBQ2xCLElBQUksQ0FBQ0MsV0FBVyxHQUFHQTtRQUNuQixJQUFJLENBQUNDLE9BQU8sR0FBR0E7SUFDbkI7QUFDSjtBQUNBVCxtQkFBbUIsR0FBR0c7QUFDdEIsTUFBTUQ7SUFDRjs7Ozs7S0FLQyxHQUNELE1BQU1TLFFBQVFDLFlBQVksRUFBRUMsWUFBWSxFQUFFO1FBQ3RDLE9BQU9EO0lBQ1g7SUFDQTs7O0tBR0MsR0FDRCxNQUFNRSxPQUFPQyxPQUFPLEVBQUU7UUFDbEIsSUFBSUEsUUFBUUwsZ0JBQWdCLEVBQUU7WUFDMUIsTUFBTSxJQUFJTixRQUFRWSxpQkFBaUIsQ0FBQztRQUN4QztRQUNBLElBQUk7WUFDQUQsUUFBUUwsZ0JBQWdCLEdBQUc7WUFDM0IsTUFBTSxJQUFJLENBQUNPLElBQUksQ0FBQ0Y7UUFDcEIsU0FDUTtZQUNKQSxRQUFRTCxnQkFBZ0IsR0FBRztRQUMvQjtJQUNKO0FBQ0o7QUFDQVYsb0JBQW9CLEdBQUdFLGNBQ3ZCLHlDQUF5QyIsInNvdXJjZXMiOlsid2VicGFjazovL2Jsb2ctYXBwbGljYXRpb24vLi9ub2RlX21vZHVsZXMvbW9uZ29kYi9saWIvY21hcC9hdXRoL2F1dGhfcHJvdmlkZXIuanM/MmU1NSJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuQXV0aFByb3ZpZGVyID0gZXhwb3J0cy5BdXRoQ29udGV4dCA9IHZvaWQgMDtcbmNvbnN0IGVycm9yXzEgPSByZXF1aXJlKFwiLi4vLi4vZXJyb3JcIik7XG4vKipcbiAqIENvbnRleHQgdXNlZCBkdXJpbmcgYXV0aGVudGljYXRpb25cbiAqIEBpbnRlcm5hbFxuICovXG5jbGFzcyBBdXRoQ29udGV4dCB7XG4gICAgY29uc3RydWN0b3IoY29ubmVjdGlvbiwgY3JlZGVudGlhbHMsIG9wdGlvbnMpIHtcbiAgICAgICAgLyoqIElmIHRoZSBjb250ZXh0IGlzIGZvciByZWF1dGhlbnRpY2F0aW9uLiAqL1xuICAgICAgICB0aGlzLnJlYXV0aGVudGljYXRpbmcgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5jb25uZWN0aW9uID0gY29ubmVjdGlvbjtcbiAgICAgICAgdGhpcy5jcmVkZW50aWFscyA9IGNyZWRlbnRpYWxzO1xuICAgICAgICB0aGlzLm9wdGlvbnMgPSBvcHRpb25zO1xuICAgIH1cbn1cbmV4cG9ydHMuQXV0aENvbnRleHQgPSBBdXRoQ29udGV4dDtcbmNsYXNzIEF1dGhQcm92aWRlciB7XG4gICAgLyoqXG4gICAgICogUHJlcGFyZSB0aGUgaGFuZHNoYWtlIGRvY3VtZW50IGJlZm9yZSB0aGUgaW5pdGlhbCBoYW5kc2hha2UuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gaGFuZHNoYWtlRG9jIC0gVGhlIGRvY3VtZW50IHVzZWQgZm9yIHRoZSBpbml0aWFsIGhhbmRzaGFrZSBvbiBhIGNvbm5lY3Rpb25cbiAgICAgKiBAcGFyYW0gYXV0aENvbnRleHQgLSBDb250ZXh0IGZvciBhdXRoZW50aWNhdGlvbiBmbG93XG4gICAgICovXG4gICAgYXN5bmMgcHJlcGFyZShoYW5kc2hha2VEb2MsIF9hdXRoQ29udGV4dCkge1xuICAgICAgICByZXR1cm4gaGFuZHNoYWtlRG9jO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBSZWF1dGhlbnRpY2F0ZS5cbiAgICAgKiBAcGFyYW0gY29udGV4dCAtIFRoZSBzaGFyZWQgYXV0aCBjb250ZXh0LlxuICAgICAqL1xuICAgIGFzeW5jIHJlYXV0aChjb250ZXh0KSB7XG4gICAgICAgIGlmIChjb250ZXh0LnJlYXV0aGVudGljYXRpbmcpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBlcnJvcl8xLk1vbmdvUnVudGltZUVycm9yKCdSZWF1dGhlbnRpY2F0aW9uIGFscmVhZHkgaW4gcHJvZ3Jlc3MuJyk7XG4gICAgICAgIH1cbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGNvbnRleHQucmVhdXRoZW50aWNhdGluZyA9IHRydWU7XG4gICAgICAgICAgICBhd2FpdCB0aGlzLmF1dGgoY29udGV4dCk7XG4gICAgICAgIH1cbiAgICAgICAgZmluYWxseSB7XG4gICAgICAgICAgICBjb250ZXh0LnJlYXV0aGVudGljYXRpbmcgPSBmYWxzZTtcbiAgICAgICAgfVxuICAgIH1cbn1cbmV4cG9ydHMuQXV0aFByb3ZpZGVyID0gQXV0aFByb3ZpZGVyO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9YXV0aF9wcm92aWRlci5qcy5tYXAiXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJBdXRoUHJvdmlkZXIiLCJBdXRoQ29udGV4dCIsImVycm9yXzEiLCJyZXF1aXJlIiwiY29uc3RydWN0b3IiLCJjb25uZWN0aW9uIiwiY3JlZGVudGlhbHMiLCJvcHRpb25zIiwicmVhdXRoZW50aWNhdGluZyIsInByZXBhcmUiLCJoYW5kc2hha2VEb2MiLCJfYXV0aENvbnRleHQiLCJyZWF1dGgiLCJjb250ZXh0IiwiTW9uZ29SdW50aW1lRXJyb3IiLCJhdXRoIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongodb/lib/cmap/auth/auth_provider.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongodb/lib/cmap/auth/gssapi.js":
/*!******************************************************!*\
  !*** ./node_modules/mongodb/lib/cmap/auth/gssapi.js ***!
  \******************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.resolveCname = exports.performGSSAPICanonicalizeHostName = exports.GSSAPI = exports.GSSAPICanonicalizationValue = void 0;\nconst dns = __webpack_require__(/*! dns */ \"dns\");\nconst deps_1 = __webpack_require__(/*! ../../deps */ \"(ssr)/./node_modules/mongodb/lib/deps.js\");\nconst error_1 = __webpack_require__(/*! ../../error */ \"(ssr)/./node_modules/mongodb/lib/error.js\");\nconst utils_1 = __webpack_require__(/*! ../../utils */ \"(ssr)/./node_modules/mongodb/lib/utils.js\");\nconst auth_provider_1 = __webpack_require__(/*! ./auth_provider */ \"(ssr)/./node_modules/mongodb/lib/cmap/auth/auth_provider.js\");\n/** @public */ exports.GSSAPICanonicalizationValue = Object.freeze({\n    on: true,\n    off: false,\n    none: \"none\",\n    forward: \"forward\",\n    forwardAndReverse: \"forwardAndReverse\"\n});\nasync function externalCommand(connection, command) {\n    return connection.commandAsync((0, utils_1.ns)(\"$external.$cmd\"), command, undefined);\n}\nlet krb;\nclass GSSAPI extends auth_provider_1.AuthProvider {\n    async auth(authContext) {\n        const { connection, credentials } = authContext;\n        if (credentials == null) {\n            throw new error_1.MongoMissingCredentialsError(\"Credentials required for GSSAPI authentication\");\n        }\n        const { username } = credentials;\n        const client = await makeKerberosClient(authContext);\n        const payload = await client.step(\"\");\n        const saslStartResponse = await externalCommand(connection, saslStart(payload));\n        const negotiatedPayload = await negotiate(client, 10, saslStartResponse.payload);\n        const saslContinueResponse = await externalCommand(connection, saslContinue(negotiatedPayload, saslStartResponse.conversationId));\n        const finalizePayload = await finalize(client, username, saslContinueResponse.payload);\n        await externalCommand(connection, {\n            saslContinue: 1,\n            conversationId: saslContinueResponse.conversationId,\n            payload: finalizePayload\n        });\n    }\n}\nexports.GSSAPI = GSSAPI;\nasync function makeKerberosClient(authContext) {\n    const { hostAddress } = authContext.options;\n    const { credentials } = authContext;\n    if (!hostAddress || typeof hostAddress.host !== \"string\" || !credentials) {\n        throw new error_1.MongoInvalidArgumentError(\"Connection must have host and port and credentials defined.\");\n    }\n    loadKrb();\n    if (\"kModuleError\" in krb) {\n        throw krb[\"kModuleError\"];\n    }\n    const { initializeClient } = krb;\n    const { username, password } = credentials;\n    const mechanismProperties = credentials.mechanismProperties;\n    const serviceName = mechanismProperties.SERVICE_NAME ?? \"mongodb\";\n    const host = await performGSSAPICanonicalizeHostName(hostAddress.host, mechanismProperties);\n    const initOptions = {};\n    if (password != null) {\n        // TODO(NODE-5139): These do not match the typescript options in initializeClient\n        Object.assign(initOptions, {\n            user: username,\n            password: password\n        });\n    }\n    const spnHost = mechanismProperties.SERVICE_HOST ?? host;\n    let spn = `${serviceName}${process.platform === \"win32\" ? \"/\" : \"@\"}${spnHost}`;\n    if (\"SERVICE_REALM\" in mechanismProperties) {\n        spn = `${spn}@${mechanismProperties.SERVICE_REALM}`;\n    }\n    return initializeClient(spn, initOptions);\n}\nfunction saslStart(payload) {\n    return {\n        saslStart: 1,\n        mechanism: \"GSSAPI\",\n        payload,\n        autoAuthorize: 1\n    };\n}\nfunction saslContinue(payload, conversationId) {\n    return {\n        saslContinue: 1,\n        conversationId,\n        payload\n    };\n}\nasync function negotiate(client, retries, payload) {\n    try {\n        const response = await client.step(payload);\n        return response || \"\";\n    } catch (error) {\n        if (retries === 0) {\n            // Retries exhausted, raise error\n            throw error;\n        }\n        // Adjust number of retries and call step again\n        return negotiate(client, retries - 1, payload);\n    }\n}\nasync function finalize(client, user, payload) {\n    // GSS Client Unwrap\n    const response = await client.unwrap(payload);\n    return client.wrap(response || \"\", {\n        user\n    });\n}\nasync function performGSSAPICanonicalizeHostName(host, mechanismProperties) {\n    const mode = mechanismProperties.CANONICALIZE_HOST_NAME;\n    if (!mode || mode === exports.GSSAPICanonicalizationValue.none) {\n        return host;\n    }\n    // If forward and reverse or true\n    if (mode === exports.GSSAPICanonicalizationValue.on || mode === exports.GSSAPICanonicalizationValue.forwardAndReverse) {\n        // Perform the lookup of the ip address.\n        const { address } = await dns.promises.lookup(host);\n        try {\n            // Perform a reverse ptr lookup on the ip address.\n            const results = await dns.promises.resolvePtr(address);\n            // If the ptr did not error but had no results, return the host.\n            return results.length > 0 ? results[0] : host;\n        } catch (error) {\n            // This can error as ptr records may not exist for all ips. In this case\n            // fallback to a cname lookup as dns.lookup() does not return the\n            // cname.\n            return resolveCname(host);\n        }\n    } else {\n        // The case for forward is just to resolve the cname as dns.lookup()\n        // will not return it.\n        return resolveCname(host);\n    }\n}\nexports.performGSSAPICanonicalizeHostName = performGSSAPICanonicalizeHostName;\nasync function resolveCname(host) {\n    // Attempt to resolve the host name\n    try {\n        const results = await dns.promises.resolveCname(host);\n        // Get the first resolved host id\n        return results.length > 0 ? results[0] : host;\n    } catch  {\n        return host;\n    }\n}\nexports.resolveCname = resolveCname;\n/**\n * Load the Kerberos library.\n */ function loadKrb() {\n    if (!krb) {\n        krb = (0, deps_1.getKerberos)();\n    }\n} //# sourceMappingURL=gssapi.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbW9uZ29kYi9saWIvY21hcC9hdXRoL2dzc2FwaS5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiQSw4Q0FBNkM7SUFBRUcsT0FBTztBQUFLLENBQUMsRUFBQztBQUM3REQsb0JBQW9CLEdBQUdBLHlDQUF5QyxHQUFHQSxjQUFjLEdBQUdBLG1DQUFtQyxHQUFHLEtBQUs7QUFDL0gsTUFBTU0sTUFBTUMsbUJBQU9BLENBQUMsZ0JBQUs7QUFDekIsTUFBTUMsU0FBU0QsbUJBQU9BLENBQUMsNERBQVk7QUFDbkMsTUFBTUUsVUFBVUYsbUJBQU9BLENBQUMsOERBQWE7QUFDckMsTUFBTUcsVUFBVUgsbUJBQU9BLENBQUMsOERBQWE7QUFDckMsTUFBTUksa0JBQWtCSixtQkFBT0EsQ0FBQyxvRkFBaUI7QUFDakQsWUFBWSxHQUNaUCxtQ0FBbUMsR0FBR0YsT0FBT2MsTUFBTSxDQUFDO0lBQ2hEQyxJQUFJO0lBQ0pDLEtBQUs7SUFDTEMsTUFBTTtJQUNOQyxTQUFTO0lBQ1RDLG1CQUFtQjtBQUN2QjtBQUNBLGVBQWVDLGdCQUFnQkMsVUFBVSxFQUFFQyxPQUFPO0lBQzlDLE9BQU9ELFdBQVdFLFlBQVksQ0FBQyxDQUFDLEdBQUdYLFFBQVFZLEVBQUUsRUFBRSxtQkFBbUJGLFNBQVNHO0FBQy9FO0FBQ0EsSUFBSUM7QUFDSixNQUFNcEIsZUFBZU8sZ0JBQWdCYyxZQUFZO0lBQzdDLE1BQU1DLEtBQUtDLFdBQVcsRUFBRTtRQUNwQixNQUFNLEVBQUVSLFVBQVUsRUFBRVMsV0FBVyxFQUFFLEdBQUdEO1FBQ3BDLElBQUlDLGVBQWUsTUFBTTtZQUNyQixNQUFNLElBQUluQixRQUFRb0IsNEJBQTRCLENBQUM7UUFDbkQ7UUFDQSxNQUFNLEVBQUVDLFFBQVEsRUFBRSxHQUFHRjtRQUNyQixNQUFNRyxTQUFTLE1BQU1DLG1CQUFtQkw7UUFDeEMsTUFBTU0sVUFBVSxNQUFNRixPQUFPRyxJQUFJLENBQUM7UUFDbEMsTUFBTUMsb0JBQW9CLE1BQU1qQixnQkFBZ0JDLFlBQVlpQixVQUFVSDtRQUN0RSxNQUFNSSxvQkFBb0IsTUFBTUMsVUFBVVAsUUFBUSxJQUFJSSxrQkFBa0JGLE9BQU87UUFDL0UsTUFBTU0sdUJBQXVCLE1BQU1yQixnQkFBZ0JDLFlBQVlxQixhQUFhSCxtQkFBbUJGLGtCQUFrQk0sY0FBYztRQUMvSCxNQUFNQyxrQkFBa0IsTUFBTUMsU0FBU1osUUFBUUQsVUFBVVMscUJBQXFCTixPQUFPO1FBQ3JGLE1BQU1mLGdCQUFnQkMsWUFBWTtZQUM5QnFCLGNBQWM7WUFDZEMsZ0JBQWdCRixxQkFBcUJFLGNBQWM7WUFDbkRSLFNBQVNTO1FBQ2I7SUFDSjtBQUNKO0FBQ0ExQyxjQUFjLEdBQUdJO0FBQ2pCLGVBQWU0QixtQkFBbUJMLFdBQVc7SUFDekMsTUFBTSxFQUFFaUIsV0FBVyxFQUFFLEdBQUdqQixZQUFZa0IsT0FBTztJQUMzQyxNQUFNLEVBQUVqQixXQUFXLEVBQUUsR0FBR0Q7SUFDeEIsSUFBSSxDQUFDaUIsZUFBZSxPQUFPQSxZQUFZRSxJQUFJLEtBQUssWUFBWSxDQUFDbEIsYUFBYTtRQUN0RSxNQUFNLElBQUluQixRQUFRc0MseUJBQXlCLENBQUM7SUFDaEQ7SUFDQUM7SUFDQSxJQUFJLGtCQUFrQnhCLEtBQUs7UUFDdkIsTUFBTUEsR0FBRyxDQUFDLGVBQWU7SUFDN0I7SUFDQSxNQUFNLEVBQUV5QixnQkFBZ0IsRUFBRSxHQUFHekI7SUFDN0IsTUFBTSxFQUFFTSxRQUFRLEVBQUVvQixRQUFRLEVBQUUsR0FBR3RCO0lBQy9CLE1BQU11QixzQkFBc0J2QixZQUFZdUIsbUJBQW1CO0lBQzNELE1BQU1DLGNBQWNELG9CQUFvQkUsWUFBWSxJQUFJO0lBQ3hELE1BQU1QLE9BQU8sTUFBTTNDLGtDQUFrQ3lDLFlBQVlFLElBQUksRUFBRUs7SUFDdkUsTUFBTUcsY0FBYyxDQUFDO0lBQ3JCLElBQUlKLFlBQVksTUFBTTtRQUNsQixpRkFBaUY7UUFDakZwRCxPQUFPeUQsTUFBTSxDQUFDRCxhQUFhO1lBQUVFLE1BQU0xQjtZQUFVb0IsVUFBVUE7UUFBUztJQUNwRTtJQUNBLE1BQU1PLFVBQVVOLG9CQUFvQk8sWUFBWSxJQUFJWjtJQUNwRCxJQUFJYSxNQUFNLENBQUMsRUFBRVAsWUFBWSxFQUFFUSxRQUFRQyxRQUFRLEtBQUssVUFBVSxNQUFNLElBQUksRUFBRUosUUFBUSxDQUFDO0lBQy9FLElBQUksbUJBQW1CTixxQkFBcUI7UUFDeENRLE1BQU0sQ0FBQyxFQUFFQSxJQUFJLENBQUMsRUFBRVIsb0JBQW9CVyxhQUFhLENBQUMsQ0FBQztJQUN2RDtJQUNBLE9BQU9iLGlCQUFpQlUsS0FBS0w7QUFDakM7QUFDQSxTQUFTbEIsVUFBVUgsT0FBTztJQUN0QixPQUFPO1FBQ0hHLFdBQVc7UUFDWDJCLFdBQVc7UUFDWDlCO1FBQ0ErQixlQUFlO0lBQ25CO0FBQ0o7QUFDQSxTQUFTeEIsYUFBYVAsT0FBTyxFQUFFUSxjQUFjO0lBQ3pDLE9BQU87UUFDSEQsY0FBYztRQUNkQztRQUNBUjtJQUNKO0FBQ0o7QUFDQSxlQUFlSyxVQUFVUCxNQUFNLEVBQUVrQyxPQUFPLEVBQUVoQyxPQUFPO0lBQzdDLElBQUk7UUFDQSxNQUFNaUMsV0FBVyxNQUFNbkMsT0FBT0csSUFBSSxDQUFDRDtRQUNuQyxPQUFPaUMsWUFBWTtJQUN2QixFQUNBLE9BQU9DLE9BQU87UUFDVixJQUFJRixZQUFZLEdBQUc7WUFDZixpQ0FBaUM7WUFDakMsTUFBTUU7UUFDVjtRQUNBLCtDQUErQztRQUMvQyxPQUFPN0IsVUFBVVAsUUFBUWtDLFVBQVUsR0FBR2hDO0lBQzFDO0FBQ0o7QUFDQSxlQUFlVSxTQUFTWixNQUFNLEVBQUV5QixJQUFJLEVBQUV2QixPQUFPO0lBQ3pDLG9CQUFvQjtJQUNwQixNQUFNaUMsV0FBVyxNQUFNbkMsT0FBT3FDLE1BQU0sQ0FBQ25DO0lBQ3JDLE9BQU9GLE9BQU9zQyxJQUFJLENBQUNILFlBQVksSUFBSTtRQUFFVjtJQUFLO0FBQzlDO0FBQ0EsZUFBZXJELGtDQUFrQzJDLElBQUksRUFBRUssbUJBQW1CO0lBQ3RFLE1BQU1tQixPQUFPbkIsb0JBQW9Cb0Isc0JBQXNCO0lBQ3ZELElBQUksQ0FBQ0QsUUFBUUEsU0FBU3RFLFFBQVFLLDJCQUEyQixDQUFDVSxJQUFJLEVBQUU7UUFDNUQsT0FBTytCO0lBQ1g7SUFDQSxpQ0FBaUM7SUFDakMsSUFBSXdCLFNBQVN0RSxRQUFRSywyQkFBMkIsQ0FBQ1EsRUFBRSxJQUMvQ3lELFNBQVN0RSxRQUFRSywyQkFBMkIsQ0FBQ1ksaUJBQWlCLEVBQUU7UUFDaEUsd0NBQXdDO1FBQ3hDLE1BQU0sRUFBRXVELE9BQU8sRUFBRSxHQUFHLE1BQU1sRSxJQUFJbUUsUUFBUSxDQUFDQyxNQUFNLENBQUM1QjtRQUM5QyxJQUFJO1lBQ0Esa0RBQWtEO1lBQ2xELE1BQU02QixVQUFVLE1BQU1yRSxJQUFJbUUsUUFBUSxDQUFDRyxVQUFVLENBQUNKO1lBQzlDLGdFQUFnRTtZQUNoRSxPQUFPRyxRQUFRRSxNQUFNLEdBQUcsSUFBSUYsT0FBTyxDQUFDLEVBQUUsR0FBRzdCO1FBQzdDLEVBQ0EsT0FBT3FCLE9BQU87WUFDVix3RUFBd0U7WUFDeEUsaUVBQWlFO1lBQ2pFLFNBQVM7WUFDVCxPQUFPakUsYUFBYTRDO1FBQ3hCO0lBQ0osT0FDSztRQUNELG9FQUFvRTtRQUNwRSxzQkFBc0I7UUFDdEIsT0FBTzVDLGFBQWE0QztJQUN4QjtBQUNKO0FBQ0E5Qyx5Q0FBeUMsR0FBR0c7QUFDNUMsZUFBZUQsYUFBYTRDLElBQUk7SUFDNUIsbUNBQW1DO0lBQ25DLElBQUk7UUFDQSxNQUFNNkIsVUFBVSxNQUFNckUsSUFBSW1FLFFBQVEsQ0FBQ3ZFLFlBQVksQ0FBQzRDO1FBQ2hELGlDQUFpQztRQUNqQyxPQUFPNkIsUUFBUUUsTUFBTSxHQUFHLElBQUlGLE9BQU8sQ0FBQyxFQUFFLEdBQUc3QjtJQUM3QyxFQUNBLE9BQU07UUFDRixPQUFPQTtJQUNYO0FBQ0o7QUFDQTlDLG9CQUFvQixHQUFHRTtBQUN2Qjs7Q0FFQyxHQUNELFNBQVM4QztJQUNMLElBQUksQ0FBQ3hCLEtBQUs7UUFDTkEsTUFBTSxDQUFDLEdBQUdoQixPQUFPc0UsV0FBVztJQUNoQztBQUNKLEVBQ0Esa0NBQWtDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYmxvZy1hcHBsaWNhdGlvbi8uL25vZGVfbW9kdWxlcy9tb25nb2RiL2xpYi9jbWFwL2F1dGgvZ3NzYXBpLmpzPzZhNzMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLnJlc29sdmVDbmFtZSA9IGV4cG9ydHMucGVyZm9ybUdTU0FQSUNhbm9uaWNhbGl6ZUhvc3ROYW1lID0gZXhwb3J0cy5HU1NBUEkgPSBleHBvcnRzLkdTU0FQSUNhbm9uaWNhbGl6YXRpb25WYWx1ZSA9IHZvaWQgMDtcbmNvbnN0IGRucyA9IHJlcXVpcmUoXCJkbnNcIik7XG5jb25zdCBkZXBzXzEgPSByZXF1aXJlKFwiLi4vLi4vZGVwc1wiKTtcbmNvbnN0IGVycm9yXzEgPSByZXF1aXJlKFwiLi4vLi4vZXJyb3JcIik7XG5jb25zdCB1dGlsc18xID0gcmVxdWlyZShcIi4uLy4uL3V0aWxzXCIpO1xuY29uc3QgYXV0aF9wcm92aWRlcl8xID0gcmVxdWlyZShcIi4vYXV0aF9wcm92aWRlclwiKTtcbi8qKiBAcHVibGljICovXG5leHBvcnRzLkdTU0FQSUNhbm9uaWNhbGl6YXRpb25WYWx1ZSA9IE9iamVjdC5mcmVlemUoe1xuICAgIG9uOiB0cnVlLFxuICAgIG9mZjogZmFsc2UsXG4gICAgbm9uZTogJ25vbmUnLFxuICAgIGZvcndhcmQ6ICdmb3J3YXJkJyxcbiAgICBmb3J3YXJkQW5kUmV2ZXJzZTogJ2ZvcndhcmRBbmRSZXZlcnNlJ1xufSk7XG5hc3luYyBmdW5jdGlvbiBleHRlcm5hbENvbW1hbmQoY29ubmVjdGlvbiwgY29tbWFuZCkge1xuICAgIHJldHVybiBjb25uZWN0aW9uLmNvbW1hbmRBc3luYygoMCwgdXRpbHNfMS5ucykoJyRleHRlcm5hbC4kY21kJyksIGNvbW1hbmQsIHVuZGVmaW5lZCk7XG59XG5sZXQga3JiO1xuY2xhc3MgR1NTQVBJIGV4dGVuZHMgYXV0aF9wcm92aWRlcl8xLkF1dGhQcm92aWRlciB7XG4gICAgYXN5bmMgYXV0aChhdXRoQ29udGV4dCkge1xuICAgICAgICBjb25zdCB7IGNvbm5lY3Rpb24sIGNyZWRlbnRpYWxzIH0gPSBhdXRoQ29udGV4dDtcbiAgICAgICAgaWYgKGNyZWRlbnRpYWxzID09IG51bGwpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBlcnJvcl8xLk1vbmdvTWlzc2luZ0NyZWRlbnRpYWxzRXJyb3IoJ0NyZWRlbnRpYWxzIHJlcXVpcmVkIGZvciBHU1NBUEkgYXV0aGVudGljYXRpb24nKTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCB7IHVzZXJuYW1lIH0gPSBjcmVkZW50aWFscztcbiAgICAgICAgY29uc3QgY2xpZW50ID0gYXdhaXQgbWFrZUtlcmJlcm9zQ2xpZW50KGF1dGhDb250ZXh0KTtcbiAgICAgICAgY29uc3QgcGF5bG9hZCA9IGF3YWl0IGNsaWVudC5zdGVwKCcnKTtcbiAgICAgICAgY29uc3Qgc2FzbFN0YXJ0UmVzcG9uc2UgPSBhd2FpdCBleHRlcm5hbENvbW1hbmQoY29ubmVjdGlvbiwgc2FzbFN0YXJ0KHBheWxvYWQpKTtcbiAgICAgICAgY29uc3QgbmVnb3RpYXRlZFBheWxvYWQgPSBhd2FpdCBuZWdvdGlhdGUoY2xpZW50LCAxMCwgc2FzbFN0YXJ0UmVzcG9uc2UucGF5bG9hZCk7XG4gICAgICAgIGNvbnN0IHNhc2xDb250aW51ZVJlc3BvbnNlID0gYXdhaXQgZXh0ZXJuYWxDb21tYW5kKGNvbm5lY3Rpb24sIHNhc2xDb250aW51ZShuZWdvdGlhdGVkUGF5bG9hZCwgc2FzbFN0YXJ0UmVzcG9uc2UuY29udmVyc2F0aW9uSWQpKTtcbiAgICAgICAgY29uc3QgZmluYWxpemVQYXlsb2FkID0gYXdhaXQgZmluYWxpemUoY2xpZW50LCB1c2VybmFtZSwgc2FzbENvbnRpbnVlUmVzcG9uc2UucGF5bG9hZCk7XG4gICAgICAgIGF3YWl0IGV4dGVybmFsQ29tbWFuZChjb25uZWN0aW9uLCB7XG4gICAgICAgICAgICBzYXNsQ29udGludWU6IDEsXG4gICAgICAgICAgICBjb252ZXJzYXRpb25JZDogc2FzbENvbnRpbnVlUmVzcG9uc2UuY29udmVyc2F0aW9uSWQsXG4gICAgICAgICAgICBwYXlsb2FkOiBmaW5hbGl6ZVBheWxvYWRcbiAgICAgICAgfSk7XG4gICAgfVxufVxuZXhwb3J0cy5HU1NBUEkgPSBHU1NBUEk7XG5hc3luYyBmdW5jdGlvbiBtYWtlS2VyYmVyb3NDbGllbnQoYXV0aENvbnRleHQpIHtcbiAgICBjb25zdCB7IGhvc3RBZGRyZXNzIH0gPSBhdXRoQ29udGV4dC5vcHRpb25zO1xuICAgIGNvbnN0IHsgY3JlZGVudGlhbHMgfSA9IGF1dGhDb250ZXh0O1xuICAgIGlmICghaG9zdEFkZHJlc3MgfHwgdHlwZW9mIGhvc3RBZGRyZXNzLmhvc3QgIT09ICdzdHJpbmcnIHx8ICFjcmVkZW50aWFscykge1xuICAgICAgICB0aHJvdyBuZXcgZXJyb3JfMS5Nb25nb0ludmFsaWRBcmd1bWVudEVycm9yKCdDb25uZWN0aW9uIG11c3QgaGF2ZSBob3N0IGFuZCBwb3J0IGFuZCBjcmVkZW50aWFscyBkZWZpbmVkLicpO1xuICAgIH1cbiAgICBsb2FkS3JiKCk7XG4gICAgaWYgKCdrTW9kdWxlRXJyb3InIGluIGtyYikge1xuICAgICAgICB0aHJvdyBrcmJbJ2tNb2R1bGVFcnJvciddO1xuICAgIH1cbiAgICBjb25zdCB7IGluaXRpYWxpemVDbGllbnQgfSA9IGtyYjtcbiAgICBjb25zdCB7IHVzZXJuYW1lLCBwYXNzd29yZCB9ID0gY3JlZGVudGlhbHM7XG4gICAgY29uc3QgbWVjaGFuaXNtUHJvcGVydGllcyA9IGNyZWRlbnRpYWxzLm1lY2hhbmlzbVByb3BlcnRpZXM7XG4gICAgY29uc3Qgc2VydmljZU5hbWUgPSBtZWNoYW5pc21Qcm9wZXJ0aWVzLlNFUlZJQ0VfTkFNRSA/PyAnbW9uZ29kYic7XG4gICAgY29uc3QgaG9zdCA9IGF3YWl0IHBlcmZvcm1HU1NBUElDYW5vbmljYWxpemVIb3N0TmFtZShob3N0QWRkcmVzcy5ob3N0LCBtZWNoYW5pc21Qcm9wZXJ0aWVzKTtcbiAgICBjb25zdCBpbml0T3B0aW9ucyA9IHt9O1xuICAgIGlmIChwYXNzd29yZCAhPSBudWxsKSB7XG4gICAgICAgIC8vIFRPRE8oTk9ERS01MTM5KTogVGhlc2UgZG8gbm90IG1hdGNoIHRoZSB0eXBlc2NyaXB0IG9wdGlvbnMgaW4gaW5pdGlhbGl6ZUNsaWVudFxuICAgICAgICBPYmplY3QuYXNzaWduKGluaXRPcHRpb25zLCB7IHVzZXI6IHVzZXJuYW1lLCBwYXNzd29yZDogcGFzc3dvcmQgfSk7XG4gICAgfVxuICAgIGNvbnN0IHNwbkhvc3QgPSBtZWNoYW5pc21Qcm9wZXJ0aWVzLlNFUlZJQ0VfSE9TVCA/PyBob3N0O1xuICAgIGxldCBzcG4gPSBgJHtzZXJ2aWNlTmFtZX0ke3Byb2Nlc3MucGxhdGZvcm0gPT09ICd3aW4zMicgPyAnLycgOiAnQCd9JHtzcG5Ib3N0fWA7XG4gICAgaWYgKCdTRVJWSUNFX1JFQUxNJyBpbiBtZWNoYW5pc21Qcm9wZXJ0aWVzKSB7XG4gICAgICAgIHNwbiA9IGAke3Nwbn1AJHttZWNoYW5pc21Qcm9wZXJ0aWVzLlNFUlZJQ0VfUkVBTE19YDtcbiAgICB9XG4gICAgcmV0dXJuIGluaXRpYWxpemVDbGllbnQoc3BuLCBpbml0T3B0aW9ucyk7XG59XG5mdW5jdGlvbiBzYXNsU3RhcnQocGF5bG9hZCkge1xuICAgIHJldHVybiB7XG4gICAgICAgIHNhc2xTdGFydDogMSxcbiAgICAgICAgbWVjaGFuaXNtOiAnR1NTQVBJJyxcbiAgICAgICAgcGF5bG9hZCxcbiAgICAgICAgYXV0b0F1dGhvcml6ZTogMVxuICAgIH07XG59XG5mdW5jdGlvbiBzYXNsQ29udGludWUocGF5bG9hZCwgY29udmVyc2F0aW9uSWQpIHtcbiAgICByZXR1cm4ge1xuICAgICAgICBzYXNsQ29udGludWU6IDEsXG4gICAgICAgIGNvbnZlcnNhdGlvbklkLFxuICAgICAgICBwYXlsb2FkXG4gICAgfTtcbn1cbmFzeW5jIGZ1bmN0aW9uIG5lZ290aWF0ZShjbGllbnQsIHJldHJpZXMsIHBheWxvYWQpIHtcbiAgICB0cnkge1xuICAgICAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGNsaWVudC5zdGVwKHBheWxvYWQpO1xuICAgICAgICByZXR1cm4gcmVzcG9uc2UgfHwgJyc7XG4gICAgfVxuICAgIGNhdGNoIChlcnJvcikge1xuICAgICAgICBpZiAocmV0cmllcyA9PT0gMCkge1xuICAgICAgICAgICAgLy8gUmV0cmllcyBleGhhdXN0ZWQsIHJhaXNlIGVycm9yXG4gICAgICAgICAgICB0aHJvdyBlcnJvcjtcbiAgICAgICAgfVxuICAgICAgICAvLyBBZGp1c3QgbnVtYmVyIG9mIHJldHJpZXMgYW5kIGNhbGwgc3RlcCBhZ2FpblxuICAgICAgICByZXR1cm4gbmVnb3RpYXRlKGNsaWVudCwgcmV0cmllcyAtIDEsIHBheWxvYWQpO1xuICAgIH1cbn1cbmFzeW5jIGZ1bmN0aW9uIGZpbmFsaXplKGNsaWVudCwgdXNlciwgcGF5bG9hZCkge1xuICAgIC8vIEdTUyBDbGllbnQgVW53cmFwXG4gICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBjbGllbnQudW53cmFwKHBheWxvYWQpO1xuICAgIHJldHVybiBjbGllbnQud3JhcChyZXNwb25zZSB8fCAnJywgeyB1c2VyIH0pO1xufVxuYXN5bmMgZnVuY3Rpb24gcGVyZm9ybUdTU0FQSUNhbm9uaWNhbGl6ZUhvc3ROYW1lKGhvc3QsIG1lY2hhbmlzbVByb3BlcnRpZXMpIHtcbiAgICBjb25zdCBtb2RlID0gbWVjaGFuaXNtUHJvcGVydGllcy5DQU5PTklDQUxJWkVfSE9TVF9OQU1FO1xuICAgIGlmICghbW9kZSB8fCBtb2RlID09PSBleHBvcnRzLkdTU0FQSUNhbm9uaWNhbGl6YXRpb25WYWx1ZS5ub25lKSB7XG4gICAgICAgIHJldHVybiBob3N0O1xuICAgIH1cbiAgICAvLyBJZiBmb3J3YXJkIGFuZCByZXZlcnNlIG9yIHRydWVcbiAgICBpZiAobW9kZSA9PT0gZXhwb3J0cy5HU1NBUElDYW5vbmljYWxpemF0aW9uVmFsdWUub24gfHxcbiAgICAgICAgbW9kZSA9PT0gZXhwb3J0cy5HU1NBUElDYW5vbmljYWxpemF0aW9uVmFsdWUuZm9yd2FyZEFuZFJldmVyc2UpIHtcbiAgICAgICAgLy8gUGVyZm9ybSB0aGUgbG9va3VwIG9mIHRoZSBpcCBhZGRyZXNzLlxuICAgICAgICBjb25zdCB7IGFkZHJlc3MgfSA9IGF3YWl0IGRucy5wcm9taXNlcy5sb29rdXAoaG9zdCk7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICAvLyBQZXJmb3JtIGEgcmV2ZXJzZSBwdHIgbG9va3VwIG9uIHRoZSBpcCBhZGRyZXNzLlxuICAgICAgICAgICAgY29uc3QgcmVzdWx0cyA9IGF3YWl0IGRucy5wcm9taXNlcy5yZXNvbHZlUHRyKGFkZHJlc3MpO1xuICAgICAgICAgICAgLy8gSWYgdGhlIHB0ciBkaWQgbm90IGVycm9yIGJ1dCBoYWQgbm8gcmVzdWx0cywgcmV0dXJuIHRoZSBob3N0LlxuICAgICAgICAgICAgcmV0dXJuIHJlc3VsdHMubGVuZ3RoID4gMCA/IHJlc3VsdHNbMF0gOiBob3N0O1xuICAgICAgICB9XG4gICAgICAgIGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgLy8gVGhpcyBjYW4gZXJyb3IgYXMgcHRyIHJlY29yZHMgbWF5IG5vdCBleGlzdCBmb3IgYWxsIGlwcy4gSW4gdGhpcyBjYXNlXG4gICAgICAgICAgICAvLyBmYWxsYmFjayB0byBhIGNuYW1lIGxvb2t1cCBhcyBkbnMubG9va3VwKCkgZG9lcyBub3QgcmV0dXJuIHRoZVxuICAgICAgICAgICAgLy8gY25hbWUuXG4gICAgICAgICAgICByZXR1cm4gcmVzb2x2ZUNuYW1lKGhvc3QpO1xuICAgICAgICB9XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICAvLyBUaGUgY2FzZSBmb3IgZm9yd2FyZCBpcyBqdXN0IHRvIHJlc29sdmUgdGhlIGNuYW1lIGFzIGRucy5sb29rdXAoKVxuICAgICAgICAvLyB3aWxsIG5vdCByZXR1cm4gaXQuXG4gICAgICAgIHJldHVybiByZXNvbHZlQ25hbWUoaG9zdCk7XG4gICAgfVxufVxuZXhwb3J0cy5wZXJmb3JtR1NTQVBJQ2Fub25pY2FsaXplSG9zdE5hbWUgPSBwZXJmb3JtR1NTQVBJQ2Fub25pY2FsaXplSG9zdE5hbWU7XG5hc3luYyBmdW5jdGlvbiByZXNvbHZlQ25hbWUoaG9zdCkge1xuICAgIC8vIEF0dGVtcHQgdG8gcmVzb2x2ZSB0aGUgaG9zdCBuYW1lXG4gICAgdHJ5IHtcbiAgICAgICAgY29uc3QgcmVzdWx0cyA9IGF3YWl0IGRucy5wcm9taXNlcy5yZXNvbHZlQ25hbWUoaG9zdCk7XG4gICAgICAgIC8vIEdldCB0aGUgZmlyc3QgcmVzb2x2ZWQgaG9zdCBpZFxuICAgICAgICByZXR1cm4gcmVzdWx0cy5sZW5ndGggPiAwID8gcmVzdWx0c1swXSA6IGhvc3Q7XG4gICAgfVxuICAgIGNhdGNoIHtcbiAgICAgICAgcmV0dXJuIGhvc3Q7XG4gICAgfVxufVxuZXhwb3J0cy5yZXNvbHZlQ25hbWUgPSByZXNvbHZlQ25hbWU7XG4vKipcbiAqIExvYWQgdGhlIEtlcmJlcm9zIGxpYnJhcnkuXG4gKi9cbmZ1bmN0aW9uIGxvYWRLcmIoKSB7XG4gICAgaWYgKCFrcmIpIHtcbiAgICAgICAga3JiID0gKDAsIGRlcHNfMS5nZXRLZXJiZXJvcykoKTtcbiAgICB9XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1nc3NhcGkuanMubWFwIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwicmVzb2x2ZUNuYW1lIiwicGVyZm9ybUdTU0FQSUNhbm9uaWNhbGl6ZUhvc3ROYW1lIiwiR1NTQVBJIiwiR1NTQVBJQ2Fub25pY2FsaXphdGlvblZhbHVlIiwiZG5zIiwicmVxdWlyZSIsImRlcHNfMSIsImVycm9yXzEiLCJ1dGlsc18xIiwiYXV0aF9wcm92aWRlcl8xIiwiZnJlZXplIiwib24iLCJvZmYiLCJub25lIiwiZm9yd2FyZCIsImZvcndhcmRBbmRSZXZlcnNlIiwiZXh0ZXJuYWxDb21tYW5kIiwiY29ubmVjdGlvbiIsImNvbW1hbmQiLCJjb21tYW5kQXN5bmMiLCJucyIsInVuZGVmaW5lZCIsImtyYiIsIkF1dGhQcm92aWRlciIsImF1dGgiLCJhdXRoQ29udGV4dCIsImNyZWRlbnRpYWxzIiwiTW9uZ29NaXNzaW5nQ3JlZGVudGlhbHNFcnJvciIsInVzZXJuYW1lIiwiY2xpZW50IiwibWFrZUtlcmJlcm9zQ2xpZW50IiwicGF5bG9hZCIsInN0ZXAiLCJzYXNsU3RhcnRSZXNwb25zZSIsInNhc2xTdGFydCIsIm5lZ290aWF0ZWRQYXlsb2FkIiwibmVnb3RpYXRlIiwic2FzbENvbnRpbnVlUmVzcG9uc2UiLCJzYXNsQ29udGludWUiLCJjb252ZXJzYXRpb25JZCIsImZpbmFsaXplUGF5bG9hZCIsImZpbmFsaXplIiwiaG9zdEFkZHJlc3MiLCJvcHRpb25zIiwiaG9zdCIsIk1vbmdvSW52YWxpZEFyZ3VtZW50RXJyb3IiLCJsb2FkS3JiIiwiaW5pdGlhbGl6ZUNsaWVudCIsInBhc3N3b3JkIiwibWVjaGFuaXNtUHJvcGVydGllcyIsInNlcnZpY2VOYW1lIiwiU0VSVklDRV9OQU1FIiwiaW5pdE9wdGlvbnMiLCJhc3NpZ24iLCJ1c2VyIiwic3BuSG9zdCIsIlNFUlZJQ0VfSE9TVCIsInNwbiIsInByb2Nlc3MiLCJwbGF0Zm9ybSIsIlNFUlZJQ0VfUkVBTE0iLCJtZWNoYW5pc20iLCJhdXRvQXV0aG9yaXplIiwicmV0cmllcyIsInJlc3BvbnNlIiwiZXJyb3IiLCJ1bndyYXAiLCJ3cmFwIiwibW9kZSIsIkNBTk9OSUNBTElaRV9IT1NUX05BTUUiLCJhZGRyZXNzIiwicHJvbWlzZXMiLCJsb29rdXAiLCJyZXN1bHRzIiwicmVzb2x2ZVB0ciIsImxlbmd0aCIsImdldEtlcmJlcm9zIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongodb/lib/cmap/auth/gssapi.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongodb/lib/cmap/auth/mongo_credentials.js":
/*!*****************************************************************!*\
  !*** ./node_modules/mongodb/lib/cmap/auth/mongo_credentials.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.MongoCredentials = exports.DEFAULT_ALLOWED_HOSTS = void 0;\nconst error_1 = __webpack_require__(/*! ../../error */ \"(ssr)/./node_modules/mongodb/lib/error.js\");\nconst gssapi_1 = __webpack_require__(/*! ./gssapi */ \"(ssr)/./node_modules/mongodb/lib/cmap/auth/gssapi.js\");\nconst providers_1 = __webpack_require__(/*! ./providers */ \"(ssr)/./node_modules/mongodb/lib/cmap/auth/providers.js\");\n// https://github.com/mongodb/specifications/blob/master/source/auth/auth.rst\nfunction getDefaultAuthMechanism(hello) {\n    if (hello) {\n        // If hello contains saslSupportedMechs, use scram-sha-256\n        // if it is available, else scram-sha-1\n        if (Array.isArray(hello.saslSupportedMechs)) {\n            return hello.saslSupportedMechs.includes(providers_1.AuthMechanism.MONGODB_SCRAM_SHA256) ? providers_1.AuthMechanism.MONGODB_SCRAM_SHA256 : providers_1.AuthMechanism.MONGODB_SCRAM_SHA1;\n        }\n        // Fallback to legacy selection method. If wire version >= 3, use scram-sha-1\n        if (hello.maxWireVersion >= 3) {\n            return providers_1.AuthMechanism.MONGODB_SCRAM_SHA1;\n        }\n    }\n    // Default for wireprotocol < 3\n    return providers_1.AuthMechanism.MONGODB_CR;\n}\nconst ALLOWED_PROVIDER_NAMES = [\n    \"aws\",\n    \"azure\"\n];\nconst ALLOWED_HOSTS_ERROR = \"Auth mechanism property ALLOWED_HOSTS must be an array of strings.\";\n/** @internal */ exports.DEFAULT_ALLOWED_HOSTS = [\n    \"*.mongodb.net\",\n    \"*.mongodb-dev.net\",\n    \"*.mongodbgov.net\",\n    \"localhost\",\n    \"127.0.0.1\",\n    \"::1\"\n];\n/** Error for when the token audience is missing in the environment. */ const TOKEN_AUDIENCE_MISSING_ERROR = \"TOKEN_AUDIENCE must be set in the auth mechanism properties when PROVIDER_NAME is azure.\";\n/**\n * A representation of the credentials used by MongoDB\n * @public\n */ class MongoCredentials {\n    constructor(options){\n        this.username = options.username ?? \"\";\n        this.password = options.password;\n        this.source = options.source;\n        if (!this.source && options.db) {\n            this.source = options.db;\n        }\n        this.mechanism = options.mechanism || providers_1.AuthMechanism.MONGODB_DEFAULT;\n        this.mechanismProperties = options.mechanismProperties || {};\n        if (this.mechanism.match(/MONGODB-AWS/i)) {\n            if (!this.username && process.env.AWS_ACCESS_KEY_ID) {\n                this.username = process.env.AWS_ACCESS_KEY_ID;\n            }\n            if (!this.password && process.env.AWS_SECRET_ACCESS_KEY) {\n                this.password = process.env.AWS_SECRET_ACCESS_KEY;\n            }\n            if (this.mechanismProperties.AWS_SESSION_TOKEN == null && process.env.AWS_SESSION_TOKEN != null) {\n                this.mechanismProperties = {\n                    ...this.mechanismProperties,\n                    AWS_SESSION_TOKEN: process.env.AWS_SESSION_TOKEN\n                };\n            }\n        }\n        if (this.mechanism === providers_1.AuthMechanism.MONGODB_OIDC && !this.mechanismProperties.ALLOWED_HOSTS) {\n            this.mechanismProperties = {\n                ...this.mechanismProperties,\n                ALLOWED_HOSTS: exports.DEFAULT_ALLOWED_HOSTS\n            };\n        }\n        Object.freeze(this.mechanismProperties);\n        Object.freeze(this);\n    }\n    /** Determines if two MongoCredentials objects are equivalent */ equals(other) {\n        return this.mechanism === other.mechanism && this.username === other.username && this.password === other.password && this.source === other.source;\n    }\n    /**\n     * If the authentication mechanism is set to \"default\", resolves the authMechanism\n     * based on the server version and server supported sasl mechanisms.\n     *\n     * @param hello - A hello response from the server\n     */ resolveAuthMechanism(hello) {\n        // If the mechanism is not \"default\", then it does not need to be resolved\n        if (this.mechanism.match(/DEFAULT/i)) {\n            return new MongoCredentials({\n                username: this.username,\n                password: this.password,\n                source: this.source,\n                mechanism: getDefaultAuthMechanism(hello),\n                mechanismProperties: this.mechanismProperties\n            });\n        }\n        return this;\n    }\n    validate() {\n        if ((this.mechanism === providers_1.AuthMechanism.MONGODB_GSSAPI || this.mechanism === providers_1.AuthMechanism.MONGODB_CR || this.mechanism === providers_1.AuthMechanism.MONGODB_PLAIN || this.mechanism === providers_1.AuthMechanism.MONGODB_SCRAM_SHA1 || this.mechanism === providers_1.AuthMechanism.MONGODB_SCRAM_SHA256) && !this.username) {\n            throw new error_1.MongoMissingCredentialsError(`Username required for mechanism '${this.mechanism}'`);\n        }\n        if (this.mechanism === providers_1.AuthMechanism.MONGODB_OIDC) {\n            if (this.username && this.mechanismProperties.PROVIDER_NAME) {\n                throw new error_1.MongoInvalidArgumentError(`username and PROVIDER_NAME may not be used together for mechanism '${this.mechanism}'.`);\n            }\n            if (this.mechanismProperties.PROVIDER_NAME === \"azure\" && !this.mechanismProperties.TOKEN_AUDIENCE) {\n                throw new error_1.MongoAzureError(TOKEN_AUDIENCE_MISSING_ERROR);\n            }\n            if (this.mechanismProperties.PROVIDER_NAME && !ALLOWED_PROVIDER_NAMES.includes(this.mechanismProperties.PROVIDER_NAME)) {\n                throw new error_1.MongoInvalidArgumentError(`Currently only a PROVIDER_NAME in ${ALLOWED_PROVIDER_NAMES.join(\",\")} is supported for mechanism '${this.mechanism}'.`);\n            }\n            if (this.mechanismProperties.REFRESH_TOKEN_CALLBACK && !this.mechanismProperties.REQUEST_TOKEN_CALLBACK) {\n                throw new error_1.MongoInvalidArgumentError(`A REQUEST_TOKEN_CALLBACK must be provided when using a REFRESH_TOKEN_CALLBACK for mechanism '${this.mechanism}'`);\n            }\n            if (!this.mechanismProperties.PROVIDER_NAME && !this.mechanismProperties.REQUEST_TOKEN_CALLBACK) {\n                throw new error_1.MongoInvalidArgumentError(`Either a PROVIDER_NAME or a REQUEST_TOKEN_CALLBACK must be specified for mechanism '${this.mechanism}'.`);\n            }\n            if (this.mechanismProperties.ALLOWED_HOSTS) {\n                const hosts = this.mechanismProperties.ALLOWED_HOSTS;\n                if (!Array.isArray(hosts)) {\n                    throw new error_1.MongoInvalidArgumentError(ALLOWED_HOSTS_ERROR);\n                }\n                for (const host of hosts){\n                    if (typeof host !== \"string\") {\n                        throw new error_1.MongoInvalidArgumentError(ALLOWED_HOSTS_ERROR);\n                    }\n                }\n            }\n        }\n        if (providers_1.AUTH_MECHS_AUTH_SRC_EXTERNAL.has(this.mechanism)) {\n            if (this.source != null && this.source !== \"$external\") {\n                // TODO(NODE-3485): Replace this with a MongoAuthValidationError\n                throw new error_1.MongoAPIError(`Invalid source '${this.source}' for mechanism '${this.mechanism}' specified.`);\n            }\n        }\n        if (this.mechanism === providers_1.AuthMechanism.MONGODB_PLAIN && this.source == null) {\n            // TODO(NODE-3485): Replace this with a MongoAuthValidationError\n            throw new error_1.MongoAPIError(\"PLAIN Authentication Mechanism needs an auth source\");\n        }\n        if (this.mechanism === providers_1.AuthMechanism.MONGODB_X509 && this.password != null) {\n            if (this.password === \"\") {\n                Reflect.set(this, \"password\", undefined);\n                return;\n            }\n            // TODO(NODE-3485): Replace this with a MongoAuthValidationError\n            throw new error_1.MongoAPIError(`Password not allowed for mechanism MONGODB-X509`);\n        }\n        const canonicalization = this.mechanismProperties.CANONICALIZE_HOST_NAME ?? false;\n        if (!Object.values(gssapi_1.GSSAPICanonicalizationValue).includes(canonicalization)) {\n            throw new error_1.MongoAPIError(`Invalid CANONICALIZE_HOST_NAME value: ${canonicalization}`);\n        }\n    }\n    static merge(creds, options) {\n        return new MongoCredentials({\n            username: options.username ?? creds?.username ?? \"\",\n            password: options.password ?? creds?.password ?? \"\",\n            mechanism: options.mechanism ?? creds?.mechanism ?? providers_1.AuthMechanism.MONGODB_DEFAULT,\n            mechanismProperties: options.mechanismProperties ?? creds?.mechanismProperties ?? {},\n            source: options.source ?? options.db ?? creds?.source ?? \"admin\"\n        });\n    }\n}\nexports.MongoCredentials = MongoCredentials; //# sourceMappingURL=mongo_credentials.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongodb/lib/cmap/auth/mongo_credentials.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongodb/lib/cmap/auth/mongocr.js":
/*!*******************************************************!*\
  !*** ./node_modules/mongodb/lib/cmap/auth/mongocr.js ***!
  \*******************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.MongoCR = void 0;\nconst crypto = __webpack_require__(/*! crypto */ \"crypto\");\nconst error_1 = __webpack_require__(/*! ../../error */ \"(ssr)/./node_modules/mongodb/lib/error.js\");\nconst utils_1 = __webpack_require__(/*! ../../utils */ \"(ssr)/./node_modules/mongodb/lib/utils.js\");\nconst auth_provider_1 = __webpack_require__(/*! ./auth_provider */ \"(ssr)/./node_modules/mongodb/lib/cmap/auth/auth_provider.js\");\nclass MongoCR extends auth_provider_1.AuthProvider {\n    async auth(authContext) {\n        const { connection, credentials } = authContext;\n        if (!credentials) {\n            throw new error_1.MongoMissingCredentialsError(\"AuthContext must provide credentials.\");\n        }\n        const { username, password, source } = credentials;\n        const { nonce } = await connection.commandAsync((0, utils_1.ns)(`${source}.$cmd`), {\n            getnonce: 1\n        }, undefined);\n        const hashPassword = crypto.createHash(\"md5\").update(`${username}:mongo:${password}`, \"utf8\").digest(\"hex\");\n        // Final key\n        const key = crypto.createHash(\"md5\").update(`${nonce}${username}${hashPassword}`, \"utf8\").digest(\"hex\");\n        const authenticateCommand = {\n            authenticate: 1,\n            user: username,\n            nonce,\n            key\n        };\n        await connection.commandAsync((0, utils_1.ns)(`${source}.$cmd`), authenticateCommand, undefined);\n    }\n}\nexports.MongoCR = MongoCR; //# sourceMappingURL=mongocr.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbW9uZ29kYi9saWIvY21hcC9hdXRoL21vbmdvY3IuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYkEsOENBQTZDO0lBQUVHLE9BQU87QUFBSyxDQUFDLEVBQUM7QUFDN0RELGVBQWUsR0FBRyxLQUFLO0FBQ3ZCLE1BQU1HLFNBQVNDLG1CQUFPQSxDQUFDLHNCQUFRO0FBQy9CLE1BQU1DLFVBQVVELG1CQUFPQSxDQUFDLDhEQUFhO0FBQ3JDLE1BQU1FLFVBQVVGLG1CQUFPQSxDQUFDLDhEQUFhO0FBQ3JDLE1BQU1HLGtCQUFrQkgsbUJBQU9BLENBQUMsb0ZBQWlCO0FBQ2pELE1BQU1GLGdCQUFnQkssZ0JBQWdCQyxZQUFZO0lBQzlDLE1BQU1DLEtBQUtDLFdBQVcsRUFBRTtRQUNwQixNQUFNLEVBQUVDLFVBQVUsRUFBRUMsV0FBVyxFQUFFLEdBQUdGO1FBQ3BDLElBQUksQ0FBQ0UsYUFBYTtZQUNkLE1BQU0sSUFBSVAsUUFBUVEsNEJBQTRCLENBQUM7UUFDbkQ7UUFDQSxNQUFNLEVBQUVDLFFBQVEsRUFBRUMsUUFBUSxFQUFFQyxNQUFNLEVBQUUsR0FBR0o7UUFDdkMsTUFBTSxFQUFFSyxLQUFLLEVBQUUsR0FBRyxNQUFNTixXQUFXTyxZQUFZLENBQUMsQ0FBQyxHQUFHWixRQUFRYSxFQUFFLEVBQUUsQ0FBQyxFQUFFSCxPQUFPLEtBQUssQ0FBQyxHQUFHO1lBQUVJLFVBQVU7UUFBRSxHQUFHQztRQUNwRyxNQUFNQyxlQUFlbkIsT0FDaEJvQixVQUFVLENBQUMsT0FDWEMsTUFBTSxDQUFDLENBQUMsRUFBRVYsU0FBUyxPQUFPLEVBQUVDLFNBQVMsQ0FBQyxFQUFFLFFBQ3hDVSxNQUFNLENBQUM7UUFDWixZQUFZO1FBQ1osTUFBTUMsTUFBTXZCLE9BQ1BvQixVQUFVLENBQUMsT0FDWEMsTUFBTSxDQUFDLENBQUMsRUFBRVAsTUFBTSxFQUFFSCxTQUFTLEVBQUVRLGFBQWEsQ0FBQyxFQUFFLFFBQzdDRyxNQUFNLENBQUM7UUFDWixNQUFNRSxzQkFBc0I7WUFDeEJDLGNBQWM7WUFDZEMsTUFBTWY7WUFDTkc7WUFDQVM7UUFDSjtRQUNBLE1BQU1mLFdBQVdPLFlBQVksQ0FBQyxDQUFDLEdBQUdaLFFBQVFhLEVBQUUsRUFBRSxDQUFDLEVBQUVILE9BQU8sS0FBSyxDQUFDLEdBQUdXLHFCQUFxQk47SUFDMUY7QUFDSjtBQUNBckIsZUFBZSxHQUFHRSxTQUNsQixtQ0FBbUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9ibG9nLWFwcGxpY2F0aW9uLy4vbm9kZV9tb2R1bGVzL21vbmdvZGIvbGliL2NtYXAvYXV0aC9tb25nb2NyLmpzPzAyM2QiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLk1vbmdvQ1IgPSB2b2lkIDA7XG5jb25zdCBjcnlwdG8gPSByZXF1aXJlKFwiY3J5cHRvXCIpO1xuY29uc3QgZXJyb3JfMSA9IHJlcXVpcmUoXCIuLi8uLi9lcnJvclwiKTtcbmNvbnN0IHV0aWxzXzEgPSByZXF1aXJlKFwiLi4vLi4vdXRpbHNcIik7XG5jb25zdCBhdXRoX3Byb3ZpZGVyXzEgPSByZXF1aXJlKFwiLi9hdXRoX3Byb3ZpZGVyXCIpO1xuY2xhc3MgTW9uZ29DUiBleHRlbmRzIGF1dGhfcHJvdmlkZXJfMS5BdXRoUHJvdmlkZXIge1xuICAgIGFzeW5jIGF1dGgoYXV0aENvbnRleHQpIHtcbiAgICAgICAgY29uc3QgeyBjb25uZWN0aW9uLCBjcmVkZW50aWFscyB9ID0gYXV0aENvbnRleHQ7XG4gICAgICAgIGlmICghY3JlZGVudGlhbHMpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBlcnJvcl8xLk1vbmdvTWlzc2luZ0NyZWRlbnRpYWxzRXJyb3IoJ0F1dGhDb250ZXh0IG11c3QgcHJvdmlkZSBjcmVkZW50aWFscy4nKTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCB7IHVzZXJuYW1lLCBwYXNzd29yZCwgc291cmNlIH0gPSBjcmVkZW50aWFscztcbiAgICAgICAgY29uc3QgeyBub25jZSB9ID0gYXdhaXQgY29ubmVjdGlvbi5jb21tYW5kQXN5bmMoKDAsIHV0aWxzXzEubnMpKGAke3NvdXJjZX0uJGNtZGApLCB7IGdldG5vbmNlOiAxIH0sIHVuZGVmaW5lZCk7XG4gICAgICAgIGNvbnN0IGhhc2hQYXNzd29yZCA9IGNyeXB0b1xuICAgICAgICAgICAgLmNyZWF0ZUhhc2goJ21kNScpXG4gICAgICAgICAgICAudXBkYXRlKGAke3VzZXJuYW1lfTptb25nbzoke3Bhc3N3b3JkfWAsICd1dGY4JylcbiAgICAgICAgICAgIC5kaWdlc3QoJ2hleCcpO1xuICAgICAgICAvLyBGaW5hbCBrZXlcbiAgICAgICAgY29uc3Qga2V5ID0gY3J5cHRvXG4gICAgICAgICAgICAuY3JlYXRlSGFzaCgnbWQ1JylcbiAgICAgICAgICAgIC51cGRhdGUoYCR7bm9uY2V9JHt1c2VybmFtZX0ke2hhc2hQYXNzd29yZH1gLCAndXRmOCcpXG4gICAgICAgICAgICAuZGlnZXN0KCdoZXgnKTtcbiAgICAgICAgY29uc3QgYXV0aGVudGljYXRlQ29tbWFuZCA9IHtcbiAgICAgICAgICAgIGF1dGhlbnRpY2F0ZTogMSxcbiAgICAgICAgICAgIHVzZXI6IHVzZXJuYW1lLFxuICAgICAgICAgICAgbm9uY2UsXG4gICAgICAgICAgICBrZXlcbiAgICAgICAgfTtcbiAgICAgICAgYXdhaXQgY29ubmVjdGlvbi5jb21tYW5kQXN5bmMoKDAsIHV0aWxzXzEubnMpKGAke3NvdXJjZX0uJGNtZGApLCBhdXRoZW50aWNhdGVDb21tYW5kLCB1bmRlZmluZWQpO1xuICAgIH1cbn1cbmV4cG9ydHMuTW9uZ29DUiA9IE1vbmdvQ1I7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1tb25nb2NyLmpzLm1hcCJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsIk1vbmdvQ1IiLCJjcnlwdG8iLCJyZXF1aXJlIiwiZXJyb3JfMSIsInV0aWxzXzEiLCJhdXRoX3Byb3ZpZGVyXzEiLCJBdXRoUHJvdmlkZXIiLCJhdXRoIiwiYXV0aENvbnRleHQiLCJjb25uZWN0aW9uIiwiY3JlZGVudGlhbHMiLCJNb25nb01pc3NpbmdDcmVkZW50aWFsc0Vycm9yIiwidXNlcm5hbWUiLCJwYXNzd29yZCIsInNvdXJjZSIsIm5vbmNlIiwiY29tbWFuZEFzeW5jIiwibnMiLCJnZXRub25jZSIsInVuZGVmaW5lZCIsImhhc2hQYXNzd29yZCIsImNyZWF0ZUhhc2giLCJ1cGRhdGUiLCJkaWdlc3QiLCJrZXkiLCJhdXRoZW50aWNhdGVDb21tYW5kIiwiYXV0aGVudGljYXRlIiwidXNlciJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongodb/lib/cmap/auth/mongocr.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongodb/lib/cmap/auth/mongodb_aws.js":
/*!***********************************************************!*\
  !*** ./node_modules/mongodb/lib/cmap/auth/mongodb_aws.js ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.MongoDBAWS = void 0;\nconst crypto = __webpack_require__(/*! crypto */ \"crypto\");\nconst process = __webpack_require__(/*! process */ \"process\");\nconst util_1 = __webpack_require__(/*! util */ \"util\");\nconst BSON = __webpack_require__(/*! ../../bson */ \"(ssr)/./node_modules/mongodb/lib/bson.js\");\nconst deps_1 = __webpack_require__(/*! ../../deps */ \"(ssr)/./node_modules/mongodb/lib/deps.js\");\nconst error_1 = __webpack_require__(/*! ../../error */ \"(ssr)/./node_modules/mongodb/lib/error.js\");\nconst utils_1 = __webpack_require__(/*! ../../utils */ \"(ssr)/./node_modules/mongodb/lib/utils.js\");\nconst auth_provider_1 = __webpack_require__(/*! ./auth_provider */ \"(ssr)/./node_modules/mongodb/lib/cmap/auth/auth_provider.js\");\nconst mongo_credentials_1 = __webpack_require__(/*! ./mongo_credentials */ \"(ssr)/./node_modules/mongodb/lib/cmap/auth/mongo_credentials.js\");\nconst providers_1 = __webpack_require__(/*! ./providers */ \"(ssr)/./node_modules/mongodb/lib/cmap/auth/providers.js\");\n/**\n * The following regions use the global AWS STS endpoint, sts.amazonaws.com, by default\n * https://docs.aws.amazon.com/sdkref/latest/guide/feature-sts-regionalized-endpoints.html\n */ const LEGACY_REGIONS = new Set([\n    \"ap-northeast-1\",\n    \"ap-south-1\",\n    \"ap-southeast-1\",\n    \"ap-southeast-2\",\n    \"aws-global\",\n    \"ca-central-1\",\n    \"eu-central-1\",\n    \"eu-north-1\",\n    \"eu-west-1\",\n    \"eu-west-2\",\n    \"eu-west-3\",\n    \"sa-east-1\",\n    \"us-east-1\",\n    \"us-east-2\",\n    \"us-west-1\",\n    \"us-west-2\"\n]);\nconst ASCII_N = 110;\nconst AWS_RELATIVE_URI = \"http://169.254.170.2\";\nconst AWS_EC2_URI = \"http://169.254.169.254\";\nconst AWS_EC2_PATH = \"/latest/meta-data/iam/security-credentials\";\nconst bsonOptions = {\n    useBigInt64: false,\n    promoteLongs: true,\n    promoteValues: true,\n    promoteBuffers: false,\n    bsonRegExp: false\n};\nclass MongoDBAWS extends auth_provider_1.AuthProvider {\n    constructor(){\n        super();\n        this.randomBytesAsync = (0, util_1.promisify)(crypto.randomBytes);\n    }\n    async auth(authContext) {\n        const { connection } = authContext;\n        if (!authContext.credentials) {\n            throw new error_1.MongoMissingCredentialsError(\"AuthContext must provide credentials.\");\n        }\n        if (\"kModuleError\" in deps_1.aws4) {\n            throw deps_1.aws4[\"kModuleError\"];\n        }\n        const { sign } = deps_1.aws4;\n        if ((0, utils_1.maxWireVersion)(connection) < 9) {\n            throw new error_1.MongoCompatibilityError(\"MONGODB-AWS authentication requires MongoDB version 4.4 or later\");\n        }\n        if (!authContext.credentials.username) {\n            authContext.credentials = await makeTempCredentials(authContext.credentials);\n        }\n        const { credentials } = authContext;\n        const accessKeyId = credentials.username;\n        const secretAccessKey = credentials.password;\n        const sessionToken = credentials.mechanismProperties.AWS_SESSION_TOKEN;\n        // If all three defined, include sessionToken, else include username and pass, else no credentials\n        const awsCredentials = accessKeyId && secretAccessKey && sessionToken ? {\n            accessKeyId,\n            secretAccessKey,\n            sessionToken\n        } : accessKeyId && secretAccessKey ? {\n            accessKeyId,\n            secretAccessKey\n        } : undefined;\n        const db = credentials.source;\n        const nonce = await this.randomBytesAsync(32);\n        const saslStart = {\n            saslStart: 1,\n            mechanism: \"MONGODB-AWS\",\n            payload: BSON.serialize({\n                r: nonce,\n                p: ASCII_N\n            }, bsonOptions)\n        };\n        const saslStartResponse = await connection.commandAsync((0, utils_1.ns)(`${db}.$cmd`), saslStart, undefined);\n        const serverResponse = BSON.deserialize(saslStartResponse.payload.buffer, bsonOptions);\n        const host = serverResponse.h;\n        const serverNonce = serverResponse.s.buffer;\n        if (serverNonce.length !== 64) {\n            // TODO(NODE-3483)\n            throw new error_1.MongoRuntimeError(`Invalid server nonce length ${serverNonce.length}, expected 64`);\n        }\n        if (!utils_1.ByteUtils.equals(serverNonce.subarray(0, nonce.byteLength), nonce)) {\n            // throw because the serverNonce's leading 32 bytes must equal the client nonce's 32 bytes\n            // https://github.com/mongodb/specifications/blob/875446db44aade414011731840831f38a6c668df/source/auth/auth.rst#id11\n            // TODO(NODE-3483)\n            throw new error_1.MongoRuntimeError(\"Server nonce does not begin with client nonce\");\n        }\n        if (host.length < 1 || host.length > 255 || host.indexOf(\"..\") !== -1) {\n            // TODO(NODE-3483)\n            throw new error_1.MongoRuntimeError(`Server returned an invalid host: \"${host}\"`);\n        }\n        const body = \"Action=GetCallerIdentity&Version=2011-06-15\";\n        const options = sign({\n            method: \"POST\",\n            host,\n            region: deriveRegion(serverResponse.h),\n            service: \"sts\",\n            headers: {\n                \"Content-Type\": \"application/x-www-form-urlencoded\",\n                \"Content-Length\": body.length,\n                \"X-MongoDB-Server-Nonce\": utils_1.ByteUtils.toBase64(serverNonce),\n                \"X-MongoDB-GS2-CB-Flag\": \"n\"\n            },\n            path: \"/\",\n            body\n        }, awsCredentials);\n        const payload = {\n            a: options.headers.Authorization,\n            d: options.headers[\"X-Amz-Date\"]\n        };\n        if (sessionToken) {\n            payload.t = sessionToken;\n        }\n        const saslContinue = {\n            saslContinue: 1,\n            conversationId: 1,\n            payload: BSON.serialize(payload, bsonOptions)\n        };\n        await connection.commandAsync((0, utils_1.ns)(`${db}.$cmd`), saslContinue, undefined);\n    }\n}\nMongoDBAWS.credentialProvider = null;\nexports.MongoDBAWS = MongoDBAWS;\nasync function makeTempCredentials(credentials) {\n    function makeMongoCredentialsFromAWSTemp(creds) {\n        if (!creds.AccessKeyId || !creds.SecretAccessKey || !creds.Token) {\n            throw new error_1.MongoMissingCredentialsError(\"Could not obtain temporary MONGODB-AWS credentials\");\n        }\n        return new mongo_credentials_1.MongoCredentials({\n            username: creds.AccessKeyId,\n            password: creds.SecretAccessKey,\n            source: credentials.source,\n            mechanism: providers_1.AuthMechanism.MONGODB_AWS,\n            mechanismProperties: {\n                AWS_SESSION_TOKEN: creds.Token\n            }\n        });\n    }\n    MongoDBAWS.credentialProvider ??= (0, deps_1.getAwsCredentialProvider)();\n    // Check if the AWS credential provider from the SDK is present. If not,\n    // use the old method.\n    if (\"kModuleError\" in MongoDBAWS.credentialProvider) {\n        // If the environment variable AWS_CONTAINER_CREDENTIALS_RELATIVE_URI\n        // is set then drivers MUST assume that it was set by an AWS ECS agent\n        if (process.env.AWS_CONTAINER_CREDENTIALS_RELATIVE_URI) {\n            return makeMongoCredentialsFromAWSTemp(await (0, utils_1.request)(`${AWS_RELATIVE_URI}${process.env.AWS_CONTAINER_CREDENTIALS_RELATIVE_URI}`));\n        }\n        // Otherwise assume we are on an EC2 instance\n        // get a token\n        const token = await (0, utils_1.request)(`${AWS_EC2_URI}/latest/api/token`, {\n            method: \"PUT\",\n            json: false,\n            headers: {\n                \"X-aws-ec2-metadata-token-ttl-seconds\": 30\n            }\n        });\n        // get role name\n        const roleName = await (0, utils_1.request)(`${AWS_EC2_URI}/${AWS_EC2_PATH}`, {\n            json: false,\n            headers: {\n                \"X-aws-ec2-metadata-token\": token\n            }\n        });\n        // get temp credentials\n        const creds = await (0, utils_1.request)(`${AWS_EC2_URI}/${AWS_EC2_PATH}/${roleName}`, {\n            headers: {\n                \"X-aws-ec2-metadata-token\": token\n            }\n        });\n        return makeMongoCredentialsFromAWSTemp(creds);\n    } else {\n        let { AWS_STS_REGIONAL_ENDPOINTS = \"\", AWS_REGION = \"\" } = process.env;\n        AWS_STS_REGIONAL_ENDPOINTS = AWS_STS_REGIONAL_ENDPOINTS.toLowerCase();\n        AWS_REGION = AWS_REGION.toLowerCase();\n        /** The option setting should work only for users who have explicit settings in their environment, the driver should not encode \"defaults\" */ const awsRegionSettingsExist = AWS_REGION.length !== 0 && AWS_STS_REGIONAL_ENDPOINTS.length !== 0;\n        /**\n         * If AWS_STS_REGIONAL_ENDPOINTS is set to regional, users are opting into the new behavior of respecting the region settings\n         *\n         * If AWS_STS_REGIONAL_ENDPOINTS is set to legacy, then \"old\" regions need to keep using the global setting.\n         * Technically the SDK gets this wrong, it reaches out to 'sts.us-east-1.amazonaws.com' when it should be 'sts.amazonaws.com'.\n         * That is not our bug to fix here. We leave that up to the SDK.\n         */ const useRegionalSts = AWS_STS_REGIONAL_ENDPOINTS === \"regional\" || AWS_STS_REGIONAL_ENDPOINTS === \"legacy\" && !LEGACY_REGIONS.has(AWS_REGION);\n        const provider = awsRegionSettingsExist && useRegionalSts ? MongoDBAWS.credentialProvider.fromNodeProviderChain({\n            clientConfig: {\n                region: AWS_REGION\n            }\n        }) : MongoDBAWS.credentialProvider.fromNodeProviderChain();\n        /*\n         * Creates a credential provider that will attempt to find credentials from the\n         * following sources (listed in order of precedence):\n         *\n         * - Environment variables exposed via process.env\n         * - SSO credentials from token cache\n         * - Web identity token credentials\n         * - Shared credentials and config ini files\n         * - The EC2/ECS Instance Metadata Service\n         */ try {\n            const creds = await provider();\n            return makeMongoCredentialsFromAWSTemp({\n                AccessKeyId: creds.accessKeyId,\n                SecretAccessKey: creds.secretAccessKey,\n                Token: creds.sessionToken,\n                Expiration: creds.expiration\n            });\n        } catch (error) {\n            throw new error_1.MongoAWSError(error.message);\n        }\n    }\n}\nfunction deriveRegion(host) {\n    const parts = host.split(\".\");\n    if (parts.length === 1 || parts[1] === \"amazonaws\") {\n        return \"us-east-1\";\n    }\n    return parts[1];\n} //# sourceMappingURL=mongodb_aws.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongodb/lib/cmap/auth/mongodb_aws.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongodb/lib/cmap/auth/mongodb_oidc.js":
/*!************************************************************!*\
  !*** ./node_modules/mongodb/lib/cmap/auth/mongodb_oidc.js ***!
  \************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.MongoDBOIDC = exports.OIDC_WORKFLOWS = void 0;\nconst error_1 = __webpack_require__(/*! ../../error */ \"(ssr)/./node_modules/mongodb/lib/error.js\");\nconst auth_provider_1 = __webpack_require__(/*! ./auth_provider */ \"(ssr)/./node_modules/mongodb/lib/cmap/auth/auth_provider.js\");\nconst aws_service_workflow_1 = __webpack_require__(/*! ./mongodb_oidc/aws_service_workflow */ \"(ssr)/./node_modules/mongodb/lib/cmap/auth/mongodb_oidc/aws_service_workflow.js\");\nconst azure_service_workflow_1 = __webpack_require__(/*! ./mongodb_oidc/azure_service_workflow */ \"(ssr)/./node_modules/mongodb/lib/cmap/auth/mongodb_oidc/azure_service_workflow.js\");\nconst callback_workflow_1 = __webpack_require__(/*! ./mongodb_oidc/callback_workflow */ \"(ssr)/./node_modules/mongodb/lib/cmap/auth/mongodb_oidc/callback_workflow.js\");\n/** Error when credentials are missing. */ const MISSING_CREDENTIALS_ERROR = \"AuthContext must provide credentials.\";\n/** @internal */ exports.OIDC_WORKFLOWS = new Map();\nexports.OIDC_WORKFLOWS.set(\"callback\", new callback_workflow_1.CallbackWorkflow());\nexports.OIDC_WORKFLOWS.set(\"aws\", new aws_service_workflow_1.AwsServiceWorkflow());\nexports.OIDC_WORKFLOWS.set(\"azure\", new azure_service_workflow_1.AzureServiceWorkflow());\n/**\n * OIDC auth provider.\n * @experimental\n */ class MongoDBOIDC extends auth_provider_1.AuthProvider {\n    /**\n     * Instantiate the auth provider.\n     */ constructor(){\n        super();\n    }\n    /**\n     * Authenticate using OIDC\n     */ async auth(authContext) {\n        const { connection, reauthenticating, response } = authContext;\n        const credentials = getCredentials(authContext);\n        const workflow = getWorkflow(credentials);\n        await workflow.execute(connection, credentials, reauthenticating, response);\n    }\n    /**\n     * Add the speculative auth for the initial handshake.\n     */ async prepare(handshakeDoc, authContext) {\n        const credentials = getCredentials(authContext);\n        const workflow = getWorkflow(credentials);\n        const result = await workflow.speculativeAuth(credentials);\n        return {\n            ...handshakeDoc,\n            ...result\n        };\n    }\n}\nexports.MongoDBOIDC = MongoDBOIDC;\n/**\n * Get credentials from the auth context, throwing if they do not exist.\n */ function getCredentials(authContext) {\n    const { credentials } = authContext;\n    if (!credentials) {\n        throw new error_1.MongoMissingCredentialsError(MISSING_CREDENTIALS_ERROR);\n    }\n    return credentials;\n}\n/**\n * Gets either a device workflow or callback workflow.\n */ function getWorkflow(credentials) {\n    const providerName = credentials.mechanismProperties.PROVIDER_NAME;\n    const workflow = exports.OIDC_WORKFLOWS.get(providerName || \"callback\");\n    if (!workflow) {\n        throw new error_1.MongoInvalidArgumentError(`Could not load workflow for provider ${credentials.mechanismProperties.PROVIDER_NAME}`);\n    }\n    return workflow;\n} //# sourceMappingURL=mongodb_oidc.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbW9uZ29kYi9saWIvY21hcC9hdXRoL21vbmdvZGJfb2lkYy5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiQSw4Q0FBNkM7SUFBRUcsT0FBTztBQUFLLENBQUMsRUFBQztBQUM3REQsbUJBQW1CLEdBQUdBLHNCQUFzQixHQUFHLEtBQUs7QUFDcEQsTUFBTUksVUFBVUMsbUJBQU9BLENBQUMsOERBQWE7QUFDckMsTUFBTUMsa0JBQWtCRCxtQkFBT0EsQ0FBQyxvRkFBaUI7QUFDakQsTUFBTUUseUJBQXlCRixtQkFBT0EsQ0FBQyw0SEFBcUM7QUFDNUUsTUFBTUcsMkJBQTJCSCxtQkFBT0EsQ0FBQyxnSUFBdUM7QUFDaEYsTUFBTUksc0JBQXNCSixtQkFBT0EsQ0FBQyxzSEFBa0M7QUFDdEUsd0NBQXdDLEdBQ3hDLE1BQU1LLDRCQUE0QjtBQUNsQyxjQUFjLEdBQ2RWLHNCQUFzQixHQUFHLElBQUlXO0FBQzdCWCxRQUFRRyxjQUFjLENBQUNTLEdBQUcsQ0FBQyxZQUFZLElBQUlILG9CQUFvQkksZ0JBQWdCO0FBQy9FYixRQUFRRyxjQUFjLENBQUNTLEdBQUcsQ0FBQyxPQUFPLElBQUlMLHVCQUF1Qk8sa0JBQWtCO0FBQy9FZCxRQUFRRyxjQUFjLENBQUNTLEdBQUcsQ0FBQyxTQUFTLElBQUlKLHlCQUF5Qk8sb0JBQW9CO0FBQ3JGOzs7Q0FHQyxHQUNELE1BQU1iLG9CQUFvQkksZ0JBQWdCVSxZQUFZO0lBQ2xEOztLQUVDLEdBQ0RDLGFBQWM7UUFDVixLQUFLO0lBQ1Q7SUFDQTs7S0FFQyxHQUNELE1BQU1DLEtBQUtDLFdBQVcsRUFBRTtRQUNwQixNQUFNLEVBQUVDLFVBQVUsRUFBRUMsZ0JBQWdCLEVBQUVDLFFBQVEsRUFBRSxHQUFHSDtRQUNuRCxNQUFNSSxjQUFjQyxlQUFlTDtRQUNuQyxNQUFNTSxXQUFXQyxZQUFZSDtRQUM3QixNQUFNRSxTQUFTRSxPQUFPLENBQUNQLFlBQVlHLGFBQWFGLGtCQUFrQkM7SUFDdEU7SUFDQTs7S0FFQyxHQUNELE1BQU1NLFFBQVFDLFlBQVksRUFBRVYsV0FBVyxFQUFFO1FBQ3JDLE1BQU1JLGNBQWNDLGVBQWVMO1FBQ25DLE1BQU1NLFdBQVdDLFlBQVlIO1FBQzdCLE1BQU1PLFNBQVMsTUFBTUwsU0FBU00sZUFBZSxDQUFDUjtRQUM5QyxPQUFPO1lBQUUsR0FBR00sWUFBWTtZQUFFLEdBQUdDLE1BQU07UUFBQztJQUN4QztBQUNKO0FBQ0E5QixtQkFBbUIsR0FBR0U7QUFDdEI7O0NBRUMsR0FDRCxTQUFTc0IsZUFBZUwsV0FBVztJQUMvQixNQUFNLEVBQUVJLFdBQVcsRUFBRSxHQUFHSjtJQUN4QixJQUFJLENBQUNJLGFBQWE7UUFDZCxNQUFNLElBQUluQixRQUFRNEIsNEJBQTRCLENBQUN0QjtJQUNuRDtJQUNBLE9BQU9hO0FBQ1g7QUFDQTs7Q0FFQyxHQUNELFNBQVNHLFlBQVlILFdBQVc7SUFDNUIsTUFBTVUsZUFBZVYsWUFBWVcsbUJBQW1CLENBQUNDLGFBQWE7SUFDbEUsTUFBTVYsV0FBV3pCLFFBQVFHLGNBQWMsQ0FBQ2lDLEdBQUcsQ0FBQ0gsZ0JBQWdCO0lBQzVELElBQUksQ0FBQ1IsVUFBVTtRQUNYLE1BQU0sSUFBSXJCLFFBQVFpQyx5QkFBeUIsQ0FBQyxDQUFDLHFDQUFxQyxFQUFFZCxZQUFZVyxtQkFBbUIsQ0FBQ0MsYUFBYSxDQUFDLENBQUM7SUFDdkk7SUFDQSxPQUFPVjtBQUNYLEVBQ0Esd0NBQXdDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYmxvZy1hcHBsaWNhdGlvbi8uL25vZGVfbW9kdWxlcy9tb25nb2RiL2xpYi9jbWFwL2F1dGgvbW9uZ29kYl9vaWRjLmpzPzdmZTQiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLk1vbmdvREJPSURDID0gZXhwb3J0cy5PSURDX1dPUktGTE9XUyA9IHZvaWQgMDtcbmNvbnN0IGVycm9yXzEgPSByZXF1aXJlKFwiLi4vLi4vZXJyb3JcIik7XG5jb25zdCBhdXRoX3Byb3ZpZGVyXzEgPSByZXF1aXJlKFwiLi9hdXRoX3Byb3ZpZGVyXCIpO1xuY29uc3QgYXdzX3NlcnZpY2Vfd29ya2Zsb3dfMSA9IHJlcXVpcmUoXCIuL21vbmdvZGJfb2lkYy9hd3Nfc2VydmljZV93b3JrZmxvd1wiKTtcbmNvbnN0IGF6dXJlX3NlcnZpY2Vfd29ya2Zsb3dfMSA9IHJlcXVpcmUoXCIuL21vbmdvZGJfb2lkYy9henVyZV9zZXJ2aWNlX3dvcmtmbG93XCIpO1xuY29uc3QgY2FsbGJhY2tfd29ya2Zsb3dfMSA9IHJlcXVpcmUoXCIuL21vbmdvZGJfb2lkYy9jYWxsYmFja193b3JrZmxvd1wiKTtcbi8qKiBFcnJvciB3aGVuIGNyZWRlbnRpYWxzIGFyZSBtaXNzaW5nLiAqL1xuY29uc3QgTUlTU0lOR19DUkVERU5USUFMU19FUlJPUiA9ICdBdXRoQ29udGV4dCBtdXN0IHByb3ZpZGUgY3JlZGVudGlhbHMuJztcbi8qKiBAaW50ZXJuYWwgKi9cbmV4cG9ydHMuT0lEQ19XT1JLRkxPV1MgPSBuZXcgTWFwKCk7XG5leHBvcnRzLk9JRENfV09SS0ZMT1dTLnNldCgnY2FsbGJhY2snLCBuZXcgY2FsbGJhY2tfd29ya2Zsb3dfMS5DYWxsYmFja1dvcmtmbG93KCkpO1xuZXhwb3J0cy5PSURDX1dPUktGTE9XUy5zZXQoJ2F3cycsIG5ldyBhd3Nfc2VydmljZV93b3JrZmxvd18xLkF3c1NlcnZpY2VXb3JrZmxvdygpKTtcbmV4cG9ydHMuT0lEQ19XT1JLRkxPV1Muc2V0KCdhenVyZScsIG5ldyBhenVyZV9zZXJ2aWNlX3dvcmtmbG93XzEuQXp1cmVTZXJ2aWNlV29ya2Zsb3coKSk7XG4vKipcbiAqIE9JREMgYXV0aCBwcm92aWRlci5cbiAqIEBleHBlcmltZW50YWxcbiAqL1xuY2xhc3MgTW9uZ29EQk9JREMgZXh0ZW5kcyBhdXRoX3Byb3ZpZGVyXzEuQXV0aFByb3ZpZGVyIHtcbiAgICAvKipcbiAgICAgKiBJbnN0YW50aWF0ZSB0aGUgYXV0aCBwcm92aWRlci5cbiAgICAgKi9cbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgc3VwZXIoKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQXV0aGVudGljYXRlIHVzaW5nIE9JRENcbiAgICAgKi9cbiAgICBhc3luYyBhdXRoKGF1dGhDb250ZXh0KSB7XG4gICAgICAgIGNvbnN0IHsgY29ubmVjdGlvbiwgcmVhdXRoZW50aWNhdGluZywgcmVzcG9uc2UgfSA9IGF1dGhDb250ZXh0O1xuICAgICAgICBjb25zdCBjcmVkZW50aWFscyA9IGdldENyZWRlbnRpYWxzKGF1dGhDb250ZXh0KTtcbiAgICAgICAgY29uc3Qgd29ya2Zsb3cgPSBnZXRXb3JrZmxvdyhjcmVkZW50aWFscyk7XG4gICAgICAgIGF3YWl0IHdvcmtmbG93LmV4ZWN1dGUoY29ubmVjdGlvbiwgY3JlZGVudGlhbHMsIHJlYXV0aGVudGljYXRpbmcsIHJlc3BvbnNlKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQWRkIHRoZSBzcGVjdWxhdGl2ZSBhdXRoIGZvciB0aGUgaW5pdGlhbCBoYW5kc2hha2UuXG4gICAgICovXG4gICAgYXN5bmMgcHJlcGFyZShoYW5kc2hha2VEb2MsIGF1dGhDb250ZXh0KSB7XG4gICAgICAgIGNvbnN0IGNyZWRlbnRpYWxzID0gZ2V0Q3JlZGVudGlhbHMoYXV0aENvbnRleHQpO1xuICAgICAgICBjb25zdCB3b3JrZmxvdyA9IGdldFdvcmtmbG93KGNyZWRlbnRpYWxzKTtcbiAgICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgd29ya2Zsb3cuc3BlY3VsYXRpdmVBdXRoKGNyZWRlbnRpYWxzKTtcbiAgICAgICAgcmV0dXJuIHsgLi4uaGFuZHNoYWtlRG9jLCAuLi5yZXN1bHQgfTtcbiAgICB9XG59XG5leHBvcnRzLk1vbmdvREJPSURDID0gTW9uZ29EQk9JREM7XG4vKipcbiAqIEdldCBjcmVkZW50aWFscyBmcm9tIHRoZSBhdXRoIGNvbnRleHQsIHRocm93aW5nIGlmIHRoZXkgZG8gbm90IGV4aXN0LlxuICovXG5mdW5jdGlvbiBnZXRDcmVkZW50aWFscyhhdXRoQ29udGV4dCkge1xuICAgIGNvbnN0IHsgY3JlZGVudGlhbHMgfSA9IGF1dGhDb250ZXh0O1xuICAgIGlmICghY3JlZGVudGlhbHMpIHtcbiAgICAgICAgdGhyb3cgbmV3IGVycm9yXzEuTW9uZ29NaXNzaW5nQ3JlZGVudGlhbHNFcnJvcihNSVNTSU5HX0NSRURFTlRJQUxTX0VSUk9SKTtcbiAgICB9XG4gICAgcmV0dXJuIGNyZWRlbnRpYWxzO1xufVxuLyoqXG4gKiBHZXRzIGVpdGhlciBhIGRldmljZSB3b3JrZmxvdyBvciBjYWxsYmFjayB3b3JrZmxvdy5cbiAqL1xuZnVuY3Rpb24gZ2V0V29ya2Zsb3coY3JlZGVudGlhbHMpIHtcbiAgICBjb25zdCBwcm92aWRlck5hbWUgPSBjcmVkZW50aWFscy5tZWNoYW5pc21Qcm9wZXJ0aWVzLlBST1ZJREVSX05BTUU7XG4gICAgY29uc3Qgd29ya2Zsb3cgPSBleHBvcnRzLk9JRENfV09SS0ZMT1dTLmdldChwcm92aWRlck5hbWUgfHwgJ2NhbGxiYWNrJyk7XG4gICAgaWYgKCF3b3JrZmxvdykge1xuICAgICAgICB0aHJvdyBuZXcgZXJyb3JfMS5Nb25nb0ludmFsaWRBcmd1bWVudEVycm9yKGBDb3VsZCBub3QgbG9hZCB3b3JrZmxvdyBmb3IgcHJvdmlkZXIgJHtjcmVkZW50aWFscy5tZWNoYW5pc21Qcm9wZXJ0aWVzLlBST1ZJREVSX05BTUV9YCk7XG4gICAgfVxuICAgIHJldHVybiB3b3JrZmxvdztcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPW1vbmdvZGJfb2lkYy5qcy5tYXAiXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJNb25nb0RCT0lEQyIsIk9JRENfV09SS0ZMT1dTIiwiZXJyb3JfMSIsInJlcXVpcmUiLCJhdXRoX3Byb3ZpZGVyXzEiLCJhd3Nfc2VydmljZV93b3JrZmxvd18xIiwiYXp1cmVfc2VydmljZV93b3JrZmxvd18xIiwiY2FsbGJhY2tfd29ya2Zsb3dfMSIsIk1JU1NJTkdfQ1JFREVOVElBTFNfRVJST1IiLCJNYXAiLCJzZXQiLCJDYWxsYmFja1dvcmtmbG93IiwiQXdzU2VydmljZVdvcmtmbG93IiwiQXp1cmVTZXJ2aWNlV29ya2Zsb3ciLCJBdXRoUHJvdmlkZXIiLCJjb25zdHJ1Y3RvciIsImF1dGgiLCJhdXRoQ29udGV4dCIsImNvbm5lY3Rpb24iLCJyZWF1dGhlbnRpY2F0aW5nIiwicmVzcG9uc2UiLCJjcmVkZW50aWFscyIsImdldENyZWRlbnRpYWxzIiwid29ya2Zsb3ciLCJnZXRXb3JrZmxvdyIsImV4ZWN1dGUiLCJwcmVwYXJlIiwiaGFuZHNoYWtlRG9jIiwicmVzdWx0Iiwic3BlY3VsYXRpdmVBdXRoIiwiTW9uZ29NaXNzaW5nQ3JlZGVudGlhbHNFcnJvciIsInByb3ZpZGVyTmFtZSIsIm1lY2hhbmlzbVByb3BlcnRpZXMiLCJQUk9WSURFUl9OQU1FIiwiZ2V0IiwiTW9uZ29JbnZhbGlkQXJndW1lbnRFcnJvciJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongodb/lib/cmap/auth/mongodb_oidc.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongodb/lib/cmap/auth/mongodb_oidc/aws_service_workflow.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/mongodb/lib/cmap/auth/mongodb_oidc/aws_service_workflow.js ***!
  \*********************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.AwsServiceWorkflow = void 0;\nconst fs = __webpack_require__(/*! fs */ \"fs\");\nconst error_1 = __webpack_require__(/*! ../../../error */ \"(ssr)/./node_modules/mongodb/lib/error.js\");\nconst service_workflow_1 = __webpack_require__(/*! ./service_workflow */ \"(ssr)/./node_modules/mongodb/lib/cmap/auth/mongodb_oidc/service_workflow.js\");\n/** Error for when the token is missing in the environment. */ const TOKEN_MISSING_ERROR = \"AWS_WEB_IDENTITY_TOKEN_FILE must be set in the environment.\";\n/**\n * Device workflow implementation for AWS.\n *\n * @internal\n */ class AwsServiceWorkflow extends service_workflow_1.ServiceWorkflow {\n    constructor(){\n        super();\n    }\n    /**\n     * Get the token from the environment.\n     */ async getToken() {\n        const tokenFile = process.env.AWS_WEB_IDENTITY_TOKEN_FILE;\n        if (!tokenFile) {\n            throw new error_1.MongoAWSError(TOKEN_MISSING_ERROR);\n        }\n        return fs.promises.readFile(tokenFile, \"utf8\");\n    }\n}\nexports.AwsServiceWorkflow = AwsServiceWorkflow; //# sourceMappingURL=aws_service_workflow.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbW9uZ29kYi9saWIvY21hcC9hdXRoL21vbmdvZGJfb2lkYy9hd3Nfc2VydmljZV93b3JrZmxvdy5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiQSw4Q0FBNkM7SUFBRUcsT0FBTztBQUFLLENBQUMsRUFBQztBQUM3REQsMEJBQTBCLEdBQUcsS0FBSztBQUNsQyxNQUFNRyxLQUFLQyxtQkFBT0EsQ0FBQyxjQUFJO0FBQ3ZCLE1BQU1DLFVBQVVELG1CQUFPQSxDQUFDLGlFQUFnQjtBQUN4QyxNQUFNRSxxQkFBcUJGLG1CQUFPQSxDQUFDLHVHQUFvQjtBQUN2RCw0REFBNEQsR0FDNUQsTUFBTUcsc0JBQXNCO0FBQzVCOzs7O0NBSUMsR0FDRCxNQUFNTCwyQkFBMkJJLG1CQUFtQkUsZUFBZTtJQUMvREMsYUFBYztRQUNWLEtBQUs7SUFDVDtJQUNBOztLQUVDLEdBQ0QsTUFBTUMsV0FBVztRQUNiLE1BQU1DLFlBQVlDLFFBQVFDLEdBQUcsQ0FBQ0MsMkJBQTJCO1FBQ3pELElBQUksQ0FBQ0gsV0FBVztZQUNaLE1BQU0sSUFBSU4sUUFBUVUsYUFBYSxDQUFDUjtRQUNwQztRQUNBLE9BQU9KLEdBQUdhLFFBQVEsQ0FBQ0MsUUFBUSxDQUFDTixXQUFXO0lBQzNDO0FBQ0o7QUFDQVgsMEJBQTBCLEdBQUdFLG9CQUM3QixnREFBZ0QiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9ibG9nLWFwcGxpY2F0aW9uLy4vbm9kZV9tb2R1bGVzL21vbmdvZGIvbGliL2NtYXAvYXV0aC9tb25nb2RiX29pZGMvYXdzX3NlcnZpY2Vfd29ya2Zsb3cuanM/N2FhMiJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuQXdzU2VydmljZVdvcmtmbG93ID0gdm9pZCAwO1xuY29uc3QgZnMgPSByZXF1aXJlKFwiZnNcIik7XG5jb25zdCBlcnJvcl8xID0gcmVxdWlyZShcIi4uLy4uLy4uL2Vycm9yXCIpO1xuY29uc3Qgc2VydmljZV93b3JrZmxvd18xID0gcmVxdWlyZShcIi4vc2VydmljZV93b3JrZmxvd1wiKTtcbi8qKiBFcnJvciBmb3Igd2hlbiB0aGUgdG9rZW4gaXMgbWlzc2luZyBpbiB0aGUgZW52aXJvbm1lbnQuICovXG5jb25zdCBUT0tFTl9NSVNTSU5HX0VSUk9SID0gJ0FXU19XRUJfSURFTlRJVFlfVE9LRU5fRklMRSBtdXN0IGJlIHNldCBpbiB0aGUgZW52aXJvbm1lbnQuJztcbi8qKlxuICogRGV2aWNlIHdvcmtmbG93IGltcGxlbWVudGF0aW9uIGZvciBBV1MuXG4gKlxuICogQGludGVybmFsXG4gKi9cbmNsYXNzIEF3c1NlcnZpY2VXb3JrZmxvdyBleHRlbmRzIHNlcnZpY2Vfd29ya2Zsb3dfMS5TZXJ2aWNlV29ya2Zsb3cge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICBzdXBlcigpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBHZXQgdGhlIHRva2VuIGZyb20gdGhlIGVudmlyb25tZW50LlxuICAgICAqL1xuICAgIGFzeW5jIGdldFRva2VuKCkge1xuICAgICAgICBjb25zdCB0b2tlbkZpbGUgPSBwcm9jZXNzLmVudi5BV1NfV0VCX0lERU5USVRZX1RPS0VOX0ZJTEU7XG4gICAgICAgIGlmICghdG9rZW5GaWxlKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgZXJyb3JfMS5Nb25nb0FXU0Vycm9yKFRPS0VOX01JU1NJTkdfRVJST1IpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBmcy5wcm9taXNlcy5yZWFkRmlsZSh0b2tlbkZpbGUsICd1dGY4Jyk7XG4gICAgfVxufVxuZXhwb3J0cy5Bd3NTZXJ2aWNlV29ya2Zsb3cgPSBBd3NTZXJ2aWNlV29ya2Zsb3c7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1hd3Nfc2VydmljZV93b3JrZmxvdy5qcy5tYXAiXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJBd3NTZXJ2aWNlV29ya2Zsb3ciLCJmcyIsInJlcXVpcmUiLCJlcnJvcl8xIiwic2VydmljZV93b3JrZmxvd18xIiwiVE9LRU5fTUlTU0lOR19FUlJPUiIsIlNlcnZpY2VXb3JrZmxvdyIsImNvbnN0cnVjdG9yIiwiZ2V0VG9rZW4iLCJ0b2tlbkZpbGUiLCJwcm9jZXNzIiwiZW52IiwiQVdTX1dFQl9JREVOVElUWV9UT0tFTl9GSUxFIiwiTW9uZ29BV1NFcnJvciIsInByb21pc2VzIiwicmVhZEZpbGUiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongodb/lib/cmap/auth/mongodb_oidc/aws_service_workflow.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongodb/lib/cmap/auth/mongodb_oidc/azure_service_workflow.js":
/*!***********************************************************************************!*\
  !*** ./node_modules/mongodb/lib/cmap/auth/mongodb_oidc/azure_service_workflow.js ***!
  \***********************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.AzureServiceWorkflow = void 0;\nconst error_1 = __webpack_require__(/*! ../../../error */ \"(ssr)/./node_modules/mongodb/lib/error.js\");\nconst utils_1 = __webpack_require__(/*! ../../../utils */ \"(ssr)/./node_modules/mongodb/lib/utils.js\");\nconst azure_token_cache_1 = __webpack_require__(/*! ./azure_token_cache */ \"(ssr)/./node_modules/mongodb/lib/cmap/auth/mongodb_oidc/azure_token_cache.js\");\nconst service_workflow_1 = __webpack_require__(/*! ./service_workflow */ \"(ssr)/./node_modules/mongodb/lib/cmap/auth/mongodb_oidc/service_workflow.js\");\n/** Base URL for getting Azure tokens. */ const AZURE_BASE_URL = \"http://169.254.169.254/metadata/identity/oauth2/token?api-version=2018-02-01\";\n/** Azure request headers. */ const AZURE_HEADERS = Object.freeze({\n    Metadata: \"true\",\n    Accept: \"application/json\"\n});\n/** Invalid endpoint result error. */ const ENDPOINT_RESULT_ERROR = \"Azure endpoint did not return a value with only access_token and expires_in properties\";\n/** Error for when the token audience is missing in the environment. */ const TOKEN_AUDIENCE_MISSING_ERROR = \"TOKEN_AUDIENCE must be set in the auth mechanism properties when PROVIDER_NAME is azure.\";\n/**\n * Device workflow implementation for Azure.\n *\n * @internal\n */ class AzureServiceWorkflow extends service_workflow_1.ServiceWorkflow {\n    constructor(){\n        super(...arguments);\n        this.cache = new azure_token_cache_1.AzureTokenCache();\n    }\n    /**\n     * Get the token from the environment.\n     */ async getToken(credentials) {\n        const tokenAudience = credentials?.mechanismProperties.TOKEN_AUDIENCE;\n        if (!tokenAudience) {\n            throw new error_1.MongoAzureError(TOKEN_AUDIENCE_MISSING_ERROR);\n        }\n        let token;\n        const entry = this.cache.getEntry(tokenAudience);\n        if (entry?.isValid()) {\n            token = entry.token;\n        } else {\n            this.cache.deleteEntry(tokenAudience);\n            const response = await getAzureTokenData(tokenAudience);\n            if (!isEndpointResultValid(response)) {\n                throw new error_1.MongoAzureError(ENDPOINT_RESULT_ERROR);\n            }\n            this.cache.addEntry(tokenAudience, response);\n            token = response.access_token;\n        }\n        return token;\n    }\n}\nexports.AzureServiceWorkflow = AzureServiceWorkflow;\n/**\n * Hit the Azure endpoint to get the token data.\n */ async function getAzureTokenData(tokenAudience) {\n    const url = `${AZURE_BASE_URL}&resource=${tokenAudience}`;\n    const data = await (0, utils_1.request)(url, {\n        json: true,\n        headers: AZURE_HEADERS\n    });\n    return data;\n}\n/**\n * Determines if a result returned from the endpoint is valid.\n * This means the result is not nullish, contains the access_token required field\n * and the expires_in required field.\n */ function isEndpointResultValid(token) {\n    if (token == null || typeof token !== \"object\") return false;\n    return \"access_token\" in token && \"expires_in\" in token;\n} //# sourceMappingURL=azure_service_workflow.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbW9uZ29kYi9saWIvY21hcC9hdXRoL21vbmdvZGJfb2lkYy9henVyZV9zZXJ2aWNlX3dvcmtmbG93LmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2JBLDhDQUE2QztJQUFFRyxPQUFPO0FBQUssQ0FBQyxFQUFDO0FBQzdERCw0QkFBNEIsR0FBRyxLQUFLO0FBQ3BDLE1BQU1HLFVBQVVDLG1CQUFPQSxDQUFDLGlFQUFnQjtBQUN4QyxNQUFNQyxVQUFVRCxtQkFBT0EsQ0FBQyxpRUFBZ0I7QUFDeEMsTUFBTUUsc0JBQXNCRixtQkFBT0EsQ0FBQyx5R0FBcUI7QUFDekQsTUFBTUcscUJBQXFCSCxtQkFBT0EsQ0FBQyx1R0FBb0I7QUFDdkQsdUNBQXVDLEdBQ3ZDLE1BQU1JLGlCQUFpQjtBQUN2QiwyQkFBMkIsR0FDM0IsTUFBTUMsZ0JBQWdCWCxPQUFPWSxNQUFNLENBQUM7SUFBRUMsVUFBVTtJQUFRQyxRQUFRO0FBQW1CO0FBQ25GLG1DQUFtQyxHQUNuQyxNQUFNQyx3QkFBd0I7QUFDOUIscUVBQXFFLEdBQ3JFLE1BQU1DLCtCQUErQjtBQUNyQzs7OztDQUlDLEdBQ0QsTUFBTVosNkJBQTZCSyxtQkFBbUJRLGVBQWU7SUFDakVDLGFBQWM7UUFDVixLQUFLLElBQUlDO1FBQ1QsSUFBSSxDQUFDQyxLQUFLLEdBQUcsSUFBSVosb0JBQW9CYSxlQUFlO0lBQ3hEO0lBQ0E7O0tBRUMsR0FDRCxNQUFNQyxTQUFTQyxXQUFXLEVBQUU7UUFDeEIsTUFBTUMsZ0JBQWdCRCxhQUFhRSxvQkFBb0JDO1FBQ3ZELElBQUksQ0FBQ0YsZUFBZTtZQUNoQixNQUFNLElBQUluQixRQUFRc0IsZUFBZSxDQUFDWDtRQUN0QztRQUNBLElBQUlZO1FBQ0osTUFBTUMsUUFBUSxJQUFJLENBQUNULEtBQUssQ0FBQ1UsUUFBUSxDQUFDTjtRQUNsQyxJQUFJSyxPQUFPRSxXQUFXO1lBQ2xCSCxRQUFRQyxNQUFNRCxLQUFLO1FBQ3ZCLE9BQ0s7WUFDRCxJQUFJLENBQUNSLEtBQUssQ0FBQ1ksV0FBVyxDQUFDUjtZQUN2QixNQUFNUyxXQUFXLE1BQU1DLGtCQUFrQlY7WUFDekMsSUFBSSxDQUFDVyxzQkFBc0JGLFdBQVc7Z0JBQ2xDLE1BQU0sSUFBSTVCLFFBQVFzQixlQUFlLENBQUNaO1lBQ3RDO1lBQ0EsSUFBSSxDQUFDSyxLQUFLLENBQUNnQixRQUFRLENBQUNaLGVBQWVTO1lBQ25DTCxRQUFRSyxTQUFTSSxZQUFZO1FBQ2pDO1FBQ0EsT0FBT1Q7SUFDWDtBQUNKO0FBQ0ExQiw0QkFBNEIsR0FBR0U7QUFDL0I7O0NBRUMsR0FDRCxlQUFlOEIsa0JBQWtCVixhQUFhO0lBQzFDLE1BQU1jLE1BQU0sQ0FBQyxFQUFFNUIsZUFBZSxVQUFVLEVBQUVjLGNBQWMsQ0FBQztJQUN6RCxNQUFNZSxPQUFPLE1BQU0sQ0FBQyxHQUFHaEMsUUFBUWlDLE9BQU8sRUFBRUYsS0FBSztRQUN6Q0csTUFBTTtRQUNOQyxTQUFTL0I7SUFDYjtJQUNBLE9BQU80QjtBQUNYO0FBQ0E7Ozs7Q0FJQyxHQUNELFNBQVNKLHNCQUFzQlAsS0FBSztJQUNoQyxJQUFJQSxTQUFTLFFBQVEsT0FBT0EsVUFBVSxVQUNsQyxPQUFPO0lBQ1gsT0FBTyxrQkFBa0JBLFNBQVMsZ0JBQWdCQTtBQUN0RCxFQUNBLGtEQUFrRCIsInNvdXJjZXMiOlsid2VicGFjazovL2Jsb2ctYXBwbGljYXRpb24vLi9ub2RlX21vZHVsZXMvbW9uZ29kYi9saWIvY21hcC9hdXRoL21vbmdvZGJfb2lkYy9henVyZV9zZXJ2aWNlX3dvcmtmbG93LmpzP2NiNjUiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLkF6dXJlU2VydmljZVdvcmtmbG93ID0gdm9pZCAwO1xuY29uc3QgZXJyb3JfMSA9IHJlcXVpcmUoXCIuLi8uLi8uLi9lcnJvclwiKTtcbmNvbnN0IHV0aWxzXzEgPSByZXF1aXJlKFwiLi4vLi4vLi4vdXRpbHNcIik7XG5jb25zdCBhenVyZV90b2tlbl9jYWNoZV8xID0gcmVxdWlyZShcIi4vYXp1cmVfdG9rZW5fY2FjaGVcIik7XG5jb25zdCBzZXJ2aWNlX3dvcmtmbG93XzEgPSByZXF1aXJlKFwiLi9zZXJ2aWNlX3dvcmtmbG93XCIpO1xuLyoqIEJhc2UgVVJMIGZvciBnZXR0aW5nIEF6dXJlIHRva2Vucy4gKi9cbmNvbnN0IEFaVVJFX0JBU0VfVVJMID0gJ2h0dHA6Ly8xNjkuMjU0LjE2OS4yNTQvbWV0YWRhdGEvaWRlbnRpdHkvb2F1dGgyL3Rva2VuP2FwaS12ZXJzaW9uPTIwMTgtMDItMDEnO1xuLyoqIEF6dXJlIHJlcXVlc3QgaGVhZGVycy4gKi9cbmNvbnN0IEFaVVJFX0hFQURFUlMgPSBPYmplY3QuZnJlZXplKHsgTWV0YWRhdGE6ICd0cnVlJywgQWNjZXB0OiAnYXBwbGljYXRpb24vanNvbicgfSk7XG4vKiogSW52YWxpZCBlbmRwb2ludCByZXN1bHQgZXJyb3IuICovXG5jb25zdCBFTkRQT0lOVF9SRVNVTFRfRVJST1IgPSAnQXp1cmUgZW5kcG9pbnQgZGlkIG5vdCByZXR1cm4gYSB2YWx1ZSB3aXRoIG9ubHkgYWNjZXNzX3Rva2VuIGFuZCBleHBpcmVzX2luIHByb3BlcnRpZXMnO1xuLyoqIEVycm9yIGZvciB3aGVuIHRoZSB0b2tlbiBhdWRpZW5jZSBpcyBtaXNzaW5nIGluIHRoZSBlbnZpcm9ubWVudC4gKi9cbmNvbnN0IFRPS0VOX0FVRElFTkNFX01JU1NJTkdfRVJST1IgPSAnVE9LRU5fQVVESUVOQ0UgbXVzdCBiZSBzZXQgaW4gdGhlIGF1dGggbWVjaGFuaXNtIHByb3BlcnRpZXMgd2hlbiBQUk9WSURFUl9OQU1FIGlzIGF6dXJlLic7XG4vKipcbiAqIERldmljZSB3b3JrZmxvdyBpbXBsZW1lbnRhdGlvbiBmb3IgQXp1cmUuXG4gKlxuICogQGludGVybmFsXG4gKi9cbmNsYXNzIEF6dXJlU2VydmljZVdvcmtmbG93IGV4dGVuZHMgc2VydmljZV93b3JrZmxvd18xLlNlcnZpY2VXb3JrZmxvdyB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHN1cGVyKC4uLmFyZ3VtZW50cyk7XG4gICAgICAgIHRoaXMuY2FjaGUgPSBuZXcgYXp1cmVfdG9rZW5fY2FjaGVfMS5BenVyZVRva2VuQ2FjaGUoKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogR2V0IHRoZSB0b2tlbiBmcm9tIHRoZSBlbnZpcm9ubWVudC5cbiAgICAgKi9cbiAgICBhc3luYyBnZXRUb2tlbihjcmVkZW50aWFscykge1xuICAgICAgICBjb25zdCB0b2tlbkF1ZGllbmNlID0gY3JlZGVudGlhbHM/Lm1lY2hhbmlzbVByb3BlcnRpZXMuVE9LRU5fQVVESUVOQ0U7XG4gICAgICAgIGlmICghdG9rZW5BdWRpZW5jZSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IGVycm9yXzEuTW9uZ29BenVyZUVycm9yKFRPS0VOX0FVRElFTkNFX01JU1NJTkdfRVJST1IpO1xuICAgICAgICB9XG4gICAgICAgIGxldCB0b2tlbjtcbiAgICAgICAgY29uc3QgZW50cnkgPSB0aGlzLmNhY2hlLmdldEVudHJ5KHRva2VuQXVkaWVuY2UpO1xuICAgICAgICBpZiAoZW50cnk/LmlzVmFsaWQoKSkge1xuICAgICAgICAgICAgdG9rZW4gPSBlbnRyeS50b2tlbjtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuY2FjaGUuZGVsZXRlRW50cnkodG9rZW5BdWRpZW5jZSk7XG4gICAgICAgICAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGdldEF6dXJlVG9rZW5EYXRhKHRva2VuQXVkaWVuY2UpO1xuICAgICAgICAgICAgaWYgKCFpc0VuZHBvaW50UmVzdWx0VmFsaWQocmVzcG9uc2UpKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IGVycm9yXzEuTW9uZ29BenVyZUVycm9yKEVORFBPSU5UX1JFU1VMVF9FUlJPUik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLmNhY2hlLmFkZEVudHJ5KHRva2VuQXVkaWVuY2UsIHJlc3BvbnNlKTtcbiAgICAgICAgICAgIHRva2VuID0gcmVzcG9uc2UuYWNjZXNzX3Rva2VuO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0b2tlbjtcbiAgICB9XG59XG5leHBvcnRzLkF6dXJlU2VydmljZVdvcmtmbG93ID0gQXp1cmVTZXJ2aWNlV29ya2Zsb3c7XG4vKipcbiAqIEhpdCB0aGUgQXp1cmUgZW5kcG9pbnQgdG8gZ2V0IHRoZSB0b2tlbiBkYXRhLlxuICovXG5hc3luYyBmdW5jdGlvbiBnZXRBenVyZVRva2VuRGF0YSh0b2tlbkF1ZGllbmNlKSB7XG4gICAgY29uc3QgdXJsID0gYCR7QVpVUkVfQkFTRV9VUkx9JnJlc291cmNlPSR7dG9rZW5BdWRpZW5jZX1gO1xuICAgIGNvbnN0IGRhdGEgPSBhd2FpdCAoMCwgdXRpbHNfMS5yZXF1ZXN0KSh1cmwsIHtcbiAgICAgICAganNvbjogdHJ1ZSxcbiAgICAgICAgaGVhZGVyczogQVpVUkVfSEVBREVSU1xuICAgIH0pO1xuICAgIHJldHVybiBkYXRhO1xufVxuLyoqXG4gKiBEZXRlcm1pbmVzIGlmIGEgcmVzdWx0IHJldHVybmVkIGZyb20gdGhlIGVuZHBvaW50IGlzIHZhbGlkLlxuICogVGhpcyBtZWFucyB0aGUgcmVzdWx0IGlzIG5vdCBudWxsaXNoLCBjb250YWlucyB0aGUgYWNjZXNzX3Rva2VuIHJlcXVpcmVkIGZpZWxkXG4gKiBhbmQgdGhlIGV4cGlyZXNfaW4gcmVxdWlyZWQgZmllbGQuXG4gKi9cbmZ1bmN0aW9uIGlzRW5kcG9pbnRSZXN1bHRWYWxpZCh0b2tlbikge1xuICAgIGlmICh0b2tlbiA9PSBudWxsIHx8IHR5cGVvZiB0b2tlbiAhPT0gJ29iamVjdCcpXG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICByZXR1cm4gJ2FjY2Vzc190b2tlbicgaW4gdG9rZW4gJiYgJ2V4cGlyZXNfaW4nIGluIHRva2VuO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9YXp1cmVfc2VydmljZV93b3JrZmxvdy5qcy5tYXAiXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJBenVyZVNlcnZpY2VXb3JrZmxvdyIsImVycm9yXzEiLCJyZXF1aXJlIiwidXRpbHNfMSIsImF6dXJlX3Rva2VuX2NhY2hlXzEiLCJzZXJ2aWNlX3dvcmtmbG93XzEiLCJBWlVSRV9CQVNFX1VSTCIsIkFaVVJFX0hFQURFUlMiLCJmcmVlemUiLCJNZXRhZGF0YSIsIkFjY2VwdCIsIkVORFBPSU5UX1JFU1VMVF9FUlJPUiIsIlRPS0VOX0FVRElFTkNFX01JU1NJTkdfRVJST1IiLCJTZXJ2aWNlV29ya2Zsb3ciLCJjb25zdHJ1Y3RvciIsImFyZ3VtZW50cyIsImNhY2hlIiwiQXp1cmVUb2tlbkNhY2hlIiwiZ2V0VG9rZW4iLCJjcmVkZW50aWFscyIsInRva2VuQXVkaWVuY2UiLCJtZWNoYW5pc21Qcm9wZXJ0aWVzIiwiVE9LRU5fQVVESUVOQ0UiLCJNb25nb0F6dXJlRXJyb3IiLCJ0b2tlbiIsImVudHJ5IiwiZ2V0RW50cnkiLCJpc1ZhbGlkIiwiZGVsZXRlRW50cnkiLCJyZXNwb25zZSIsImdldEF6dXJlVG9rZW5EYXRhIiwiaXNFbmRwb2ludFJlc3VsdFZhbGlkIiwiYWRkRW50cnkiLCJhY2Nlc3NfdG9rZW4iLCJ1cmwiLCJkYXRhIiwicmVxdWVzdCIsImpzb24iLCJoZWFkZXJzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongodb/lib/cmap/auth/mongodb_oidc/azure_service_workflow.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongodb/lib/cmap/auth/mongodb_oidc/azure_token_cache.js":
/*!******************************************************************************!*\
  !*** ./node_modules/mongodb/lib/cmap/auth/mongodb_oidc/azure_token_cache.js ***!
  \******************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.AzureTokenCache = exports.AzureTokenEntry = void 0;\nconst cache_1 = __webpack_require__(/*! ./cache */ \"(ssr)/./node_modules/mongodb/lib/cmap/auth/mongodb_oidc/cache.js\");\n/** @internal */ class AzureTokenEntry extends cache_1.ExpiringCacheEntry {\n    /**\n     * Instantiate the entry.\n     */ constructor(token, expiration){\n        super(expiration);\n        this.token = token;\n    }\n}\nexports.AzureTokenEntry = AzureTokenEntry;\n/**\n * A cache of access tokens from Azure.\n * @internal\n */ class AzureTokenCache extends cache_1.Cache {\n    /**\n     * Add an entry to the cache.\n     */ addEntry(tokenAudience, token) {\n        const entry = new AzureTokenEntry(token.access_token, token.expires_in);\n        this.entries.set(tokenAudience, entry);\n        return entry;\n    }\n    /**\n     * Create a cache key.\n     */ cacheKey(tokenAudience) {\n        return tokenAudience;\n    }\n    /**\n     * Delete an entry from the cache.\n     */ deleteEntry(tokenAudience) {\n        this.entries.delete(tokenAudience);\n    }\n    /**\n     * Get an Azure token entry from the cache.\n     */ getEntry(tokenAudience) {\n        return this.entries.get(tokenAudience);\n    }\n}\nexports.AzureTokenCache = AzureTokenCache; //# sourceMappingURL=azure_token_cache.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbW9uZ29kYi9saWIvY21hcC9hdXRoL21vbmdvZGJfb2lkYy9henVyZV90b2tlbl9jYWNoZS5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiQSw4Q0FBNkM7SUFBRUcsT0FBTztBQUFLLENBQUMsRUFBQztBQUM3REQsdUJBQXVCLEdBQUdBLHVCQUF1QixHQUFHLEtBQUs7QUFDekQsTUFBTUksVUFBVUMsbUJBQU9BLENBQUMsaUZBQVM7QUFDakMsY0FBYyxHQUNkLE1BQU1GLHdCQUF3QkMsUUFBUUUsa0JBQWtCO0lBQ3BEOztLQUVDLEdBQ0RDLFlBQVlDLEtBQUssRUFBRUMsVUFBVSxDQUFFO1FBQzNCLEtBQUssQ0FBQ0E7UUFDTixJQUFJLENBQUNELEtBQUssR0FBR0E7SUFDakI7QUFDSjtBQUNBUix1QkFBdUIsR0FBR0c7QUFDMUI7OztDQUdDLEdBQ0QsTUFBTUQsd0JBQXdCRSxRQUFRTSxLQUFLO0lBQ3ZDOztLQUVDLEdBQ0RDLFNBQVNDLGFBQWEsRUFBRUosS0FBSyxFQUFFO1FBQzNCLE1BQU1LLFFBQVEsSUFBSVYsZ0JBQWdCSyxNQUFNTSxZQUFZLEVBQUVOLE1BQU1PLFVBQVU7UUFDdEUsSUFBSSxDQUFDQyxPQUFPLENBQUNDLEdBQUcsQ0FBQ0wsZUFBZUM7UUFDaEMsT0FBT0E7SUFDWDtJQUNBOztLQUVDLEdBQ0RLLFNBQVNOLGFBQWEsRUFBRTtRQUNwQixPQUFPQTtJQUNYO0lBQ0E7O0tBRUMsR0FDRE8sWUFBWVAsYUFBYSxFQUFFO1FBQ3ZCLElBQUksQ0FBQ0ksT0FBTyxDQUFDSSxNQUFNLENBQUNSO0lBQ3hCO0lBQ0E7O0tBRUMsR0FDRFMsU0FBU1QsYUFBYSxFQUFFO1FBQ3BCLE9BQU8sSUFBSSxDQUFDSSxPQUFPLENBQUNNLEdBQUcsQ0FBQ1Y7SUFDNUI7QUFDSjtBQUNBWix1QkFBdUIsR0FBR0UsaUJBQzFCLDZDQUE2QyIsInNvdXJjZXMiOlsid2VicGFjazovL2Jsb2ctYXBwbGljYXRpb24vLi9ub2RlX21vZHVsZXMvbW9uZ29kYi9saWIvY21hcC9hdXRoL21vbmdvZGJfb2lkYy9henVyZV90b2tlbl9jYWNoZS5qcz9iMDNiIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5BenVyZVRva2VuQ2FjaGUgPSBleHBvcnRzLkF6dXJlVG9rZW5FbnRyeSA9IHZvaWQgMDtcbmNvbnN0IGNhY2hlXzEgPSByZXF1aXJlKFwiLi9jYWNoZVwiKTtcbi8qKiBAaW50ZXJuYWwgKi9cbmNsYXNzIEF6dXJlVG9rZW5FbnRyeSBleHRlbmRzIGNhY2hlXzEuRXhwaXJpbmdDYWNoZUVudHJ5IHtcbiAgICAvKipcbiAgICAgKiBJbnN0YW50aWF0ZSB0aGUgZW50cnkuXG4gICAgICovXG4gICAgY29uc3RydWN0b3IodG9rZW4sIGV4cGlyYXRpb24pIHtcbiAgICAgICAgc3VwZXIoZXhwaXJhdGlvbik7XG4gICAgICAgIHRoaXMudG9rZW4gPSB0b2tlbjtcbiAgICB9XG59XG5leHBvcnRzLkF6dXJlVG9rZW5FbnRyeSA9IEF6dXJlVG9rZW5FbnRyeTtcbi8qKlxuICogQSBjYWNoZSBvZiBhY2Nlc3MgdG9rZW5zIGZyb20gQXp1cmUuXG4gKiBAaW50ZXJuYWxcbiAqL1xuY2xhc3MgQXp1cmVUb2tlbkNhY2hlIGV4dGVuZHMgY2FjaGVfMS5DYWNoZSB7XG4gICAgLyoqXG4gICAgICogQWRkIGFuIGVudHJ5IHRvIHRoZSBjYWNoZS5cbiAgICAgKi9cbiAgICBhZGRFbnRyeSh0b2tlbkF1ZGllbmNlLCB0b2tlbikge1xuICAgICAgICBjb25zdCBlbnRyeSA9IG5ldyBBenVyZVRva2VuRW50cnkodG9rZW4uYWNjZXNzX3Rva2VuLCB0b2tlbi5leHBpcmVzX2luKTtcbiAgICAgICAgdGhpcy5lbnRyaWVzLnNldCh0b2tlbkF1ZGllbmNlLCBlbnRyeSk7XG4gICAgICAgIHJldHVybiBlbnRyeTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQ3JlYXRlIGEgY2FjaGUga2V5LlxuICAgICAqL1xuICAgIGNhY2hlS2V5KHRva2VuQXVkaWVuY2UpIHtcbiAgICAgICAgcmV0dXJuIHRva2VuQXVkaWVuY2U7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIERlbGV0ZSBhbiBlbnRyeSBmcm9tIHRoZSBjYWNoZS5cbiAgICAgKi9cbiAgICBkZWxldGVFbnRyeSh0b2tlbkF1ZGllbmNlKSB7XG4gICAgICAgIHRoaXMuZW50cmllcy5kZWxldGUodG9rZW5BdWRpZW5jZSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEdldCBhbiBBenVyZSB0b2tlbiBlbnRyeSBmcm9tIHRoZSBjYWNoZS5cbiAgICAgKi9cbiAgICBnZXRFbnRyeSh0b2tlbkF1ZGllbmNlKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmVudHJpZXMuZ2V0KHRva2VuQXVkaWVuY2UpO1xuICAgIH1cbn1cbmV4cG9ydHMuQXp1cmVUb2tlbkNhY2hlID0gQXp1cmVUb2tlbkNhY2hlO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9YXp1cmVfdG9rZW5fY2FjaGUuanMubWFwIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiQXp1cmVUb2tlbkNhY2hlIiwiQXp1cmVUb2tlbkVudHJ5IiwiY2FjaGVfMSIsInJlcXVpcmUiLCJFeHBpcmluZ0NhY2hlRW50cnkiLCJjb25zdHJ1Y3RvciIsInRva2VuIiwiZXhwaXJhdGlvbiIsIkNhY2hlIiwiYWRkRW50cnkiLCJ0b2tlbkF1ZGllbmNlIiwiZW50cnkiLCJhY2Nlc3NfdG9rZW4iLCJleHBpcmVzX2luIiwiZW50cmllcyIsInNldCIsImNhY2hlS2V5IiwiZGVsZXRlRW50cnkiLCJkZWxldGUiLCJnZXRFbnRyeSIsImdldCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongodb/lib/cmap/auth/mongodb_oidc/azure_token_cache.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongodb/lib/cmap/auth/mongodb_oidc/cache.js":
/*!******************************************************************!*\
  !*** ./node_modules/mongodb/lib/cmap/auth/mongodb_oidc/cache.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.Cache = exports.ExpiringCacheEntry = void 0;\n/* 5 minutes in milliseconds */ const EXPIRATION_BUFFER_MS = 300000;\n/**\n * An entry in a cache that can expire in a certain amount of time.\n */ class ExpiringCacheEntry {\n    /**\n     * Create a new expiring token entry.\n     */ constructor(expiration){\n        this.expiration = this.expirationTime(expiration);\n    }\n    /**\n     * The entry is still valid if the expiration is more than\n     * 5 minutes from the expiration time.\n     */ isValid() {\n        return this.expiration - Date.now() > EXPIRATION_BUFFER_MS;\n    }\n    /**\n     * Get an expiration time in milliseconds past epoch.\n     */ expirationTime(expiresInSeconds) {\n        return Date.now() + expiresInSeconds * 1000;\n    }\n}\nexports.ExpiringCacheEntry = ExpiringCacheEntry;\n/**\n * Base class for OIDC caches.\n */ class Cache {\n    /**\n     * Create a new cache.\n     */ constructor(){\n        this.entries = new Map();\n    }\n    /**\n     * Clear the cache.\n     */ clear() {\n        this.entries.clear();\n    }\n    /**\n     * Create a cache key from the address and username.\n     */ hashedCacheKey(address, username, callbackHash) {\n        return JSON.stringify([\n            address,\n            username,\n            callbackHash\n        ]);\n    }\n}\nexports.Cache = Cache; //# sourceMappingURL=cache.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbW9uZ29kYi9saWIvY21hcC9hdXRoL21vbmdvZGJfb2lkYy9jYWNoZS5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiQSw4Q0FBNkM7SUFBRUcsT0FBTztBQUFLLENBQUMsRUFBQztBQUM3REQsYUFBYSxHQUFHQSwwQkFBMEIsR0FBRyxLQUFLO0FBQ2xELDZCQUE2QixHQUM3QixNQUFNSSx1QkFBdUI7QUFDN0I7O0NBRUMsR0FDRCxNQUFNRDtJQUNGOztLQUVDLEdBQ0RFLFlBQVlDLFVBQVUsQ0FBRTtRQUNwQixJQUFJLENBQUNBLFVBQVUsR0FBRyxJQUFJLENBQUNDLGNBQWMsQ0FBQ0Q7SUFDMUM7SUFDQTs7O0tBR0MsR0FDREUsVUFBVTtRQUNOLE9BQU8sSUFBSSxDQUFDRixVQUFVLEdBQUdHLEtBQUtDLEdBQUcsS0FBS047SUFDMUM7SUFDQTs7S0FFQyxHQUNERyxlQUFlSSxnQkFBZ0IsRUFBRTtRQUM3QixPQUFPRixLQUFLQyxHQUFHLEtBQUtDLG1CQUFtQjtJQUMzQztBQUNKO0FBQ0FYLDBCQUEwQixHQUFHRztBQUM3Qjs7Q0FFQyxHQUNELE1BQU1EO0lBQ0Y7O0tBRUMsR0FDREcsYUFBYztRQUNWLElBQUksQ0FBQ08sT0FBTyxHQUFHLElBQUlDO0lBQ3ZCO0lBQ0E7O0tBRUMsR0FDREMsUUFBUTtRQUNKLElBQUksQ0FBQ0YsT0FBTyxDQUFDRSxLQUFLO0lBQ3RCO0lBQ0E7O0tBRUMsR0FDREMsZUFBZUMsT0FBTyxFQUFFQyxRQUFRLEVBQUVDLFlBQVksRUFBRTtRQUM1QyxPQUFPQyxLQUFLQyxTQUFTLENBQUM7WUFBQ0o7WUFBU0M7WUFBVUM7U0FBYTtJQUMzRDtBQUNKO0FBQ0FsQixhQUFhLEdBQUdFLE9BQ2hCLGlDQUFpQyIsInNvdXJjZXMiOlsid2VicGFjazovL2Jsb2ctYXBwbGljYXRpb24vLi9ub2RlX21vZHVsZXMvbW9uZ29kYi9saWIvY21hcC9hdXRoL21vbmdvZGJfb2lkYy9jYWNoZS5qcz81ODEyIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5DYWNoZSA9IGV4cG9ydHMuRXhwaXJpbmdDYWNoZUVudHJ5ID0gdm9pZCAwO1xuLyogNSBtaW51dGVzIGluIG1pbGxpc2Vjb25kcyAqL1xuY29uc3QgRVhQSVJBVElPTl9CVUZGRVJfTVMgPSAzMDAwMDA7XG4vKipcbiAqIEFuIGVudHJ5IGluIGEgY2FjaGUgdGhhdCBjYW4gZXhwaXJlIGluIGEgY2VydGFpbiBhbW91bnQgb2YgdGltZS5cbiAqL1xuY2xhc3MgRXhwaXJpbmdDYWNoZUVudHJ5IHtcbiAgICAvKipcbiAgICAgKiBDcmVhdGUgYSBuZXcgZXhwaXJpbmcgdG9rZW4gZW50cnkuXG4gICAgICovXG4gICAgY29uc3RydWN0b3IoZXhwaXJhdGlvbikge1xuICAgICAgICB0aGlzLmV4cGlyYXRpb24gPSB0aGlzLmV4cGlyYXRpb25UaW1lKGV4cGlyYXRpb24pO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBUaGUgZW50cnkgaXMgc3RpbGwgdmFsaWQgaWYgdGhlIGV4cGlyYXRpb24gaXMgbW9yZSB0aGFuXG4gICAgICogNSBtaW51dGVzIGZyb20gdGhlIGV4cGlyYXRpb24gdGltZS5cbiAgICAgKi9cbiAgICBpc1ZhbGlkKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5leHBpcmF0aW9uIC0gRGF0ZS5ub3coKSA+IEVYUElSQVRJT05fQlVGRkVSX01TO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBHZXQgYW4gZXhwaXJhdGlvbiB0aW1lIGluIG1pbGxpc2Vjb25kcyBwYXN0IGVwb2NoLlxuICAgICAqL1xuICAgIGV4cGlyYXRpb25UaW1lKGV4cGlyZXNJblNlY29uZHMpIHtcbiAgICAgICAgcmV0dXJuIERhdGUubm93KCkgKyBleHBpcmVzSW5TZWNvbmRzICogMTAwMDtcbiAgICB9XG59XG5leHBvcnRzLkV4cGlyaW5nQ2FjaGVFbnRyeSA9IEV4cGlyaW5nQ2FjaGVFbnRyeTtcbi8qKlxuICogQmFzZSBjbGFzcyBmb3IgT0lEQyBjYWNoZXMuXG4gKi9cbmNsYXNzIENhY2hlIHtcbiAgICAvKipcbiAgICAgKiBDcmVhdGUgYSBuZXcgY2FjaGUuXG4gICAgICovXG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHRoaXMuZW50cmllcyA9IG5ldyBNYXAoKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQ2xlYXIgdGhlIGNhY2hlLlxuICAgICAqL1xuICAgIGNsZWFyKCkge1xuICAgICAgICB0aGlzLmVudHJpZXMuY2xlYXIoKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQ3JlYXRlIGEgY2FjaGUga2V5IGZyb20gdGhlIGFkZHJlc3MgYW5kIHVzZXJuYW1lLlxuICAgICAqL1xuICAgIGhhc2hlZENhY2hlS2V5KGFkZHJlc3MsIHVzZXJuYW1lLCBjYWxsYmFja0hhc2gpIHtcbiAgICAgICAgcmV0dXJuIEpTT04uc3RyaW5naWZ5KFthZGRyZXNzLCB1c2VybmFtZSwgY2FsbGJhY2tIYXNoXSk7XG4gICAgfVxufVxuZXhwb3J0cy5DYWNoZSA9IENhY2hlO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Y2FjaGUuanMubWFwIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiQ2FjaGUiLCJFeHBpcmluZ0NhY2hlRW50cnkiLCJFWFBJUkFUSU9OX0JVRkZFUl9NUyIsImNvbnN0cnVjdG9yIiwiZXhwaXJhdGlvbiIsImV4cGlyYXRpb25UaW1lIiwiaXNWYWxpZCIsIkRhdGUiLCJub3ciLCJleHBpcmVzSW5TZWNvbmRzIiwiZW50cmllcyIsIk1hcCIsImNsZWFyIiwiaGFzaGVkQ2FjaGVLZXkiLCJhZGRyZXNzIiwidXNlcm5hbWUiLCJjYWxsYmFja0hhc2giLCJKU09OIiwic3RyaW5naWZ5Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongodb/lib/cmap/auth/mongodb_oidc/cache.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongodb/lib/cmap/auth/mongodb_oidc/callback_lock_cache.js":
/*!********************************************************************************!*\
  !*** ./node_modules/mongodb/lib/cmap/auth/mongodb_oidc/callback_lock_cache.js ***!
  \********************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.CallbackLockCache = void 0;\nconst error_1 = __webpack_require__(/*! ../../../error */ \"(ssr)/./node_modules/mongodb/lib/error.js\");\nconst cache_1 = __webpack_require__(/*! ./cache */ \"(ssr)/./node_modules/mongodb/lib/cmap/auth/mongodb_oidc/cache.js\");\n/** Error message for when request callback is missing. */ const REQUEST_CALLBACK_REQUIRED_ERROR = \"Auth mechanism property REQUEST_TOKEN_CALLBACK is required.\";\n/* Counter for function \"hashes\".*/ let FN_HASH_COUNTER = 0;\n/* No function present function */ const NO_FUNCTION = async ()=>({\n        accessToken: \"test\"\n    });\n/* The map of function hashes */ const FN_HASHES = new WeakMap();\n/* Put the no function hash in the map. */ FN_HASHES.set(NO_FUNCTION, FN_HASH_COUNTER);\n/**\n * A cache of request and refresh callbacks per server/user.\n */ class CallbackLockCache extends cache_1.Cache {\n    /**\n     * Get the callbacks for the connection and credentials. If an entry does not\n     * exist a new one will get set.\n     */ getEntry(connection, credentials) {\n        const requestCallback = credentials.mechanismProperties.REQUEST_TOKEN_CALLBACK;\n        const refreshCallback = credentials.mechanismProperties.REFRESH_TOKEN_CALLBACK;\n        if (!requestCallback) {\n            throw new error_1.MongoInvalidArgumentError(REQUEST_CALLBACK_REQUIRED_ERROR);\n        }\n        const callbackHash = hashFunctions(requestCallback, refreshCallback);\n        const key = this.cacheKey(connection.address, credentials.username, callbackHash);\n        const entry = this.entries.get(key);\n        if (entry) {\n            return entry;\n        }\n        return this.addEntry(key, callbackHash, requestCallback, refreshCallback);\n    }\n    /**\n     * Set locked callbacks on for connection and credentials.\n     */ addEntry(key, callbackHash, requestCallback, refreshCallback) {\n        const entry = {\n            requestCallback: withLock(requestCallback),\n            refreshCallback: refreshCallback ? withLock(refreshCallback) : undefined,\n            callbackHash: callbackHash\n        };\n        this.entries.set(key, entry);\n        return entry;\n    }\n    /**\n     * Create a cache key from the address and username.\n     */ cacheKey(address, username, callbackHash) {\n        return this.hashedCacheKey(address, username, callbackHash);\n    }\n}\nexports.CallbackLockCache = CallbackLockCache;\n/**\n * Ensure the callback is only executed one at a time.\n */ function withLock(callback) {\n    let lock = Promise.resolve();\n    return async (info, context)=>{\n        await lock;\n        lock = lock.then(()=>callback(info, context));\n        return lock;\n    };\n}\n/**\n * Get the hash string for the request and refresh functions.\n */ function hashFunctions(requestFn, refreshFn) {\n    let requestHash = FN_HASHES.get(requestFn);\n    let refreshHash = FN_HASHES.get(refreshFn ?? NO_FUNCTION);\n    if (requestHash == null) {\n        // Create a new one for the function and put it in the map.\n        FN_HASH_COUNTER++;\n        requestHash = FN_HASH_COUNTER;\n        FN_HASHES.set(requestFn, FN_HASH_COUNTER);\n    }\n    if (refreshHash == null && refreshFn) {\n        // Create a new one for the function and put it in the map.\n        FN_HASH_COUNTER++;\n        refreshHash = FN_HASH_COUNTER;\n        FN_HASHES.set(refreshFn, FN_HASH_COUNTER);\n    }\n    return `${requestHash}-${refreshHash}`;\n} //# sourceMappingURL=callback_lock_cache.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongodb/lib/cmap/auth/mongodb_oidc/callback_lock_cache.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongodb/lib/cmap/auth/mongodb_oidc/callback_workflow.js":
/*!******************************************************************************!*\
  !*** ./node_modules/mongodb/lib/cmap/auth/mongodb_oidc/callback_workflow.js ***!
  \******************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.CallbackWorkflow = void 0;\nconst bson_1 = __webpack_require__(/*! bson */ \"(ssr)/./node_modules/bson/lib/bson.cjs\");\nconst error_1 = __webpack_require__(/*! ../../../error */ \"(ssr)/./node_modules/mongodb/lib/error.js\");\nconst utils_1 = __webpack_require__(/*! ../../../utils */ \"(ssr)/./node_modules/mongodb/lib/utils.js\");\nconst providers_1 = __webpack_require__(/*! ../providers */ \"(ssr)/./node_modules/mongodb/lib/cmap/auth/providers.js\");\nconst callback_lock_cache_1 = __webpack_require__(/*! ./callback_lock_cache */ \"(ssr)/./node_modules/mongodb/lib/cmap/auth/mongodb_oidc/callback_lock_cache.js\");\nconst token_entry_cache_1 = __webpack_require__(/*! ./token_entry_cache */ \"(ssr)/./node_modules/mongodb/lib/cmap/auth/mongodb_oidc/token_entry_cache.js\");\n/** The current version of OIDC implementation. */ const OIDC_VERSION = 0;\n/** 5 minutes in seconds */ const TIMEOUT_S = 300;\n/** Properties allowed on results of callbacks. */ const RESULT_PROPERTIES = [\n    \"accessToken\",\n    \"expiresInSeconds\",\n    \"refreshToken\"\n];\n/** Error message when the callback result is invalid. */ const CALLBACK_RESULT_ERROR = \"User provided OIDC callbacks must return a valid object with an accessToken.\";\n/**\n * OIDC implementation of a callback based workflow.\n * @internal\n */ class CallbackWorkflow {\n    /**\n     * Instantiate the workflow\n     */ constructor(){\n        this.cache = new token_entry_cache_1.TokenEntryCache();\n        this.callbackCache = new callback_lock_cache_1.CallbackLockCache();\n    }\n    /**\n     * Get the document to add for speculative authentication. This also needs\n     * to add a db field from the credentials source.\n     */ async speculativeAuth(credentials) {\n        const document = startCommandDocument(credentials);\n        document.db = credentials.source;\n        return {\n            speculativeAuthenticate: document\n        };\n    }\n    /**\n     * Execute the OIDC callback workflow.\n     */ async execute(connection, credentials, reauthenticating, response) {\n        // Get the callbacks with locks from the callback lock cache.\n        const { requestCallback, refreshCallback, callbackHash } = this.callbackCache.getEntry(connection, credentials);\n        // Look for an existing entry in the cache.\n        const entry = this.cache.getEntry(connection.address, credentials.username, callbackHash);\n        let result;\n        if (entry) {\n            // Reauthentication cannot use a token from the cache since the server has\n            // stated it is invalid by the request for reauthentication.\n            if (entry.isValid() && !reauthenticating) {\n                // Presence of a valid cache entry means we can skip to the finishing step.\n                result = await this.finishAuthentication(connection, credentials, entry.tokenResult, response?.speculativeAuthenticate?.conversationId);\n            } else {\n                // Presence of an expired cache entry means we must fetch a new one and\n                // then execute the final step.\n                const tokenResult = await this.fetchAccessToken(connection, credentials, entry.serverInfo, reauthenticating, callbackHash, requestCallback, refreshCallback);\n                try {\n                    result = await this.finishAuthentication(connection, credentials, tokenResult, reauthenticating ? undefined : response?.speculativeAuthenticate?.conversationId);\n                } catch (error) {\n                    // If we are reauthenticating and this errors with reauthentication\n                    // required, we need to do the entire process over again and clear\n                    // the cache entry.\n                    if (reauthenticating && error instanceof error_1.MongoError && error.code === error_1.MONGODB_ERROR_CODES.Reauthenticate) {\n                        this.cache.deleteEntry(connection.address, credentials.username, callbackHash);\n                        result = await this.execute(connection, credentials, reauthenticating);\n                    } else {\n                        throw error;\n                    }\n                }\n            }\n        } else {\n            // No entry in the cache requires us to do all authentication steps\n            // from start to finish, including getting a fresh token for the cache.\n            const startDocument = await this.startAuthentication(connection, credentials, reauthenticating, response);\n            const conversationId = startDocument.conversationId;\n            const serverResult = bson_1.BSON.deserialize(startDocument.payload.buffer);\n            const tokenResult = await this.fetchAccessToken(connection, credentials, serverResult, reauthenticating, callbackHash, requestCallback, refreshCallback);\n            result = await this.finishAuthentication(connection, credentials, tokenResult, conversationId);\n        }\n        return result;\n    }\n    /**\n     * Starts the callback authentication process. If there is a speculative\n     * authentication document from the initial handshake, then we will use that\n     * value to get the issuer, otherwise we will send the saslStart command.\n     */ async startAuthentication(connection, credentials, reauthenticating, response) {\n        let result;\n        if (!reauthenticating && response?.speculativeAuthenticate) {\n            result = response.speculativeAuthenticate;\n        } else {\n            result = await connection.commandAsync((0, utils_1.ns)(credentials.source), startCommandDocument(credentials), undefined);\n        }\n        return result;\n    }\n    /**\n     * Finishes the callback authentication process.\n     */ async finishAuthentication(connection, credentials, tokenResult, conversationId) {\n        const result = await connection.commandAsync((0, utils_1.ns)(credentials.source), finishCommandDocument(tokenResult.accessToken, conversationId), undefined);\n        return result;\n    }\n    /**\n     * Fetches an access token using either the request or refresh callbacks and\n     * puts it in the cache.\n     */ async fetchAccessToken(connection, credentials, serverInfo, reauthenticating, callbackHash, requestCallback, refreshCallback) {\n        // Get the token from the cache.\n        const entry = this.cache.getEntry(connection.address, credentials.username, callbackHash);\n        let result;\n        const context = {\n            timeoutSeconds: TIMEOUT_S,\n            version: OIDC_VERSION\n        };\n        // Check if there's a token in the cache.\n        if (entry) {\n            // If the cache entry is valid, return the token result.\n            if (entry.isValid() && !reauthenticating) {\n                return entry.tokenResult;\n            }\n            // If the cache entry is not valid, remove it from the cache and first attempt\n            // to use the refresh callback to get a new token. If no refresh callback\n            // exists, then fallback to the request callback.\n            if (refreshCallback) {\n                context.refreshToken = entry.tokenResult.refreshToken;\n                result = await refreshCallback(serverInfo, context);\n            } else {\n                result = await requestCallback(serverInfo, context);\n            }\n        } else {\n            // With no token in the cache we use the request callback.\n            result = await requestCallback(serverInfo, context);\n        }\n        // Validate that the result returned by the callback is acceptable. If it is not\n        // we must clear the token result from the cache.\n        if (isCallbackResultInvalid(result)) {\n            this.cache.deleteEntry(connection.address, credentials.username, callbackHash);\n            throw new error_1.MongoMissingCredentialsError(CALLBACK_RESULT_ERROR);\n        }\n        // Cleanup the cache.\n        this.cache.deleteExpiredEntries();\n        // Put the new entry into the cache.\n        this.cache.addEntry(connection.address, credentials.username || \"\", callbackHash, result, serverInfo);\n        return result;\n    }\n}\nexports.CallbackWorkflow = CallbackWorkflow;\n/**\n * Generate the finishing command document for authentication. Will be a\n * saslStart or saslContinue depending on the presence of a conversation id.\n */ function finishCommandDocument(token, conversationId) {\n    if (conversationId != null && typeof conversationId === \"number\") {\n        return {\n            saslContinue: 1,\n            conversationId: conversationId,\n            payload: new bson_1.Binary(bson_1.BSON.serialize({\n                jwt: token\n            }))\n        };\n    }\n    // saslContinue requires a conversationId in the command to be valid so in this\n    // case the server allows \"step two\" to actually be a saslStart with the token\n    // as the jwt since the use of the cached value has no correlating conversating\n    // on the particular connection.\n    return {\n        saslStart: 1,\n        mechanism: providers_1.AuthMechanism.MONGODB_OIDC,\n        payload: new bson_1.Binary(bson_1.BSON.serialize({\n            jwt: token\n        }))\n    };\n}\n/**\n * Determines if a result returned from a request or refresh callback\n * function is invalid. This means the result is nullish, doesn't contain\n * the accessToken required field, and does not contain extra fields.\n */ function isCallbackResultInvalid(tokenResult) {\n    if (tokenResult == null || typeof tokenResult !== \"object\") return true;\n    if (!(\"accessToken\" in tokenResult)) return true;\n    return !Object.getOwnPropertyNames(tokenResult).every((prop)=>RESULT_PROPERTIES.includes(prop));\n}\n/**\n * Generate the saslStart command document.\n */ function startCommandDocument(credentials) {\n    const payload = {};\n    if (credentials.username) {\n        payload.n = credentials.username;\n    }\n    return {\n        saslStart: 1,\n        autoAuthorize: 1,\n        mechanism: providers_1.AuthMechanism.MONGODB_OIDC,\n        payload: new bson_1.Binary(bson_1.BSON.serialize(payload))\n    };\n} //# sourceMappingURL=callback_workflow.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongodb/lib/cmap/auth/mongodb_oidc/callback_workflow.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongodb/lib/cmap/auth/mongodb_oidc/service_workflow.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/mongodb/lib/cmap/auth/mongodb_oidc/service_workflow.js ***!
  \*****************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.commandDocument = exports.ServiceWorkflow = void 0;\nconst bson_1 = __webpack_require__(/*! bson */ \"(ssr)/./node_modules/bson/lib/bson.cjs\");\nconst utils_1 = __webpack_require__(/*! ../../../utils */ \"(ssr)/./node_modules/mongodb/lib/utils.js\");\nconst providers_1 = __webpack_require__(/*! ../providers */ \"(ssr)/./node_modules/mongodb/lib/cmap/auth/providers.js\");\n/**\n * Common behaviour for OIDC device workflows.\n * @internal\n */ class ServiceWorkflow {\n    /**\n     * Execute the workflow. Looks for AWS_WEB_IDENTITY_TOKEN_FILE in the environment\n     * and then attempts to read the token from that path.\n     */ async execute(connection, credentials) {\n        const token = await this.getToken(credentials);\n        const command = commandDocument(token);\n        return connection.commandAsync((0, utils_1.ns)(credentials.source), command, undefined);\n    }\n    /**\n     * Get the document to add for speculative authentication.\n     */ async speculativeAuth(credentials) {\n        const token = await this.getToken(credentials);\n        const document = commandDocument(token);\n        document.db = credentials.source;\n        return {\n            speculativeAuthenticate: document\n        };\n    }\n}\nexports.ServiceWorkflow = ServiceWorkflow;\n/**\n * Create the saslStart command document.\n */ function commandDocument(token) {\n    return {\n        saslStart: 1,\n        mechanism: providers_1.AuthMechanism.MONGODB_OIDC,\n        payload: bson_1.BSON.serialize({\n            jwt: token\n        })\n    };\n}\nexports.commandDocument = commandDocument; //# sourceMappingURL=service_workflow.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbW9uZ29kYi9saWIvY21hcC9hdXRoL21vbmdvZGJfb2lkYy9zZXJ2aWNlX3dvcmtmbG93LmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2JBLDhDQUE2QztJQUFFRyxPQUFPO0FBQUssQ0FBQyxFQUFDO0FBQzdERCx1QkFBdUIsR0FBR0EsdUJBQXVCLEdBQUcsS0FBSztBQUN6RCxNQUFNSSxTQUFTQyxtQkFBT0EsQ0FBQyxvREFBTTtBQUM3QixNQUFNQyxVQUFVRCxtQkFBT0EsQ0FBQyxpRUFBZ0I7QUFDeEMsTUFBTUUsY0FBY0YsbUJBQU9BLENBQUMsNkVBQWM7QUFDMUM7OztDQUdDLEdBQ0QsTUFBTUY7SUFDRjs7O0tBR0MsR0FDRCxNQUFNSyxRQUFRQyxVQUFVLEVBQUVDLFdBQVcsRUFBRTtRQUNuQyxNQUFNQyxRQUFRLE1BQU0sSUFBSSxDQUFDQyxRQUFRLENBQUNGO1FBQ2xDLE1BQU1HLFVBQVVYLGdCQUFnQlM7UUFDaEMsT0FBT0YsV0FBV0ssWUFBWSxDQUFDLENBQUMsR0FBR1IsUUFBUVMsRUFBRSxFQUFFTCxZQUFZTSxNQUFNLEdBQUdILFNBQVNJO0lBQ2pGO0lBQ0E7O0tBRUMsR0FDRCxNQUFNQyxnQkFBZ0JSLFdBQVcsRUFBRTtRQUMvQixNQUFNQyxRQUFRLE1BQU0sSUFBSSxDQUFDQyxRQUFRLENBQUNGO1FBQ2xDLE1BQU1TLFdBQVdqQixnQkFBZ0JTO1FBQ2pDUSxTQUFTQyxFQUFFLEdBQUdWLFlBQVlNLE1BQU07UUFDaEMsT0FBTztZQUFFSyx5QkFBeUJGO1FBQVM7SUFDL0M7QUFDSjtBQUNBbkIsdUJBQXVCLEdBQUdHO0FBQzFCOztDQUVDLEdBQ0QsU0FBU0QsZ0JBQWdCUyxLQUFLO0lBQzFCLE9BQU87UUFDSFcsV0FBVztRQUNYQyxXQUFXaEIsWUFBWWlCLGFBQWEsQ0FBQ0MsWUFBWTtRQUNqREMsU0FBU3RCLE9BQU91QixJQUFJLENBQUNDLFNBQVMsQ0FBQztZQUFFQyxLQUFLbEI7UUFBTTtJQUNoRDtBQUNKO0FBQ0FYLHVCQUF1QixHQUFHRSxpQkFDMUIsNENBQTRDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYmxvZy1hcHBsaWNhdGlvbi8uL25vZGVfbW9kdWxlcy9tb25nb2RiL2xpYi9jbWFwL2F1dGgvbW9uZ29kYl9vaWRjL3NlcnZpY2Vfd29ya2Zsb3cuanM/ZjQwMCJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuY29tbWFuZERvY3VtZW50ID0gZXhwb3J0cy5TZXJ2aWNlV29ya2Zsb3cgPSB2b2lkIDA7XG5jb25zdCBic29uXzEgPSByZXF1aXJlKFwiYnNvblwiKTtcbmNvbnN0IHV0aWxzXzEgPSByZXF1aXJlKFwiLi4vLi4vLi4vdXRpbHNcIik7XG5jb25zdCBwcm92aWRlcnNfMSA9IHJlcXVpcmUoXCIuLi9wcm92aWRlcnNcIik7XG4vKipcbiAqIENvbW1vbiBiZWhhdmlvdXIgZm9yIE9JREMgZGV2aWNlIHdvcmtmbG93cy5cbiAqIEBpbnRlcm5hbFxuICovXG5jbGFzcyBTZXJ2aWNlV29ya2Zsb3cge1xuICAgIC8qKlxuICAgICAqIEV4ZWN1dGUgdGhlIHdvcmtmbG93LiBMb29rcyBmb3IgQVdTX1dFQl9JREVOVElUWV9UT0tFTl9GSUxFIGluIHRoZSBlbnZpcm9ubWVudFxuICAgICAqIGFuZCB0aGVuIGF0dGVtcHRzIHRvIHJlYWQgdGhlIHRva2VuIGZyb20gdGhhdCBwYXRoLlxuICAgICAqL1xuICAgIGFzeW5jIGV4ZWN1dGUoY29ubmVjdGlvbiwgY3JlZGVudGlhbHMpIHtcbiAgICAgICAgY29uc3QgdG9rZW4gPSBhd2FpdCB0aGlzLmdldFRva2VuKGNyZWRlbnRpYWxzKTtcbiAgICAgICAgY29uc3QgY29tbWFuZCA9IGNvbW1hbmREb2N1bWVudCh0b2tlbik7XG4gICAgICAgIHJldHVybiBjb25uZWN0aW9uLmNvbW1hbmRBc3luYygoMCwgdXRpbHNfMS5ucykoY3JlZGVudGlhbHMuc291cmNlKSwgY29tbWFuZCwgdW5kZWZpbmVkKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogR2V0IHRoZSBkb2N1bWVudCB0byBhZGQgZm9yIHNwZWN1bGF0aXZlIGF1dGhlbnRpY2F0aW9uLlxuICAgICAqL1xuICAgIGFzeW5jIHNwZWN1bGF0aXZlQXV0aChjcmVkZW50aWFscykge1xuICAgICAgICBjb25zdCB0b2tlbiA9IGF3YWl0IHRoaXMuZ2V0VG9rZW4oY3JlZGVudGlhbHMpO1xuICAgICAgICBjb25zdCBkb2N1bWVudCA9IGNvbW1hbmREb2N1bWVudCh0b2tlbik7XG4gICAgICAgIGRvY3VtZW50LmRiID0gY3JlZGVudGlhbHMuc291cmNlO1xuICAgICAgICByZXR1cm4geyBzcGVjdWxhdGl2ZUF1dGhlbnRpY2F0ZTogZG9jdW1lbnQgfTtcbiAgICB9XG59XG5leHBvcnRzLlNlcnZpY2VXb3JrZmxvdyA9IFNlcnZpY2VXb3JrZmxvdztcbi8qKlxuICogQ3JlYXRlIHRoZSBzYXNsU3RhcnQgY29tbWFuZCBkb2N1bWVudC5cbiAqL1xuZnVuY3Rpb24gY29tbWFuZERvY3VtZW50KHRva2VuKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgc2FzbFN0YXJ0OiAxLFxuICAgICAgICBtZWNoYW5pc206IHByb3ZpZGVyc18xLkF1dGhNZWNoYW5pc20uTU9OR09EQl9PSURDLFxuICAgICAgICBwYXlsb2FkOiBic29uXzEuQlNPTi5zZXJpYWxpemUoeyBqd3Q6IHRva2VuIH0pXG4gICAgfTtcbn1cbmV4cG9ydHMuY29tbWFuZERvY3VtZW50ID0gY29tbWFuZERvY3VtZW50O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9c2VydmljZV93b3JrZmxvdy5qcy5tYXAiXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJjb21tYW5kRG9jdW1lbnQiLCJTZXJ2aWNlV29ya2Zsb3ciLCJic29uXzEiLCJyZXF1aXJlIiwidXRpbHNfMSIsInByb3ZpZGVyc18xIiwiZXhlY3V0ZSIsImNvbm5lY3Rpb24iLCJjcmVkZW50aWFscyIsInRva2VuIiwiZ2V0VG9rZW4iLCJjb21tYW5kIiwiY29tbWFuZEFzeW5jIiwibnMiLCJzb3VyY2UiLCJ1bmRlZmluZWQiLCJzcGVjdWxhdGl2ZUF1dGgiLCJkb2N1bWVudCIsImRiIiwic3BlY3VsYXRpdmVBdXRoZW50aWNhdGUiLCJzYXNsU3RhcnQiLCJtZWNoYW5pc20iLCJBdXRoTWVjaGFuaXNtIiwiTU9OR09EQl9PSURDIiwicGF5bG9hZCIsIkJTT04iLCJzZXJpYWxpemUiLCJqd3QiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongodb/lib/cmap/auth/mongodb_oidc/service_workflow.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongodb/lib/cmap/auth/mongodb_oidc/token_entry_cache.js":
/*!******************************************************************************!*\
  !*** ./node_modules/mongodb/lib/cmap/auth/mongodb_oidc/token_entry_cache.js ***!
  \******************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.TokenEntryCache = exports.TokenEntry = void 0;\nconst cache_1 = __webpack_require__(/*! ./cache */ \"(ssr)/./node_modules/mongodb/lib/cmap/auth/mongodb_oidc/cache.js\");\n/* Default expiration is now for when no expiration provided */ const DEFAULT_EXPIRATION_SECS = 0;\n/** @internal */ class TokenEntry extends cache_1.ExpiringCacheEntry {\n    /**\n     * Instantiate the entry.\n     */ constructor(tokenResult, serverInfo, expiration){\n        super(expiration);\n        this.tokenResult = tokenResult;\n        this.serverInfo = serverInfo;\n    }\n}\nexports.TokenEntry = TokenEntry;\n/**\n * Cache of OIDC token entries.\n * @internal\n */ class TokenEntryCache extends cache_1.Cache {\n    /**\n     * Set an entry in the token cache.\n     */ addEntry(address, username, callbackHash, tokenResult, serverInfo) {\n        const entry = new TokenEntry(tokenResult, serverInfo, tokenResult.expiresInSeconds ?? DEFAULT_EXPIRATION_SECS);\n        this.entries.set(this.cacheKey(address, username, callbackHash), entry);\n        return entry;\n    }\n    /**\n     * Delete an entry from the cache.\n     */ deleteEntry(address, username, callbackHash) {\n        this.entries.delete(this.cacheKey(address, username, callbackHash));\n    }\n    /**\n     * Get an entry from the cache.\n     */ getEntry(address, username, callbackHash) {\n        return this.entries.get(this.cacheKey(address, username, callbackHash));\n    }\n    /**\n     * Delete all expired entries from the cache.\n     */ deleteExpiredEntries() {\n        for (const [key, entry] of this.entries){\n            if (!entry.isValid()) {\n                this.entries.delete(key);\n            }\n        }\n    }\n    /**\n     * Create a cache key from the address and username.\n     */ cacheKey(address, username, callbackHash) {\n        return this.hashedCacheKey(address, username, callbackHash);\n    }\n}\nexports.TokenEntryCache = TokenEntryCache; //# sourceMappingURL=token_entry_cache.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbW9uZ29kYi9saWIvY21hcC9hdXRoL21vbmdvZGJfb2lkYy90b2tlbl9lbnRyeV9jYWNoZS5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiQSw4Q0FBNkM7SUFBRUcsT0FBTztBQUFLLENBQUMsRUFBQztBQUM3REQsdUJBQXVCLEdBQUdBLGtCQUFrQixHQUFHLEtBQUs7QUFDcEQsTUFBTUksVUFBVUMsbUJBQU9BLENBQUMsaUZBQVM7QUFDakMsNkRBQTZELEdBQzdELE1BQU1DLDBCQUEwQjtBQUNoQyxjQUFjLEdBQ2QsTUFBTUgsbUJBQW1CQyxRQUFRRyxrQkFBa0I7SUFDL0M7O0tBRUMsR0FDREMsWUFBWUMsV0FBVyxFQUFFQyxVQUFVLEVBQUVDLFVBQVUsQ0FBRTtRQUM3QyxLQUFLLENBQUNBO1FBQ04sSUFBSSxDQUFDRixXQUFXLEdBQUdBO1FBQ25CLElBQUksQ0FBQ0MsVUFBVSxHQUFHQTtJQUN0QjtBQUNKO0FBQ0FWLGtCQUFrQixHQUFHRztBQUNyQjs7O0NBR0MsR0FDRCxNQUFNRCx3QkFBd0JFLFFBQVFRLEtBQUs7SUFDdkM7O0tBRUMsR0FDREMsU0FBU0MsT0FBTyxFQUFFQyxRQUFRLEVBQUVDLFlBQVksRUFBRVAsV0FBVyxFQUFFQyxVQUFVLEVBQUU7UUFDL0QsTUFBTU8sUUFBUSxJQUFJZCxXQUFXTSxhQUFhQyxZQUFZRCxZQUFZUyxnQkFBZ0IsSUFBSVo7UUFDdEYsSUFBSSxDQUFDYSxPQUFPLENBQUNDLEdBQUcsQ0FBQyxJQUFJLENBQUNDLFFBQVEsQ0FBQ1AsU0FBU0MsVUFBVUMsZUFBZUM7UUFDakUsT0FBT0E7SUFDWDtJQUNBOztLQUVDLEdBQ0RLLFlBQVlSLE9BQU8sRUFBRUMsUUFBUSxFQUFFQyxZQUFZLEVBQUU7UUFDekMsSUFBSSxDQUFDRyxPQUFPLENBQUNJLE1BQU0sQ0FBQyxJQUFJLENBQUNGLFFBQVEsQ0FBQ1AsU0FBU0MsVUFBVUM7SUFDekQ7SUFDQTs7S0FFQyxHQUNEUSxTQUFTVixPQUFPLEVBQUVDLFFBQVEsRUFBRUMsWUFBWSxFQUFFO1FBQ3RDLE9BQU8sSUFBSSxDQUFDRyxPQUFPLENBQUNNLEdBQUcsQ0FBQyxJQUFJLENBQUNKLFFBQVEsQ0FBQ1AsU0FBU0MsVUFBVUM7SUFDN0Q7SUFDQTs7S0FFQyxHQUNEVSx1QkFBdUI7UUFDbkIsS0FBSyxNQUFNLENBQUNDLEtBQUtWLE1BQU0sSUFBSSxJQUFJLENBQUNFLE9BQU8sQ0FBRTtZQUNyQyxJQUFJLENBQUNGLE1BQU1XLE9BQU8sSUFBSTtnQkFDbEIsSUFBSSxDQUFDVCxPQUFPLENBQUNJLE1BQU0sQ0FBQ0k7WUFDeEI7UUFDSjtJQUNKO0lBQ0E7O0tBRUMsR0FDRE4sU0FBU1AsT0FBTyxFQUFFQyxRQUFRLEVBQUVDLFlBQVksRUFBRTtRQUN0QyxPQUFPLElBQUksQ0FBQ2EsY0FBYyxDQUFDZixTQUFTQyxVQUFVQztJQUNsRDtBQUNKO0FBQ0FoQix1QkFBdUIsR0FBR0UsaUJBQzFCLDZDQUE2QyIsInNvdXJjZXMiOlsid2VicGFjazovL2Jsb2ctYXBwbGljYXRpb24vLi9ub2RlX21vZHVsZXMvbW9uZ29kYi9saWIvY21hcC9hdXRoL21vbmdvZGJfb2lkYy90b2tlbl9lbnRyeV9jYWNoZS5qcz8wMWQ5Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5Ub2tlbkVudHJ5Q2FjaGUgPSBleHBvcnRzLlRva2VuRW50cnkgPSB2b2lkIDA7XG5jb25zdCBjYWNoZV8xID0gcmVxdWlyZShcIi4vY2FjaGVcIik7XG4vKiBEZWZhdWx0IGV4cGlyYXRpb24gaXMgbm93IGZvciB3aGVuIG5vIGV4cGlyYXRpb24gcHJvdmlkZWQgKi9cbmNvbnN0IERFRkFVTFRfRVhQSVJBVElPTl9TRUNTID0gMDtcbi8qKiBAaW50ZXJuYWwgKi9cbmNsYXNzIFRva2VuRW50cnkgZXh0ZW5kcyBjYWNoZV8xLkV4cGlyaW5nQ2FjaGVFbnRyeSB7XG4gICAgLyoqXG4gICAgICogSW5zdGFudGlhdGUgdGhlIGVudHJ5LlxuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKHRva2VuUmVzdWx0LCBzZXJ2ZXJJbmZvLCBleHBpcmF0aW9uKSB7XG4gICAgICAgIHN1cGVyKGV4cGlyYXRpb24pO1xuICAgICAgICB0aGlzLnRva2VuUmVzdWx0ID0gdG9rZW5SZXN1bHQ7XG4gICAgICAgIHRoaXMuc2VydmVySW5mbyA9IHNlcnZlckluZm87XG4gICAgfVxufVxuZXhwb3J0cy5Ub2tlbkVudHJ5ID0gVG9rZW5FbnRyeTtcbi8qKlxuICogQ2FjaGUgb2YgT0lEQyB0b2tlbiBlbnRyaWVzLlxuICogQGludGVybmFsXG4gKi9cbmNsYXNzIFRva2VuRW50cnlDYWNoZSBleHRlbmRzIGNhY2hlXzEuQ2FjaGUge1xuICAgIC8qKlxuICAgICAqIFNldCBhbiBlbnRyeSBpbiB0aGUgdG9rZW4gY2FjaGUuXG4gICAgICovXG4gICAgYWRkRW50cnkoYWRkcmVzcywgdXNlcm5hbWUsIGNhbGxiYWNrSGFzaCwgdG9rZW5SZXN1bHQsIHNlcnZlckluZm8pIHtcbiAgICAgICAgY29uc3QgZW50cnkgPSBuZXcgVG9rZW5FbnRyeSh0b2tlblJlc3VsdCwgc2VydmVySW5mbywgdG9rZW5SZXN1bHQuZXhwaXJlc0luU2Vjb25kcyA/PyBERUZBVUxUX0VYUElSQVRJT05fU0VDUyk7XG4gICAgICAgIHRoaXMuZW50cmllcy5zZXQodGhpcy5jYWNoZUtleShhZGRyZXNzLCB1c2VybmFtZSwgY2FsbGJhY2tIYXNoKSwgZW50cnkpO1xuICAgICAgICByZXR1cm4gZW50cnk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIERlbGV0ZSBhbiBlbnRyeSBmcm9tIHRoZSBjYWNoZS5cbiAgICAgKi9cbiAgICBkZWxldGVFbnRyeShhZGRyZXNzLCB1c2VybmFtZSwgY2FsbGJhY2tIYXNoKSB7XG4gICAgICAgIHRoaXMuZW50cmllcy5kZWxldGUodGhpcy5jYWNoZUtleShhZGRyZXNzLCB1c2VybmFtZSwgY2FsbGJhY2tIYXNoKSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEdldCBhbiBlbnRyeSBmcm9tIHRoZSBjYWNoZS5cbiAgICAgKi9cbiAgICBnZXRFbnRyeShhZGRyZXNzLCB1c2VybmFtZSwgY2FsbGJhY2tIYXNoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmVudHJpZXMuZ2V0KHRoaXMuY2FjaGVLZXkoYWRkcmVzcywgdXNlcm5hbWUsIGNhbGxiYWNrSGFzaCkpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBEZWxldGUgYWxsIGV4cGlyZWQgZW50cmllcyBmcm9tIHRoZSBjYWNoZS5cbiAgICAgKi9cbiAgICBkZWxldGVFeHBpcmVkRW50cmllcygpIHtcbiAgICAgICAgZm9yIChjb25zdCBba2V5LCBlbnRyeV0gb2YgdGhpcy5lbnRyaWVzKSB7XG4gICAgICAgICAgICBpZiAoIWVudHJ5LmlzVmFsaWQoKSkge1xuICAgICAgICAgICAgICAgIHRoaXMuZW50cmllcy5kZWxldGUoa2V5KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICAvKipcbiAgICAgKiBDcmVhdGUgYSBjYWNoZSBrZXkgZnJvbSB0aGUgYWRkcmVzcyBhbmQgdXNlcm5hbWUuXG4gICAgICovXG4gICAgY2FjaGVLZXkoYWRkcmVzcywgdXNlcm5hbWUsIGNhbGxiYWNrSGFzaCkge1xuICAgICAgICByZXR1cm4gdGhpcy5oYXNoZWRDYWNoZUtleShhZGRyZXNzLCB1c2VybmFtZSwgY2FsbGJhY2tIYXNoKTtcbiAgICB9XG59XG5leHBvcnRzLlRva2VuRW50cnlDYWNoZSA9IFRva2VuRW50cnlDYWNoZTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXRva2VuX2VudHJ5X2NhY2hlLmpzLm1hcCJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsIlRva2VuRW50cnlDYWNoZSIsIlRva2VuRW50cnkiLCJjYWNoZV8xIiwicmVxdWlyZSIsIkRFRkFVTFRfRVhQSVJBVElPTl9TRUNTIiwiRXhwaXJpbmdDYWNoZUVudHJ5IiwiY29uc3RydWN0b3IiLCJ0b2tlblJlc3VsdCIsInNlcnZlckluZm8iLCJleHBpcmF0aW9uIiwiQ2FjaGUiLCJhZGRFbnRyeSIsImFkZHJlc3MiLCJ1c2VybmFtZSIsImNhbGxiYWNrSGFzaCIsImVudHJ5IiwiZXhwaXJlc0luU2Vjb25kcyIsImVudHJpZXMiLCJzZXQiLCJjYWNoZUtleSIsImRlbGV0ZUVudHJ5IiwiZGVsZXRlIiwiZ2V0RW50cnkiLCJnZXQiLCJkZWxldGVFeHBpcmVkRW50cmllcyIsImtleSIsImlzVmFsaWQiLCJoYXNoZWRDYWNoZUtleSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongodb/lib/cmap/auth/mongodb_oidc/token_entry_cache.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongodb/lib/cmap/auth/plain.js":
/*!*****************************************************!*\
  !*** ./node_modules/mongodb/lib/cmap/auth/plain.js ***!
  \*****************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.Plain = void 0;\nconst bson_1 = __webpack_require__(/*! ../../bson */ \"(ssr)/./node_modules/mongodb/lib/bson.js\");\nconst error_1 = __webpack_require__(/*! ../../error */ \"(ssr)/./node_modules/mongodb/lib/error.js\");\nconst utils_1 = __webpack_require__(/*! ../../utils */ \"(ssr)/./node_modules/mongodb/lib/utils.js\");\nconst auth_provider_1 = __webpack_require__(/*! ./auth_provider */ \"(ssr)/./node_modules/mongodb/lib/cmap/auth/auth_provider.js\");\nclass Plain extends auth_provider_1.AuthProvider {\n    async auth(authContext) {\n        const { connection, credentials } = authContext;\n        if (!credentials) {\n            throw new error_1.MongoMissingCredentialsError(\"AuthContext must provide credentials.\");\n        }\n        const { username, password } = credentials;\n        const payload = new bson_1.Binary(Buffer.from(`\\x00${username}\\x00${password}`));\n        const command = {\n            saslStart: 1,\n            mechanism: \"PLAIN\",\n            payload: payload,\n            autoAuthorize: 1\n        };\n        await connection.commandAsync((0, utils_1.ns)(\"$external.$cmd\"), command, undefined);\n    }\n}\nexports.Plain = Plain; //# sourceMappingURL=plain.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbW9uZ29kYi9saWIvY21hcC9hdXRoL3BsYWluLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2JBLDhDQUE2QztJQUFFRyxPQUFPO0FBQUssQ0FBQyxFQUFDO0FBQzdERCxhQUFhLEdBQUcsS0FBSztBQUNyQixNQUFNRyxTQUFTQyxtQkFBT0EsQ0FBQyw0REFBWTtBQUNuQyxNQUFNQyxVQUFVRCxtQkFBT0EsQ0FBQyw4REFBYTtBQUNyQyxNQUFNRSxVQUFVRixtQkFBT0EsQ0FBQyw4REFBYTtBQUNyQyxNQUFNRyxrQkFBa0JILG1CQUFPQSxDQUFDLG9GQUFpQjtBQUNqRCxNQUFNRixjQUFjSyxnQkFBZ0JDLFlBQVk7SUFDNUMsTUFBTUMsS0FBS0MsV0FBVyxFQUFFO1FBQ3BCLE1BQU0sRUFBRUMsVUFBVSxFQUFFQyxXQUFXLEVBQUUsR0FBR0Y7UUFDcEMsSUFBSSxDQUFDRSxhQUFhO1lBQ2QsTUFBTSxJQUFJUCxRQUFRUSw0QkFBNEIsQ0FBQztRQUNuRDtRQUNBLE1BQU0sRUFBRUMsUUFBUSxFQUFFQyxRQUFRLEVBQUUsR0FBR0g7UUFDL0IsTUFBTUksVUFBVSxJQUFJYixPQUFPYyxNQUFNLENBQUNDLE9BQU9DLElBQUksQ0FBQyxDQUFDLElBQUksRUFBRUwsU0FBUyxJQUFJLEVBQUVDLFNBQVMsQ0FBQztRQUM5RSxNQUFNSyxVQUFVO1lBQ1pDLFdBQVc7WUFDWEMsV0FBVztZQUNYTixTQUFTQTtZQUNUTyxlQUFlO1FBQ25CO1FBQ0EsTUFBTVosV0FBV2EsWUFBWSxDQUFDLENBQUMsR0FBR2xCLFFBQVFtQixFQUFFLEVBQUUsbUJBQW1CTCxTQUFTTTtJQUM5RTtBQUNKO0FBQ0ExQixhQUFhLEdBQUdFLE9BQ2hCLGlDQUFpQyIsInNvdXJjZXMiOlsid2VicGFjazovL2Jsb2ctYXBwbGljYXRpb24vLi9ub2RlX21vZHVsZXMvbW9uZ29kYi9saWIvY21hcC9hdXRoL3BsYWluLmpzPzAwNjUiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLlBsYWluID0gdm9pZCAwO1xuY29uc3QgYnNvbl8xID0gcmVxdWlyZShcIi4uLy4uL2Jzb25cIik7XG5jb25zdCBlcnJvcl8xID0gcmVxdWlyZShcIi4uLy4uL2Vycm9yXCIpO1xuY29uc3QgdXRpbHNfMSA9IHJlcXVpcmUoXCIuLi8uLi91dGlsc1wiKTtcbmNvbnN0IGF1dGhfcHJvdmlkZXJfMSA9IHJlcXVpcmUoXCIuL2F1dGhfcHJvdmlkZXJcIik7XG5jbGFzcyBQbGFpbiBleHRlbmRzIGF1dGhfcHJvdmlkZXJfMS5BdXRoUHJvdmlkZXIge1xuICAgIGFzeW5jIGF1dGgoYXV0aENvbnRleHQpIHtcbiAgICAgICAgY29uc3QgeyBjb25uZWN0aW9uLCBjcmVkZW50aWFscyB9ID0gYXV0aENvbnRleHQ7XG4gICAgICAgIGlmICghY3JlZGVudGlhbHMpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBlcnJvcl8xLk1vbmdvTWlzc2luZ0NyZWRlbnRpYWxzRXJyb3IoJ0F1dGhDb250ZXh0IG11c3QgcHJvdmlkZSBjcmVkZW50aWFscy4nKTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCB7IHVzZXJuYW1lLCBwYXNzd29yZCB9ID0gY3JlZGVudGlhbHM7XG4gICAgICAgIGNvbnN0IHBheWxvYWQgPSBuZXcgYnNvbl8xLkJpbmFyeShCdWZmZXIuZnJvbShgXFx4MDAke3VzZXJuYW1lfVxceDAwJHtwYXNzd29yZH1gKSk7XG4gICAgICAgIGNvbnN0IGNvbW1hbmQgPSB7XG4gICAgICAgICAgICBzYXNsU3RhcnQ6IDEsXG4gICAgICAgICAgICBtZWNoYW5pc206ICdQTEFJTicsXG4gICAgICAgICAgICBwYXlsb2FkOiBwYXlsb2FkLFxuICAgICAgICAgICAgYXV0b0F1dGhvcml6ZTogMVxuICAgICAgICB9O1xuICAgICAgICBhd2FpdCBjb25uZWN0aW9uLmNvbW1hbmRBc3luYygoMCwgdXRpbHNfMS5ucykoJyRleHRlcm5hbC4kY21kJyksIGNvbW1hbmQsIHVuZGVmaW5lZCk7XG4gICAgfVxufVxuZXhwb3J0cy5QbGFpbiA9IFBsYWluO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cGxhaW4uanMubWFwIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiUGxhaW4iLCJic29uXzEiLCJyZXF1aXJlIiwiZXJyb3JfMSIsInV0aWxzXzEiLCJhdXRoX3Byb3ZpZGVyXzEiLCJBdXRoUHJvdmlkZXIiLCJhdXRoIiwiYXV0aENvbnRleHQiLCJjb25uZWN0aW9uIiwiY3JlZGVudGlhbHMiLCJNb25nb01pc3NpbmdDcmVkZW50aWFsc0Vycm9yIiwidXNlcm5hbWUiLCJwYXNzd29yZCIsInBheWxvYWQiLCJCaW5hcnkiLCJCdWZmZXIiLCJmcm9tIiwiY29tbWFuZCIsInNhc2xTdGFydCIsIm1lY2hhbmlzbSIsImF1dG9BdXRob3JpemUiLCJjb21tYW5kQXN5bmMiLCJucyIsInVuZGVmaW5lZCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongodb/lib/cmap/auth/plain.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongodb/lib/cmap/auth/providers.js":
/*!*********************************************************!*\
  !*** ./node_modules/mongodb/lib/cmap/auth/providers.js ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.AUTH_MECHS_AUTH_SRC_EXTERNAL = exports.AuthMechanism = void 0;\n/** @public */ exports.AuthMechanism = Object.freeze({\n    MONGODB_AWS: \"MONGODB-AWS\",\n    MONGODB_CR: \"MONGODB-CR\",\n    MONGODB_DEFAULT: \"DEFAULT\",\n    MONGODB_GSSAPI: \"GSSAPI\",\n    MONGODB_PLAIN: \"PLAIN\",\n    MONGODB_SCRAM_SHA1: \"SCRAM-SHA-1\",\n    MONGODB_SCRAM_SHA256: \"SCRAM-SHA-256\",\n    MONGODB_X509: \"MONGODB-X509\",\n    /** @experimental */ MONGODB_OIDC: \"MONGODB-OIDC\"\n});\n/** @internal */ exports.AUTH_MECHS_AUTH_SRC_EXTERNAL = new Set([\n    exports.AuthMechanism.MONGODB_GSSAPI,\n    exports.AuthMechanism.MONGODB_AWS,\n    exports.AuthMechanism.MONGODB_OIDC,\n    exports.AuthMechanism.MONGODB_X509\n]); //# sourceMappingURL=providers.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbW9uZ29kYi9saWIvY21hcC9hdXRoL3Byb3ZpZGVycy5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiQSw4Q0FBNkM7SUFBRUcsT0FBTztBQUFLLENBQUMsRUFBQztBQUM3REQsb0NBQW9DLEdBQUdBLHFCQUFxQixHQUFHLEtBQUs7QUFDcEUsWUFBWSxHQUNaQSxxQkFBcUIsR0FBR0YsT0FBT00sTUFBTSxDQUFDO0lBQ2xDQyxhQUFhO0lBQ2JDLFlBQVk7SUFDWkMsaUJBQWlCO0lBQ2pCQyxnQkFBZ0I7SUFDaEJDLGVBQWU7SUFDZkMsb0JBQW9CO0lBQ3BCQyxzQkFBc0I7SUFDdEJDLGNBQWM7SUFDZCxrQkFBa0IsR0FDbEJDLGNBQWM7QUFDbEI7QUFDQSxjQUFjLEdBQ2RiLG9DQUFvQyxHQUFHLElBQUljLElBQUk7SUFDM0NkLFFBQVFHLGFBQWEsQ0FBQ0ssY0FBYztJQUNwQ1IsUUFBUUcsYUFBYSxDQUFDRSxXQUFXO0lBQ2pDTCxRQUFRRyxhQUFhLENBQUNVLFlBQVk7SUFDbENiLFFBQVFHLGFBQWEsQ0FBQ1MsWUFBWTtDQUNyQyxHQUNELHFDQUFxQyIsInNvdXJjZXMiOlsid2VicGFjazovL2Jsb2ctYXBwbGljYXRpb24vLi9ub2RlX21vZHVsZXMvbW9uZ29kYi9saWIvY21hcC9hdXRoL3Byb3ZpZGVycy5qcz83ZTNhIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5BVVRIX01FQ0hTX0FVVEhfU1JDX0VYVEVSTkFMID0gZXhwb3J0cy5BdXRoTWVjaGFuaXNtID0gdm9pZCAwO1xuLyoqIEBwdWJsaWMgKi9cbmV4cG9ydHMuQXV0aE1lY2hhbmlzbSA9IE9iamVjdC5mcmVlemUoe1xuICAgIE1PTkdPREJfQVdTOiAnTU9OR09EQi1BV1MnLFxuICAgIE1PTkdPREJfQ1I6ICdNT05HT0RCLUNSJyxcbiAgICBNT05HT0RCX0RFRkFVTFQ6ICdERUZBVUxUJyxcbiAgICBNT05HT0RCX0dTU0FQSTogJ0dTU0FQSScsXG4gICAgTU9OR09EQl9QTEFJTjogJ1BMQUlOJyxcbiAgICBNT05HT0RCX1NDUkFNX1NIQTE6ICdTQ1JBTS1TSEEtMScsXG4gICAgTU9OR09EQl9TQ1JBTV9TSEEyNTY6ICdTQ1JBTS1TSEEtMjU2JyxcbiAgICBNT05HT0RCX1g1MDk6ICdNT05HT0RCLVg1MDknLFxuICAgIC8qKiBAZXhwZXJpbWVudGFsICovXG4gICAgTU9OR09EQl9PSURDOiAnTU9OR09EQi1PSURDJ1xufSk7XG4vKiogQGludGVybmFsICovXG5leHBvcnRzLkFVVEhfTUVDSFNfQVVUSF9TUkNfRVhURVJOQUwgPSBuZXcgU2V0KFtcbiAgICBleHBvcnRzLkF1dGhNZWNoYW5pc20uTU9OR09EQl9HU1NBUEksXG4gICAgZXhwb3J0cy5BdXRoTWVjaGFuaXNtLk1PTkdPREJfQVdTLFxuICAgIGV4cG9ydHMuQXV0aE1lY2hhbmlzbS5NT05HT0RCX09JREMsXG4gICAgZXhwb3J0cy5BdXRoTWVjaGFuaXNtLk1PTkdPREJfWDUwOVxuXSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1wcm92aWRlcnMuanMubWFwIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiQVVUSF9NRUNIU19BVVRIX1NSQ19FWFRFUk5BTCIsIkF1dGhNZWNoYW5pc20iLCJmcmVlemUiLCJNT05HT0RCX0FXUyIsIk1PTkdPREJfQ1IiLCJNT05HT0RCX0RFRkFVTFQiLCJNT05HT0RCX0dTU0FQSSIsIk1PTkdPREJfUExBSU4iLCJNT05HT0RCX1NDUkFNX1NIQTEiLCJNT05HT0RCX1NDUkFNX1NIQTI1NiIsIk1PTkdPREJfWDUwOSIsIk1PTkdPREJfT0lEQyIsIlNldCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongodb/lib/cmap/auth/providers.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongodb/lib/cmap/auth/scram.js":
/*!*****************************************************!*\
  !*** ./node_modules/mongodb/lib/cmap/auth/scram.js ***!
  \*****************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.ScramSHA256 = exports.ScramSHA1 = void 0;\nconst saslprep_1 = __webpack_require__(/*! @mongodb-js/saslprep */ \"(ssr)/./node_modules/@mongodb-js/saslprep/dist/node.js\");\nconst crypto = __webpack_require__(/*! crypto */ \"crypto\");\nconst util_1 = __webpack_require__(/*! util */ \"util\");\nconst bson_1 = __webpack_require__(/*! ../../bson */ \"(ssr)/./node_modules/mongodb/lib/bson.js\");\nconst error_1 = __webpack_require__(/*! ../../error */ \"(ssr)/./node_modules/mongodb/lib/error.js\");\nconst utils_1 = __webpack_require__(/*! ../../utils */ \"(ssr)/./node_modules/mongodb/lib/utils.js\");\nconst auth_provider_1 = __webpack_require__(/*! ./auth_provider */ \"(ssr)/./node_modules/mongodb/lib/cmap/auth/auth_provider.js\");\nconst providers_1 = __webpack_require__(/*! ./providers */ \"(ssr)/./node_modules/mongodb/lib/cmap/auth/providers.js\");\nclass ScramSHA extends auth_provider_1.AuthProvider {\n    constructor(cryptoMethod){\n        super();\n        this.cryptoMethod = cryptoMethod || \"sha1\";\n        this.randomBytesAsync = (0, util_1.promisify)(crypto.randomBytes);\n    }\n    async prepare(handshakeDoc, authContext) {\n        const cryptoMethod = this.cryptoMethod;\n        const credentials = authContext.credentials;\n        if (!credentials) {\n            throw new error_1.MongoMissingCredentialsError(\"AuthContext must provide credentials.\");\n        }\n        const nonce = await this.randomBytesAsync(24);\n        // store the nonce for later use\n        authContext.nonce = nonce;\n        const request = {\n            ...handshakeDoc,\n            speculativeAuthenticate: {\n                ...makeFirstMessage(cryptoMethod, credentials, nonce),\n                db: credentials.source\n            }\n        };\n        return request;\n    }\n    async auth(authContext) {\n        const { reauthenticating, response } = authContext;\n        if (response?.speculativeAuthenticate && !reauthenticating) {\n            return continueScramConversation(this.cryptoMethod, response.speculativeAuthenticate, authContext);\n        }\n        return executeScram(this.cryptoMethod, authContext);\n    }\n}\nfunction cleanUsername(username) {\n    return username.replace(\"=\", \"=3D\").replace(\",\", \"=2C\");\n}\nfunction clientFirstMessageBare(username, nonce) {\n    // NOTE: This is done b/c Javascript uses UTF-16, but the server is hashing in UTF-8.\n    // Since the username is not sasl-prep-d, we need to do this here.\n    return Buffer.concat([\n        Buffer.from(\"n=\", \"utf8\"),\n        Buffer.from(username, \"utf8\"),\n        Buffer.from(\",r=\", \"utf8\"),\n        Buffer.from(nonce.toString(\"base64\"), \"utf8\")\n    ]);\n}\nfunction makeFirstMessage(cryptoMethod, credentials, nonce) {\n    const username = cleanUsername(credentials.username);\n    const mechanism = cryptoMethod === \"sha1\" ? providers_1.AuthMechanism.MONGODB_SCRAM_SHA1 : providers_1.AuthMechanism.MONGODB_SCRAM_SHA256;\n    // NOTE: This is done b/c Javascript uses UTF-16, but the server is hashing in UTF-8.\n    // Since the username is not sasl-prep-d, we need to do this here.\n    return {\n        saslStart: 1,\n        mechanism,\n        payload: new bson_1.Binary(Buffer.concat([\n            Buffer.from(\"n,,\", \"utf8\"),\n            clientFirstMessageBare(username, nonce)\n        ])),\n        autoAuthorize: 1,\n        options: {\n            skipEmptyExchange: true\n        }\n    };\n}\nasync function executeScram(cryptoMethod, authContext) {\n    const { connection, credentials } = authContext;\n    if (!credentials) {\n        throw new error_1.MongoMissingCredentialsError(\"AuthContext must provide credentials.\");\n    }\n    if (!authContext.nonce) {\n        throw new error_1.MongoInvalidArgumentError(\"AuthContext must contain a valid nonce property\");\n    }\n    const nonce = authContext.nonce;\n    const db = credentials.source;\n    const saslStartCmd = makeFirstMessage(cryptoMethod, credentials, nonce);\n    const response = await connection.commandAsync((0, utils_1.ns)(`${db}.$cmd`), saslStartCmd, undefined);\n    await continueScramConversation(cryptoMethod, response, authContext);\n}\nasync function continueScramConversation(cryptoMethod, response, authContext) {\n    const connection = authContext.connection;\n    const credentials = authContext.credentials;\n    if (!credentials) {\n        throw new error_1.MongoMissingCredentialsError(\"AuthContext must provide credentials.\");\n    }\n    if (!authContext.nonce) {\n        throw new error_1.MongoInvalidArgumentError(\"Unable to continue SCRAM without valid nonce\");\n    }\n    const nonce = authContext.nonce;\n    const db = credentials.source;\n    const username = cleanUsername(credentials.username);\n    const password = credentials.password;\n    const processedPassword = cryptoMethod === \"sha256\" ? (0, saslprep_1.saslprep)(password) : passwordDigest(username, password);\n    const payload = Buffer.isBuffer(response.payload) ? new bson_1.Binary(response.payload) : response.payload;\n    const dict = parsePayload(payload);\n    const iterations = parseInt(dict.i, 10);\n    if (iterations && iterations < 4096) {\n        // TODO(NODE-3483)\n        throw new error_1.MongoRuntimeError(`Server returned an invalid iteration count ${iterations}`);\n    }\n    const salt = dict.s;\n    const rnonce = dict.r;\n    if (rnonce.startsWith(\"nonce\")) {\n        // TODO(NODE-3483)\n        throw new error_1.MongoRuntimeError(`Server returned an invalid nonce: ${rnonce}`);\n    }\n    // Set up start of proof\n    const withoutProof = `c=biws,r=${rnonce}`;\n    const saltedPassword = HI(processedPassword, Buffer.from(salt, \"base64\"), iterations, cryptoMethod);\n    const clientKey = HMAC(cryptoMethod, saltedPassword, \"Client Key\");\n    const serverKey = HMAC(cryptoMethod, saltedPassword, \"Server Key\");\n    const storedKey = H(cryptoMethod, clientKey);\n    const authMessage = [\n        clientFirstMessageBare(username, nonce),\n        payload.toString(\"utf8\"),\n        withoutProof\n    ].join(\",\");\n    const clientSignature = HMAC(cryptoMethod, storedKey, authMessage);\n    const clientProof = `p=${xor(clientKey, clientSignature)}`;\n    const clientFinal = [\n        withoutProof,\n        clientProof\n    ].join(\",\");\n    const serverSignature = HMAC(cryptoMethod, serverKey, authMessage);\n    const saslContinueCmd = {\n        saslContinue: 1,\n        conversationId: response.conversationId,\n        payload: new bson_1.Binary(Buffer.from(clientFinal))\n    };\n    const r = await connection.commandAsync((0, utils_1.ns)(`${db}.$cmd`), saslContinueCmd, undefined);\n    const parsedResponse = parsePayload(r.payload);\n    if (!compareDigest(Buffer.from(parsedResponse.v, \"base64\"), serverSignature)) {\n        throw new error_1.MongoRuntimeError(\"Server returned an invalid signature\");\n    }\n    if (r.done !== false) {\n        // If the server sends r.done === true we can save one RTT\n        return;\n    }\n    const retrySaslContinueCmd = {\n        saslContinue: 1,\n        conversationId: r.conversationId,\n        payload: Buffer.alloc(0)\n    };\n    await connection.commandAsync((0, utils_1.ns)(`${db}.$cmd`), retrySaslContinueCmd, undefined);\n}\nfunction parsePayload(payload) {\n    const payloadStr = payload.toString(\"utf8\");\n    const dict = {};\n    const parts = payloadStr.split(\",\");\n    for(let i = 0; i < parts.length; i++){\n        const valueParts = parts[i].split(\"=\");\n        dict[valueParts[0]] = valueParts[1];\n    }\n    return dict;\n}\nfunction passwordDigest(username, password) {\n    if (typeof username !== \"string\") {\n        throw new error_1.MongoInvalidArgumentError(\"Username must be a string\");\n    }\n    if (typeof password !== \"string\") {\n        throw new error_1.MongoInvalidArgumentError(\"Password must be a string\");\n    }\n    if (password.length === 0) {\n        throw new error_1.MongoInvalidArgumentError(\"Password cannot be empty\");\n    }\n    let md5;\n    try {\n        md5 = crypto.createHash(\"md5\");\n    } catch (err) {\n        if (crypto.getFips()) {\n            // This error is (slightly) more helpful than what comes from OpenSSL directly, e.g.\n            // 'Error: error:060800C8:digital envelope routines:EVP_DigestInit_ex:disabled for FIPS'\n            throw new Error(\"Auth mechanism SCRAM-SHA-1 is not supported in FIPS mode\");\n        }\n        throw err;\n    }\n    md5.update(`${username}:mongo:${password}`, \"utf8\");\n    return md5.digest(\"hex\");\n}\n// XOR two buffers\nfunction xor(a, b) {\n    if (!Buffer.isBuffer(a)) {\n        a = Buffer.from(a);\n    }\n    if (!Buffer.isBuffer(b)) {\n        b = Buffer.from(b);\n    }\n    const length = Math.max(a.length, b.length);\n    const res = [];\n    for(let i = 0; i < length; i += 1){\n        res.push(a[i] ^ b[i]);\n    }\n    return Buffer.from(res).toString(\"base64\");\n}\nfunction H(method, text) {\n    return crypto.createHash(method).update(text).digest();\n}\nfunction HMAC(method, key, text) {\n    return crypto.createHmac(method, key).update(text).digest();\n}\nlet _hiCache = {};\nlet _hiCacheCount = 0;\nfunction _hiCachePurge() {\n    _hiCache = {};\n    _hiCacheCount = 0;\n}\nconst hiLengthMap = {\n    sha256: 32,\n    sha1: 20\n};\nfunction HI(data, salt, iterations, cryptoMethod) {\n    // omit the work if already generated\n    const key = [\n        data,\n        salt.toString(\"base64\"),\n        iterations\n    ].join(\"_\");\n    if (_hiCache[key] != null) {\n        return _hiCache[key];\n    }\n    // generate the salt\n    const saltedData = crypto.pbkdf2Sync(data, salt, iterations, hiLengthMap[cryptoMethod], cryptoMethod);\n    // cache a copy to speed up the next lookup, but prevent unbounded cache growth\n    if (_hiCacheCount >= 200) {\n        _hiCachePurge();\n    }\n    _hiCache[key] = saltedData;\n    _hiCacheCount += 1;\n    return saltedData;\n}\nfunction compareDigest(lhs, rhs) {\n    if (lhs.length !== rhs.length) {\n        return false;\n    }\n    if (typeof crypto.timingSafeEqual === \"function\") {\n        return crypto.timingSafeEqual(lhs, rhs);\n    }\n    let result = 0;\n    for(let i = 0; i < lhs.length; i++){\n        result |= lhs[i] ^ rhs[i];\n    }\n    return result === 0;\n}\nclass ScramSHA1 extends ScramSHA {\n    constructor(){\n        super(\"sha1\");\n    }\n}\nexports.ScramSHA1 = ScramSHA1;\nclass ScramSHA256 extends ScramSHA {\n    constructor(){\n        super(\"sha256\");\n    }\n}\nexports.ScramSHA256 = ScramSHA256; //# sourceMappingURL=scram.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongodb/lib/cmap/auth/scram.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongodb/lib/cmap/auth/x509.js":
/*!****************************************************!*\
  !*** ./node_modules/mongodb/lib/cmap/auth/x509.js ***!
  \****************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.X509 = void 0;\nconst error_1 = __webpack_require__(/*! ../../error */ \"(ssr)/./node_modules/mongodb/lib/error.js\");\nconst utils_1 = __webpack_require__(/*! ../../utils */ \"(ssr)/./node_modules/mongodb/lib/utils.js\");\nconst auth_provider_1 = __webpack_require__(/*! ./auth_provider */ \"(ssr)/./node_modules/mongodb/lib/cmap/auth/auth_provider.js\");\nclass X509 extends auth_provider_1.AuthProvider {\n    async prepare(handshakeDoc, authContext) {\n        const { credentials } = authContext;\n        if (!credentials) {\n            throw new error_1.MongoMissingCredentialsError(\"AuthContext must provide credentials.\");\n        }\n        return {\n            ...handshakeDoc,\n            speculativeAuthenticate: x509AuthenticateCommand(credentials)\n        };\n    }\n    async auth(authContext) {\n        const connection = authContext.connection;\n        const credentials = authContext.credentials;\n        if (!credentials) {\n            throw new error_1.MongoMissingCredentialsError(\"AuthContext must provide credentials.\");\n        }\n        const response = authContext.response;\n        if (response?.speculativeAuthenticate) {\n            return;\n        }\n        await connection.commandAsync((0, utils_1.ns)(\"$external.$cmd\"), x509AuthenticateCommand(credentials), undefined);\n    }\n}\nexports.X509 = X509;\nfunction x509AuthenticateCommand(credentials) {\n    const command = {\n        authenticate: 1,\n        mechanism: \"MONGODB-X509\"\n    };\n    if (credentials.username) {\n        command.user = credentials.username;\n    }\n    return command;\n} //# sourceMappingURL=x509.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbW9uZ29kYi9saWIvY21hcC9hdXRoL3g1MDkuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYkEsOENBQTZDO0lBQUVHLE9BQU87QUFBSyxDQUFDLEVBQUM7QUFDN0RELFlBQVksR0FBRyxLQUFLO0FBQ3BCLE1BQU1HLFVBQVVDLG1CQUFPQSxDQUFDLDhEQUFhO0FBQ3JDLE1BQU1DLFVBQVVELG1CQUFPQSxDQUFDLDhEQUFhO0FBQ3JDLE1BQU1FLGtCQUFrQkYsbUJBQU9BLENBQUMsb0ZBQWlCO0FBQ2pELE1BQU1GLGFBQWFJLGdCQUFnQkMsWUFBWTtJQUMzQyxNQUFNQyxRQUFRQyxZQUFZLEVBQUVDLFdBQVcsRUFBRTtRQUNyQyxNQUFNLEVBQUVDLFdBQVcsRUFBRSxHQUFHRDtRQUN4QixJQUFJLENBQUNDLGFBQWE7WUFDZCxNQUFNLElBQUlSLFFBQVFTLDRCQUE0QixDQUFDO1FBQ25EO1FBQ0EsT0FBTztZQUFFLEdBQUdILFlBQVk7WUFBRUkseUJBQXlCQyx3QkFBd0JIO1FBQWE7SUFDNUY7SUFDQSxNQUFNSSxLQUFLTCxXQUFXLEVBQUU7UUFDcEIsTUFBTU0sYUFBYU4sWUFBWU0sVUFBVTtRQUN6QyxNQUFNTCxjQUFjRCxZQUFZQyxXQUFXO1FBQzNDLElBQUksQ0FBQ0EsYUFBYTtZQUNkLE1BQU0sSUFBSVIsUUFBUVMsNEJBQTRCLENBQUM7UUFDbkQ7UUFDQSxNQUFNSyxXQUFXUCxZQUFZTyxRQUFRO1FBQ3JDLElBQUlBLFVBQVVKLHlCQUF5QjtZQUNuQztRQUNKO1FBQ0EsTUFBTUcsV0FBV0UsWUFBWSxDQUFDLENBQUMsR0FBR2IsUUFBUWMsRUFBRSxFQUFFLG1CQUFtQkwsd0JBQXdCSCxjQUFjUztJQUMzRztBQUNKO0FBQ0FwQixZQUFZLEdBQUdFO0FBQ2YsU0FBU1ksd0JBQXdCSCxXQUFXO0lBQ3hDLE1BQU1VLFVBQVU7UUFBRUMsY0FBYztRQUFHQyxXQUFXO0lBQWU7SUFDN0QsSUFBSVosWUFBWWEsUUFBUSxFQUFFO1FBQ3RCSCxRQUFRSSxJQUFJLEdBQUdkLFlBQVlhLFFBQVE7SUFDdkM7SUFDQSxPQUFPSDtBQUNYLEVBQ0EsZ0NBQWdDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYmxvZy1hcHBsaWNhdGlvbi8uL25vZGVfbW9kdWxlcy9tb25nb2RiL2xpYi9jbWFwL2F1dGgveDUwOS5qcz8zN2JkIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5YNTA5ID0gdm9pZCAwO1xuY29uc3QgZXJyb3JfMSA9IHJlcXVpcmUoXCIuLi8uLi9lcnJvclwiKTtcbmNvbnN0IHV0aWxzXzEgPSByZXF1aXJlKFwiLi4vLi4vdXRpbHNcIik7XG5jb25zdCBhdXRoX3Byb3ZpZGVyXzEgPSByZXF1aXJlKFwiLi9hdXRoX3Byb3ZpZGVyXCIpO1xuY2xhc3MgWDUwOSBleHRlbmRzIGF1dGhfcHJvdmlkZXJfMS5BdXRoUHJvdmlkZXIge1xuICAgIGFzeW5jIHByZXBhcmUoaGFuZHNoYWtlRG9jLCBhdXRoQ29udGV4dCkge1xuICAgICAgICBjb25zdCB7IGNyZWRlbnRpYWxzIH0gPSBhdXRoQ29udGV4dDtcbiAgICAgICAgaWYgKCFjcmVkZW50aWFscykge1xuICAgICAgICAgICAgdGhyb3cgbmV3IGVycm9yXzEuTW9uZ29NaXNzaW5nQ3JlZGVudGlhbHNFcnJvcignQXV0aENvbnRleHQgbXVzdCBwcm92aWRlIGNyZWRlbnRpYWxzLicpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB7IC4uLmhhbmRzaGFrZURvYywgc3BlY3VsYXRpdmVBdXRoZW50aWNhdGU6IHg1MDlBdXRoZW50aWNhdGVDb21tYW5kKGNyZWRlbnRpYWxzKSB9O1xuICAgIH1cbiAgICBhc3luYyBhdXRoKGF1dGhDb250ZXh0KSB7XG4gICAgICAgIGNvbnN0IGNvbm5lY3Rpb24gPSBhdXRoQ29udGV4dC5jb25uZWN0aW9uO1xuICAgICAgICBjb25zdCBjcmVkZW50aWFscyA9IGF1dGhDb250ZXh0LmNyZWRlbnRpYWxzO1xuICAgICAgICBpZiAoIWNyZWRlbnRpYWxzKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgZXJyb3JfMS5Nb25nb01pc3NpbmdDcmVkZW50aWFsc0Vycm9yKCdBdXRoQ29udGV4dCBtdXN0IHByb3ZpZGUgY3JlZGVudGlhbHMuJyk7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgcmVzcG9uc2UgPSBhdXRoQ29udGV4dC5yZXNwb25zZTtcbiAgICAgICAgaWYgKHJlc3BvbnNlPy5zcGVjdWxhdGl2ZUF1dGhlbnRpY2F0ZSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGF3YWl0IGNvbm5lY3Rpb24uY29tbWFuZEFzeW5jKCgwLCB1dGlsc18xLm5zKSgnJGV4dGVybmFsLiRjbWQnKSwgeDUwOUF1dGhlbnRpY2F0ZUNvbW1hbmQoY3JlZGVudGlhbHMpLCB1bmRlZmluZWQpO1xuICAgIH1cbn1cbmV4cG9ydHMuWDUwOSA9IFg1MDk7XG5mdW5jdGlvbiB4NTA5QXV0aGVudGljYXRlQ29tbWFuZChjcmVkZW50aWFscykge1xuICAgIGNvbnN0IGNvbW1hbmQgPSB7IGF1dGhlbnRpY2F0ZTogMSwgbWVjaGFuaXNtOiAnTU9OR09EQi1YNTA5JyB9O1xuICAgIGlmIChjcmVkZW50aWFscy51c2VybmFtZSkge1xuICAgICAgICBjb21tYW5kLnVzZXIgPSBjcmVkZW50aWFscy51c2VybmFtZTtcbiAgICB9XG4gICAgcmV0dXJuIGNvbW1hbmQ7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD14NTA5LmpzLm1hcCJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsIlg1MDkiLCJlcnJvcl8xIiwicmVxdWlyZSIsInV0aWxzXzEiLCJhdXRoX3Byb3ZpZGVyXzEiLCJBdXRoUHJvdmlkZXIiLCJwcmVwYXJlIiwiaGFuZHNoYWtlRG9jIiwiYXV0aENvbnRleHQiLCJjcmVkZW50aWFscyIsIk1vbmdvTWlzc2luZ0NyZWRlbnRpYWxzRXJyb3IiLCJzcGVjdWxhdGl2ZUF1dGhlbnRpY2F0ZSIsIng1MDlBdXRoZW50aWNhdGVDb21tYW5kIiwiYXV0aCIsImNvbm5lY3Rpb24iLCJyZXNwb25zZSIsImNvbW1hbmRBc3luYyIsIm5zIiwidW5kZWZpbmVkIiwiY29tbWFuZCIsImF1dGhlbnRpY2F0ZSIsIm1lY2hhbmlzbSIsInVzZXJuYW1lIiwidXNlciJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongodb/lib/cmap/auth/x509.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongodb/lib/cmap/command_monitoring_events.js":
/*!********************************************************************!*\
  !*** ./node_modules/mongodb/lib/cmap/command_monitoring_events.js ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.SENSITIVE_COMMANDS = exports.CommandFailedEvent = exports.CommandSucceededEvent = exports.CommandStartedEvent = void 0;\nconst constants_1 = __webpack_require__(/*! ../constants */ \"(ssr)/./node_modules/mongodb/lib/constants.js\");\nconst utils_1 = __webpack_require__(/*! ../utils */ \"(ssr)/./node_modules/mongodb/lib/utils.js\");\nconst commands_1 = __webpack_require__(/*! ./commands */ \"(ssr)/./node_modules/mongodb/lib/cmap/commands.js\");\n/**\n * An event indicating the start of a given command\n * @public\n * @category Event\n */ class CommandStartedEvent {\n    /**\n     * Create a started event\n     *\n     * @internal\n     * @param pool - the pool that originated the command\n     * @param command - the command\n     */ constructor(connection, command){\n        /** @internal */ this.name = constants_1.COMMAND_STARTED;\n        const cmd = extractCommand(command);\n        const commandName = extractCommandName(cmd);\n        const { address, connectionId, serviceId } = extractConnectionDetails(connection);\n        // TODO: remove in major revision, this is not spec behavior\n        if (exports.SENSITIVE_COMMANDS.has(commandName)) {\n            this.commandObj = {};\n            this.commandObj[commandName] = true;\n        }\n        this.address = address;\n        this.connectionId = connectionId;\n        this.serviceId = serviceId;\n        this.requestId = command.requestId;\n        this.databaseName = command.databaseName;\n        this.commandName = commandName;\n        this.command = maybeRedact(commandName, cmd, cmd);\n    }\n    /* @internal */ get hasServiceId() {\n        return !!this.serviceId;\n    }\n}\nexports.CommandStartedEvent = CommandStartedEvent;\n/**\n * An event indicating the success of a given command\n * @public\n * @category Event\n */ class CommandSucceededEvent {\n    /**\n     * Create a succeeded event\n     *\n     * @internal\n     * @param pool - the pool that originated the command\n     * @param command - the command\n     * @param reply - the reply for this command from the server\n     * @param started - a high resolution tuple timestamp of when the command was first sent, to calculate duration\n     */ constructor(connection, command, reply, started){\n        /** @internal */ this.name = constants_1.COMMAND_SUCCEEDED;\n        const cmd = extractCommand(command);\n        const commandName = extractCommandName(cmd);\n        const { address, connectionId, serviceId } = extractConnectionDetails(connection);\n        this.address = address;\n        this.connectionId = connectionId;\n        this.serviceId = serviceId;\n        this.requestId = command.requestId;\n        this.commandName = commandName;\n        this.duration = (0, utils_1.calculateDurationInMs)(started);\n        this.reply = maybeRedact(commandName, cmd, extractReply(command, reply));\n    }\n    /* @internal */ get hasServiceId() {\n        return !!this.serviceId;\n    }\n}\nexports.CommandSucceededEvent = CommandSucceededEvent;\n/**\n * An event indicating the failure of a given command\n * @public\n * @category Event\n */ class CommandFailedEvent {\n    /**\n     * Create a failure event\n     *\n     * @internal\n     * @param pool - the pool that originated the command\n     * @param command - the command\n     * @param error - the generated error or a server error response\n     * @param started - a high resolution tuple timestamp of when the command was first sent, to calculate duration\n     */ constructor(connection, command, error, started){\n        /** @internal */ this.name = constants_1.COMMAND_FAILED;\n        const cmd = extractCommand(command);\n        const commandName = extractCommandName(cmd);\n        const { address, connectionId, serviceId } = extractConnectionDetails(connection);\n        this.address = address;\n        this.connectionId = connectionId;\n        this.serviceId = serviceId;\n        this.requestId = command.requestId;\n        this.commandName = commandName;\n        this.duration = (0, utils_1.calculateDurationInMs)(started);\n        this.failure = maybeRedact(commandName, cmd, error);\n    }\n    /* @internal */ get hasServiceId() {\n        return !!this.serviceId;\n    }\n}\nexports.CommandFailedEvent = CommandFailedEvent;\n/**\n * Commands that we want to redact because of the sensitive nature of their contents\n * @internal\n */ exports.SENSITIVE_COMMANDS = new Set([\n    \"authenticate\",\n    \"saslStart\",\n    \"saslContinue\",\n    \"getnonce\",\n    \"createUser\",\n    \"updateUser\",\n    \"copydbgetnonce\",\n    \"copydbsaslstart\",\n    \"copydb\"\n]);\nconst HELLO_COMMANDS = new Set([\n    \"hello\",\n    constants_1.LEGACY_HELLO_COMMAND,\n    constants_1.LEGACY_HELLO_COMMAND_CAMEL_CASE\n]);\n// helper methods\nconst extractCommandName = (commandDoc)=>Object.keys(commandDoc)[0];\nconst namespace = (command)=>command.ns;\nconst collectionName = (command)=>command.ns.split(\".\")[1];\nconst maybeRedact = (commandName, commandDoc, result)=>exports.SENSITIVE_COMMANDS.has(commandName) || HELLO_COMMANDS.has(commandName) && commandDoc.speculativeAuthenticate ? {} : result;\nconst LEGACY_FIND_QUERY_MAP = {\n    $query: \"filter\",\n    $orderby: \"sort\",\n    $hint: \"hint\",\n    $comment: \"comment\",\n    $maxScan: \"maxScan\",\n    $max: \"max\",\n    $min: \"min\",\n    $returnKey: \"returnKey\",\n    $showDiskLoc: \"showRecordId\",\n    $maxTimeMS: \"maxTimeMS\",\n    $snapshot: \"snapshot\"\n};\nconst LEGACY_FIND_OPTIONS_MAP = {\n    numberToSkip: \"skip\",\n    numberToReturn: \"batchSize\",\n    returnFieldSelector: \"projection\"\n};\nconst OP_QUERY_KEYS = [\n    \"tailable\",\n    \"oplogReplay\",\n    \"noCursorTimeout\",\n    \"awaitData\",\n    \"partial\",\n    \"exhaust\"\n];\n/** Extract the actual command from the query, possibly up-converting if it's a legacy format */ function extractCommand(command) {\n    if (command instanceof commands_1.OpMsgRequest) {\n        return (0, utils_1.deepCopy)(command.command);\n    }\n    if (command.query?.$query) {\n        let result;\n        if (command.ns === \"admin.$cmd\") {\n            // up-convert legacy command\n            result = Object.assign({}, command.query.$query);\n        } else {\n            // up-convert legacy find command\n            result = {\n                find: collectionName(command)\n            };\n            Object.keys(LEGACY_FIND_QUERY_MAP).forEach((key)=>{\n                if (command.query[key] != null) {\n                    result[LEGACY_FIND_QUERY_MAP[key]] = (0, utils_1.deepCopy)(command.query[key]);\n                }\n            });\n        }\n        Object.keys(LEGACY_FIND_OPTIONS_MAP).forEach((key)=>{\n            const legacyKey = key;\n            if (command[legacyKey] != null) {\n                result[LEGACY_FIND_OPTIONS_MAP[legacyKey]] = (0, utils_1.deepCopy)(command[legacyKey]);\n            }\n        });\n        OP_QUERY_KEYS.forEach((key)=>{\n            if (command[key]) {\n                result[key] = command[key];\n            }\n        });\n        if (command.pre32Limit != null) {\n            result.limit = command.pre32Limit;\n        }\n        if (command.query.$explain) {\n            return {\n                explain: result\n            };\n        }\n        return result;\n    }\n    const clonedQuery = {};\n    const clonedCommand = {};\n    if (command.query) {\n        for(const k in command.query){\n            clonedQuery[k] = (0, utils_1.deepCopy)(command.query[k]);\n        }\n        clonedCommand.query = clonedQuery;\n    }\n    for(const k in command){\n        if (k === \"query\") continue;\n        clonedCommand[k] = (0, utils_1.deepCopy)(command[k]);\n    }\n    return command.query ? clonedQuery : clonedCommand;\n}\nfunction extractReply(command, reply) {\n    if (!reply) {\n        return reply;\n    }\n    if (command instanceof commands_1.OpMsgRequest) {\n        return (0, utils_1.deepCopy)(reply.result ? reply.result : reply);\n    }\n    // is this a legacy find command?\n    if (command.query && command.query.$query != null) {\n        return {\n            ok: 1,\n            cursor: {\n                id: (0, utils_1.deepCopy)(reply.cursorId),\n                ns: namespace(command),\n                firstBatch: (0, utils_1.deepCopy)(reply.documents)\n            }\n        };\n    }\n    return (0, utils_1.deepCopy)(reply.result ? reply.result : reply);\n}\nfunction extractConnectionDetails(connection) {\n    let connectionId;\n    if (\"id\" in connection) {\n        connectionId = connection.id;\n    }\n    return {\n        address: connection.address,\n        serviceId: connection.serviceId,\n        connectionId\n    };\n} //# sourceMappingURL=command_monitoring_events.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongodb/lib/cmap/command_monitoring_events.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongodb/lib/cmap/commands.js":
/*!***************************************************!*\
  !*** ./node_modules/mongodb/lib/cmap/commands.js ***!
  \***************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.OpCompressedRequest = exports.OpMsgResponse = exports.OpMsgRequest = exports.OpQueryResponse = exports.OpQueryRequest = void 0;\nconst BSON = __webpack_require__(/*! ../bson */ \"(ssr)/./node_modules/mongodb/lib/bson.js\");\nconst error_1 = __webpack_require__(/*! ../error */ \"(ssr)/./node_modules/mongodb/lib/error.js\");\nconst read_preference_1 = __webpack_require__(/*! ../read_preference */ \"(ssr)/./node_modules/mongodb/lib/read_preference.js\");\nconst compression_1 = __webpack_require__(/*! ./wire_protocol/compression */ \"(ssr)/./node_modules/mongodb/lib/cmap/wire_protocol/compression.js\");\nconst constants_1 = __webpack_require__(/*! ./wire_protocol/constants */ \"(ssr)/./node_modules/mongodb/lib/cmap/wire_protocol/constants.js\");\n// Incrementing request id\nlet _requestId = 0;\n// Query flags\nconst OPTS_TAILABLE_CURSOR = 2;\nconst OPTS_SECONDARY = 4;\nconst OPTS_OPLOG_REPLAY = 8;\nconst OPTS_NO_CURSOR_TIMEOUT = 16;\nconst OPTS_AWAIT_DATA = 32;\nconst OPTS_EXHAUST = 64;\nconst OPTS_PARTIAL = 128;\n// Response flags\nconst CURSOR_NOT_FOUND = 1;\nconst QUERY_FAILURE = 2;\nconst SHARD_CONFIG_STALE = 4;\nconst AWAIT_CAPABLE = 8;\n/**************************************************************\n * QUERY\n **************************************************************/ /** @internal */ class OpQueryRequest {\n    constructor(databaseName, query, options){\n        this.databaseName = databaseName;\n        this.query = query;\n        // Basic options needed to be passed in\n        // TODO(NODE-3483): Replace with MongoCommandError\n        const ns = `${databaseName}.$cmd`;\n        if (typeof databaseName !== \"string\") {\n            throw new error_1.MongoRuntimeError(\"Database name must be a string for a query\");\n        }\n        // TODO(NODE-3483): Replace with MongoCommandError\n        if (query == null) throw new error_1.MongoRuntimeError(\"A query document must be specified for query\");\n        // Validate that we are not passing 0x00 in the collection name\n        if (ns.indexOf(\"\\x00\") !== -1) {\n            // TODO(NODE-3483): Use MongoNamespace static method\n            throw new error_1.MongoRuntimeError(\"Namespace cannot contain a null character\");\n        }\n        // Basic options\n        this.ns = ns;\n        // Additional options\n        this.numberToSkip = options.numberToSkip || 0;\n        this.numberToReturn = options.numberToReturn || 0;\n        this.returnFieldSelector = options.returnFieldSelector || undefined;\n        this.requestId = options.requestId ?? OpQueryRequest.getRequestId();\n        // special case for pre-3.2 find commands, delete ASAP\n        this.pre32Limit = options.pre32Limit;\n        // Serialization option\n        this.serializeFunctions = typeof options.serializeFunctions === \"boolean\" ? options.serializeFunctions : false;\n        this.ignoreUndefined = typeof options.ignoreUndefined === \"boolean\" ? options.ignoreUndefined : false;\n        this.maxBsonSize = options.maxBsonSize || 1024 * 1024 * 16;\n        this.checkKeys = typeof options.checkKeys === \"boolean\" ? options.checkKeys : false;\n        this.batchSize = this.numberToReturn;\n        // Flags\n        this.tailable = false;\n        this.secondaryOk = typeof options.secondaryOk === \"boolean\" ? options.secondaryOk : false;\n        this.oplogReplay = false;\n        this.noCursorTimeout = false;\n        this.awaitData = false;\n        this.exhaust = false;\n        this.partial = false;\n    }\n    /** Assign next request Id. */ incRequestId() {\n        this.requestId = _requestId++;\n    }\n    /** Peek next request Id. */ nextRequestId() {\n        return _requestId + 1;\n    }\n    /** Increment then return next request Id. */ static getRequestId() {\n        return ++_requestId;\n    }\n    // Uses a single allocated buffer for the process, avoiding multiple memory allocations\n    toBin() {\n        const buffers = [];\n        let projection = null;\n        // Set up the flags\n        let flags = 0;\n        if (this.tailable) {\n            flags |= OPTS_TAILABLE_CURSOR;\n        }\n        if (this.secondaryOk) {\n            flags |= OPTS_SECONDARY;\n        }\n        if (this.oplogReplay) {\n            flags |= OPTS_OPLOG_REPLAY;\n        }\n        if (this.noCursorTimeout) {\n            flags |= OPTS_NO_CURSOR_TIMEOUT;\n        }\n        if (this.awaitData) {\n            flags |= OPTS_AWAIT_DATA;\n        }\n        if (this.exhaust) {\n            flags |= OPTS_EXHAUST;\n        }\n        if (this.partial) {\n            flags |= OPTS_PARTIAL;\n        }\n        // If batchSize is different to this.numberToReturn\n        if (this.batchSize !== this.numberToReturn) this.numberToReturn = this.batchSize;\n        // Allocate write protocol header buffer\n        const header = Buffer.alloc(4 * 4 + // Header\n        4 + // Flags\n        Buffer.byteLength(this.ns) + 1 + // namespace\n        4 + // numberToSkip\n        4 // numberToReturn\n        );\n        // Add header to buffers\n        buffers.push(header);\n        // Serialize the query\n        const query = BSON.serialize(this.query, {\n            checkKeys: this.checkKeys,\n            serializeFunctions: this.serializeFunctions,\n            ignoreUndefined: this.ignoreUndefined\n        });\n        // Add query document\n        buffers.push(query);\n        if (this.returnFieldSelector && Object.keys(this.returnFieldSelector).length > 0) {\n            // Serialize the projection document\n            projection = BSON.serialize(this.returnFieldSelector, {\n                checkKeys: this.checkKeys,\n                serializeFunctions: this.serializeFunctions,\n                ignoreUndefined: this.ignoreUndefined\n            });\n            // Add projection document\n            buffers.push(projection);\n        }\n        // Total message size\n        const totalLength = header.length + query.length + (projection ? projection.length : 0);\n        // Set up the index\n        let index = 4;\n        // Write total document length\n        header[3] = totalLength >> 24 & 0xff;\n        header[2] = totalLength >> 16 & 0xff;\n        header[1] = totalLength >> 8 & 0xff;\n        header[0] = totalLength & 0xff;\n        // Write header information requestId\n        header[index + 3] = this.requestId >> 24 & 0xff;\n        header[index + 2] = this.requestId >> 16 & 0xff;\n        header[index + 1] = this.requestId >> 8 & 0xff;\n        header[index] = this.requestId & 0xff;\n        index = index + 4;\n        // Write header information responseTo\n        header[index + 3] = 0 >> 24 & 0xff;\n        header[index + 2] = 0 >> 16 & 0xff;\n        header[index + 1] = 0 >> 8 & 0xff;\n        header[index] = 0 & 0xff;\n        index = index + 4;\n        // Write header information OP_QUERY\n        header[index + 3] = constants_1.OP_QUERY >> 24 & 0xff;\n        header[index + 2] = constants_1.OP_QUERY >> 16 & 0xff;\n        header[index + 1] = constants_1.OP_QUERY >> 8 & 0xff;\n        header[index] = constants_1.OP_QUERY & 0xff;\n        index = index + 4;\n        // Write header information flags\n        header[index + 3] = flags >> 24 & 0xff;\n        header[index + 2] = flags >> 16 & 0xff;\n        header[index + 1] = flags >> 8 & 0xff;\n        header[index] = flags & 0xff;\n        index = index + 4;\n        // Write collection name\n        index = index + header.write(this.ns, index, \"utf8\") + 1;\n        header[index - 1] = 0;\n        // Write header information flags numberToSkip\n        header[index + 3] = this.numberToSkip >> 24 & 0xff;\n        header[index + 2] = this.numberToSkip >> 16 & 0xff;\n        header[index + 1] = this.numberToSkip >> 8 & 0xff;\n        header[index] = this.numberToSkip & 0xff;\n        index = index + 4;\n        // Write header information flags numberToReturn\n        header[index + 3] = this.numberToReturn >> 24 & 0xff;\n        header[index + 2] = this.numberToReturn >> 16 & 0xff;\n        header[index + 1] = this.numberToReturn >> 8 & 0xff;\n        header[index] = this.numberToReturn & 0xff;\n        index = index + 4;\n        // Return the buffers\n        return buffers;\n    }\n}\nexports.OpQueryRequest = OpQueryRequest;\n/** @internal */ class OpQueryResponse {\n    constructor(message, msgHeader, msgBody, opts){\n        this.documents = new Array(0);\n        this.parsed = false;\n        this.raw = message;\n        this.data = msgBody;\n        this.opts = opts ?? {\n            useBigInt64: false,\n            promoteLongs: true,\n            promoteValues: true,\n            promoteBuffers: false,\n            bsonRegExp: false\n        };\n        // Read the message header\n        this.length = msgHeader.length;\n        this.requestId = msgHeader.requestId;\n        this.responseTo = msgHeader.responseTo;\n        this.opCode = msgHeader.opCode;\n        this.fromCompressed = msgHeader.fromCompressed;\n        // Flag values\n        this.useBigInt64 = typeof this.opts.useBigInt64 === \"boolean\" ? this.opts.useBigInt64 : false;\n        this.promoteLongs = typeof this.opts.promoteLongs === \"boolean\" ? this.opts.promoteLongs : true;\n        this.promoteValues = typeof this.opts.promoteValues === \"boolean\" ? this.opts.promoteValues : true;\n        this.promoteBuffers = typeof this.opts.promoteBuffers === \"boolean\" ? this.opts.promoteBuffers : false;\n        this.bsonRegExp = typeof this.opts.bsonRegExp === \"boolean\" ? this.opts.bsonRegExp : false;\n    }\n    isParsed() {\n        return this.parsed;\n    }\n    parse(options) {\n        // Don't parse again if not needed\n        if (this.parsed) return;\n        options = options ?? {};\n        // Allow the return of raw documents instead of parsing\n        const raw = options.raw || false;\n        const documentsReturnedIn = options.documentsReturnedIn || null;\n        const useBigInt64 = options.useBigInt64 ?? this.opts.useBigInt64;\n        const promoteLongs = options.promoteLongs ?? this.opts.promoteLongs;\n        const promoteValues = options.promoteValues ?? this.opts.promoteValues;\n        const promoteBuffers = options.promoteBuffers ?? this.opts.promoteBuffers;\n        const bsonRegExp = options.bsonRegExp ?? this.opts.bsonRegExp;\n        let bsonSize;\n        // Set up the options\n        const _options = {\n            useBigInt64,\n            promoteLongs,\n            promoteValues,\n            promoteBuffers,\n            bsonRegExp\n        };\n        // Position within OP_REPLY at which documents start\n        // (See https://www.mongodb.com/docs/manual/reference/mongodb-wire-protocol/#wire-op-reply)\n        this.index = 20;\n        // Read the message body\n        this.responseFlags = this.data.readInt32LE(0);\n        this.cursorId = new BSON.Long(this.data.readInt32LE(4), this.data.readInt32LE(8));\n        this.startingFrom = this.data.readInt32LE(12);\n        this.numberReturned = this.data.readInt32LE(16);\n        // Preallocate document array\n        this.documents = new Array(this.numberReturned);\n        this.cursorNotFound = (this.responseFlags & CURSOR_NOT_FOUND) !== 0;\n        this.queryFailure = (this.responseFlags & QUERY_FAILURE) !== 0;\n        this.shardConfigStale = (this.responseFlags & SHARD_CONFIG_STALE) !== 0;\n        this.awaitCapable = (this.responseFlags & AWAIT_CAPABLE) !== 0;\n        // Parse Body\n        for(let i = 0; i < this.numberReturned; i++){\n            bsonSize = this.data[this.index] | this.data[this.index + 1] << 8 | this.data[this.index + 2] << 16 | this.data[this.index + 3] << 24;\n            // If we have raw results specified slice the return document\n            if (raw) {\n                this.documents[i] = this.data.slice(this.index, this.index + bsonSize);\n            } else {\n                this.documents[i] = BSON.deserialize(this.data.slice(this.index, this.index + bsonSize), _options);\n            }\n            // Adjust the index\n            this.index = this.index + bsonSize;\n        }\n        if (this.documents.length === 1 && documentsReturnedIn != null && raw) {\n            const fieldsAsRaw = {};\n            fieldsAsRaw[documentsReturnedIn] = true;\n            _options.fieldsAsRaw = fieldsAsRaw;\n            const doc = BSON.deserialize(this.documents[0], _options);\n            this.documents = [\n                doc\n            ];\n        }\n        // Set parsed\n        this.parsed = true;\n    }\n}\nexports.OpQueryResponse = OpQueryResponse;\n// Implementation of OP_MSG spec:\n// https://github.com/mongodb/specifications/blob/master/source/message/OP_MSG.rst\n//\n// struct Section {\n//   uint8 payloadType;\n//   union payload {\n//       document  document; // payloadType == 0\n//       struct sequence { // payloadType == 1\n//           int32      size;\n//           cstring    identifier;\n//           document*  documents;\n//       };\n//   };\n// };\n// struct OP_MSG {\n//   struct MsgHeader {\n//       int32  messageLength;\n//       int32  requestID;\n//       int32  responseTo;\n//       int32  opCode = 2013;\n//   };\n//   uint32      flagBits;\n//   Section+    sections;\n//   [uint32     checksum;]\n// };\n// Msg Flags\nconst OPTS_CHECKSUM_PRESENT = 1;\nconst OPTS_MORE_TO_COME = 2;\nconst OPTS_EXHAUST_ALLOWED = 1 << 16;\n/** @internal */ class OpMsgRequest {\n    constructor(databaseName, command, options){\n        this.databaseName = databaseName;\n        this.command = command;\n        this.options = options;\n        // Basic options needed to be passed in\n        if (command == null) throw new error_1.MongoInvalidArgumentError(\"Query document must be specified for query\");\n        // Basic options\n        this.command.$db = databaseName;\n        if (options.readPreference && options.readPreference.mode !== read_preference_1.ReadPreference.PRIMARY) {\n            this.command.$readPreference = options.readPreference.toJSON();\n        }\n        // Ensure empty options\n        this.options = options ?? {};\n        // Additional options\n        this.requestId = options.requestId ? options.requestId : OpMsgRequest.getRequestId();\n        // Serialization option\n        this.serializeFunctions = typeof options.serializeFunctions === \"boolean\" ? options.serializeFunctions : false;\n        this.ignoreUndefined = typeof options.ignoreUndefined === \"boolean\" ? options.ignoreUndefined : false;\n        this.checkKeys = typeof options.checkKeys === \"boolean\" ? options.checkKeys : false;\n        this.maxBsonSize = options.maxBsonSize || 1024 * 1024 * 16;\n        // flags\n        this.checksumPresent = false;\n        this.moreToCome = options.moreToCome || false;\n        this.exhaustAllowed = typeof options.exhaustAllowed === \"boolean\" ? options.exhaustAllowed : false;\n    }\n    toBin() {\n        const buffers = [];\n        let flags = 0;\n        if (this.checksumPresent) {\n            flags |= OPTS_CHECKSUM_PRESENT;\n        }\n        if (this.moreToCome) {\n            flags |= OPTS_MORE_TO_COME;\n        }\n        if (this.exhaustAllowed) {\n            flags |= OPTS_EXHAUST_ALLOWED;\n        }\n        const header = Buffer.alloc(4 * 4 + // Header\n        4 // Flags\n        );\n        buffers.push(header);\n        let totalLength = header.length;\n        const command = this.command;\n        totalLength += this.makeDocumentSegment(buffers, command);\n        header.writeInt32LE(totalLength, 0); // messageLength\n        header.writeInt32LE(this.requestId, 4); // requestID\n        header.writeInt32LE(0, 8); // responseTo\n        header.writeInt32LE(constants_1.OP_MSG, 12); // opCode\n        header.writeUInt32LE(flags, 16); // flags\n        return buffers;\n    }\n    makeDocumentSegment(buffers, document) {\n        const payloadTypeBuffer = Buffer.alloc(1);\n        payloadTypeBuffer[0] = 0;\n        const documentBuffer = this.serializeBson(document);\n        buffers.push(payloadTypeBuffer);\n        buffers.push(documentBuffer);\n        return payloadTypeBuffer.length + documentBuffer.length;\n    }\n    serializeBson(document) {\n        return BSON.serialize(document, {\n            checkKeys: this.checkKeys,\n            serializeFunctions: this.serializeFunctions,\n            ignoreUndefined: this.ignoreUndefined\n        });\n    }\n    static getRequestId() {\n        _requestId = _requestId + 1 & 0x7fffffff;\n        return _requestId;\n    }\n}\nexports.OpMsgRequest = OpMsgRequest;\n/** @internal */ class OpMsgResponse {\n    constructor(message, msgHeader, msgBody, opts){\n        this.parsed = false;\n        this.raw = message;\n        this.data = msgBody;\n        this.opts = opts ?? {\n            useBigInt64: false,\n            promoteLongs: true,\n            promoteValues: true,\n            promoteBuffers: false,\n            bsonRegExp: false\n        };\n        // Read the message header\n        this.length = msgHeader.length;\n        this.requestId = msgHeader.requestId;\n        this.responseTo = msgHeader.responseTo;\n        this.opCode = msgHeader.opCode;\n        this.fromCompressed = msgHeader.fromCompressed;\n        // Read response flags\n        this.responseFlags = msgBody.readInt32LE(0);\n        this.checksumPresent = (this.responseFlags & OPTS_CHECKSUM_PRESENT) !== 0;\n        this.moreToCome = (this.responseFlags & OPTS_MORE_TO_COME) !== 0;\n        this.exhaustAllowed = (this.responseFlags & OPTS_EXHAUST_ALLOWED) !== 0;\n        this.useBigInt64 = typeof this.opts.useBigInt64 === \"boolean\" ? this.opts.useBigInt64 : false;\n        this.promoteLongs = typeof this.opts.promoteLongs === \"boolean\" ? this.opts.promoteLongs : true;\n        this.promoteValues = typeof this.opts.promoteValues === \"boolean\" ? this.opts.promoteValues : true;\n        this.promoteBuffers = typeof this.opts.promoteBuffers === \"boolean\" ? this.opts.promoteBuffers : false;\n        this.bsonRegExp = typeof this.opts.bsonRegExp === \"boolean\" ? this.opts.bsonRegExp : false;\n        this.documents = [];\n    }\n    isParsed() {\n        return this.parsed;\n    }\n    parse(options) {\n        // Don't parse again if not needed\n        if (this.parsed) return;\n        options = options ?? {};\n        this.index = 4;\n        // Allow the return of raw documents instead of parsing\n        const raw = options.raw || false;\n        const documentsReturnedIn = options.documentsReturnedIn || null;\n        const useBigInt64 = options.useBigInt64 ?? this.opts.useBigInt64;\n        const promoteLongs = options.promoteLongs ?? this.opts.promoteLongs;\n        const promoteValues = options.promoteValues ?? this.opts.promoteValues;\n        const promoteBuffers = options.promoteBuffers ?? this.opts.promoteBuffers;\n        const bsonRegExp = options.bsonRegExp ?? this.opts.bsonRegExp;\n        const validation = this.parseBsonSerializationOptions(options);\n        // Set up the options\n        const bsonOptions = {\n            useBigInt64,\n            promoteLongs,\n            promoteValues,\n            promoteBuffers,\n            bsonRegExp,\n            validation\n        };\n        while(this.index < this.data.length){\n            const payloadType = this.data.readUInt8(this.index++);\n            if (payloadType === 0) {\n                const bsonSize = this.data.readUInt32LE(this.index);\n                const bin = this.data.slice(this.index, this.index + bsonSize);\n                this.documents.push(raw ? bin : BSON.deserialize(bin, bsonOptions));\n                this.index += bsonSize;\n            } else if (payloadType === 1) {\n                // It was decided that no driver makes use of payload type 1\n                // TODO(NODE-3483): Replace with MongoDeprecationError\n                throw new error_1.MongoRuntimeError(\"OP_MSG Payload Type 1 detected unsupported protocol\");\n            }\n        }\n        if (this.documents.length === 1 && documentsReturnedIn != null && raw) {\n            const fieldsAsRaw = {};\n            fieldsAsRaw[documentsReturnedIn] = true;\n            bsonOptions.fieldsAsRaw = fieldsAsRaw;\n            const doc = BSON.deserialize(this.documents[0], bsonOptions);\n            this.documents = [\n                doc\n            ];\n        }\n        this.parsed = true;\n    }\n    parseBsonSerializationOptions({ enableUtf8Validation }) {\n        if (enableUtf8Validation === false) {\n            return {\n                utf8: false\n            };\n        }\n        return {\n            utf8: {\n                writeErrors: false\n            }\n        };\n    }\n}\nexports.OpMsgResponse = OpMsgResponse;\nconst MESSAGE_HEADER_SIZE = 16;\nconst COMPRESSION_DETAILS_SIZE = 9; // originalOpcode + uncompressedSize, compressorID\n/**\n * @internal\n *\n * An OP_COMPRESSED request wraps either an OP_QUERY or OP_MSG message.\n */ class OpCompressedRequest {\n    constructor(command, options){\n        this.command = command;\n        this.options = options;\n    }\n    // Return whether a command contains an uncompressible command term\n    // Will return true if command contains no uncompressible command terms\n    static canCompress(command) {\n        const commandDoc = command instanceof OpMsgRequest ? command.command : command.query;\n        const commandName = Object.keys(commandDoc)[0];\n        return !compression_1.uncompressibleCommands.has(commandName);\n    }\n    async toBin() {\n        const concatenatedOriginalCommandBuffer = Buffer.concat(this.command.toBin());\n        // otherwise, compress the message\n        const messageToBeCompressed = concatenatedOriginalCommandBuffer.slice(MESSAGE_HEADER_SIZE);\n        // Extract information needed for OP_COMPRESSED from the uncompressed message\n        const originalCommandOpCode = concatenatedOriginalCommandBuffer.readInt32LE(12);\n        // Compress the message body\n        const compressedMessage = await (0, compression_1.compress)(this.options, messageToBeCompressed);\n        // Create the msgHeader of OP_COMPRESSED\n        const msgHeader = Buffer.alloc(MESSAGE_HEADER_SIZE);\n        msgHeader.writeInt32LE(MESSAGE_HEADER_SIZE + COMPRESSION_DETAILS_SIZE + compressedMessage.length, 0); // messageLength\n        msgHeader.writeInt32LE(this.command.requestId, 4); // requestID\n        msgHeader.writeInt32LE(0, 8); // responseTo (zero)\n        msgHeader.writeInt32LE(constants_1.OP_COMPRESSED, 12); // opCode\n        // Create the compression details of OP_COMPRESSED\n        const compressionDetails = Buffer.alloc(COMPRESSION_DETAILS_SIZE);\n        compressionDetails.writeInt32LE(originalCommandOpCode, 0); // originalOpcode\n        compressionDetails.writeInt32LE(messageToBeCompressed.length, 4); // Size of the uncompressed compressedMessage, excluding the MsgHeader\n        compressionDetails.writeUInt8(compression_1.Compressor[this.options.agreedCompressor], 8); // compressorID\n        return [\n            msgHeader,\n            compressionDetails,\n            compressedMessage\n        ];\n    }\n}\nexports.OpCompressedRequest = OpCompressedRequest; //# sourceMappingURL=commands.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongodb/lib/cmap/commands.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongodb/lib/cmap/connect.js":
/*!**************************************************!*\
  !*** ./node_modules/mongodb/lib/cmap/connect.js ***!
  \**************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.LEGAL_TCP_SOCKET_OPTIONS = exports.LEGAL_TLS_SOCKET_OPTIONS = exports.prepareHandshakeDocument = exports.connect = exports.AUTH_PROVIDERS = void 0;\nconst net = __webpack_require__(/*! net */ \"net\");\nconst tls = __webpack_require__(/*! tls */ \"tls\");\nconst constants_1 = __webpack_require__(/*! ../constants */ \"(ssr)/./node_modules/mongodb/lib/constants.js\");\nconst deps_1 = __webpack_require__(/*! ../deps */ \"(ssr)/./node_modules/mongodb/lib/deps.js\");\nconst error_1 = __webpack_require__(/*! ../error */ \"(ssr)/./node_modules/mongodb/lib/error.js\");\nconst utils_1 = __webpack_require__(/*! ../utils */ \"(ssr)/./node_modules/mongodb/lib/utils.js\");\nconst auth_provider_1 = __webpack_require__(/*! ./auth/auth_provider */ \"(ssr)/./node_modules/mongodb/lib/cmap/auth/auth_provider.js\");\nconst gssapi_1 = __webpack_require__(/*! ./auth/gssapi */ \"(ssr)/./node_modules/mongodb/lib/cmap/auth/gssapi.js\");\nconst mongocr_1 = __webpack_require__(/*! ./auth/mongocr */ \"(ssr)/./node_modules/mongodb/lib/cmap/auth/mongocr.js\");\nconst mongodb_aws_1 = __webpack_require__(/*! ./auth/mongodb_aws */ \"(ssr)/./node_modules/mongodb/lib/cmap/auth/mongodb_aws.js\");\nconst mongodb_oidc_1 = __webpack_require__(/*! ./auth/mongodb_oidc */ \"(ssr)/./node_modules/mongodb/lib/cmap/auth/mongodb_oidc.js\");\nconst plain_1 = __webpack_require__(/*! ./auth/plain */ \"(ssr)/./node_modules/mongodb/lib/cmap/auth/plain.js\");\nconst providers_1 = __webpack_require__(/*! ./auth/providers */ \"(ssr)/./node_modules/mongodb/lib/cmap/auth/providers.js\");\nconst scram_1 = __webpack_require__(/*! ./auth/scram */ \"(ssr)/./node_modules/mongodb/lib/cmap/auth/scram.js\");\nconst x509_1 = __webpack_require__(/*! ./auth/x509 */ \"(ssr)/./node_modules/mongodb/lib/cmap/auth/x509.js\");\nconst connection_1 = __webpack_require__(/*! ./connection */ \"(ssr)/./node_modules/mongodb/lib/cmap/connection.js\");\nconst constants_2 = __webpack_require__(/*! ./wire_protocol/constants */ \"(ssr)/./node_modules/mongodb/lib/cmap/wire_protocol/constants.js\");\n/** @internal */ exports.AUTH_PROVIDERS = new Map([\n    [\n        providers_1.AuthMechanism.MONGODB_AWS,\n        new mongodb_aws_1.MongoDBAWS()\n    ],\n    [\n        providers_1.AuthMechanism.MONGODB_CR,\n        new mongocr_1.MongoCR()\n    ],\n    [\n        providers_1.AuthMechanism.MONGODB_GSSAPI,\n        new gssapi_1.GSSAPI()\n    ],\n    [\n        providers_1.AuthMechanism.MONGODB_OIDC,\n        new mongodb_oidc_1.MongoDBOIDC()\n    ],\n    [\n        providers_1.AuthMechanism.MONGODB_PLAIN,\n        new plain_1.Plain()\n    ],\n    [\n        providers_1.AuthMechanism.MONGODB_SCRAM_SHA1,\n        new scram_1.ScramSHA1()\n    ],\n    [\n        providers_1.AuthMechanism.MONGODB_SCRAM_SHA256,\n        new scram_1.ScramSHA256()\n    ],\n    [\n        providers_1.AuthMechanism.MONGODB_X509,\n        new x509_1.X509()\n    ]\n]);\nfunction connect(options, callback) {\n    makeConnection({\n        ...options,\n        existingSocket: undefined\n    }, (err, socket)=>{\n        if (err || !socket) {\n            return callback(err);\n        }\n        let ConnectionType = options.connectionType ?? connection_1.Connection;\n        if (options.autoEncrypter) {\n            ConnectionType = connection_1.CryptoConnection;\n        }\n        const connection = new ConnectionType(socket, options);\n        performInitialHandshake(connection, options).then(()=>callback(undefined, connection), (error)=>{\n            connection.destroy({\n                force: false\n            });\n            callback(error);\n        });\n    });\n}\nexports.connect = connect;\nfunction checkSupportedServer(hello, options) {\n    const maxWireVersion = Number(hello.maxWireVersion);\n    const minWireVersion = Number(hello.minWireVersion);\n    const serverVersionHighEnough = !Number.isNaN(maxWireVersion) && maxWireVersion >= constants_2.MIN_SUPPORTED_WIRE_VERSION;\n    const serverVersionLowEnough = !Number.isNaN(minWireVersion) && minWireVersion <= constants_2.MAX_SUPPORTED_WIRE_VERSION;\n    if (serverVersionHighEnough) {\n        if (serverVersionLowEnough) {\n            return null;\n        }\n        const message = `Server at ${options.hostAddress} reports minimum wire version ${JSON.stringify(hello.minWireVersion)}, but this version of the Node.js Driver requires at most ${constants_2.MAX_SUPPORTED_WIRE_VERSION} (MongoDB ${constants_2.MAX_SUPPORTED_SERVER_VERSION})`;\n        return new error_1.MongoCompatibilityError(message);\n    }\n    const message = `Server at ${options.hostAddress} reports maximum wire version ${JSON.stringify(hello.maxWireVersion) ?? 0}, but this version of the Node.js Driver requires at least ${constants_2.MIN_SUPPORTED_WIRE_VERSION} (MongoDB ${constants_2.MIN_SUPPORTED_SERVER_VERSION})`;\n    return new error_1.MongoCompatibilityError(message);\n}\nasync function performInitialHandshake(conn, options) {\n    const credentials = options.credentials;\n    if (credentials) {\n        if (!(credentials.mechanism === providers_1.AuthMechanism.MONGODB_DEFAULT) && !exports.AUTH_PROVIDERS.get(credentials.mechanism)) {\n            throw new error_1.MongoInvalidArgumentError(`AuthMechanism '${credentials.mechanism}' not supported`);\n        }\n    }\n    const authContext = new auth_provider_1.AuthContext(conn, credentials, options);\n    conn.authContext = authContext;\n    const handshakeDoc = await prepareHandshakeDocument(authContext);\n    // @ts-expect-error: TODO(NODE-5141): The options need to be filtered properly, Connection options differ from Command options\n    const handshakeOptions = {\n        ...options\n    };\n    if (typeof options.connectTimeoutMS === \"number\") {\n        // The handshake technically is a monitoring check, so its socket timeout should be connectTimeoutMS\n        handshakeOptions.socketTimeoutMS = options.connectTimeoutMS;\n    }\n    const start = new Date().getTime();\n    const response = await conn.commandAsync((0, utils_1.ns)(\"admin.$cmd\"), handshakeDoc, handshakeOptions);\n    if (!(\"isWritablePrimary\" in response)) {\n        // Provide hello-style response document.\n        response.isWritablePrimary = response[constants_1.LEGACY_HELLO_COMMAND];\n    }\n    if (response.helloOk) {\n        conn.helloOk = true;\n    }\n    const supportedServerErr = checkSupportedServer(response, options);\n    if (supportedServerErr) {\n        throw supportedServerErr;\n    }\n    if (options.loadBalanced) {\n        if (!response.serviceId) {\n            throw new error_1.MongoCompatibilityError(\"Driver attempted to initialize in load balancing mode, \" + \"but the server does not support this mode.\");\n        }\n    }\n    // NOTE: This is metadata attached to the connection while porting away from\n    //       handshake being done in the `Server` class. Likely, it should be\n    //       relocated, or at very least restructured.\n    conn.hello = response;\n    conn.lastHelloMS = new Date().getTime() - start;\n    if (!response.arbiterOnly && credentials) {\n        // store the response on auth context\n        authContext.response = response;\n        const resolvedCredentials = credentials.resolveAuthMechanism(response);\n        const provider = exports.AUTH_PROVIDERS.get(resolvedCredentials.mechanism);\n        if (!provider) {\n            throw new error_1.MongoInvalidArgumentError(`No AuthProvider for ${resolvedCredentials.mechanism} defined.`);\n        }\n        try {\n            await provider.auth(authContext);\n        } catch (error) {\n            if (error instanceof error_1.MongoError) {\n                error.addErrorLabel(error_1.MongoErrorLabel.HandshakeError);\n                if ((0, error_1.needsRetryableWriteLabel)(error, response.maxWireVersion)) {\n                    error.addErrorLabel(error_1.MongoErrorLabel.RetryableWriteError);\n                }\n            }\n            throw error;\n        }\n    }\n}\n/**\n * @internal\n *\n * This function is only exposed for testing purposes.\n */ async function prepareHandshakeDocument(authContext) {\n    const options = authContext.options;\n    const compressors = options.compressors ? options.compressors : [];\n    const { serverApi } = authContext.connection;\n    const handshakeDoc = {\n        [serverApi?.version || options.loadBalanced === true ? \"hello\" : constants_1.LEGACY_HELLO_COMMAND]: 1,\n        helloOk: true,\n        client: options.metadata,\n        compression: compressors\n    };\n    if (options.loadBalanced === true) {\n        handshakeDoc.loadBalanced = true;\n    }\n    const credentials = authContext.credentials;\n    if (credentials) {\n        if (credentials.mechanism === providers_1.AuthMechanism.MONGODB_DEFAULT && credentials.username) {\n            handshakeDoc.saslSupportedMechs = `${credentials.source}.${credentials.username}`;\n            const provider = exports.AUTH_PROVIDERS.get(providers_1.AuthMechanism.MONGODB_SCRAM_SHA256);\n            if (!provider) {\n                // This auth mechanism is always present.\n                throw new error_1.MongoInvalidArgumentError(`No AuthProvider for ${providers_1.AuthMechanism.MONGODB_SCRAM_SHA256} defined.`);\n            }\n            return provider.prepare(handshakeDoc, authContext);\n        }\n        const provider = exports.AUTH_PROVIDERS.get(credentials.mechanism);\n        if (!provider) {\n            throw new error_1.MongoInvalidArgumentError(`No AuthProvider for ${credentials.mechanism} defined.`);\n        }\n        return provider.prepare(handshakeDoc, authContext);\n    }\n    return handshakeDoc;\n}\nexports.prepareHandshakeDocument = prepareHandshakeDocument;\n/** @public */ exports.LEGAL_TLS_SOCKET_OPTIONS = [\n    \"ALPNProtocols\",\n    \"ca\",\n    \"cert\",\n    \"checkServerIdentity\",\n    \"ciphers\",\n    \"crl\",\n    \"ecdhCurve\",\n    \"key\",\n    \"minDHSize\",\n    \"passphrase\",\n    \"pfx\",\n    \"rejectUnauthorized\",\n    \"secureContext\",\n    \"secureProtocol\",\n    \"servername\",\n    \"session\"\n];\n/** @public */ exports.LEGAL_TCP_SOCKET_OPTIONS = [\n    \"family\",\n    \"hints\",\n    \"localAddress\",\n    \"localPort\",\n    \"lookup\"\n];\nfunction parseConnectOptions(options) {\n    const hostAddress = options.hostAddress;\n    if (!hostAddress) throw new error_1.MongoInvalidArgumentError('Option \"hostAddress\" is required');\n    const result = {};\n    for (const name of exports.LEGAL_TCP_SOCKET_OPTIONS){\n        if (options[name] != null) {\n            result[name] = options[name];\n        }\n    }\n    if (typeof hostAddress.socketPath === \"string\") {\n        result.path = hostAddress.socketPath;\n        return result;\n    } else if (typeof hostAddress.host === \"string\") {\n        result.host = hostAddress.host;\n        result.port = hostAddress.port;\n        return result;\n    } else {\n        // This should never happen since we set up HostAddresses\n        // But if we don't throw here the socket could hang until timeout\n        // TODO(NODE-3483)\n        throw new error_1.MongoRuntimeError(`Unexpected HostAddress ${JSON.stringify(hostAddress)}`);\n    }\n}\nfunction parseSslOptions(options) {\n    const result = parseConnectOptions(options);\n    // Merge in valid SSL options\n    for (const name of exports.LEGAL_TLS_SOCKET_OPTIONS){\n        if (options[name] != null) {\n            result[name] = options[name];\n        }\n    }\n    if (options.existingSocket) {\n        result.socket = options.existingSocket;\n    }\n    // Set default sni servername to be the same as host\n    if (result.servername == null && result.host && !net.isIP(result.host)) {\n        result.servername = result.host;\n    }\n    return result;\n}\nconst SOCKET_ERROR_EVENT_LIST = [\n    \"error\",\n    \"close\",\n    \"timeout\",\n    \"parseError\"\n];\nconst SOCKET_ERROR_EVENTS = new Set(SOCKET_ERROR_EVENT_LIST);\nfunction makeConnection(options, _callback) {\n    const useTLS = options.tls ?? false;\n    const noDelay = options.noDelay ?? true;\n    const connectTimeoutMS = options.connectTimeoutMS ?? 30000;\n    const rejectUnauthorized = options.rejectUnauthorized ?? true;\n    const existingSocket = options.existingSocket;\n    let socket;\n    const callback = function(err, ret) {\n        if (err && socket) {\n            socket.destroy();\n        }\n        _callback(err, ret);\n    };\n    if (options.proxyHost != null) {\n        // Currently, only Socks5 is supported.\n        return makeSocks5Connection({\n            ...options,\n            connectTimeoutMS\n        }, callback);\n    }\n    if (useTLS) {\n        const tlsSocket = tls.connect(parseSslOptions(options));\n        if (typeof tlsSocket.disableRenegotiation === \"function\") {\n            tlsSocket.disableRenegotiation();\n        }\n        socket = tlsSocket;\n    } else if (existingSocket) {\n        // In the TLS case, parseSslOptions() sets options.socket to existingSocket,\n        // so we only need to handle the non-TLS case here (where existingSocket\n        // gives us all we need out of the box).\n        socket = existingSocket;\n    } else {\n        socket = net.createConnection(parseConnectOptions(options));\n    }\n    socket.setKeepAlive(true, 300000);\n    socket.setTimeout(connectTimeoutMS);\n    socket.setNoDelay(noDelay);\n    const connectEvent = useTLS ? \"secureConnect\" : \"connect\";\n    let cancellationHandler;\n    function errorHandler(eventName) {\n        return (err)=>{\n            SOCKET_ERROR_EVENTS.forEach((event)=>socket.removeAllListeners(event));\n            if (cancellationHandler && options.cancellationToken) {\n                options.cancellationToken.removeListener(\"cancel\", cancellationHandler);\n            }\n            socket.removeListener(connectEvent, connectHandler);\n            callback(connectionFailureError(eventName, err));\n        };\n    }\n    function connectHandler() {\n        SOCKET_ERROR_EVENTS.forEach((event)=>socket.removeAllListeners(event));\n        if (cancellationHandler && options.cancellationToken) {\n            options.cancellationToken.removeListener(\"cancel\", cancellationHandler);\n        }\n        if (\"authorizationError\" in socket) {\n            if (socket.authorizationError && rejectUnauthorized) {\n                // TODO(NODE-5192): wrap this with a MongoError subclass\n                return callback(socket.authorizationError);\n            }\n        }\n        socket.setTimeout(0);\n        callback(undefined, socket);\n    }\n    SOCKET_ERROR_EVENTS.forEach((event)=>socket.once(event, errorHandler(event)));\n    if (options.cancellationToken) {\n        cancellationHandler = errorHandler(\"cancel\");\n        options.cancellationToken.once(\"cancel\", cancellationHandler);\n    }\n    if (existingSocket) {\n        process.nextTick(connectHandler);\n    } else {\n        socket.once(connectEvent, connectHandler);\n    }\n}\nlet socks = null;\nfunction loadSocks() {\n    if (socks == null) {\n        const socksImport = (0, deps_1.getSocks)();\n        if (\"kModuleError\" in socksImport) {\n            throw socksImport.kModuleError;\n        }\n        socks = socksImport;\n    }\n    return socks;\n}\nfunction makeSocks5Connection(options, callback) {\n    const hostAddress = utils_1.HostAddress.fromHostPort(options.proxyHost ?? \"\", options.proxyPort ?? 1080);\n    // First, connect to the proxy server itself:\n    makeConnection({\n        ...options,\n        hostAddress,\n        tls: false,\n        proxyHost: undefined\n    }, (err, rawSocket)=>{\n        if (err || !rawSocket) {\n            return callback(err);\n        }\n        const destination = parseConnectOptions(options);\n        if (typeof destination.host !== \"string\" || typeof destination.port !== \"number\") {\n            return callback(new error_1.MongoInvalidArgumentError(\"Can only make Socks5 connections to TCP hosts\"));\n        }\n        try {\n            socks ??= loadSocks();\n        } catch (error) {\n            return callback(error);\n        }\n        // Then, establish the Socks5 proxy connection:\n        socks.SocksClient.createConnection({\n            existing_socket: rawSocket,\n            timeout: options.connectTimeoutMS,\n            command: \"connect\",\n            destination: {\n                host: destination.host,\n                port: destination.port\n            },\n            proxy: {\n                // host and port are ignored because we pass existing_socket\n                host: \"iLoveJavaScript\",\n                port: 0,\n                type: 5,\n                userId: options.proxyUsername || undefined,\n                password: options.proxyPassword || undefined\n            }\n        }).then(({ socket })=>{\n            // Finally, now treat the resulting duplex stream as the\n            // socket over which we send and receive wire protocol messages:\n            makeConnection({\n                ...options,\n                existingSocket: socket,\n                proxyHost: undefined\n            }, callback);\n        }, (error)=>callback(connectionFailureError(\"error\", error)));\n    });\n}\nfunction connectionFailureError(type, err) {\n    switch(type){\n        case \"error\":\n            return new error_1.MongoNetworkError(error_1.MongoError.buildErrorMessage(err), {\n                cause: err\n            });\n        case \"timeout\":\n            return new error_1.MongoNetworkTimeoutError(\"connection timed out\");\n        case \"close\":\n            return new error_1.MongoNetworkError(\"connection closed\");\n        case \"cancel\":\n            return new error_1.MongoNetworkError(\"connection establishment was cancelled\");\n        default:\n            return new error_1.MongoNetworkError(\"unknown network error\");\n    }\n} //# sourceMappingURL=connect.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongodb/lib/cmap/connect.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongodb/lib/cmap/connection.js":
/*!*****************************************************!*\
  !*** ./node_modules/mongodb/lib/cmap/connection.js ***!
  \*****************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.read = exports.readMany = exports.writeCommand = exports.readWireProtocolMessages = exports.ModernConnection = exports.hasSessionSupport = exports.CryptoConnection = exports.Connection = void 0;\nconst events_1 = __webpack_require__(/*! events */ \"events\");\nconst stream_1 = __webpack_require__(/*! stream */ \"stream\");\nconst timers_1 = __webpack_require__(/*! timers */ \"timers\");\nconst util_1 = __webpack_require__(/*! util */ \"util\");\nconst constants_1 = __webpack_require__(/*! ../constants */ \"(ssr)/./node_modules/mongodb/lib/constants.js\");\nconst error_1 = __webpack_require__(/*! ../error */ \"(ssr)/./node_modules/mongodb/lib/error.js\");\nconst mongo_types_1 = __webpack_require__(/*! ../mongo_types */ \"(ssr)/./node_modules/mongodb/lib/mongo_types.js\");\nconst sessions_1 = __webpack_require__(/*! ../sessions */ \"(ssr)/./node_modules/mongodb/lib/sessions.js\");\nconst utils_1 = __webpack_require__(/*! ../utils */ \"(ssr)/./node_modules/mongodb/lib/utils.js\");\nconst command_monitoring_events_1 = __webpack_require__(/*! ./command_monitoring_events */ \"(ssr)/./node_modules/mongodb/lib/cmap/command_monitoring_events.js\");\nconst commands_1 = __webpack_require__(/*! ./commands */ \"(ssr)/./node_modules/mongodb/lib/cmap/commands.js\");\nconst message_stream_1 = __webpack_require__(/*! ./message_stream */ \"(ssr)/./node_modules/mongodb/lib/cmap/message_stream.js\");\nconst stream_description_1 = __webpack_require__(/*! ./stream_description */ \"(ssr)/./node_modules/mongodb/lib/cmap/stream_description.js\");\nconst compression_1 = __webpack_require__(/*! ./wire_protocol/compression */ \"(ssr)/./node_modules/mongodb/lib/cmap/wire_protocol/compression.js\");\nconst shared_1 = __webpack_require__(/*! ./wire_protocol/shared */ \"(ssr)/./node_modules/mongodb/lib/cmap/wire_protocol/shared.js\");\n/** @internal */ const kStream = Symbol(\"stream\");\n/** @internal */ const kQueue = Symbol(\"queue\");\n/** @internal */ const kMessageStream = Symbol(\"messageStream\");\n/** @internal */ const kGeneration = Symbol(\"generation\");\n/** @internal */ const kLastUseTime = Symbol(\"lastUseTime\");\n/** @internal */ const kClusterTime = Symbol(\"clusterTime\");\n/** @internal */ const kDescription = Symbol(\"description\");\n/** @internal */ const kHello = Symbol(\"hello\");\n/** @internal */ const kAutoEncrypter = Symbol(\"autoEncrypter\");\n/** @internal */ const kDelayedTimeoutId = Symbol(\"delayedTimeoutId\");\nconst INVALID_QUEUE_SIZE = \"Connection internal queue contains more than 1 operation description\";\n/** @internal */ class Connection extends mongo_types_1.TypedEventEmitter {\n    constructor(stream, options){\n        super();\n        this.commandAsync = (0, util_1.promisify)((ns, cmd, options, callback)=>this.command(ns, cmd, options, callback));\n        this.id = options.id;\n        this.address = streamIdentifier(stream, options);\n        this.socketTimeoutMS = options.socketTimeoutMS ?? 0;\n        this.monitorCommands = options.monitorCommands;\n        this.serverApi = options.serverApi;\n        this.closed = false;\n        this[kHello] = null;\n        this[kClusterTime] = null;\n        this[kDescription] = new stream_description_1.StreamDescription(this.address, options);\n        this[kGeneration] = options.generation;\n        this[kLastUseTime] = (0, utils_1.now)();\n        // setup parser stream and message handling\n        this[kQueue] = new Map();\n        this[kMessageStream] = new message_stream_1.MessageStream({\n            ...options,\n            maxBsonMessageSize: this.hello?.maxBsonMessageSize\n        });\n        this[kStream] = stream;\n        this[kDelayedTimeoutId] = null;\n        this[kMessageStream].on(\"message\", (message)=>this.onMessage(message));\n        this[kMessageStream].on(\"error\", (error)=>this.onError(error));\n        this[kStream].on(\"close\", ()=>this.onClose());\n        this[kStream].on(\"timeout\", ()=>this.onTimeout());\n        this[kStream].on(\"error\", ()=>{\n        /* ignore errors, listen to `close` instead */ });\n        // hook the message stream up to the passed in stream\n        this[kStream].pipe(this[kMessageStream]);\n        this[kMessageStream].pipe(this[kStream]);\n    }\n    get description() {\n        return this[kDescription];\n    }\n    get hello() {\n        return this[kHello];\n    }\n    // the `connect` method stores the result of the handshake hello on the connection\n    set hello(response) {\n        this[kDescription].receiveResponse(response);\n        this[kDescription] = Object.freeze(this[kDescription]);\n        // TODO: remove this, and only use the `StreamDescription` in the future\n        this[kHello] = response;\n    }\n    // Set the whether the message stream is for a monitoring connection.\n    set isMonitoringConnection(value) {\n        this[kMessageStream].isMonitoringConnection = value;\n    }\n    get isMonitoringConnection() {\n        return this[kMessageStream].isMonitoringConnection;\n    }\n    get serviceId() {\n        return this.hello?.serviceId;\n    }\n    get loadBalanced() {\n        return this.description.loadBalanced;\n    }\n    get generation() {\n        return this[kGeneration] || 0;\n    }\n    set generation(generation) {\n        this[kGeneration] = generation;\n    }\n    get idleTime() {\n        return (0, utils_1.calculateDurationInMs)(this[kLastUseTime]);\n    }\n    get clusterTime() {\n        return this[kClusterTime];\n    }\n    get stream() {\n        return this[kStream];\n    }\n    markAvailable() {\n        this[kLastUseTime] = (0, utils_1.now)();\n    }\n    onError(error) {\n        this.cleanup(true, error);\n    }\n    onClose() {\n        const message = `connection ${this.id} to ${this.address} closed`;\n        this.cleanup(true, new error_1.MongoNetworkError(message));\n    }\n    onTimeout() {\n        this[kDelayedTimeoutId] = (0, timers_1.setTimeout)(()=>{\n            const message = `connection ${this.id} to ${this.address} timed out`;\n            const beforeHandshake = this.hello == null;\n            this.cleanup(true, new error_1.MongoNetworkTimeoutError(message, {\n                beforeHandshake\n            }));\n        }, 1).unref(); // No need for this timer to hold the event loop open\n    }\n    onMessage(message) {\n        const delayedTimeoutId = this[kDelayedTimeoutId];\n        if (delayedTimeoutId != null) {\n            (0, timers_1.clearTimeout)(delayedTimeoutId);\n            this[kDelayedTimeoutId] = null;\n        }\n        const socketTimeoutMS = this[kStream].timeout ?? 0;\n        this[kStream].setTimeout(0);\n        // always emit the message, in case we are streaming\n        this.emit(\"message\", message);\n        let operationDescription = this[kQueue].get(message.responseTo);\n        if (!operationDescription && this.isMonitoringConnection) {\n            // This is how we recover when the initial hello's requestId is not\n            // the responseTo when hello responses have been skipped:\n            // First check if the map is of invalid size\n            if (this[kQueue].size > 1) {\n                this.cleanup(true, new error_1.MongoRuntimeError(INVALID_QUEUE_SIZE));\n            } else {\n                // Get the first orphaned operation description.\n                const entry = this[kQueue].entries().next();\n                if (entry.value != null) {\n                    const [requestId, orphaned] = entry.value;\n                    // If the orphaned operation description exists then set it.\n                    operationDescription = orphaned;\n                    // Remove the entry with the bad request id from the queue.\n                    this[kQueue].delete(requestId);\n                }\n            }\n        }\n        if (!operationDescription) {\n            return;\n        }\n        const callback = operationDescription.cb;\n        // SERVER-45775: For exhaust responses we should be able to use the same requestId to\n        // track response, however the server currently synthetically produces remote requests\n        // making the `responseTo` change on each response\n        this[kQueue].delete(message.responseTo);\n        if (\"moreToCome\" in message && message.moreToCome) {\n            // If the operation description check above does find an orphaned\n            // description and sets the operationDescription then this line will put one\n            // back in the queue with the correct requestId and will resolve not being able\n            // to find the next one via the responseTo of the next streaming hello.\n            this[kQueue].set(message.requestId, operationDescription);\n            this[kStream].setTimeout(socketTimeoutMS);\n        }\n        try {\n            // Pass in the entire description because it has BSON parsing options\n            message.parse(operationDescription);\n        } catch (err) {\n            // If this error is generated by our own code, it will already have the correct class applied\n            // if it is not, then it is coming from a catastrophic data parse failure or the BSON library\n            // in either case, it should not be wrapped\n            callback(err);\n            return;\n        }\n        if (message.documents[0]) {\n            const document = message.documents[0];\n            const session = operationDescription.session;\n            if (session) {\n                (0, sessions_1.updateSessionFromResponse)(session, document);\n            }\n            if (document.$clusterTime) {\n                this[kClusterTime] = document.$clusterTime;\n                this.emit(Connection.CLUSTER_TIME_RECEIVED, document.$clusterTime);\n            }\n            if (document.writeConcernError) {\n                callback(new error_1.MongoWriteConcernError(document.writeConcernError, document), document);\n                return;\n            }\n            if (document.ok === 0 || document.$err || document.errmsg || document.code) {\n                callback(new error_1.MongoServerError(document));\n                return;\n            }\n        }\n        callback(undefined, message.documents[0]);\n    }\n    destroy(options, callback) {\n        if (this.closed) {\n            process.nextTick(()=>callback?.());\n            return;\n        }\n        if (typeof callback === \"function\") {\n            this.once(\"close\", ()=>process.nextTick(()=>callback()));\n        }\n        // load balanced mode requires that these listeners remain on the connection\n        // after cleanup on timeouts, errors or close so we remove them before calling\n        // cleanup.\n        this.removeAllListeners(Connection.PINNED);\n        this.removeAllListeners(Connection.UNPINNED);\n        const message = `connection ${this.id} to ${this.address} closed`;\n        this.cleanup(options.force, new error_1.MongoNetworkError(message));\n    }\n    /**\n     * A method that cleans up the connection.  When `force` is true, this method\n     * forcibly destroys the socket.\n     *\n     * If an error is provided, any in-flight operations will be closed with the error.\n     *\n     * This method does nothing if the connection is already closed.\n     */ cleanup(force, error) {\n        if (this.closed) {\n            return;\n        }\n        this.closed = true;\n        const completeCleanup = ()=>{\n            for (const op of this[kQueue].values()){\n                op.cb(error);\n            }\n            this[kQueue].clear();\n            this.emit(Connection.CLOSE);\n        };\n        this[kStream].removeAllListeners();\n        this[kMessageStream].removeAllListeners();\n        this[kMessageStream].destroy();\n        if (force) {\n            this[kStream].destroy();\n            completeCleanup();\n            return;\n        }\n        if (!this[kStream].writableEnded) {\n            this[kStream].end(()=>{\n                this[kStream].destroy();\n                completeCleanup();\n            });\n        } else {\n            completeCleanup();\n        }\n    }\n    command(ns, command, options, callback) {\n        let cmd = {\n            ...command\n        };\n        const readPreference = (0, shared_1.getReadPreference)(options);\n        const shouldUseOpMsg = supportsOpMsg(this);\n        const session = options?.session;\n        let clusterTime = this.clusterTime;\n        if (this.serverApi) {\n            const { version, strict, deprecationErrors } = this.serverApi;\n            cmd.apiVersion = version;\n            if (strict != null) cmd.apiStrict = strict;\n            if (deprecationErrors != null) cmd.apiDeprecationErrors = deprecationErrors;\n        }\n        if (hasSessionSupport(this) && session) {\n            if (session.clusterTime && clusterTime && session.clusterTime.clusterTime.greaterThan(clusterTime.clusterTime)) {\n                clusterTime = session.clusterTime;\n            }\n            const err = (0, sessions_1.applySession)(session, cmd, options);\n            if (err) {\n                return callback(err);\n            }\n        } else if (session?.explicit) {\n            return callback(new error_1.MongoCompatibilityError(\"Current topology does not support sessions\"));\n        }\n        // if we have a known cluster time, gossip it\n        if (clusterTime) {\n            cmd.$clusterTime = clusterTime;\n        }\n        if ((0, shared_1.isSharded)(this) && !shouldUseOpMsg && readPreference && readPreference.mode !== \"primary\") {\n            cmd = {\n                $query: cmd,\n                $readPreference: readPreference.toJSON()\n            };\n        }\n        const commandOptions = Object.assign({\n            numberToSkip: 0,\n            numberToReturn: -1,\n            checkKeys: false,\n            // This value is not overridable\n            secondaryOk: readPreference.secondaryOk()\n        }, options);\n        const message = shouldUseOpMsg ? new commands_1.OpMsgRequest(ns.db, cmd, commandOptions) : new commands_1.OpQueryRequest(ns.db, cmd, commandOptions);\n        try {\n            write(this, message, commandOptions, callback);\n        } catch (err) {\n            callback(err);\n        }\n    }\n}\n/** @event */ Connection.COMMAND_STARTED = constants_1.COMMAND_STARTED;\n/** @event */ Connection.COMMAND_SUCCEEDED = constants_1.COMMAND_SUCCEEDED;\n/** @event */ Connection.COMMAND_FAILED = constants_1.COMMAND_FAILED;\n/** @event */ Connection.CLUSTER_TIME_RECEIVED = constants_1.CLUSTER_TIME_RECEIVED;\n/** @event */ Connection.CLOSE = constants_1.CLOSE;\n/** @event */ Connection.MESSAGE = constants_1.MESSAGE;\n/** @event */ Connection.PINNED = constants_1.PINNED;\n/** @event */ Connection.UNPINNED = constants_1.UNPINNED;\nexports.Connection = Connection;\n/** @internal */ class CryptoConnection extends Connection {\n    constructor(stream, options){\n        super(stream, options);\n        this[kAutoEncrypter] = options.autoEncrypter;\n    }\n    /** @internal @override */ command(ns, cmd, options, callback) {\n        const autoEncrypter = this[kAutoEncrypter];\n        if (!autoEncrypter) {\n            return callback(new error_1.MongoMissingDependencyError(\"No AutoEncrypter available for encryption\"));\n        }\n        const serverWireVersion = (0, utils_1.maxWireVersion)(this);\n        if (serverWireVersion === 0) {\n            // This means the initial handshake hasn't happened yet\n            return super.command(ns, cmd, options, callback);\n        }\n        if (serverWireVersion < 8) {\n            callback(new error_1.MongoCompatibilityError(\"Auto-encryption requires a minimum MongoDB version of 4.2\"));\n            return;\n        }\n        // Save sort or indexKeys based on the command being run\n        // the encrypt API serializes our JS objects to BSON to pass to the native code layer\n        // and then deserializes the encrypted result, the protocol level components\n        // of the command (ex. sort) are then converted to JS objects potentially losing\n        // import key order information. These fields are never encrypted so we can save the values\n        // from before the encryption and replace them after encryption has been performed\n        const sort = cmd.find || cmd.findAndModify ? cmd.sort : null;\n        const indexKeys = cmd.createIndexes ? cmd.indexes.map((index)=>index.key) : null;\n        autoEncrypter.encrypt(ns.toString(), cmd, options).then((encrypted)=>{\n            // Replace the saved values\n            if (sort != null && (cmd.find || cmd.findAndModify)) {\n                encrypted.sort = sort;\n            }\n            if (indexKeys != null && cmd.createIndexes) {\n                for (const [offset, index] of indexKeys.entries()){\n                    // @ts-expect-error `encrypted` is a generic \"command\", but we've narrowed for only `createIndexes` commands here\n                    encrypted.indexes[offset].key = index;\n                }\n            }\n            super.command(ns, encrypted, options, (err, response)=>{\n                if (err || response == null) {\n                    callback(err, response);\n                    return;\n                }\n                autoEncrypter.decrypt(response, options).then((res)=>callback(undefined, res), (err)=>callback(err));\n            });\n        }, (err)=>{\n            if (err) {\n                callback(err, null);\n            }\n        });\n    }\n}\nexports.CryptoConnection = CryptoConnection;\n/** @internal */ function hasSessionSupport(conn) {\n    const description = conn.description;\n    return description.logicalSessionTimeoutMinutes != null;\n}\nexports.hasSessionSupport = hasSessionSupport;\nfunction supportsOpMsg(conn) {\n    const description = conn.description;\n    if (description == null) {\n        return false;\n    }\n    return (0, utils_1.maxWireVersion)(conn) >= 6 && !description.__nodejs_mock_server__;\n}\nfunction streamIdentifier(stream, options) {\n    if (options.proxyHost) {\n        // If proxy options are specified, the properties of `stream` itself\n        // will not accurately reflect what endpoint this is connected to.\n        return options.hostAddress.toString();\n    }\n    const { remoteAddress, remotePort } = stream;\n    if (typeof remoteAddress === \"string\" && typeof remotePort === \"number\") {\n        return utils_1.HostAddress.fromHostPort(remoteAddress, remotePort).toString();\n    }\n    return (0, utils_1.uuidV4)().toString(\"hex\");\n}\nfunction write(conn, command, options, callback) {\n    options = options ?? {};\n    const operationDescription = {\n        requestId: command.requestId,\n        cb: callback,\n        session: options.session,\n        noResponse: typeof options.noResponse === \"boolean\" ? options.noResponse : false,\n        documentsReturnedIn: options.documentsReturnedIn,\n        // for BSON parsing\n        useBigInt64: typeof options.useBigInt64 === \"boolean\" ? options.useBigInt64 : false,\n        promoteLongs: typeof options.promoteLongs === \"boolean\" ? options.promoteLongs : true,\n        promoteValues: typeof options.promoteValues === \"boolean\" ? options.promoteValues : true,\n        promoteBuffers: typeof options.promoteBuffers === \"boolean\" ? options.promoteBuffers : false,\n        bsonRegExp: typeof options.bsonRegExp === \"boolean\" ? options.bsonRegExp : false,\n        enableUtf8Validation: typeof options.enableUtf8Validation === \"boolean\" ? options.enableUtf8Validation : true,\n        raw: typeof options.raw === \"boolean\" ? options.raw : false,\n        started: 0\n    };\n    if (conn[kDescription] && conn[kDescription].compressor) {\n        operationDescription.agreedCompressor = conn[kDescription].compressor;\n        if (conn[kDescription].zlibCompressionLevel) {\n            operationDescription.zlibCompressionLevel = conn[kDescription].zlibCompressionLevel;\n        }\n    }\n    if (typeof options.socketTimeoutMS === \"number\") {\n        conn[kStream].setTimeout(options.socketTimeoutMS);\n    } else if (conn.socketTimeoutMS !== 0) {\n        conn[kStream].setTimeout(conn.socketTimeoutMS);\n    }\n    // if command monitoring is enabled we need to modify the callback here\n    if (conn.monitorCommands) {\n        conn.emit(Connection.COMMAND_STARTED, new command_monitoring_events_1.CommandStartedEvent(conn, command));\n        operationDescription.started = (0, utils_1.now)();\n        operationDescription.cb = (err, reply)=>{\n            // Command monitoring spec states that if ok is 1, then we must always emit\n            // a command succeeded event, even if there's an error. Write concern errors\n            // will have an ok: 1 in their reply.\n            if (err && reply?.ok !== 1) {\n                conn.emit(Connection.COMMAND_FAILED, new command_monitoring_events_1.CommandFailedEvent(conn, command, err, operationDescription.started));\n            } else {\n                if (reply && (reply.ok === 0 || reply.$err)) {\n                    conn.emit(Connection.COMMAND_FAILED, new command_monitoring_events_1.CommandFailedEvent(conn, command, reply, operationDescription.started));\n                } else {\n                    conn.emit(Connection.COMMAND_SUCCEEDED, new command_monitoring_events_1.CommandSucceededEvent(conn, command, reply, operationDescription.started));\n                }\n            }\n            if (typeof callback === \"function\") {\n                // Since we're passing through the reply with the write concern error now, we\n                // need it not to be provided to the original callback in this case so\n                // retryability does not get tricked into thinking the command actually\n                // succeeded.\n                callback(err, err instanceof error_1.MongoWriteConcernError ? undefined : reply);\n            }\n        };\n    }\n    if (!operationDescription.noResponse) {\n        conn[kQueue].set(operationDescription.requestId, operationDescription);\n    }\n    try {\n        conn[kMessageStream].writeCommand(command, operationDescription);\n    } catch (e) {\n        if (!operationDescription.noResponse) {\n            conn[kQueue].delete(operationDescription.requestId);\n            operationDescription.cb(e);\n            return;\n        }\n    }\n    if (operationDescription.noResponse) {\n        operationDescription.cb();\n    }\n}\n/** in-progress connection layer */ /** @internal */ class ModernConnection extends mongo_types_1.TypedEventEmitter {\n    constructor(stream, options){\n        super();\n        this.commandAsync = (0, util_1.promisify)((ns, cmd, options, callback)=>this.command(ns, cmd, options, callback));\n        this.id = options.id;\n        this.address = streamIdentifier(stream, options);\n        this.socketTimeoutMS = options.socketTimeoutMS ?? 0;\n        this.monitorCommands = options.monitorCommands;\n        this.serverApi = options.serverApi;\n        this.closed = false;\n        this[kHello] = null;\n        this[kClusterTime] = null;\n        this[kDescription] = new stream_description_1.StreamDescription(this.address, options);\n        this[kGeneration] = options.generation;\n        this[kLastUseTime] = (0, utils_1.now)();\n        // setup parser stream and message handling\n        this[kQueue] = new Map();\n        this[kMessageStream] = new message_stream_1.MessageStream({\n            ...options,\n            maxBsonMessageSize: this.hello?.maxBsonMessageSize\n        });\n        this.socket = stream;\n        this[kDelayedTimeoutId] = null;\n        this[kMessageStream].on(\"message\", (message)=>this.onMessage(message));\n        this[kMessageStream].on(\"error\", (error)=>this.onError(error));\n        this.socket.on(\"close\", ()=>this.onClose());\n        this.socket.on(\"timeout\", ()=>this.onTimeout());\n        this.socket.on(\"error\", ()=>{\n        /* ignore errors, listen to `close` instead */ });\n        // hook the message stream up to the passed in stream\n        this.socket.pipe(this[kMessageStream]);\n        this[kMessageStream].pipe(this.socket);\n    }\n    get description() {\n        return this[kDescription];\n    }\n    get hello() {\n        return this[kHello];\n    }\n    // the `connect` method stores the result of the handshake hello on the connection\n    set hello(response) {\n        this[kDescription].receiveResponse(response);\n        this[kDescription] = Object.freeze(this[kDescription]);\n        // TODO: remove this, and only use the `StreamDescription` in the future\n        this[kHello] = response;\n    }\n    // Set the whether the message stream is for a monitoring connection.\n    set isMonitoringConnection(value) {\n        this[kMessageStream].isMonitoringConnection = value;\n    }\n    get isMonitoringConnection() {\n        return this[kMessageStream].isMonitoringConnection;\n    }\n    get serviceId() {\n        return this.hello?.serviceId;\n    }\n    get loadBalanced() {\n        return this.description.loadBalanced;\n    }\n    get generation() {\n        return this[kGeneration] || 0;\n    }\n    set generation(generation) {\n        this[kGeneration] = generation;\n    }\n    get idleTime() {\n        return (0, utils_1.calculateDurationInMs)(this[kLastUseTime]);\n    }\n    get clusterTime() {\n        return this[kClusterTime];\n    }\n    get stream() {\n        return this.socket;\n    }\n    get hasSessionSupport() {\n        return this.description.logicalSessionTimeoutMinutes != null;\n    }\n    get supportsOpMsg() {\n        return this.description != null && (0, utils_1.maxWireVersion)(this) >= 6 && !this.description.__nodejs_mock_server__;\n    }\n    markAvailable() {\n        this[kLastUseTime] = (0, utils_1.now)();\n    }\n    onError(error) {\n        this.cleanup(true, error);\n    }\n    onClose() {\n        const message = `connection ${this.id} to ${this.address} closed`;\n        this.cleanup(true, new error_1.MongoNetworkError(message));\n    }\n    onTimeout() {\n        this[kDelayedTimeoutId] = (0, timers_1.setTimeout)(()=>{\n            const message = `connection ${this.id} to ${this.address} timed out`;\n            const beforeHandshake = this.hello == null;\n            this.cleanup(true, new error_1.MongoNetworkTimeoutError(message, {\n                beforeHandshake\n            }));\n        }, 1).unref(); // No need for this timer to hold the event loop open\n    }\n    onMessage(message) {\n        const delayedTimeoutId = this[kDelayedTimeoutId];\n        if (delayedTimeoutId != null) {\n            (0, timers_1.clearTimeout)(delayedTimeoutId);\n            this[kDelayedTimeoutId] = null;\n        }\n        const socketTimeoutMS = this.socket.timeout ?? 0;\n        this.socket.setTimeout(0);\n        // always emit the message, in case we are streaming\n        this.emit(\"message\", message);\n        let operationDescription = this[kQueue].get(message.responseTo);\n        if (!operationDescription && this.isMonitoringConnection) {\n            // This is how we recover when the initial hello's requestId is not\n            // the responseTo when hello responses have been skipped:\n            // First check if the map is of invalid size\n            if (this[kQueue].size > 1) {\n                this.cleanup(true, new error_1.MongoRuntimeError(INVALID_QUEUE_SIZE));\n            } else {\n                // Get the first orphaned operation description.\n                const entry = this[kQueue].entries().next();\n                if (entry.value != null) {\n                    const [requestId, orphaned] = entry.value;\n                    // If the orphaned operation description exists then set it.\n                    operationDescription = orphaned;\n                    // Remove the entry with the bad request id from the queue.\n                    this[kQueue].delete(requestId);\n                }\n            }\n        }\n        if (!operationDescription) {\n            return;\n        }\n        const callback = operationDescription.cb;\n        // SERVER-45775: For exhaust responses we should be able to use the same requestId to\n        // track response, however the server currently synthetically produces remote requests\n        // making the `responseTo` change on each response\n        this[kQueue].delete(message.responseTo);\n        if (\"moreToCome\" in message && message.moreToCome) {\n            // If the operation description check above does find an orphaned\n            // description and sets the operationDescription then this line will put one\n            // back in the queue with the correct requestId and will resolve not being able\n            // to find the next one via the responseTo of the next streaming hello.\n            this[kQueue].set(message.requestId, operationDescription);\n            this.socket.setTimeout(socketTimeoutMS);\n        }\n        try {\n            // Pass in the entire description because it has BSON parsing options\n            message.parse(operationDescription);\n        } catch (err) {\n            // If this error is generated by our own code, it will already have the correct class applied\n            // if it is not, then it is coming from a catastrophic data parse failure or the BSON library\n            // in either case, it should not be wrapped\n            callback(err);\n            return;\n        }\n        if (message.documents[0]) {\n            const document = message.documents[0];\n            const session = operationDescription.session;\n            if (session) {\n                (0, sessions_1.updateSessionFromResponse)(session, document);\n            }\n            if (document.$clusterTime) {\n                this[kClusterTime] = document.$clusterTime;\n                this.emit(Connection.CLUSTER_TIME_RECEIVED, document.$clusterTime);\n            }\n            if (document.writeConcernError) {\n                callback(new error_1.MongoWriteConcernError(document.writeConcernError, document), document);\n                return;\n            }\n            if (document.ok === 0 || document.$err || document.errmsg || document.code) {\n                callback(new error_1.MongoServerError(document));\n                return;\n            }\n        }\n        callback(undefined, message.documents[0]);\n    }\n    destroy(options, callback) {\n        if (this.closed) {\n            process.nextTick(()=>callback?.());\n            return;\n        }\n        if (typeof callback === \"function\") {\n            this.once(\"close\", ()=>process.nextTick(()=>callback()));\n        }\n        // load balanced mode requires that these listeners remain on the connection\n        // after cleanup on timeouts, errors or close so we remove them before calling\n        // cleanup.\n        this.removeAllListeners(Connection.PINNED);\n        this.removeAllListeners(Connection.UNPINNED);\n        const message = `connection ${this.id} to ${this.address} closed`;\n        this.cleanup(options.force, new error_1.MongoNetworkError(message));\n    }\n    /**\n     * A method that cleans up the connection.  When `force` is true, this method\n     * forcibly destroys the socket.\n     *\n     * If an error is provided, any in-flight operations will be closed with the error.\n     *\n     * This method does nothing if the connection is already closed.\n     */ cleanup(force, error) {\n        if (this.closed) {\n            return;\n        }\n        this.closed = true;\n        const completeCleanup = ()=>{\n            for (const op of this[kQueue].values()){\n                op.cb(error);\n            }\n            this[kQueue].clear();\n            this.emit(Connection.CLOSE);\n        };\n        this.socket.removeAllListeners();\n        this[kMessageStream].removeAllListeners();\n        this[kMessageStream].destroy();\n        if (force) {\n            this.socket.destroy();\n            completeCleanup();\n            return;\n        }\n        if (!this.socket.writableEnded) {\n            this.socket.end(()=>{\n                this.socket.destroy();\n                completeCleanup();\n            });\n        } else {\n            completeCleanup();\n        }\n    }\n    command(ns, command, options, callback) {\n        let cmd = {\n            ...command\n        };\n        const readPreference = (0, shared_1.getReadPreference)(options);\n        const session = options?.session;\n        let clusterTime = this.clusterTime;\n        if (this.serverApi) {\n            const { version, strict, deprecationErrors } = this.serverApi;\n            cmd.apiVersion = version;\n            if (strict != null) cmd.apiStrict = strict;\n            if (deprecationErrors != null) cmd.apiDeprecationErrors = deprecationErrors;\n        }\n        if (this.hasSessionSupport && session) {\n            if (session.clusterTime && clusterTime && session.clusterTime.clusterTime.greaterThan(clusterTime.clusterTime)) {\n                clusterTime = session.clusterTime;\n            }\n            const err = (0, sessions_1.applySession)(session, cmd, options);\n            if (err) {\n                return callback(err);\n            }\n        } else if (session?.explicit) {\n            return callback(new error_1.MongoCompatibilityError(\"Current topology does not support sessions\"));\n        }\n        // if we have a known cluster time, gossip it\n        if (clusterTime) {\n            cmd.$clusterTime = clusterTime;\n        }\n        if (// @ts-expect-error ModernConnections cannot be passed as connections\n        (0, shared_1.isSharded)(this) && !this.supportsOpMsg && readPreference && readPreference.mode !== \"primary\") {\n            cmd = {\n                $query: cmd,\n                $readPreference: readPreference.toJSON()\n            };\n        }\n        const commandOptions = Object.assign({\n            numberToSkip: 0,\n            numberToReturn: -1,\n            checkKeys: false,\n            // This value is not overridable\n            secondaryOk: readPreference.secondaryOk()\n        }, options);\n        const message = this.supportsOpMsg ? new commands_1.OpMsgRequest(ns.db, cmd, commandOptions) : new commands_1.OpQueryRequest(ns.db, cmd, commandOptions);\n        try {\n            write(this, message, commandOptions, callback);\n        } catch (err) {\n            callback(err);\n        }\n    }\n}\n/** @event */ ModernConnection.COMMAND_STARTED = constants_1.COMMAND_STARTED;\n/** @event */ ModernConnection.COMMAND_SUCCEEDED = constants_1.COMMAND_SUCCEEDED;\n/** @event */ ModernConnection.COMMAND_FAILED = constants_1.COMMAND_FAILED;\n/** @event */ ModernConnection.CLUSTER_TIME_RECEIVED = constants_1.CLUSTER_TIME_RECEIVED;\n/** @event */ ModernConnection.CLOSE = constants_1.CLOSE;\n/** @event */ ModernConnection.MESSAGE = constants_1.MESSAGE;\n/** @event */ ModernConnection.PINNED = constants_1.PINNED;\n/** @event */ ModernConnection.UNPINNED = constants_1.UNPINNED;\nexports.ModernConnection = ModernConnection;\nconst kDefaultMaxBsonMessageSize = 1024 * 1024 * 16 * 4;\n/**\n * @internal\n *\n * This helper reads chucks of data out of a socket and buffers them until it has received a\n * full wire protocol message.\n *\n * By itself, produces an infinite async generator of wire protocol messages and consumers must end\n * the stream by calling `return` on the generator.\n *\n * Note that `for-await` loops call `return` automatically when the loop is exited.\n */ async function* readWireProtocolMessages(connection) {\n    const bufferPool = new utils_1.BufferPool();\n    const maxBsonMessageSize = connection.hello?.maxBsonMessageSize ?? kDefaultMaxBsonMessageSize;\n    for await (const [chunk] of (0, stream_1.on)(connection.socket, \"data\")){\n        bufferPool.append(chunk);\n        const sizeOfMessage = bufferPool.getInt32();\n        if (sizeOfMessage == null) {\n            continue;\n        }\n        if (sizeOfMessage < 0) {\n            throw new error_1.MongoParseError(`Invalid message size: ${sizeOfMessage}`);\n        }\n        if (sizeOfMessage > maxBsonMessageSize) {\n            throw new error_1.MongoParseError(`Invalid message size: ${sizeOfMessage}, max allowed: ${maxBsonMessageSize}`);\n        }\n        if (sizeOfMessage > bufferPool.length) {\n            continue;\n        }\n        yield bufferPool.read(sizeOfMessage);\n    }\n}\nexports.readWireProtocolMessages = readWireProtocolMessages;\n/**\n * @internal\n *\n * Writes an OP_MSG or OP_QUERY request to the socket, optionally compressing the command. This method\n * waits until the socket's buffer has emptied (the Nodejs socket `drain` event has fired).\n */ async function writeCommand(connection, command, options) {\n    const drained = (0, events_1.once)(connection.socket, \"drain\");\n    const finalCommand = options.agreedCompressor === \"none\" || !commands_1.OpCompressedRequest.canCompress(command) ? command : new commands_1.OpCompressedRequest(command, {\n        agreedCompressor: options.agreedCompressor ?? \"none\",\n        zlibCompressionLevel: options.zlibCompressionLevel ?? 0\n    });\n    const buffer = Buffer.concat(await finalCommand.toBin());\n    connection.socket.push(buffer);\n    await drained;\n}\nexports.writeCommand = writeCommand;\n/**\n * @internal\n *\n * Returns an async generator that yields full wire protocol messages from the underlying socket.  This function\n * yields messages until `moreToCome` is false or not present in a response, or the caller cancels the request\n * by calling `return` on the generator.\n *\n * Note that `for-await` loops call `return` automatically when the loop is exited.\n */ async function* readMany(connection) {\n    for await (const message of readWireProtocolMessages(connection)){\n        const response = await (0, compression_1.decompressResponse)(message);\n        yield response;\n        if (!(\"moreToCome\" in response) || !response.moreToCome) {\n            return;\n        }\n    }\n}\nexports.readMany = readMany;\n/**\n * @internal\n *\n * Reads a single wire protocol message out of a connection.\n */ async function read(connection) {\n    for await (const value of readMany(connection)){\n        return value;\n    }\n    throw new error_1.MongoRuntimeError(\"unable to read message off of connection\");\n}\nexports.read = read; //# sourceMappingURL=connection.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongodb/lib/cmap/connection.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongodb/lib/cmap/connection_pool.js":
/*!**********************************************************!*\
  !*** ./node_modules/mongodb/lib/cmap/connection_pool.js ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.ConnectionPool = exports.PoolState = void 0;\nconst timers_1 = __webpack_require__(/*! timers */ \"timers\");\nconst constants_1 = __webpack_require__(/*! ../constants */ \"(ssr)/./node_modules/mongodb/lib/constants.js\");\nconst error_1 = __webpack_require__(/*! ../error */ \"(ssr)/./node_modules/mongodb/lib/error.js\");\nconst mongo_types_1 = __webpack_require__(/*! ../mongo_types */ \"(ssr)/./node_modules/mongodb/lib/mongo_types.js\");\nconst utils_1 = __webpack_require__(/*! ../utils */ \"(ssr)/./node_modules/mongodb/lib/utils.js\");\nconst connect_1 = __webpack_require__(/*! ./connect */ \"(ssr)/./node_modules/mongodb/lib/cmap/connect.js\");\nconst connection_1 = __webpack_require__(/*! ./connection */ \"(ssr)/./node_modules/mongodb/lib/cmap/connection.js\");\nconst connection_pool_events_1 = __webpack_require__(/*! ./connection_pool_events */ \"(ssr)/./node_modules/mongodb/lib/cmap/connection_pool_events.js\");\nconst errors_1 = __webpack_require__(/*! ./errors */ \"(ssr)/./node_modules/mongodb/lib/cmap/errors.js\");\nconst metrics_1 = __webpack_require__(/*! ./metrics */ \"(ssr)/./node_modules/mongodb/lib/cmap/metrics.js\");\n/** @internal */ const kServer = Symbol(\"server\");\n/** @internal */ const kConnections = Symbol(\"connections\");\n/** @internal */ const kPending = Symbol(\"pending\");\n/** @internal */ const kCheckedOut = Symbol(\"checkedOut\");\n/** @internal */ const kMinPoolSizeTimer = Symbol(\"minPoolSizeTimer\");\n/** @internal */ const kGeneration = Symbol(\"generation\");\n/** @internal */ const kServiceGenerations = Symbol(\"serviceGenerations\");\n/** @internal */ const kConnectionCounter = Symbol(\"connectionCounter\");\n/** @internal */ const kCancellationToken = Symbol(\"cancellationToken\");\n/** @internal */ const kWaitQueue = Symbol(\"waitQueue\");\n/** @internal */ const kCancelled = Symbol(\"cancelled\");\n/** @internal */ const kMetrics = Symbol(\"metrics\");\n/** @internal */ const kProcessingWaitQueue = Symbol(\"processingWaitQueue\");\n/** @internal */ const kPoolState = Symbol(\"poolState\");\n/** @internal */ exports.PoolState = Object.freeze({\n    paused: \"paused\",\n    ready: \"ready\",\n    closed: \"closed\"\n});\n/**\n * A pool of connections which dynamically resizes, and emit events related to pool activity\n * @internal\n */ class ConnectionPool extends mongo_types_1.TypedEventEmitter {\n    constructor(server, options){\n        super();\n        this.options = Object.freeze({\n            ...options,\n            connectionType: connection_1.Connection,\n            maxPoolSize: options.maxPoolSize ?? 100,\n            minPoolSize: options.minPoolSize ?? 0,\n            maxConnecting: options.maxConnecting ?? 2,\n            maxIdleTimeMS: options.maxIdleTimeMS ?? 0,\n            waitQueueTimeoutMS: options.waitQueueTimeoutMS ?? 0,\n            minPoolSizeCheckFrequencyMS: options.minPoolSizeCheckFrequencyMS ?? 100,\n            autoEncrypter: options.autoEncrypter,\n            metadata: options.metadata\n        });\n        if (this.options.minPoolSize > this.options.maxPoolSize) {\n            throw new error_1.MongoInvalidArgumentError(\"Connection pool minimum size must not be greater than maximum pool size\");\n        }\n        this[kPoolState] = exports.PoolState.paused;\n        this[kServer] = server;\n        this[kConnections] = new utils_1.List();\n        this[kPending] = 0;\n        this[kCheckedOut] = new Set();\n        this[kMinPoolSizeTimer] = undefined;\n        this[kGeneration] = 0;\n        this[kServiceGenerations] = new Map();\n        this[kConnectionCounter] = (0, utils_1.makeCounter)(1);\n        this[kCancellationToken] = new mongo_types_1.CancellationToken();\n        this[kCancellationToken].setMaxListeners(Infinity);\n        this[kWaitQueue] = new utils_1.List();\n        this[kMetrics] = new metrics_1.ConnectionPoolMetrics();\n        this[kProcessingWaitQueue] = false;\n        this.mongoLogger = this[kServer].topology.client.mongoLogger;\n        this.component = \"connection\";\n        process.nextTick(()=>{\n            this.emitAndLog(ConnectionPool.CONNECTION_POOL_CREATED, new connection_pool_events_1.ConnectionPoolCreatedEvent(this));\n        });\n    }\n    /** The address of the endpoint the pool is connected to */ get address() {\n        return this.options.hostAddress.toString();\n    }\n    /**\n     * Check if the pool has been closed\n     *\n     * TODO(NODE-3263): We can remove this property once shell no longer needs it\n     */ get closed() {\n        return this[kPoolState] === exports.PoolState.closed;\n    }\n    /** An integer representing the SDAM generation of the pool */ get generation() {\n        return this[kGeneration];\n    }\n    /** An integer expressing how many total connections (available + pending + in use) the pool currently has */ get totalConnectionCount() {\n        return this.availableConnectionCount + this.pendingConnectionCount + this.currentCheckedOutCount;\n    }\n    /** An integer expressing how many connections are currently available in the pool. */ get availableConnectionCount() {\n        return this[kConnections].length;\n    }\n    get pendingConnectionCount() {\n        return this[kPending];\n    }\n    get currentCheckedOutCount() {\n        return this[kCheckedOut].size;\n    }\n    get waitQueueSize() {\n        return this[kWaitQueue].length;\n    }\n    get loadBalanced() {\n        return this.options.loadBalanced;\n    }\n    get serviceGenerations() {\n        return this[kServiceGenerations];\n    }\n    get serverError() {\n        return this[kServer].description.error;\n    }\n    /**\n     * This is exposed ONLY for use in mongosh, to enable\n     * killing all connections if a user quits the shell with\n     * operations in progress.\n     *\n     * This property may be removed as a part of NODE-3263.\n     */ get checkedOutConnections() {\n        return this[kCheckedOut];\n    }\n    /**\n     * Get the metrics information for the pool when a wait queue timeout occurs.\n     */ waitQueueErrorMetrics() {\n        return this[kMetrics].info(this.options.maxPoolSize);\n    }\n    /**\n     * Set the pool state to \"ready\"\n     */ ready() {\n        if (this[kPoolState] !== exports.PoolState.paused) {\n            return;\n        }\n        this[kPoolState] = exports.PoolState.ready;\n        this.emitAndLog(ConnectionPool.CONNECTION_POOL_READY, new connection_pool_events_1.ConnectionPoolReadyEvent(this));\n        (0, timers_1.clearTimeout)(this[kMinPoolSizeTimer]);\n        this.ensureMinPoolSize();\n    }\n    /**\n     * Check a connection out of this pool. The connection will continue to be tracked, but no reference to it\n     * will be held by the pool. This means that if a connection is checked out it MUST be checked back in or\n     * explicitly destroyed by the new owner.\n     */ checkOut(callback) {\n        this.emitAndLog(ConnectionPool.CONNECTION_CHECK_OUT_STARTED, new connection_pool_events_1.ConnectionCheckOutStartedEvent(this));\n        const waitQueueTimeoutMS = this.options.waitQueueTimeoutMS;\n        const waitQueueMember = {\n            callback,\n            timeoutController: new utils_1.TimeoutController(waitQueueTimeoutMS)\n        };\n        waitQueueMember.timeoutController.signal.addEventListener(\"abort\", ()=>{\n            waitQueueMember[kCancelled] = true;\n            waitQueueMember.timeoutController.clear();\n            this.emitAndLog(ConnectionPool.CONNECTION_CHECK_OUT_FAILED, new connection_pool_events_1.ConnectionCheckOutFailedEvent(this, \"timeout\"));\n            waitQueueMember.callback(new errors_1.WaitQueueTimeoutError(this.loadBalanced ? this.waitQueueErrorMetrics() : \"Timed out while checking out a connection from connection pool\", this.address));\n        });\n        this[kWaitQueue].push(waitQueueMember);\n        process.nextTick(()=>this.processWaitQueue());\n    }\n    /**\n     * Check a connection into the pool.\n     *\n     * @param connection - The connection to check in\n     */ checkIn(connection) {\n        if (!this[kCheckedOut].has(connection)) {\n            return;\n        }\n        const poolClosed = this.closed;\n        const stale = this.connectionIsStale(connection);\n        const willDestroy = !!(poolClosed || stale || connection.closed);\n        if (!willDestroy) {\n            connection.markAvailable();\n            this[kConnections].unshift(connection);\n        }\n        this[kCheckedOut].delete(connection);\n        this.emitAndLog(ConnectionPool.CONNECTION_CHECKED_IN, new connection_pool_events_1.ConnectionCheckedInEvent(this, connection));\n        if (willDestroy) {\n            const reason = connection.closed ? \"error\" : poolClosed ? \"poolClosed\" : \"stale\";\n            this.destroyConnection(connection, reason);\n        }\n        process.nextTick(()=>this.processWaitQueue());\n    }\n    /**\n     * Clear the pool\n     *\n     * Pool reset is handled by incrementing the pool's generation count. Any existing connection of a\n     * previous generation will eventually be pruned during subsequent checkouts.\n     */ clear(options = {}) {\n        if (this.closed) {\n            return;\n        }\n        // handle load balanced case\n        if (this.loadBalanced) {\n            const { serviceId } = options;\n            if (!serviceId) {\n                throw new error_1.MongoRuntimeError(\"ConnectionPool.clear() called in load balanced mode with no serviceId.\");\n            }\n            const sid = serviceId.toHexString();\n            const generation = this.serviceGenerations.get(sid);\n            // Only need to worry if the generation exists, since it should\n            // always be there but typescript needs the check.\n            if (generation == null) {\n                throw new error_1.MongoRuntimeError(\"Service generations are required in load balancer mode.\");\n            } else {\n                // Increment the generation for the service id.\n                this.serviceGenerations.set(sid, generation + 1);\n            }\n            this.emitAndLog(ConnectionPool.CONNECTION_POOL_CLEARED, new connection_pool_events_1.ConnectionPoolClearedEvent(this, {\n                serviceId\n            }));\n            return;\n        }\n        // handle non load-balanced case\n        const interruptInUseConnections = options.interruptInUseConnections ?? false;\n        const oldGeneration = this[kGeneration];\n        this[kGeneration] += 1;\n        const alreadyPaused = this[kPoolState] === exports.PoolState.paused;\n        this[kPoolState] = exports.PoolState.paused;\n        this.clearMinPoolSizeTimer();\n        if (!alreadyPaused) {\n            this.emitAndLog(ConnectionPool.CONNECTION_POOL_CLEARED, new connection_pool_events_1.ConnectionPoolClearedEvent(this, {\n                interruptInUseConnections\n            }));\n        }\n        if (interruptInUseConnections) {\n            process.nextTick(()=>this.interruptInUseConnections(oldGeneration));\n        }\n        this.processWaitQueue();\n    }\n    /**\n     * Closes all stale in-use connections in the pool with a resumable PoolClearedOnNetworkError.\n     *\n     * Only connections where `connection.generation <= minGeneration` are killed.\n     */ interruptInUseConnections(minGeneration) {\n        for (const connection of this[kCheckedOut]){\n            if (connection.generation <= minGeneration) {\n                this.checkIn(connection);\n                connection.onError(new errors_1.PoolClearedOnNetworkError(this));\n            }\n        }\n    }\n    close(_options, _cb) {\n        let options = _options;\n        const callback = _cb ?? _options;\n        if (typeof options === \"function\") {\n            options = {};\n        }\n        options = Object.assign({\n            force: false\n        }, options);\n        if (this.closed) {\n            return callback();\n        }\n        // immediately cancel any in-flight connections\n        this[kCancellationToken].emit(\"cancel\");\n        // end the connection counter\n        if (typeof this[kConnectionCounter].return === \"function\") {\n            this[kConnectionCounter].return(undefined);\n        }\n        this[kPoolState] = exports.PoolState.closed;\n        this.clearMinPoolSizeTimer();\n        this.processWaitQueue();\n        (0, utils_1.eachAsync)(this[kConnections].toArray(), (conn, cb)=>{\n            this.emitAndLog(ConnectionPool.CONNECTION_CLOSED, new connection_pool_events_1.ConnectionClosedEvent(this, conn, \"poolClosed\"));\n            conn.destroy({\n                force: !!options.force\n            }, cb);\n        }, (err)=>{\n            this[kConnections].clear();\n            this.emitAndLog(ConnectionPool.CONNECTION_POOL_CLOSED, new connection_pool_events_1.ConnectionPoolClosedEvent(this));\n            callback(err);\n        });\n    }\n    /**\n     * Runs a lambda with an implicitly checked out connection, checking that connection back in when the lambda\n     * has completed by calling back.\n     *\n     * NOTE: please note the required signature of `fn`\n     *\n     * @remarks When in load balancer mode, connections can be pinned to cursors or transactions.\n     *   In these cases we pass the connection in to this method to ensure it is used and a new\n     *   connection is not checked out.\n     *\n     * @param conn - A pinned connection for use in load balancing mode.\n     * @param fn - A function which operates on a managed connection\n     * @param callback - The original callback\n     */ withConnection(conn, fn, callback) {\n        if (conn) {\n            // use the provided connection, and do _not_ check it in after execution\n            fn(undefined, conn, (fnErr, result)=>{\n                if (fnErr) {\n                    return this.withReauthentication(fnErr, conn, fn, callback);\n                }\n                callback(undefined, result);\n            });\n            return;\n        }\n        this.checkOut((err, conn)=>{\n            // don't callback with `err` here, we might want to act upon it inside `fn`\n            fn(err, conn, (fnErr, result)=>{\n                if (fnErr) {\n                    if (conn) {\n                        this.withReauthentication(fnErr, conn, fn, callback);\n                    } else {\n                        callback(fnErr);\n                    }\n                } else {\n                    callback(undefined, result);\n                }\n                if (conn) {\n                    this.checkIn(conn);\n                }\n            });\n        });\n    }\n    withReauthentication(fnErr, conn, fn, callback) {\n        if (fnErr instanceof error_1.MongoError && fnErr.code === error_1.MONGODB_ERROR_CODES.Reauthenticate) {\n            this.reauthenticate(conn, fn, (error, res)=>{\n                if (error) {\n                    return callback(error);\n                }\n                callback(undefined, res);\n            });\n        } else {\n            callback(fnErr);\n        }\n    }\n    /**\n     * Reauthenticate on the same connection and then retry the operation.\n     */ reauthenticate(connection, fn, callback) {\n        const authContext = connection.authContext;\n        if (!authContext) {\n            return callback(new error_1.MongoRuntimeError(\"No auth context found on connection.\"));\n        }\n        const credentials = authContext.credentials;\n        if (!credentials) {\n            return callback(new error_1.MongoMissingCredentialsError(\"Connection is missing credentials when asked to reauthenticate\"));\n        }\n        const resolvedCredentials = credentials.resolveAuthMechanism(connection.hello || undefined);\n        const provider = connect_1.AUTH_PROVIDERS.get(resolvedCredentials.mechanism);\n        if (!provider) {\n            return callback(new error_1.MongoMissingCredentialsError(`Reauthenticate failed due to no auth provider for ${credentials.mechanism}`));\n        }\n        provider.reauth(authContext).then(()=>{\n            fn(undefined, connection, (fnErr, fnResult)=>{\n                if (fnErr) {\n                    return callback(fnErr);\n                }\n                callback(undefined, fnResult);\n            });\n        }, (error)=>callback(error));\n    }\n    /** Clear the min pool size timer */ clearMinPoolSizeTimer() {\n        const minPoolSizeTimer = this[kMinPoolSizeTimer];\n        if (minPoolSizeTimer) {\n            (0, timers_1.clearTimeout)(minPoolSizeTimer);\n        }\n    }\n    destroyConnection(connection, reason) {\n        this.emitAndLog(ConnectionPool.CONNECTION_CLOSED, new connection_pool_events_1.ConnectionClosedEvent(this, connection, reason));\n        // destroy the connection\n        process.nextTick(()=>connection.destroy({\n                force: false\n            }));\n    }\n    connectionIsStale(connection) {\n        const serviceId = connection.serviceId;\n        if (this.loadBalanced && serviceId) {\n            const sid = serviceId.toHexString();\n            const generation = this.serviceGenerations.get(sid);\n            return connection.generation !== generation;\n        }\n        return connection.generation !== this[kGeneration];\n    }\n    connectionIsIdle(connection) {\n        return !!(this.options.maxIdleTimeMS && connection.idleTime > this.options.maxIdleTimeMS);\n    }\n    /**\n     * Destroys a connection if the connection is perished.\n     *\n     * @returns `true` if the connection was destroyed, `false` otherwise.\n     */ destroyConnectionIfPerished(connection) {\n        const isStale = this.connectionIsStale(connection);\n        const isIdle = this.connectionIsIdle(connection);\n        if (!isStale && !isIdle && !connection.closed) {\n            return false;\n        }\n        const reason = connection.closed ? \"error\" : isStale ? \"stale\" : \"idle\";\n        this.destroyConnection(connection, reason);\n        return true;\n    }\n    createConnection(callback) {\n        const connectOptions = {\n            ...this.options,\n            id: this[kConnectionCounter].next().value,\n            generation: this[kGeneration],\n            cancellationToken: this[kCancellationToken]\n        };\n        this[kPending]++;\n        // This is our version of a \"virtual\" no-I/O connection as the spec requires\n        this.emitAndLog(ConnectionPool.CONNECTION_CREATED, new connection_pool_events_1.ConnectionCreatedEvent(this, {\n            id: connectOptions.id\n        }));\n        (0, connect_1.connect)(connectOptions, (err, connection)=>{\n            if (err || !connection) {\n                this[kPending]--;\n                this.emitAndLog(ConnectionPool.CONNECTION_CLOSED, new connection_pool_events_1.ConnectionClosedEvent(this, {\n                    id: connectOptions.id,\n                    serviceId: undefined\n                }, \"error\", // TODO(NODE-5192): Remove this cast\n                err));\n                if (err instanceof error_1.MongoNetworkError || err instanceof error_1.MongoServerError) {\n                    err.connectionGeneration = connectOptions.generation;\n                }\n                callback(err ?? new error_1.MongoRuntimeError(\"Connection creation failed without error\"));\n                return;\n            }\n            // The pool might have closed since we started trying to create a connection\n            if (this[kPoolState] !== exports.PoolState.ready) {\n                this[kPending]--;\n                connection.destroy({\n                    force: true\n                });\n                callback(this.closed ? new errors_1.PoolClosedError(this) : new errors_1.PoolClearedError(this));\n                return;\n            }\n            // forward all events from the connection to the pool\n            for (const event of [\n                ...constants_1.APM_EVENTS,\n                connection_1.Connection.CLUSTER_TIME_RECEIVED\n            ]){\n                connection.on(event, (e)=>this.emit(event, e));\n            }\n            if (this.loadBalanced) {\n                connection.on(connection_1.Connection.PINNED, (pinType)=>this[kMetrics].markPinned(pinType));\n                connection.on(connection_1.Connection.UNPINNED, (pinType)=>this[kMetrics].markUnpinned(pinType));\n                const serviceId = connection.serviceId;\n                if (serviceId) {\n                    let generation;\n                    const sid = serviceId.toHexString();\n                    if (generation = this.serviceGenerations.get(sid)) {\n                        connection.generation = generation;\n                    } else {\n                        this.serviceGenerations.set(sid, 0);\n                        connection.generation = 0;\n                    }\n                }\n            }\n            connection.markAvailable();\n            this.emitAndLog(ConnectionPool.CONNECTION_READY, new connection_pool_events_1.ConnectionReadyEvent(this, connection));\n            this[kPending]--;\n            callback(undefined, connection);\n            return;\n        });\n    }\n    ensureMinPoolSize() {\n        const minPoolSize = this.options.minPoolSize;\n        if (this[kPoolState] !== exports.PoolState.ready || minPoolSize === 0) {\n            return;\n        }\n        this[kConnections].prune((connection)=>this.destroyConnectionIfPerished(connection));\n        if (this.totalConnectionCount < minPoolSize && this.pendingConnectionCount < this.options.maxConnecting) {\n            // NOTE: ensureMinPoolSize should not try to get all the pending\n            // connection permits because that potentially delays the availability of\n            // the connection to a checkout request\n            this.createConnection((err, connection)=>{\n                if (err) {\n                    this[kServer].handleError(err);\n                }\n                if (!err && connection) {\n                    this[kConnections].push(connection);\n                    process.nextTick(()=>this.processWaitQueue());\n                }\n                if (this[kPoolState] === exports.PoolState.ready) {\n                    (0, timers_1.clearTimeout)(this[kMinPoolSizeTimer]);\n                    this[kMinPoolSizeTimer] = (0, timers_1.setTimeout)(()=>this.ensureMinPoolSize(), this.options.minPoolSizeCheckFrequencyMS);\n                }\n            });\n        } else {\n            (0, timers_1.clearTimeout)(this[kMinPoolSizeTimer]);\n            this[kMinPoolSizeTimer] = (0, timers_1.setTimeout)(()=>this.ensureMinPoolSize(), this.options.minPoolSizeCheckFrequencyMS);\n        }\n    }\n    processWaitQueue() {\n        if (this[kProcessingWaitQueue]) {\n            return;\n        }\n        this[kProcessingWaitQueue] = true;\n        while(this.waitQueueSize){\n            const waitQueueMember = this[kWaitQueue].first();\n            if (!waitQueueMember) {\n                this[kWaitQueue].shift();\n                continue;\n            }\n            if (waitQueueMember[kCancelled]) {\n                this[kWaitQueue].shift();\n                continue;\n            }\n            if (this[kPoolState] !== exports.PoolState.ready) {\n                const reason = this.closed ? \"poolClosed\" : \"connectionError\";\n                const error = this.closed ? new errors_1.PoolClosedError(this) : new errors_1.PoolClearedError(this);\n                this.emitAndLog(ConnectionPool.CONNECTION_CHECK_OUT_FAILED, new connection_pool_events_1.ConnectionCheckOutFailedEvent(this, reason, error));\n                waitQueueMember.timeoutController.clear();\n                this[kWaitQueue].shift();\n                waitQueueMember.callback(error);\n                continue;\n            }\n            if (!this.availableConnectionCount) {\n                break;\n            }\n            const connection = this[kConnections].shift();\n            if (!connection) {\n                break;\n            }\n            if (!this.destroyConnectionIfPerished(connection)) {\n                this[kCheckedOut].add(connection);\n                this.emitAndLog(ConnectionPool.CONNECTION_CHECKED_OUT, new connection_pool_events_1.ConnectionCheckedOutEvent(this, connection));\n                waitQueueMember.timeoutController.clear();\n                this[kWaitQueue].shift();\n                waitQueueMember.callback(undefined, connection);\n            }\n        }\n        const { maxPoolSize, maxConnecting } = this.options;\n        while(this.waitQueueSize > 0 && this.pendingConnectionCount < maxConnecting && (maxPoolSize === 0 || this.totalConnectionCount < maxPoolSize)){\n            const waitQueueMember = this[kWaitQueue].shift();\n            if (!waitQueueMember || waitQueueMember[kCancelled]) {\n                continue;\n            }\n            this.createConnection((err, connection)=>{\n                if (waitQueueMember[kCancelled]) {\n                    if (!err && connection) {\n                        this[kConnections].push(connection);\n                    }\n                } else {\n                    if (err) {\n                        this.emitAndLog(ConnectionPool.CONNECTION_CHECK_OUT_FAILED, // TODO(NODE-5192): Remove this cast\n                        new connection_pool_events_1.ConnectionCheckOutFailedEvent(this, \"connectionError\", err));\n                    } else if (connection) {\n                        this[kCheckedOut].add(connection);\n                        this.emitAndLog(ConnectionPool.CONNECTION_CHECKED_OUT, new connection_pool_events_1.ConnectionCheckedOutEvent(this, connection));\n                    }\n                    waitQueueMember.timeoutController.clear();\n                    waitQueueMember.callback(err, connection);\n                }\n                process.nextTick(()=>this.processWaitQueue());\n            });\n        }\n        this[kProcessingWaitQueue] = false;\n    }\n}\n/**\n * Emitted when the connection pool is created.\n * @event\n */ ConnectionPool.CONNECTION_POOL_CREATED = constants_1.CONNECTION_POOL_CREATED;\n/**\n * Emitted once when the connection pool is closed\n * @event\n */ ConnectionPool.CONNECTION_POOL_CLOSED = constants_1.CONNECTION_POOL_CLOSED;\n/**\n * Emitted each time the connection pool is cleared and it's generation incremented\n * @event\n */ ConnectionPool.CONNECTION_POOL_CLEARED = constants_1.CONNECTION_POOL_CLEARED;\n/**\n * Emitted each time the connection pool is marked ready\n * @event\n */ ConnectionPool.CONNECTION_POOL_READY = constants_1.CONNECTION_POOL_READY;\n/**\n * Emitted when a connection is created.\n * @event\n */ ConnectionPool.CONNECTION_CREATED = constants_1.CONNECTION_CREATED;\n/**\n * Emitted when a connection becomes established, and is ready to use\n * @event\n */ ConnectionPool.CONNECTION_READY = constants_1.CONNECTION_READY;\n/**\n * Emitted when a connection is closed\n * @event\n */ ConnectionPool.CONNECTION_CLOSED = constants_1.CONNECTION_CLOSED;\n/**\n * Emitted when an attempt to check out a connection begins\n * @event\n */ ConnectionPool.CONNECTION_CHECK_OUT_STARTED = constants_1.CONNECTION_CHECK_OUT_STARTED;\n/**\n * Emitted when an attempt to check out a connection fails\n * @event\n */ ConnectionPool.CONNECTION_CHECK_OUT_FAILED = constants_1.CONNECTION_CHECK_OUT_FAILED;\n/**\n * Emitted each time a connection is successfully checked out of the connection pool\n * @event\n */ ConnectionPool.CONNECTION_CHECKED_OUT = constants_1.CONNECTION_CHECKED_OUT;\n/**\n * Emitted each time a connection is successfully checked into the connection pool\n * @event\n */ ConnectionPool.CONNECTION_CHECKED_IN = constants_1.CONNECTION_CHECKED_IN;\nexports.ConnectionPool = ConnectionPool; //# sourceMappingURL=connection_pool.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongodb/lib/cmap/connection_pool.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongodb/lib/cmap/connection_pool_events.js":
/*!*****************************************************************!*\
  !*** ./node_modules/mongodb/lib/cmap/connection_pool_events.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.ConnectionPoolClearedEvent = exports.ConnectionCheckedInEvent = exports.ConnectionCheckedOutEvent = exports.ConnectionCheckOutFailedEvent = exports.ConnectionCheckOutStartedEvent = exports.ConnectionClosedEvent = exports.ConnectionReadyEvent = exports.ConnectionCreatedEvent = exports.ConnectionPoolClosedEvent = exports.ConnectionPoolReadyEvent = exports.ConnectionPoolCreatedEvent = exports.ConnectionPoolMonitoringEvent = void 0;\nconst constants_1 = __webpack_require__(/*! ../constants */ \"(ssr)/./node_modules/mongodb/lib/constants.js\");\n/**\n * The base export class for all monitoring events published from the connection pool\n * @public\n * @category Event\n */ class ConnectionPoolMonitoringEvent {\n    /** @internal */ constructor(pool){\n        this.time = new Date();\n        this.address = pool.address;\n    }\n}\nexports.ConnectionPoolMonitoringEvent = ConnectionPoolMonitoringEvent;\n/**\n * An event published when a connection pool is created\n * @public\n * @category Event\n */ class ConnectionPoolCreatedEvent extends ConnectionPoolMonitoringEvent {\n    /** @internal */ constructor(pool){\n        super(pool);\n        /** @internal */ this.name = constants_1.CONNECTION_POOL_CREATED;\n        const { maxConnecting, maxPoolSize, minPoolSize, maxIdleTimeMS, waitQueueTimeoutMS } = pool.options;\n        this.options = {\n            maxConnecting,\n            maxPoolSize,\n            minPoolSize,\n            maxIdleTimeMS,\n            waitQueueTimeoutMS\n        };\n    }\n}\nexports.ConnectionPoolCreatedEvent = ConnectionPoolCreatedEvent;\n/**\n * An event published when a connection pool is ready\n * @public\n * @category Event\n */ class ConnectionPoolReadyEvent extends ConnectionPoolMonitoringEvent {\n    /** @internal */ constructor(pool){\n        super(pool);\n        /** @internal */ this.name = constants_1.CONNECTION_POOL_READY;\n    }\n}\nexports.ConnectionPoolReadyEvent = ConnectionPoolReadyEvent;\n/**\n * An event published when a connection pool is closed\n * @public\n * @category Event\n */ class ConnectionPoolClosedEvent extends ConnectionPoolMonitoringEvent {\n    /** @internal */ constructor(pool){\n        super(pool);\n        /** @internal */ this.name = constants_1.CONNECTION_POOL_CLOSED;\n    }\n}\nexports.ConnectionPoolClosedEvent = ConnectionPoolClosedEvent;\n/**\n * An event published when a connection pool creates a new connection\n * @public\n * @category Event\n */ class ConnectionCreatedEvent extends ConnectionPoolMonitoringEvent {\n    /** @internal */ constructor(pool, connection){\n        super(pool);\n        /** @internal */ this.name = constants_1.CONNECTION_CREATED;\n        this.connectionId = connection.id;\n    }\n}\nexports.ConnectionCreatedEvent = ConnectionCreatedEvent;\n/**\n * An event published when a connection is ready for use\n * @public\n * @category Event\n */ class ConnectionReadyEvent extends ConnectionPoolMonitoringEvent {\n    /** @internal */ constructor(pool, connection){\n        super(pool);\n        /** @internal */ this.name = constants_1.CONNECTION_READY;\n        this.connectionId = connection.id;\n    }\n}\nexports.ConnectionReadyEvent = ConnectionReadyEvent;\n/**\n * An event published when a connection is closed\n * @public\n * @category Event\n */ class ConnectionClosedEvent extends ConnectionPoolMonitoringEvent {\n    /** @internal */ constructor(pool, connection, reason, error){\n        super(pool);\n        /** @internal */ this.name = constants_1.CONNECTION_CLOSED;\n        this.connectionId = connection.id;\n        this.reason = reason;\n        this.serviceId = connection.serviceId;\n        this.error = error ?? null;\n    }\n}\nexports.ConnectionClosedEvent = ConnectionClosedEvent;\n/**\n * An event published when a request to check a connection out begins\n * @public\n * @category Event\n */ class ConnectionCheckOutStartedEvent extends ConnectionPoolMonitoringEvent {\n    /** @internal */ constructor(pool){\n        super(pool);\n        /** @internal */ this.name = constants_1.CONNECTION_CHECK_OUT_STARTED;\n    }\n}\nexports.ConnectionCheckOutStartedEvent = ConnectionCheckOutStartedEvent;\n/**\n * An event published when a request to check a connection out fails\n * @public\n * @category Event\n */ class ConnectionCheckOutFailedEvent extends ConnectionPoolMonitoringEvent {\n    /** @internal */ constructor(pool, reason, error){\n        super(pool);\n        /** @internal */ this.name = constants_1.CONNECTION_CHECK_OUT_FAILED;\n        this.reason = reason;\n        this.error = error;\n    }\n}\nexports.ConnectionCheckOutFailedEvent = ConnectionCheckOutFailedEvent;\n/**\n * An event published when a connection is checked out of the connection pool\n * @public\n * @category Event\n */ class ConnectionCheckedOutEvent extends ConnectionPoolMonitoringEvent {\n    /** @internal */ constructor(pool, connection){\n        super(pool);\n        /** @internal */ this.name = constants_1.CONNECTION_CHECKED_OUT;\n        this.connectionId = connection.id;\n    }\n}\nexports.ConnectionCheckedOutEvent = ConnectionCheckedOutEvent;\n/**\n * An event published when a connection is checked into the connection pool\n * @public\n * @category Event\n */ class ConnectionCheckedInEvent extends ConnectionPoolMonitoringEvent {\n    /** @internal */ constructor(pool, connection){\n        super(pool);\n        /** @internal */ this.name = constants_1.CONNECTION_CHECKED_IN;\n        this.connectionId = connection.id;\n    }\n}\nexports.ConnectionCheckedInEvent = ConnectionCheckedInEvent;\n/**\n * An event published when a connection pool is cleared\n * @public\n * @category Event\n */ class ConnectionPoolClearedEvent extends ConnectionPoolMonitoringEvent {\n    /** @internal */ constructor(pool, options = {}){\n        super(pool);\n        /** @internal */ this.name = constants_1.CONNECTION_POOL_CLEARED;\n        this.serviceId = options.serviceId;\n        this.interruptInUseConnections = options.interruptInUseConnections;\n    }\n}\nexports.ConnectionPoolClearedEvent = ConnectionPoolClearedEvent; //# sourceMappingURL=connection_pool_events.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongodb/lib/cmap/connection_pool_events.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongodb/lib/cmap/errors.js":
/*!*************************************************!*\
  !*** ./node_modules/mongodb/lib/cmap/errors.js ***!
  \*************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.WaitQueueTimeoutError = exports.PoolClearedOnNetworkError = exports.PoolClearedError = exports.PoolClosedError = void 0;\nconst error_1 = __webpack_require__(/*! ../error */ \"(ssr)/./node_modules/mongodb/lib/error.js\");\n/**\n * An error indicating a connection pool is closed\n * @category Error\n */ class PoolClosedError extends error_1.MongoDriverError {\n    /**\n     * **Do not use this constructor!**\n     *\n     * Meant for internal use only.\n     *\n     * @remarks\n     * This class is only meant to be constructed within the driver. This constructor is\n     * not subject to semantic versioning compatibility guarantees and may change at any time.\n     *\n     * @public\n     **/ constructor(pool){\n        super(\"Attempted to check out a connection from closed connection pool\");\n        this.address = pool.address;\n    }\n    get name() {\n        return \"MongoPoolClosedError\";\n    }\n}\nexports.PoolClosedError = PoolClosedError;\n/**\n * An error indicating a connection pool is currently paused\n * @category Error\n */ class PoolClearedError extends error_1.MongoNetworkError {\n    /**\n     * **Do not use this constructor!**\n     *\n     * Meant for internal use only.\n     *\n     * @remarks\n     * This class is only meant to be constructed within the driver. This constructor is\n     * not subject to semantic versioning compatibility guarantees and may change at any time.\n     *\n     * @public\n     **/ constructor(pool, message){\n        const errorMessage = message ? message : `Connection pool for ${pool.address} was cleared because another operation failed with: \"${pool.serverError?.message}\"`;\n        super(errorMessage, pool.serverError ? {\n            cause: pool.serverError\n        } : undefined);\n        this.address = pool.address;\n        this.addErrorLabel(error_1.MongoErrorLabel.PoolRequstedRetry);\n    }\n    get name() {\n        return \"MongoPoolClearedError\";\n    }\n}\nexports.PoolClearedError = PoolClearedError;\n/**\n * An error indicating that a connection pool has been cleared after the monitor for that server timed out.\n * @category Error\n */ class PoolClearedOnNetworkError extends PoolClearedError {\n    /**\n     * **Do not use this constructor!**\n     *\n     * Meant for internal use only.\n     *\n     * @remarks\n     * This class is only meant to be constructed within the driver. This constructor is\n     * not subject to semantic versioning compatibility guarantees and may change at any time.\n     *\n     * @public\n     **/ constructor(pool){\n        super(pool, `Connection to ${pool.address} interrupted due to server monitor timeout`);\n    }\n    get name() {\n        return \"PoolClearedOnNetworkError\";\n    }\n}\nexports.PoolClearedOnNetworkError = PoolClearedOnNetworkError;\n/**\n * An error thrown when a request to check out a connection times out\n * @category Error\n */ class WaitQueueTimeoutError extends error_1.MongoDriverError {\n    /**\n     * **Do not use this constructor!**\n     *\n     * Meant for internal use only.\n     *\n     * @remarks\n     * This class is only meant to be constructed within the driver. This constructor is\n     * not subject to semantic versioning compatibility guarantees and may change at any time.\n     *\n     * @public\n     **/ constructor(message, address){\n        super(message);\n        this.address = address;\n    }\n    get name() {\n        return \"MongoWaitQueueTimeoutError\";\n    }\n}\nexports.WaitQueueTimeoutError = WaitQueueTimeoutError; //# sourceMappingURL=errors.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbW9uZ29kYi9saWIvY21hcC9lcnJvcnMuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYkEsOENBQTZDO0lBQUVHLE9BQU87QUFBSyxDQUFDLEVBQUM7QUFDN0RELDZCQUE2QixHQUFHQSxpQ0FBaUMsR0FBR0Esd0JBQXdCLEdBQUdBLHVCQUF1QixHQUFHLEtBQUs7QUFDOUgsTUFBTU0sVUFBVUMsbUJBQU9BLENBQUMsMkRBQVU7QUFDbEM7OztDQUdDLEdBQ0QsTUFBTUYsd0JBQXdCQyxRQUFRRSxnQkFBZ0I7SUFDbEQ7Ozs7Ozs7Ozs7TUFVRSxHQUNGQyxZQUFZQyxJQUFJLENBQUU7UUFDZCxLQUFLLENBQUM7UUFDTixJQUFJLENBQUNDLE9BQU8sR0FBR0QsS0FBS0MsT0FBTztJQUMvQjtJQUNBLElBQUlDLE9BQU87UUFDUCxPQUFPO0lBQ1g7QUFDSjtBQUNBWix1QkFBdUIsR0FBR0s7QUFDMUI7OztDQUdDLEdBQ0QsTUFBTUQseUJBQXlCRSxRQUFRTyxpQkFBaUI7SUFDcEQ7Ozs7Ozs7Ozs7TUFVRSxHQUNGSixZQUFZQyxJQUFJLEVBQUVJLE9BQU8sQ0FBRTtRQUN2QixNQUFNQyxlQUFlRCxVQUNmQSxVQUNBLENBQUMsb0JBQW9CLEVBQUVKLEtBQUtDLE9BQU8sQ0FBQyxxREFBcUQsRUFBRUQsS0FBS00sV0FBVyxFQUFFRixRQUFRLENBQUMsQ0FBQztRQUM3SCxLQUFLLENBQUNDLGNBQWNMLEtBQUtNLFdBQVcsR0FBRztZQUFFQyxPQUFPUCxLQUFLTSxXQUFXO1FBQUMsSUFBSUU7UUFDckUsSUFBSSxDQUFDUCxPQUFPLEdBQUdELEtBQUtDLE9BQU87UUFDM0IsSUFBSSxDQUFDUSxhQUFhLENBQUNiLFFBQVFjLGVBQWUsQ0FBQ0MsaUJBQWlCO0lBQ2hFO0lBQ0EsSUFBSVQsT0FBTztRQUNQLE9BQU87SUFDWDtBQUNKO0FBQ0FaLHdCQUF3QixHQUFHSTtBQUMzQjs7O0NBR0MsR0FDRCxNQUFNRCxrQ0FBa0NDO0lBQ3BDOzs7Ozs7Ozs7O01BVUUsR0FDRkssWUFBWUMsSUFBSSxDQUFFO1FBQ2QsS0FBSyxDQUFDQSxNQUFNLENBQUMsY0FBYyxFQUFFQSxLQUFLQyxPQUFPLENBQUMsMENBQTBDLENBQUM7SUFDekY7SUFDQSxJQUFJQyxPQUFPO1FBQ1AsT0FBTztJQUNYO0FBQ0o7QUFDQVosaUNBQWlDLEdBQUdHO0FBQ3BDOzs7Q0FHQyxHQUNELE1BQU1ELDhCQUE4QkksUUFBUUUsZ0JBQWdCO0lBQ3hEOzs7Ozs7Ozs7O01BVUUsR0FDRkMsWUFBWUssT0FBTyxFQUFFSCxPQUFPLENBQUU7UUFDMUIsS0FBSyxDQUFDRztRQUNOLElBQUksQ0FBQ0gsT0FBTyxHQUFHQTtJQUNuQjtJQUNBLElBQUlDLE9BQU87UUFDUCxPQUFPO0lBQ1g7QUFDSjtBQUNBWiw2QkFBNkIsR0FBR0UsdUJBQ2hDLGtDQUFrQyIsInNvdXJjZXMiOlsid2VicGFjazovL2Jsb2ctYXBwbGljYXRpb24vLi9ub2RlX21vZHVsZXMvbW9uZ29kYi9saWIvY21hcC9lcnJvcnMuanM/NWRjOSJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuV2FpdFF1ZXVlVGltZW91dEVycm9yID0gZXhwb3J0cy5Qb29sQ2xlYXJlZE9uTmV0d29ya0Vycm9yID0gZXhwb3J0cy5Qb29sQ2xlYXJlZEVycm9yID0gZXhwb3J0cy5Qb29sQ2xvc2VkRXJyb3IgPSB2b2lkIDA7XG5jb25zdCBlcnJvcl8xID0gcmVxdWlyZShcIi4uL2Vycm9yXCIpO1xuLyoqXG4gKiBBbiBlcnJvciBpbmRpY2F0aW5nIGEgY29ubmVjdGlvbiBwb29sIGlzIGNsb3NlZFxuICogQGNhdGVnb3J5IEVycm9yXG4gKi9cbmNsYXNzIFBvb2xDbG9zZWRFcnJvciBleHRlbmRzIGVycm9yXzEuTW9uZ29Ecml2ZXJFcnJvciB7XG4gICAgLyoqXG4gICAgICogKipEbyBub3QgdXNlIHRoaXMgY29uc3RydWN0b3IhKipcbiAgICAgKlxuICAgICAqIE1lYW50IGZvciBpbnRlcm5hbCB1c2Ugb25seS5cbiAgICAgKlxuICAgICAqIEByZW1hcmtzXG4gICAgICogVGhpcyBjbGFzcyBpcyBvbmx5IG1lYW50IHRvIGJlIGNvbnN0cnVjdGVkIHdpdGhpbiB0aGUgZHJpdmVyLiBUaGlzIGNvbnN0cnVjdG9yIGlzXG4gICAgICogbm90IHN1YmplY3QgdG8gc2VtYW50aWMgdmVyc2lvbmluZyBjb21wYXRpYmlsaXR5IGd1YXJhbnRlZXMgYW5kIG1heSBjaGFuZ2UgYXQgYW55IHRpbWUuXG4gICAgICpcbiAgICAgKiBAcHVibGljXG4gICAgICoqL1xuICAgIGNvbnN0cnVjdG9yKHBvb2wpIHtcbiAgICAgICAgc3VwZXIoJ0F0dGVtcHRlZCB0byBjaGVjayBvdXQgYSBjb25uZWN0aW9uIGZyb20gY2xvc2VkIGNvbm5lY3Rpb24gcG9vbCcpO1xuICAgICAgICB0aGlzLmFkZHJlc3MgPSBwb29sLmFkZHJlc3M7XG4gICAgfVxuICAgIGdldCBuYW1lKCkge1xuICAgICAgICByZXR1cm4gJ01vbmdvUG9vbENsb3NlZEVycm9yJztcbiAgICB9XG59XG5leHBvcnRzLlBvb2xDbG9zZWRFcnJvciA9IFBvb2xDbG9zZWRFcnJvcjtcbi8qKlxuICogQW4gZXJyb3IgaW5kaWNhdGluZyBhIGNvbm5lY3Rpb24gcG9vbCBpcyBjdXJyZW50bHkgcGF1c2VkXG4gKiBAY2F0ZWdvcnkgRXJyb3JcbiAqL1xuY2xhc3MgUG9vbENsZWFyZWRFcnJvciBleHRlbmRzIGVycm9yXzEuTW9uZ29OZXR3b3JrRXJyb3Ige1xuICAgIC8qKlxuICAgICAqICoqRG8gbm90IHVzZSB0aGlzIGNvbnN0cnVjdG9yISoqXG4gICAgICpcbiAgICAgKiBNZWFudCBmb3IgaW50ZXJuYWwgdXNlIG9ubHkuXG4gICAgICpcbiAgICAgKiBAcmVtYXJrc1xuICAgICAqIFRoaXMgY2xhc3MgaXMgb25seSBtZWFudCB0byBiZSBjb25zdHJ1Y3RlZCB3aXRoaW4gdGhlIGRyaXZlci4gVGhpcyBjb25zdHJ1Y3RvciBpc1xuICAgICAqIG5vdCBzdWJqZWN0IHRvIHNlbWFudGljIHZlcnNpb25pbmcgY29tcGF0aWJpbGl0eSBndWFyYW50ZWVzIGFuZCBtYXkgY2hhbmdlIGF0IGFueSB0aW1lLlxuICAgICAqXG4gICAgICogQHB1YmxpY1xuICAgICAqKi9cbiAgICBjb25zdHJ1Y3Rvcihwb29sLCBtZXNzYWdlKSB7XG4gICAgICAgIGNvbnN0IGVycm9yTWVzc2FnZSA9IG1lc3NhZ2VcbiAgICAgICAgICAgID8gbWVzc2FnZVxuICAgICAgICAgICAgOiBgQ29ubmVjdGlvbiBwb29sIGZvciAke3Bvb2wuYWRkcmVzc30gd2FzIGNsZWFyZWQgYmVjYXVzZSBhbm90aGVyIG9wZXJhdGlvbiBmYWlsZWQgd2l0aDogXCIke3Bvb2wuc2VydmVyRXJyb3I/Lm1lc3NhZ2V9XCJgO1xuICAgICAgICBzdXBlcihlcnJvck1lc3NhZ2UsIHBvb2wuc2VydmVyRXJyb3IgPyB7IGNhdXNlOiBwb29sLnNlcnZlckVycm9yIH0gOiB1bmRlZmluZWQpO1xuICAgICAgICB0aGlzLmFkZHJlc3MgPSBwb29sLmFkZHJlc3M7XG4gICAgICAgIHRoaXMuYWRkRXJyb3JMYWJlbChlcnJvcl8xLk1vbmdvRXJyb3JMYWJlbC5Qb29sUmVxdXN0ZWRSZXRyeSk7XG4gICAgfVxuICAgIGdldCBuYW1lKCkge1xuICAgICAgICByZXR1cm4gJ01vbmdvUG9vbENsZWFyZWRFcnJvcic7XG4gICAgfVxufVxuZXhwb3J0cy5Qb29sQ2xlYXJlZEVycm9yID0gUG9vbENsZWFyZWRFcnJvcjtcbi8qKlxuICogQW4gZXJyb3IgaW5kaWNhdGluZyB0aGF0IGEgY29ubmVjdGlvbiBwb29sIGhhcyBiZWVuIGNsZWFyZWQgYWZ0ZXIgdGhlIG1vbml0b3IgZm9yIHRoYXQgc2VydmVyIHRpbWVkIG91dC5cbiAqIEBjYXRlZ29yeSBFcnJvclxuICovXG5jbGFzcyBQb29sQ2xlYXJlZE9uTmV0d29ya0Vycm9yIGV4dGVuZHMgUG9vbENsZWFyZWRFcnJvciB7XG4gICAgLyoqXG4gICAgICogKipEbyBub3QgdXNlIHRoaXMgY29uc3RydWN0b3IhKipcbiAgICAgKlxuICAgICAqIE1lYW50IGZvciBpbnRlcm5hbCB1c2Ugb25seS5cbiAgICAgKlxuICAgICAqIEByZW1hcmtzXG4gICAgICogVGhpcyBjbGFzcyBpcyBvbmx5IG1lYW50IHRvIGJlIGNvbnN0cnVjdGVkIHdpdGhpbiB0aGUgZHJpdmVyLiBUaGlzIGNvbnN0cnVjdG9yIGlzXG4gICAgICogbm90IHN1YmplY3QgdG8gc2VtYW50aWMgdmVyc2lvbmluZyBjb21wYXRpYmlsaXR5IGd1YXJhbnRlZXMgYW5kIG1heSBjaGFuZ2UgYXQgYW55IHRpbWUuXG4gICAgICpcbiAgICAgKiBAcHVibGljXG4gICAgICoqL1xuICAgIGNvbnN0cnVjdG9yKHBvb2wpIHtcbiAgICAgICAgc3VwZXIocG9vbCwgYENvbm5lY3Rpb24gdG8gJHtwb29sLmFkZHJlc3N9IGludGVycnVwdGVkIGR1ZSB0byBzZXJ2ZXIgbW9uaXRvciB0aW1lb3V0YCk7XG4gICAgfVxuICAgIGdldCBuYW1lKCkge1xuICAgICAgICByZXR1cm4gJ1Bvb2xDbGVhcmVkT25OZXR3b3JrRXJyb3InO1xuICAgIH1cbn1cbmV4cG9ydHMuUG9vbENsZWFyZWRPbk5ldHdvcmtFcnJvciA9IFBvb2xDbGVhcmVkT25OZXR3b3JrRXJyb3I7XG4vKipcbiAqIEFuIGVycm9yIHRocm93biB3aGVuIGEgcmVxdWVzdCB0byBjaGVjayBvdXQgYSBjb25uZWN0aW9uIHRpbWVzIG91dFxuICogQGNhdGVnb3J5IEVycm9yXG4gKi9cbmNsYXNzIFdhaXRRdWV1ZVRpbWVvdXRFcnJvciBleHRlbmRzIGVycm9yXzEuTW9uZ29Ecml2ZXJFcnJvciB7XG4gICAgLyoqXG4gICAgICogKipEbyBub3QgdXNlIHRoaXMgY29uc3RydWN0b3IhKipcbiAgICAgKlxuICAgICAqIE1lYW50IGZvciBpbnRlcm5hbCB1c2Ugb25seS5cbiAgICAgKlxuICAgICAqIEByZW1hcmtzXG4gICAgICogVGhpcyBjbGFzcyBpcyBvbmx5IG1lYW50IHRvIGJlIGNvbnN0cnVjdGVkIHdpdGhpbiB0aGUgZHJpdmVyLiBUaGlzIGNvbnN0cnVjdG9yIGlzXG4gICAgICogbm90IHN1YmplY3QgdG8gc2VtYW50aWMgdmVyc2lvbmluZyBjb21wYXRpYmlsaXR5IGd1YXJhbnRlZXMgYW5kIG1heSBjaGFuZ2UgYXQgYW55IHRpbWUuXG4gICAgICpcbiAgICAgKiBAcHVibGljXG4gICAgICoqL1xuICAgIGNvbnN0cnVjdG9yKG1lc3NhZ2UsIGFkZHJlc3MpIHtcbiAgICAgICAgc3VwZXIobWVzc2FnZSk7XG4gICAgICAgIHRoaXMuYWRkcmVzcyA9IGFkZHJlc3M7XG4gICAgfVxuICAgIGdldCBuYW1lKCkge1xuICAgICAgICByZXR1cm4gJ01vbmdvV2FpdFF1ZXVlVGltZW91dEVycm9yJztcbiAgICB9XG59XG5leHBvcnRzLldhaXRRdWV1ZVRpbWVvdXRFcnJvciA9IFdhaXRRdWV1ZVRpbWVvdXRFcnJvcjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWVycm9ycy5qcy5tYXAiXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJXYWl0UXVldWVUaW1lb3V0RXJyb3IiLCJQb29sQ2xlYXJlZE9uTmV0d29ya0Vycm9yIiwiUG9vbENsZWFyZWRFcnJvciIsIlBvb2xDbG9zZWRFcnJvciIsImVycm9yXzEiLCJyZXF1aXJlIiwiTW9uZ29Ecml2ZXJFcnJvciIsImNvbnN0cnVjdG9yIiwicG9vbCIsImFkZHJlc3MiLCJuYW1lIiwiTW9uZ29OZXR3b3JrRXJyb3IiLCJtZXNzYWdlIiwiZXJyb3JNZXNzYWdlIiwic2VydmVyRXJyb3IiLCJjYXVzZSIsInVuZGVmaW5lZCIsImFkZEVycm9yTGFiZWwiLCJNb25nb0Vycm9yTGFiZWwiLCJQb29sUmVxdXN0ZWRSZXRyeSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongodb/lib/cmap/errors.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongodb/lib/cmap/handshake/client_metadata.js":
/*!********************************************************************!*\
  !*** ./node_modules/mongodb/lib/cmap/handshake/client_metadata.js ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.getFAASEnv = exports.makeClientMetadata = exports.LimitedSizeDocument = void 0;\nconst os = __webpack_require__(/*! os */ \"os\");\nconst process = __webpack_require__(/*! process */ \"process\");\nconst bson_1 = __webpack_require__(/*! ../../bson */ \"(ssr)/./node_modules/mongodb/lib/bson.js\");\nconst error_1 = __webpack_require__(/*! ../../error */ \"(ssr)/./node_modules/mongodb/lib/error.js\");\n// eslint-disable-next-line @typescript-eslint/no-var-requires\nconst NODE_DRIVER_VERSION = (__webpack_require__(/*! ../../../package.json */ \"(ssr)/./node_modules/mongodb/package.json\").version);\n/** @internal */ class LimitedSizeDocument {\n    constructor(maxSize){\n        this.maxSize = maxSize;\n        this.document = new Map();\n        /** BSON overhead: Int32 + Null byte */ this.documentSize = 5;\n    }\n    /** Only adds key/value if the bsonByteLength is less than MAX_SIZE */ ifItFitsItSits(key, value) {\n        // The BSON byteLength of the new element is the same as serializing it to its own document\n        // subtracting the document size int32 and the null terminator.\n        const newElementSize = bson_1.BSON.serialize(new Map().set(key, value)).byteLength - 5;\n        if (newElementSize + this.documentSize > this.maxSize) {\n            return false;\n        }\n        this.documentSize += newElementSize;\n        this.document.set(key, value);\n        return true;\n    }\n    toObject() {\n        return bson_1.BSON.deserialize(bson_1.BSON.serialize(this.document), {\n            promoteLongs: false,\n            promoteBuffers: false,\n            promoteValues: false,\n            useBigInt64: false\n        });\n    }\n}\nexports.LimitedSizeDocument = LimitedSizeDocument;\n/**\n * From the specs:\n * Implementors SHOULD cumulatively update fields in the following order until the document is under the size limit:\n * 1. Omit fields from `env` except `env.name`.\n * 2. Omit fields from `os` except `os.type`.\n * 3. Omit the `env` document entirely.\n * 4. Truncate `platform`. -- special we do not truncate this field\n */ function makeClientMetadata(options) {\n    const metadataDocument = new LimitedSizeDocument(512);\n    const { appName = \"\" } = options;\n    // Add app name first, it must be sent\n    if (appName.length > 0) {\n        const name = Buffer.byteLength(appName, \"utf8\") <= 128 ? options.appName : Buffer.from(appName, \"utf8\").subarray(0, 128).toString(\"utf8\");\n        metadataDocument.ifItFitsItSits(\"application\", {\n            name\n        });\n    }\n    const { name = \"\", version = \"\", platform = \"\" } = options.driverInfo;\n    const driverInfo = {\n        name: name.length > 0 ? `nodejs|${name}` : \"nodejs\",\n        version: version.length > 0 ? `${NODE_DRIVER_VERSION}|${version}` : NODE_DRIVER_VERSION\n    };\n    if (!metadataDocument.ifItFitsItSits(\"driver\", driverInfo)) {\n        throw new error_1.MongoInvalidArgumentError(\"Unable to include driverInfo name and version, metadata cannot exceed 512 bytes\");\n    }\n    let runtimeInfo = getRuntimeInfo();\n    if (platform.length > 0) {\n        runtimeInfo = `${runtimeInfo}|${platform}`;\n    }\n    if (!metadataDocument.ifItFitsItSits(\"platform\", runtimeInfo)) {\n        throw new error_1.MongoInvalidArgumentError(\"Unable to include driverInfo platform, metadata cannot exceed 512 bytes\");\n    }\n    // Note: order matters, os.type is last so it will be removed last if we're at maxSize\n    const osInfo = new Map().set(\"name\", process.platform).set(\"architecture\", process.arch).set(\"version\", os.release()).set(\"type\", os.type());\n    if (!metadataDocument.ifItFitsItSits(\"os\", osInfo)) {\n        for (const key of osInfo.keys()){\n            osInfo.delete(key);\n            if (osInfo.size === 0) break;\n            if (metadataDocument.ifItFitsItSits(\"os\", osInfo)) break;\n        }\n    }\n    const faasEnv = getFAASEnv();\n    if (faasEnv != null) {\n        if (!metadataDocument.ifItFitsItSits(\"env\", faasEnv)) {\n            for (const key of faasEnv.keys()){\n                faasEnv.delete(key);\n                if (faasEnv.size === 0) break;\n                if (metadataDocument.ifItFitsItSits(\"env\", faasEnv)) break;\n            }\n        }\n    }\n    return metadataDocument.toObject();\n}\nexports.makeClientMetadata = makeClientMetadata;\n/**\n * Collects FaaS metadata.\n * - `name` MUST be the last key in the Map returned.\n */ function getFAASEnv() {\n    const { AWS_EXECUTION_ENV = \"\", AWS_LAMBDA_RUNTIME_API = \"\", FUNCTIONS_WORKER_RUNTIME = \"\", K_SERVICE = \"\", FUNCTION_NAME = \"\", VERCEL = \"\", AWS_LAMBDA_FUNCTION_MEMORY_SIZE = \"\", AWS_REGION = \"\", FUNCTION_MEMORY_MB = \"\", FUNCTION_REGION = \"\", FUNCTION_TIMEOUT_SEC = \"\", VERCEL_REGION = \"\" } = process.env;\n    const isAWSFaaS = AWS_EXECUTION_ENV.startsWith(\"AWS_Lambda_\") || AWS_LAMBDA_RUNTIME_API.length > 0;\n    const isAzureFaaS = FUNCTIONS_WORKER_RUNTIME.length > 0;\n    const isGCPFaaS = K_SERVICE.length > 0 || FUNCTION_NAME.length > 0;\n    const isVercelFaaS = VERCEL.length > 0;\n    // Note: order matters, name must always be the last key\n    const faasEnv = new Map();\n    // When isVercelFaaS is true so is isAWSFaaS; Vercel inherits the AWS env\n    if (isVercelFaaS && !(isAzureFaaS || isGCPFaaS)) {\n        if (VERCEL_REGION.length > 0) {\n            faasEnv.set(\"region\", VERCEL_REGION);\n        }\n        faasEnv.set(\"name\", \"vercel\");\n        return faasEnv;\n    }\n    if (isAWSFaaS && !(isAzureFaaS || isGCPFaaS || isVercelFaaS)) {\n        if (AWS_REGION.length > 0) {\n            faasEnv.set(\"region\", AWS_REGION);\n        }\n        if (AWS_LAMBDA_FUNCTION_MEMORY_SIZE.length > 0 && Number.isInteger(+AWS_LAMBDA_FUNCTION_MEMORY_SIZE)) {\n            faasEnv.set(\"memory_mb\", new bson_1.Int32(AWS_LAMBDA_FUNCTION_MEMORY_SIZE));\n        }\n        faasEnv.set(\"name\", \"aws.lambda\");\n        return faasEnv;\n    }\n    if (isAzureFaaS && !(isGCPFaaS || isAWSFaaS || isVercelFaaS)) {\n        faasEnv.set(\"name\", \"azure.func\");\n        return faasEnv;\n    }\n    if (isGCPFaaS && !(isAzureFaaS || isAWSFaaS || isVercelFaaS)) {\n        if (FUNCTION_REGION.length > 0) {\n            faasEnv.set(\"region\", FUNCTION_REGION);\n        }\n        if (FUNCTION_MEMORY_MB.length > 0 && Number.isInteger(+FUNCTION_MEMORY_MB)) {\n            faasEnv.set(\"memory_mb\", new bson_1.Int32(FUNCTION_MEMORY_MB));\n        }\n        if (FUNCTION_TIMEOUT_SEC.length > 0 && Number.isInteger(+FUNCTION_TIMEOUT_SEC)) {\n            faasEnv.set(\"timeout_sec\", new bson_1.Int32(FUNCTION_TIMEOUT_SEC));\n        }\n        faasEnv.set(\"name\", \"gcp.func\");\n        return faasEnv;\n    }\n    return null;\n}\nexports.getFAASEnv = getFAASEnv;\n/**\n * @internal\n * Get current JavaScript runtime platform\n *\n * NOTE: The version information fetching is intentionally written defensively\n * to avoid having a released driver version that becomes incompatible\n * with a future change to these global objects.\n */ function getRuntimeInfo() {\n    if (\"Deno\" in globalThis) {\n        const version = typeof Deno?.version?.deno === \"string\" ? Deno?.version?.deno : \"0.0.0-unknown\";\n        return `Deno v${version}, ${os.endianness()}`;\n    }\n    if (\"Bun\" in globalThis) {\n        const version = typeof Bun?.version === \"string\" ? Bun?.version : \"0.0.0-unknown\";\n        return `Bun v${version}, ${os.endianness()}`;\n    }\n    return `Node.js ${process.version}, ${os.endianness()}`;\n} //# sourceMappingURL=client_metadata.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongodb/lib/cmap/handshake/client_metadata.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongodb/lib/cmap/message_stream.js":
/*!*********************************************************!*\
  !*** ./node_modules/mongodb/lib/cmap/message_stream.js ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.MessageStream = void 0;\nconst stream_1 = __webpack_require__(/*! stream */ \"stream\");\nconst error_1 = __webpack_require__(/*! ../error */ \"(ssr)/./node_modules/mongodb/lib/error.js\");\nconst utils_1 = __webpack_require__(/*! ../utils */ \"(ssr)/./node_modules/mongodb/lib/utils.js\");\nconst commands_1 = __webpack_require__(/*! ./commands */ \"(ssr)/./node_modules/mongodb/lib/cmap/commands.js\");\nconst compression_1 = __webpack_require__(/*! ./wire_protocol/compression */ \"(ssr)/./node_modules/mongodb/lib/cmap/wire_protocol/compression.js\");\nconst constants_1 = __webpack_require__(/*! ./wire_protocol/constants */ \"(ssr)/./node_modules/mongodb/lib/cmap/wire_protocol/constants.js\");\nconst MESSAGE_HEADER_SIZE = 16;\nconst COMPRESSION_DETAILS_SIZE = 9; // originalOpcode + uncompressedSize, compressorID\nconst kDefaultMaxBsonMessageSize = 1024 * 1024 * 16 * 4;\n/** @internal */ const kBuffer = Symbol(\"buffer\");\n/**\n * A duplex stream that is capable of reading and writing raw wire protocol messages, with\n * support for optional compression\n * @internal\n */ class MessageStream extends stream_1.Duplex {\n    constructor(options = {}){\n        super(options);\n        /** @internal */ this.isMonitoringConnection = false;\n        this.maxBsonMessageSize = options.maxBsonMessageSize || kDefaultMaxBsonMessageSize;\n        this[kBuffer] = new utils_1.BufferPool();\n    }\n    get buffer() {\n        return this[kBuffer];\n    }\n    _write(chunk, _, callback) {\n        this[kBuffer].append(chunk);\n        processIncomingData(this, callback);\n    }\n    _read() {\n        // NOTE: This implementation is empty because we explicitly push data to be read\n        //       when `writeMessage` is called.\n        return;\n    }\n    writeCommand(command, operationDescription) {\n        const agreedCompressor = operationDescription.agreedCompressor ?? \"none\";\n        if (agreedCompressor === \"none\" || !commands_1.OpCompressedRequest.canCompress(command)) {\n            const data = command.toBin();\n            this.push(Array.isArray(data) ? Buffer.concat(data) : data);\n            return;\n        }\n        // otherwise, compress the message\n        const concatenatedOriginalCommandBuffer = Buffer.concat(command.toBin());\n        const messageToBeCompressed = concatenatedOriginalCommandBuffer.slice(MESSAGE_HEADER_SIZE);\n        // Extract information needed for OP_COMPRESSED from the uncompressed message\n        const originalCommandOpCode = concatenatedOriginalCommandBuffer.readInt32LE(12);\n        const options = {\n            agreedCompressor,\n            zlibCompressionLevel: operationDescription.zlibCompressionLevel ?? 0\n        };\n        // Compress the message body\n        (0, compression_1.compress)(options, messageToBeCompressed).then((compressedMessage)=>{\n            // Create the msgHeader of OP_COMPRESSED\n            const msgHeader = Buffer.alloc(MESSAGE_HEADER_SIZE);\n            msgHeader.writeInt32LE(MESSAGE_HEADER_SIZE + COMPRESSION_DETAILS_SIZE + compressedMessage.length, 0); // messageLength\n            msgHeader.writeInt32LE(command.requestId, 4); // requestID\n            msgHeader.writeInt32LE(0, 8); // responseTo (zero)\n            msgHeader.writeInt32LE(constants_1.OP_COMPRESSED, 12); // opCode\n            // Create the compression details of OP_COMPRESSED\n            const compressionDetails = Buffer.alloc(COMPRESSION_DETAILS_SIZE);\n            compressionDetails.writeInt32LE(originalCommandOpCode, 0); // originalOpcode\n            compressionDetails.writeInt32LE(messageToBeCompressed.length, 4); // Size of the uncompressed compressedMessage, excluding the MsgHeader\n            compressionDetails.writeUInt8(compression_1.Compressor[agreedCompressor], 8); // compressorID\n            this.push(Buffer.concat([\n                msgHeader,\n                compressionDetails,\n                compressedMessage\n            ]));\n        }, (error)=>{\n            operationDescription.cb(error);\n        });\n    }\n}\nexports.MessageStream = MessageStream;\nfunction processIncomingData(stream, callback) {\n    const buffer = stream[kBuffer];\n    const sizeOfMessage = buffer.getInt32();\n    if (sizeOfMessage == null) {\n        return callback();\n    }\n    if (sizeOfMessage < 0) {\n        return callback(new error_1.MongoParseError(`Invalid message size: ${sizeOfMessage}`));\n    }\n    if (sizeOfMessage > stream.maxBsonMessageSize) {\n        return callback(new error_1.MongoParseError(`Invalid message size: ${sizeOfMessage}, max allowed: ${stream.maxBsonMessageSize}`));\n    }\n    if (sizeOfMessage > buffer.length) {\n        return callback();\n    }\n    const message = buffer.read(sizeOfMessage);\n    const messageHeader = {\n        length: message.readInt32LE(0),\n        requestId: message.readInt32LE(4),\n        responseTo: message.readInt32LE(8),\n        opCode: message.readInt32LE(12)\n    };\n    const monitorHasAnotherHello = ()=>{\n        if (stream.isMonitoringConnection) {\n            // Can we read the next message size?\n            const sizeOfMessage = buffer.getInt32();\n            if (sizeOfMessage != null && sizeOfMessage <= buffer.length) {\n                return true;\n            }\n        }\n        return false;\n    };\n    let ResponseType = messageHeader.opCode === constants_1.OP_MSG ? commands_1.OpMsgResponse : commands_1.OpQueryResponse;\n    if (messageHeader.opCode !== constants_1.OP_COMPRESSED) {\n        const messageBody = message.subarray(MESSAGE_HEADER_SIZE);\n        // If we are a monitoring connection message stream and\n        // there is more in the buffer that can be read, skip processing since we\n        // want the last hello command response that is in the buffer.\n        if (monitorHasAnotherHello()) {\n            return processIncomingData(stream, callback);\n        }\n        stream.emit(\"message\", new ResponseType(message, messageHeader, messageBody));\n        if (buffer.length >= 4) {\n            return processIncomingData(stream, callback);\n        }\n        return callback();\n    }\n    messageHeader.fromCompressed = true;\n    messageHeader.opCode = message.readInt32LE(MESSAGE_HEADER_SIZE);\n    messageHeader.length = message.readInt32LE(MESSAGE_HEADER_SIZE + 4);\n    const compressorID = message[MESSAGE_HEADER_SIZE + 8];\n    const compressedBuffer = message.slice(MESSAGE_HEADER_SIZE + 9);\n    // recalculate based on wrapped opcode\n    ResponseType = messageHeader.opCode === constants_1.OP_MSG ? commands_1.OpMsgResponse : commands_1.OpQueryResponse;\n    (0, compression_1.decompress)(compressorID, compressedBuffer).then((messageBody)=>{\n        if (messageBody.length !== messageHeader.length) {\n            return callback(new error_1.MongoDecompressionError(\"Message body and message header must be the same length\"));\n        }\n        // If we are a monitoring connection message stream and\n        // there is more in the buffer that can be read, skip processing since we\n        // want the last hello command response that is in the buffer.\n        if (monitorHasAnotherHello()) {\n            return processIncomingData(stream, callback);\n        }\n        stream.emit(\"message\", new ResponseType(message, messageHeader, messageBody));\n        if (buffer.length >= 4) {\n            return processIncomingData(stream, callback);\n        }\n        return callback();\n    }, (error)=>{\n        return callback(error);\n    });\n} //# sourceMappingURL=message_stream.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongodb/lib/cmap/message_stream.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongodb/lib/cmap/metrics.js":
/*!**************************************************!*\
  !*** ./node_modules/mongodb/lib/cmap/metrics.js ***!
  \**************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.ConnectionPoolMetrics = void 0;\n/** @internal */ class ConnectionPoolMetrics {\n    constructor(){\n        this.txnConnections = 0;\n        this.cursorConnections = 0;\n        this.otherConnections = 0;\n    }\n    /**\n     * Mark a connection as pinned for a specific operation.\n     */ markPinned(pinType) {\n        if (pinType === ConnectionPoolMetrics.TXN) {\n            this.txnConnections += 1;\n        } else if (pinType === ConnectionPoolMetrics.CURSOR) {\n            this.cursorConnections += 1;\n        } else {\n            this.otherConnections += 1;\n        }\n    }\n    /**\n     * Unmark a connection as pinned for an operation.\n     */ markUnpinned(pinType) {\n        if (pinType === ConnectionPoolMetrics.TXN) {\n            this.txnConnections -= 1;\n        } else if (pinType === ConnectionPoolMetrics.CURSOR) {\n            this.cursorConnections -= 1;\n        } else {\n            this.otherConnections -= 1;\n        }\n    }\n    /**\n     * Return information about the cmap metrics as a string.\n     */ info(maxPoolSize) {\n        return \"Timed out while checking out a connection from connection pool: \" + `maxPoolSize: ${maxPoolSize}, ` + `connections in use by cursors: ${this.cursorConnections}, ` + `connections in use by transactions: ${this.txnConnections}, ` + `connections in use by other operations: ${this.otherConnections}`;\n    }\n    /**\n     * Reset the metrics to the initial values.\n     */ reset() {\n        this.txnConnections = 0;\n        this.cursorConnections = 0;\n        this.otherConnections = 0;\n    }\n}\nConnectionPoolMetrics.TXN = \"txn\";\nConnectionPoolMetrics.CURSOR = \"cursor\";\nConnectionPoolMetrics.OTHER = \"other\";\nexports.ConnectionPoolMetrics = ConnectionPoolMetrics; //# sourceMappingURL=metrics.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbW9uZ29kYi9saWIvY21hcC9tZXRyaWNzLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2JBLDhDQUE2QztJQUFFRyxPQUFPO0FBQUssQ0FBQyxFQUFDO0FBQzdERCw2QkFBNkIsR0FBRyxLQUFLO0FBQ3JDLGNBQWMsR0FDZCxNQUFNRTtJQUNGQyxhQUFjO1FBQ1YsSUFBSSxDQUFDQyxjQUFjLEdBQUc7UUFDdEIsSUFBSSxDQUFDQyxpQkFBaUIsR0FBRztRQUN6QixJQUFJLENBQUNDLGdCQUFnQixHQUFHO0lBQzVCO0lBQ0E7O0tBRUMsR0FDREMsV0FBV0MsT0FBTyxFQUFFO1FBQ2hCLElBQUlBLFlBQVlOLHNCQUFzQk8sR0FBRyxFQUFFO1lBQ3ZDLElBQUksQ0FBQ0wsY0FBYyxJQUFJO1FBQzNCLE9BQ0ssSUFBSUksWUFBWU4sc0JBQXNCUSxNQUFNLEVBQUU7WUFDL0MsSUFBSSxDQUFDTCxpQkFBaUIsSUFBSTtRQUM5QixPQUNLO1lBQ0QsSUFBSSxDQUFDQyxnQkFBZ0IsSUFBSTtRQUM3QjtJQUNKO0lBQ0E7O0tBRUMsR0FDREssYUFBYUgsT0FBTyxFQUFFO1FBQ2xCLElBQUlBLFlBQVlOLHNCQUFzQk8sR0FBRyxFQUFFO1lBQ3ZDLElBQUksQ0FBQ0wsY0FBYyxJQUFJO1FBQzNCLE9BQ0ssSUFBSUksWUFBWU4sc0JBQXNCUSxNQUFNLEVBQUU7WUFDL0MsSUFBSSxDQUFDTCxpQkFBaUIsSUFBSTtRQUM5QixPQUNLO1lBQ0QsSUFBSSxDQUFDQyxnQkFBZ0IsSUFBSTtRQUM3QjtJQUNKO0lBQ0E7O0tBRUMsR0FDRE0sS0FBS0MsV0FBVyxFQUFFO1FBQ2QsT0FBUSxxRUFDSixDQUFDLGFBQWEsRUFBRUEsWUFBWSxFQUFFLENBQUMsR0FDL0IsQ0FBQywrQkFBK0IsRUFBRSxJQUFJLENBQUNSLGlCQUFpQixDQUFDLEVBQUUsQ0FBQyxHQUM1RCxDQUFDLG9DQUFvQyxFQUFFLElBQUksQ0FBQ0QsY0FBYyxDQUFDLEVBQUUsQ0FBQyxHQUM5RCxDQUFDLHdDQUF3QyxFQUFFLElBQUksQ0FBQ0UsZ0JBQWdCLENBQUMsQ0FBQztJQUMxRTtJQUNBOztLQUVDLEdBQ0RRLFFBQVE7UUFDSixJQUFJLENBQUNWLGNBQWMsR0FBRztRQUN0QixJQUFJLENBQUNDLGlCQUFpQixHQUFHO1FBQ3pCLElBQUksQ0FBQ0MsZ0JBQWdCLEdBQUc7SUFDNUI7QUFDSjtBQUNBSixzQkFBc0JPLEdBQUcsR0FBRztBQUM1QlAsc0JBQXNCUSxNQUFNLEdBQUc7QUFDL0JSLHNCQUFzQmEsS0FBSyxHQUFHO0FBQzlCZiw2QkFBNkIsR0FBR0UsdUJBQ2hDLG1DQUFtQyIsInNvdXJjZXMiOlsid2VicGFjazovL2Jsb2ctYXBwbGljYXRpb24vLi9ub2RlX21vZHVsZXMvbW9uZ29kYi9saWIvY21hcC9tZXRyaWNzLmpzP2ExNDUiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLkNvbm5lY3Rpb25Qb29sTWV0cmljcyA9IHZvaWQgMDtcbi8qKiBAaW50ZXJuYWwgKi9cbmNsYXNzIENvbm5lY3Rpb25Qb29sTWV0cmljcyB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHRoaXMudHhuQ29ubmVjdGlvbnMgPSAwO1xuICAgICAgICB0aGlzLmN1cnNvckNvbm5lY3Rpb25zID0gMDtcbiAgICAgICAgdGhpcy5vdGhlckNvbm5lY3Rpb25zID0gMDtcbiAgICB9XG4gICAgLyoqXG4gICAgICogTWFyayBhIGNvbm5lY3Rpb24gYXMgcGlubmVkIGZvciBhIHNwZWNpZmljIG9wZXJhdGlvbi5cbiAgICAgKi9cbiAgICBtYXJrUGlubmVkKHBpblR5cGUpIHtcbiAgICAgICAgaWYgKHBpblR5cGUgPT09IENvbm5lY3Rpb25Qb29sTWV0cmljcy5UWE4pIHtcbiAgICAgICAgICAgIHRoaXMudHhuQ29ubmVjdGlvbnMgKz0gMTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChwaW5UeXBlID09PSBDb25uZWN0aW9uUG9vbE1ldHJpY3MuQ1VSU09SKSB7XG4gICAgICAgICAgICB0aGlzLmN1cnNvckNvbm5lY3Rpb25zICs9IDE7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0aGlzLm90aGVyQ29ubmVjdGlvbnMgKz0gMTtcbiAgICAgICAgfVxuICAgIH1cbiAgICAvKipcbiAgICAgKiBVbm1hcmsgYSBjb25uZWN0aW9uIGFzIHBpbm5lZCBmb3IgYW4gb3BlcmF0aW9uLlxuICAgICAqL1xuICAgIG1hcmtVbnBpbm5lZChwaW5UeXBlKSB7XG4gICAgICAgIGlmIChwaW5UeXBlID09PSBDb25uZWN0aW9uUG9vbE1ldHJpY3MuVFhOKSB7XG4gICAgICAgICAgICB0aGlzLnR4bkNvbm5lY3Rpb25zIC09IDE7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAocGluVHlwZSA9PT0gQ29ubmVjdGlvblBvb2xNZXRyaWNzLkNVUlNPUikge1xuICAgICAgICAgICAgdGhpcy5jdXJzb3JDb25uZWN0aW9ucyAtPSAxO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5vdGhlckNvbm5lY3Rpb25zIC09IDE7XG4gICAgICAgIH1cbiAgICB9XG4gICAgLyoqXG4gICAgICogUmV0dXJuIGluZm9ybWF0aW9uIGFib3V0IHRoZSBjbWFwIG1ldHJpY3MgYXMgYSBzdHJpbmcuXG4gICAgICovXG4gICAgaW5mbyhtYXhQb29sU2l6ZSkge1xuICAgICAgICByZXR1cm4gKCdUaW1lZCBvdXQgd2hpbGUgY2hlY2tpbmcgb3V0IGEgY29ubmVjdGlvbiBmcm9tIGNvbm5lY3Rpb24gcG9vbDogJyArXG4gICAgICAgICAgICBgbWF4UG9vbFNpemU6ICR7bWF4UG9vbFNpemV9LCBgICtcbiAgICAgICAgICAgIGBjb25uZWN0aW9ucyBpbiB1c2UgYnkgY3Vyc29yczogJHt0aGlzLmN1cnNvckNvbm5lY3Rpb25zfSwgYCArXG4gICAgICAgICAgICBgY29ubmVjdGlvbnMgaW4gdXNlIGJ5IHRyYW5zYWN0aW9uczogJHt0aGlzLnR4bkNvbm5lY3Rpb25zfSwgYCArXG4gICAgICAgICAgICBgY29ubmVjdGlvbnMgaW4gdXNlIGJ5IG90aGVyIG9wZXJhdGlvbnM6ICR7dGhpcy5vdGhlckNvbm5lY3Rpb25zfWApO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBSZXNldCB0aGUgbWV0cmljcyB0byB0aGUgaW5pdGlhbCB2YWx1ZXMuXG4gICAgICovXG4gICAgcmVzZXQoKSB7XG4gICAgICAgIHRoaXMudHhuQ29ubmVjdGlvbnMgPSAwO1xuICAgICAgICB0aGlzLmN1cnNvckNvbm5lY3Rpb25zID0gMDtcbiAgICAgICAgdGhpcy5vdGhlckNvbm5lY3Rpb25zID0gMDtcbiAgICB9XG59XG5Db25uZWN0aW9uUG9vbE1ldHJpY3MuVFhOID0gJ3R4bic7XG5Db25uZWN0aW9uUG9vbE1ldHJpY3MuQ1VSU09SID0gJ2N1cnNvcic7XG5Db25uZWN0aW9uUG9vbE1ldHJpY3MuT1RIRVIgPSAnb3RoZXInO1xuZXhwb3J0cy5Db25uZWN0aW9uUG9vbE1ldHJpY3MgPSBDb25uZWN0aW9uUG9vbE1ldHJpY3M7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1tZXRyaWNzLmpzLm1hcCJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsIkNvbm5lY3Rpb25Qb29sTWV0cmljcyIsImNvbnN0cnVjdG9yIiwidHhuQ29ubmVjdGlvbnMiLCJjdXJzb3JDb25uZWN0aW9ucyIsIm90aGVyQ29ubmVjdGlvbnMiLCJtYXJrUGlubmVkIiwicGluVHlwZSIsIlRYTiIsIkNVUlNPUiIsIm1hcmtVbnBpbm5lZCIsImluZm8iLCJtYXhQb29sU2l6ZSIsInJlc2V0IiwiT1RIRVIiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongodb/lib/cmap/metrics.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongodb/lib/cmap/stream_description.js":
/*!*************************************************************!*\
  !*** ./node_modules/mongodb/lib/cmap/stream_description.js ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.StreamDescription = void 0;\nconst common_1 = __webpack_require__(/*! ../sdam/common */ \"(ssr)/./node_modules/mongodb/lib/sdam/common.js\");\nconst server_description_1 = __webpack_require__(/*! ../sdam/server_description */ \"(ssr)/./node_modules/mongodb/lib/sdam/server_description.js\");\nconst RESPONSE_FIELDS = [\n    \"minWireVersion\",\n    \"maxWireVersion\",\n    \"maxBsonObjectSize\",\n    \"maxMessageSizeBytes\",\n    \"maxWriteBatchSize\",\n    \"logicalSessionTimeoutMinutes\"\n];\n/** @public */ class StreamDescription {\n    constructor(address, options){\n        this.address = address;\n        this.type = common_1.ServerType.Unknown;\n        this.minWireVersion = undefined;\n        this.maxWireVersion = undefined;\n        this.maxBsonObjectSize = 16777216;\n        this.maxMessageSizeBytes = 48000000;\n        this.maxWriteBatchSize = 100000;\n        this.logicalSessionTimeoutMinutes = options?.logicalSessionTimeoutMinutes;\n        this.loadBalanced = !!options?.loadBalanced;\n        this.compressors = options && options.compressors && Array.isArray(options.compressors) ? options.compressors : [];\n    }\n    receiveResponse(response) {\n        if (response == null) {\n            return;\n        }\n        this.type = (0, server_description_1.parseServerType)(response);\n        for (const field of RESPONSE_FIELDS){\n            if (response[field] != null) {\n                this[field] = response[field];\n            }\n            // testing case\n            if (\"__nodejs_mock_server__\" in response) {\n                this.__nodejs_mock_server__ = response[\"__nodejs_mock_server__\"];\n            }\n        }\n        if (response.compression) {\n            this.compressor = this.compressors.filter((c)=>response.compression?.includes(c))[0];\n        }\n    }\n}\nexports.StreamDescription = StreamDescription; //# sourceMappingURL=stream_description.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbW9uZ29kYi9saWIvY21hcC9zdHJlYW1fZGVzY3JpcHRpb24uanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYkEsOENBQTZDO0lBQUVHLE9BQU87QUFBSyxDQUFDLEVBQUM7QUFDN0RELHlCQUF5QixHQUFHLEtBQUs7QUFDakMsTUFBTUcsV0FBV0MsbUJBQU9BLENBQUMsdUVBQWdCO0FBQ3pDLE1BQU1DLHVCQUF1QkQsbUJBQU9BLENBQUMsK0ZBQTRCO0FBQ2pFLE1BQU1FLGtCQUFrQjtJQUNwQjtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7Q0FDSDtBQUNELFlBQVksR0FDWixNQUFNSjtJQUNGSyxZQUFZQyxPQUFPLEVBQUVDLE9BQU8sQ0FBRTtRQUMxQixJQUFJLENBQUNELE9BQU8sR0FBR0E7UUFDZixJQUFJLENBQUNFLElBQUksR0FBR1AsU0FBU1EsVUFBVSxDQUFDQyxPQUFPO1FBQ3ZDLElBQUksQ0FBQ0MsY0FBYyxHQUFHQztRQUN0QixJQUFJLENBQUNDLGNBQWMsR0FBR0Q7UUFDdEIsSUFBSSxDQUFDRSxpQkFBaUIsR0FBRztRQUN6QixJQUFJLENBQUNDLG1CQUFtQixHQUFHO1FBQzNCLElBQUksQ0FBQ0MsaUJBQWlCLEdBQUc7UUFDekIsSUFBSSxDQUFDQyw0QkFBNEIsR0FBR1YsU0FBU1U7UUFDN0MsSUFBSSxDQUFDQyxZQUFZLEdBQUcsQ0FBQyxDQUFDWCxTQUFTVztRQUMvQixJQUFJLENBQUNDLFdBQVcsR0FDWlosV0FBV0EsUUFBUVksV0FBVyxJQUFJQyxNQUFNQyxPQUFPLENBQUNkLFFBQVFZLFdBQVcsSUFDN0RaLFFBQVFZLFdBQVcsR0FDbkIsRUFBRTtJQUNoQjtJQUNBRyxnQkFBZ0JDLFFBQVEsRUFBRTtRQUN0QixJQUFJQSxZQUFZLE1BQU07WUFDbEI7UUFDSjtRQUNBLElBQUksQ0FBQ2YsSUFBSSxHQUFHLENBQUMsR0FBR0wscUJBQXFCcUIsZUFBZSxFQUFFRDtRQUN0RCxLQUFLLE1BQU1FLFNBQVNyQixnQkFBaUI7WUFDakMsSUFBSW1CLFFBQVEsQ0FBQ0UsTUFBTSxJQUFJLE1BQU07Z0JBQ3pCLElBQUksQ0FBQ0EsTUFBTSxHQUFHRixRQUFRLENBQUNFLE1BQU07WUFDakM7WUFDQSxlQUFlO1lBQ2YsSUFBSSw0QkFBNEJGLFVBQVU7Z0JBQ3RDLElBQUksQ0FBQ0csc0JBQXNCLEdBQUdILFFBQVEsQ0FBQyx5QkFBeUI7WUFDcEU7UUFDSjtRQUNBLElBQUlBLFNBQVNJLFdBQVcsRUFBRTtZQUN0QixJQUFJLENBQUNDLFVBQVUsR0FBRyxJQUFJLENBQUNULFdBQVcsQ0FBQ1UsTUFBTSxDQUFDQyxDQUFBQSxJQUFLUCxTQUFTSSxXQUFXLEVBQUVJLFNBQVNELEdBQUcsQ0FBQyxFQUFFO1FBQ3hGO0lBQ0o7QUFDSjtBQUNBaEMseUJBQXlCLEdBQUdFLG1CQUM1Qiw4Q0FBOEMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9ibG9nLWFwcGxpY2F0aW9uLy4vbm9kZV9tb2R1bGVzL21vbmdvZGIvbGliL2NtYXAvc3RyZWFtX2Rlc2NyaXB0aW9uLmpzP2IyMWMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLlN0cmVhbURlc2NyaXB0aW9uID0gdm9pZCAwO1xuY29uc3QgY29tbW9uXzEgPSByZXF1aXJlKFwiLi4vc2RhbS9jb21tb25cIik7XG5jb25zdCBzZXJ2ZXJfZGVzY3JpcHRpb25fMSA9IHJlcXVpcmUoXCIuLi9zZGFtL3NlcnZlcl9kZXNjcmlwdGlvblwiKTtcbmNvbnN0IFJFU1BPTlNFX0ZJRUxEUyA9IFtcbiAgICAnbWluV2lyZVZlcnNpb24nLFxuICAgICdtYXhXaXJlVmVyc2lvbicsXG4gICAgJ21heEJzb25PYmplY3RTaXplJyxcbiAgICAnbWF4TWVzc2FnZVNpemVCeXRlcycsXG4gICAgJ21heFdyaXRlQmF0Y2hTaXplJyxcbiAgICAnbG9naWNhbFNlc3Npb25UaW1lb3V0TWludXRlcydcbl07XG4vKiogQHB1YmxpYyAqL1xuY2xhc3MgU3RyZWFtRGVzY3JpcHRpb24ge1xuICAgIGNvbnN0cnVjdG9yKGFkZHJlc3MsIG9wdGlvbnMpIHtcbiAgICAgICAgdGhpcy5hZGRyZXNzID0gYWRkcmVzcztcbiAgICAgICAgdGhpcy50eXBlID0gY29tbW9uXzEuU2VydmVyVHlwZS5Vbmtub3duO1xuICAgICAgICB0aGlzLm1pbldpcmVWZXJzaW9uID0gdW5kZWZpbmVkO1xuICAgICAgICB0aGlzLm1heFdpcmVWZXJzaW9uID0gdW5kZWZpbmVkO1xuICAgICAgICB0aGlzLm1heEJzb25PYmplY3RTaXplID0gMTY3NzcyMTY7XG4gICAgICAgIHRoaXMubWF4TWVzc2FnZVNpemVCeXRlcyA9IDQ4MDAwMDAwO1xuICAgICAgICB0aGlzLm1heFdyaXRlQmF0Y2hTaXplID0gMTAwMDAwO1xuICAgICAgICB0aGlzLmxvZ2ljYWxTZXNzaW9uVGltZW91dE1pbnV0ZXMgPSBvcHRpb25zPy5sb2dpY2FsU2Vzc2lvblRpbWVvdXRNaW51dGVzO1xuICAgICAgICB0aGlzLmxvYWRCYWxhbmNlZCA9ICEhb3B0aW9ucz8ubG9hZEJhbGFuY2VkO1xuICAgICAgICB0aGlzLmNvbXByZXNzb3JzID1cbiAgICAgICAgICAgIG9wdGlvbnMgJiYgb3B0aW9ucy5jb21wcmVzc29ycyAmJiBBcnJheS5pc0FycmF5KG9wdGlvbnMuY29tcHJlc3NvcnMpXG4gICAgICAgICAgICAgICAgPyBvcHRpb25zLmNvbXByZXNzb3JzXG4gICAgICAgICAgICAgICAgOiBbXTtcbiAgICB9XG4gICAgcmVjZWl2ZVJlc3BvbnNlKHJlc3BvbnNlKSB7XG4gICAgICAgIGlmIChyZXNwb25zZSA9PSBudWxsKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy50eXBlID0gKDAsIHNlcnZlcl9kZXNjcmlwdGlvbl8xLnBhcnNlU2VydmVyVHlwZSkocmVzcG9uc2UpO1xuICAgICAgICBmb3IgKGNvbnN0IGZpZWxkIG9mIFJFU1BPTlNFX0ZJRUxEUykge1xuICAgICAgICAgICAgaWYgKHJlc3BvbnNlW2ZpZWxkXSAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgdGhpc1tmaWVsZF0gPSByZXNwb25zZVtmaWVsZF07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyB0ZXN0aW5nIGNhc2VcbiAgICAgICAgICAgIGlmICgnX19ub2RlanNfbW9ja19zZXJ2ZXJfXycgaW4gcmVzcG9uc2UpIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9fbm9kZWpzX21vY2tfc2VydmVyX18gPSByZXNwb25zZVsnX19ub2RlanNfbW9ja19zZXJ2ZXJfXyddO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmIChyZXNwb25zZS5jb21wcmVzc2lvbikge1xuICAgICAgICAgICAgdGhpcy5jb21wcmVzc29yID0gdGhpcy5jb21wcmVzc29ycy5maWx0ZXIoYyA9PiByZXNwb25zZS5jb21wcmVzc2lvbj8uaW5jbHVkZXMoYykpWzBdO1xuICAgICAgICB9XG4gICAgfVxufVxuZXhwb3J0cy5TdHJlYW1EZXNjcmlwdGlvbiA9IFN0cmVhbURlc2NyaXB0aW9uO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9c3RyZWFtX2Rlc2NyaXB0aW9uLmpzLm1hcCJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsIlN0cmVhbURlc2NyaXB0aW9uIiwiY29tbW9uXzEiLCJyZXF1aXJlIiwic2VydmVyX2Rlc2NyaXB0aW9uXzEiLCJSRVNQT05TRV9GSUVMRFMiLCJjb25zdHJ1Y3RvciIsImFkZHJlc3MiLCJvcHRpb25zIiwidHlwZSIsIlNlcnZlclR5cGUiLCJVbmtub3duIiwibWluV2lyZVZlcnNpb24iLCJ1bmRlZmluZWQiLCJtYXhXaXJlVmVyc2lvbiIsIm1heEJzb25PYmplY3RTaXplIiwibWF4TWVzc2FnZVNpemVCeXRlcyIsIm1heFdyaXRlQmF0Y2hTaXplIiwibG9naWNhbFNlc3Npb25UaW1lb3V0TWludXRlcyIsImxvYWRCYWxhbmNlZCIsImNvbXByZXNzb3JzIiwiQXJyYXkiLCJpc0FycmF5IiwicmVjZWl2ZVJlc3BvbnNlIiwicmVzcG9uc2UiLCJwYXJzZVNlcnZlclR5cGUiLCJmaWVsZCIsIl9fbm9kZWpzX21vY2tfc2VydmVyX18iLCJjb21wcmVzc2lvbiIsImNvbXByZXNzb3IiLCJmaWx0ZXIiLCJjIiwiaW5jbHVkZXMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongodb/lib/cmap/stream_description.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongodb/lib/cmap/wire_protocol/compression.js":
/*!********************************************************************!*\
  !*** ./node_modules/mongodb/lib/cmap/wire_protocol/compression.js ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.decompressResponse = exports.compressCommand = exports.decompress = exports.compress = exports.uncompressibleCommands = exports.Compressor = void 0;\nconst util_1 = __webpack_require__(/*! util */ \"util\");\nconst zlib = __webpack_require__(/*! zlib */ \"zlib\");\nconst constants_1 = __webpack_require__(/*! ../../constants */ \"(ssr)/./node_modules/mongodb/lib/constants.js\");\nconst deps_1 = __webpack_require__(/*! ../../deps */ \"(ssr)/./node_modules/mongodb/lib/deps.js\");\nconst error_1 = __webpack_require__(/*! ../../error */ \"(ssr)/./node_modules/mongodb/lib/error.js\");\nconst commands_1 = __webpack_require__(/*! ../commands */ \"(ssr)/./node_modules/mongodb/lib/cmap/commands.js\");\nconst constants_2 = __webpack_require__(/*! ./constants */ \"(ssr)/./node_modules/mongodb/lib/cmap/wire_protocol/constants.js\");\n/** @public */ exports.Compressor = Object.freeze({\n    none: 0,\n    snappy: 1,\n    zlib: 2,\n    zstd: 3\n});\nexports.uncompressibleCommands = new Set([\n    constants_1.LEGACY_HELLO_COMMAND,\n    \"saslStart\",\n    \"saslContinue\",\n    \"getnonce\",\n    \"authenticate\",\n    \"createUser\",\n    \"updateUser\",\n    \"copydbSaslStart\",\n    \"copydbgetnonce\",\n    \"copydb\"\n]);\nconst ZSTD_COMPRESSION_LEVEL = 3;\nconst zlibInflate = (0, util_1.promisify)(zlib.inflate.bind(zlib));\nconst zlibDeflate = (0, util_1.promisify)(zlib.deflate.bind(zlib));\nlet zstd;\nlet Snappy = null;\nfunction loadSnappy() {\n    if (Snappy == null) {\n        const snappyImport = (0, deps_1.getSnappy)();\n        if (\"kModuleError\" in snappyImport) {\n            throw snappyImport.kModuleError;\n        }\n        Snappy = snappyImport;\n    }\n    return Snappy;\n}\n// Facilitate compressing a message using an agreed compressor\nasync function compress(options, dataToBeCompressed) {\n    const zlibOptions = {};\n    switch(options.agreedCompressor){\n        case \"snappy\":\n            {\n                Snappy ??= loadSnappy();\n                return Snappy.compress(dataToBeCompressed);\n            }\n        case \"zstd\":\n            {\n                loadZstd();\n                if (\"kModuleError\" in zstd) {\n                    throw zstd[\"kModuleError\"];\n                }\n                return zstd.compress(dataToBeCompressed, ZSTD_COMPRESSION_LEVEL);\n            }\n        case \"zlib\":\n            {\n                if (options.zlibCompressionLevel) {\n                    zlibOptions.level = options.zlibCompressionLevel;\n                }\n                return zlibDeflate(dataToBeCompressed, zlibOptions);\n            }\n        default:\n            {\n                throw new error_1.MongoInvalidArgumentError(`Unknown compressor ${options.agreedCompressor} failed to compress`);\n            }\n    }\n}\nexports.compress = compress;\n// Decompress a message using the given compressor\nasync function decompress(compressorID, compressedData) {\n    if (compressorID !== exports.Compressor.snappy && compressorID !== exports.Compressor.zstd && compressorID !== exports.Compressor.zlib && compressorID !== exports.Compressor.none) {\n        throw new error_1.MongoDecompressionError(`Server sent message compressed using an unsupported compressor. (Received compressor ID ${compressorID})`);\n    }\n    switch(compressorID){\n        case exports.Compressor.snappy:\n            {\n                Snappy ??= loadSnappy();\n                return Snappy.uncompress(compressedData, {\n                    asBuffer: true\n                });\n            }\n        case exports.Compressor.zstd:\n            {\n                loadZstd();\n                if (\"kModuleError\" in zstd) {\n                    throw zstd[\"kModuleError\"];\n                }\n                return zstd.decompress(compressedData);\n            }\n        case exports.Compressor.zlib:\n            {\n                return zlibInflate(compressedData);\n            }\n        default:\n            {\n                return compressedData;\n            }\n    }\n}\nexports.decompress = decompress;\n/**\n * Load ZStandard if it is not already set.\n */ function loadZstd() {\n    if (!zstd) {\n        zstd = (0, deps_1.getZstdLibrary)();\n    }\n}\nconst MESSAGE_HEADER_SIZE = 16;\n/**\n * @internal\n *\n * Compresses an OP_MSG or OP_QUERY message, if compression is configured.  This method\n * also serializes the command to BSON.\n */ async function compressCommand(command, description) {\n    const finalCommand = description.agreedCompressor === \"none\" || !commands_1.OpCompressedRequest.canCompress(command) ? command : new commands_1.OpCompressedRequest(command, {\n        agreedCompressor: description.agreedCompressor ?? \"none\",\n        zlibCompressionLevel: description.zlibCompressionLevel ?? 0\n    });\n    const data = await finalCommand.toBin();\n    return Buffer.concat(data);\n}\nexports.compressCommand = compressCommand;\n/**\n * @internal\n *\n * Decompresses an OP_MSG or OP_QUERY response from the server, if compression is configured.\n *\n * This method does not parse the response's BSON.\n */ async function decompressResponse(message) {\n    const messageHeader = {\n        length: message.readInt32LE(0),\n        requestId: message.readInt32LE(4),\n        responseTo: message.readInt32LE(8),\n        opCode: message.readInt32LE(12)\n    };\n    if (messageHeader.opCode !== constants_2.OP_COMPRESSED) {\n        const ResponseType = messageHeader.opCode === constants_2.OP_MSG ? commands_1.OpMsgResponse : commands_1.OpQueryResponse;\n        const messageBody = message.subarray(MESSAGE_HEADER_SIZE);\n        return new ResponseType(message, messageHeader, messageBody);\n    }\n    const header = {\n        ...messageHeader,\n        fromCompressed: true,\n        opCode: message.readInt32LE(MESSAGE_HEADER_SIZE),\n        length: message.readInt32LE(MESSAGE_HEADER_SIZE + 4)\n    };\n    const compressorID = message[MESSAGE_HEADER_SIZE + 8];\n    const compressedBuffer = message.slice(MESSAGE_HEADER_SIZE + 9);\n    // recalculate based on wrapped opcode\n    const ResponseType = header.opCode === constants_2.OP_MSG ? commands_1.OpMsgResponse : commands_1.OpQueryResponse;\n    const messageBody = await decompress(compressorID, compressedBuffer);\n    if (messageBody.length !== header.length) {\n        throw new error_1.MongoDecompressionError(\"Message body and message header must be the same length\");\n    }\n    return new ResponseType(message, header, messageBody);\n}\nexports.decompressResponse = decompressResponse; //# sourceMappingURL=compression.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongodb/lib/cmap/wire_protocol/compression.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongodb/lib/cmap/wire_protocol/constants.js":
/*!******************************************************************!*\
  !*** ./node_modules/mongodb/lib/cmap/wire_protocol/constants.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.OP_MSG = exports.OP_COMPRESSED = exports.OP_DELETE = exports.OP_QUERY = exports.OP_INSERT = exports.OP_UPDATE = exports.OP_REPLY = exports.MIN_SUPPORTED_QE_SERVER_VERSION = exports.MIN_SUPPORTED_QE_WIRE_VERSION = exports.MAX_SUPPORTED_WIRE_VERSION = exports.MIN_SUPPORTED_WIRE_VERSION = exports.MAX_SUPPORTED_SERVER_VERSION = exports.MIN_SUPPORTED_SERVER_VERSION = void 0;\nexports.MIN_SUPPORTED_SERVER_VERSION = \"3.6\";\nexports.MAX_SUPPORTED_SERVER_VERSION = \"7.0\";\nexports.MIN_SUPPORTED_WIRE_VERSION = 6;\nexports.MAX_SUPPORTED_WIRE_VERSION = 21;\nexports.MIN_SUPPORTED_QE_WIRE_VERSION = 21;\nexports.MIN_SUPPORTED_QE_SERVER_VERSION = \"7.0\";\nexports.OP_REPLY = 1;\nexports.OP_UPDATE = 2001;\nexports.OP_INSERT = 2002;\nexports.OP_QUERY = 2004;\nexports.OP_DELETE = 2006;\nexports.OP_COMPRESSED = 2012;\nexports.OP_MSG = 2013; //# sourceMappingURL=constants.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbW9uZ29kYi9saWIvY21hcC93aXJlX3Byb3RvY29sL2NvbnN0YW50cy5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiQSw4Q0FBNkM7SUFBRUcsT0FBTztBQUFLLENBQUMsRUFBQztBQUM3REQsY0FBYyxHQUFHQSxxQkFBcUIsR0FBR0EsaUJBQWlCLEdBQUdBLGdCQUFnQixHQUFHQSxpQkFBaUIsR0FBR0EsaUJBQWlCLEdBQUdBLGdCQUFnQixHQUFHQSx1Q0FBdUMsR0FBR0EscUNBQXFDLEdBQUdBLGtDQUFrQyxHQUFHQSxrQ0FBa0MsR0FBR0Esb0NBQW9DLEdBQUdBLG9DQUFvQyxHQUFHLEtBQUs7QUFDMVhBLG9DQUFvQyxHQUFHO0FBQ3ZDQSxvQ0FBb0MsR0FBRztBQUN2Q0Esa0NBQWtDLEdBQUc7QUFDckNBLGtDQUFrQyxHQUFHO0FBQ3JDQSxxQ0FBcUMsR0FBRztBQUN4Q0EsdUNBQXVDLEdBQUc7QUFDMUNBLGdCQUFnQixHQUFHO0FBQ25CQSxpQkFBaUIsR0FBRztBQUNwQkEsaUJBQWlCLEdBQUc7QUFDcEJBLGdCQUFnQixHQUFHO0FBQ25CQSxpQkFBaUIsR0FBRztBQUNwQkEscUJBQXFCLEdBQUc7QUFDeEJBLGNBQWMsR0FBRyxNQUNqQixxQ0FBcUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9ibG9nLWFwcGxpY2F0aW9uLy4vbm9kZV9tb2R1bGVzL21vbmdvZGIvbGliL2NtYXAvd2lyZV9wcm90b2NvbC9jb25zdGFudHMuanM/Yjg5MSJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuT1BfTVNHID0gZXhwb3J0cy5PUF9DT01QUkVTU0VEID0gZXhwb3J0cy5PUF9ERUxFVEUgPSBleHBvcnRzLk9QX1FVRVJZID0gZXhwb3J0cy5PUF9JTlNFUlQgPSBleHBvcnRzLk9QX1VQREFURSA9IGV4cG9ydHMuT1BfUkVQTFkgPSBleHBvcnRzLk1JTl9TVVBQT1JURURfUUVfU0VSVkVSX1ZFUlNJT04gPSBleHBvcnRzLk1JTl9TVVBQT1JURURfUUVfV0lSRV9WRVJTSU9OID0gZXhwb3J0cy5NQVhfU1VQUE9SVEVEX1dJUkVfVkVSU0lPTiA9IGV4cG9ydHMuTUlOX1NVUFBPUlRFRF9XSVJFX1ZFUlNJT04gPSBleHBvcnRzLk1BWF9TVVBQT1JURURfU0VSVkVSX1ZFUlNJT04gPSBleHBvcnRzLk1JTl9TVVBQT1JURURfU0VSVkVSX1ZFUlNJT04gPSB2b2lkIDA7XG5leHBvcnRzLk1JTl9TVVBQT1JURURfU0VSVkVSX1ZFUlNJT04gPSAnMy42JztcbmV4cG9ydHMuTUFYX1NVUFBPUlRFRF9TRVJWRVJfVkVSU0lPTiA9ICc3LjAnO1xuZXhwb3J0cy5NSU5fU1VQUE9SVEVEX1dJUkVfVkVSU0lPTiA9IDY7XG5leHBvcnRzLk1BWF9TVVBQT1JURURfV0lSRV9WRVJTSU9OID0gMjE7XG5leHBvcnRzLk1JTl9TVVBQT1JURURfUUVfV0lSRV9WRVJTSU9OID0gMjE7XG5leHBvcnRzLk1JTl9TVVBQT1JURURfUUVfU0VSVkVSX1ZFUlNJT04gPSAnNy4wJztcbmV4cG9ydHMuT1BfUkVQTFkgPSAxO1xuZXhwb3J0cy5PUF9VUERBVEUgPSAyMDAxO1xuZXhwb3J0cy5PUF9JTlNFUlQgPSAyMDAyO1xuZXhwb3J0cy5PUF9RVUVSWSA9IDIwMDQ7XG5leHBvcnRzLk9QX0RFTEVURSA9IDIwMDY7XG5leHBvcnRzLk9QX0NPTVBSRVNTRUQgPSAyMDEyO1xuZXhwb3J0cy5PUF9NU0cgPSAyMDEzO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Y29uc3RhbnRzLmpzLm1hcCJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsIk9QX01TRyIsIk9QX0NPTVBSRVNTRUQiLCJPUF9ERUxFVEUiLCJPUF9RVUVSWSIsIk9QX0lOU0VSVCIsIk9QX1VQREFURSIsIk9QX1JFUExZIiwiTUlOX1NVUFBPUlRFRF9RRV9TRVJWRVJfVkVSU0lPTiIsIk1JTl9TVVBQT1JURURfUUVfV0lSRV9WRVJTSU9OIiwiTUFYX1NVUFBPUlRFRF9XSVJFX1ZFUlNJT04iLCJNSU5fU1VQUE9SVEVEX1dJUkVfVkVSU0lPTiIsIk1BWF9TVVBQT1JURURfU0VSVkVSX1ZFUlNJT04iLCJNSU5fU1VQUE9SVEVEX1NFUlZFUl9WRVJTSU9OIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongodb/lib/cmap/wire_protocol/constants.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongodb/lib/cmap/wire_protocol/shared.js":
/*!***************************************************************!*\
  !*** ./node_modules/mongodb/lib/cmap/wire_protocol/shared.js ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.isSharded = exports.getReadPreference = void 0;\nconst error_1 = __webpack_require__(/*! ../../error */ \"(ssr)/./node_modules/mongodb/lib/error.js\");\nconst read_preference_1 = __webpack_require__(/*! ../../read_preference */ \"(ssr)/./node_modules/mongodb/lib/read_preference.js\");\nconst common_1 = __webpack_require__(/*! ../../sdam/common */ \"(ssr)/./node_modules/mongodb/lib/sdam/common.js\");\nconst topology_description_1 = __webpack_require__(/*! ../../sdam/topology_description */ \"(ssr)/./node_modules/mongodb/lib/sdam/topology_description.js\");\nfunction getReadPreference(options) {\n    // Default to command version of the readPreference\n    let readPreference = options?.readPreference ?? read_preference_1.ReadPreference.primary;\n    // If we have an option readPreference override the command one\n    if (options?.readPreference) {\n        readPreference = options.readPreference;\n    }\n    if (typeof readPreference === \"string\") {\n        readPreference = read_preference_1.ReadPreference.fromString(readPreference);\n    }\n    if (!(readPreference instanceof read_preference_1.ReadPreference)) {\n        throw new error_1.MongoInvalidArgumentError('Option \"readPreference\" must be a ReadPreference instance');\n    }\n    return readPreference;\n}\nexports.getReadPreference = getReadPreference;\nfunction isSharded(topologyOrServer) {\n    if (topologyOrServer == null) {\n        return false;\n    }\n    if (topologyOrServer.description && topologyOrServer.description.type === common_1.ServerType.Mongos) {\n        return true;\n    }\n    // NOTE: This is incredibly inefficient, and should be removed once command construction\n    //       happens based on `Server` not `Topology`.\n    if (topologyOrServer.description && topologyOrServer.description instanceof topology_description_1.TopologyDescription) {\n        const servers = Array.from(topologyOrServer.description.servers.values());\n        return servers.some((server)=>server.type === common_1.ServerType.Mongos);\n    }\n    return false;\n}\nexports.isSharded = isSharded; //# sourceMappingURL=shared.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbW9uZ29kYi9saWIvY21hcC93aXJlX3Byb3RvY29sL3NoYXJlZC5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiQSw4Q0FBNkM7SUFBRUcsT0FBTztBQUFLLENBQUMsRUFBQztBQUM3REQsaUJBQWlCLEdBQUdBLHlCQUF5QixHQUFHLEtBQUs7QUFDckQsTUFBTUksVUFBVUMsbUJBQU9BLENBQUMsOERBQWE7QUFDckMsTUFBTUMsb0JBQW9CRCxtQkFBT0EsQ0FBQyxrRkFBdUI7QUFDekQsTUFBTUUsV0FBV0YsbUJBQU9BLENBQUMsMEVBQW1CO0FBQzVDLE1BQU1HLHlCQUF5QkgsbUJBQU9BLENBQUMsc0dBQWlDO0FBQ3hFLFNBQVNGLGtCQUFrQk0sT0FBTztJQUM5QixtREFBbUQ7SUFDbkQsSUFBSUMsaUJBQWlCRCxTQUFTQyxrQkFBa0JKLGtCQUFrQkssY0FBYyxDQUFDQyxPQUFPO0lBQ3hGLCtEQUErRDtJQUMvRCxJQUFJSCxTQUFTQyxnQkFBZ0I7UUFDekJBLGlCQUFpQkQsUUFBUUMsY0FBYztJQUMzQztJQUNBLElBQUksT0FBT0EsbUJBQW1CLFVBQVU7UUFDcENBLGlCQUFpQkosa0JBQWtCSyxjQUFjLENBQUNFLFVBQVUsQ0FBQ0g7SUFDakU7SUFDQSxJQUFJLENBQUVBLENBQUFBLDBCQUEwQkosa0JBQWtCSyxjQUFjLEdBQUc7UUFDL0QsTUFBTSxJQUFJUCxRQUFRVSx5QkFBeUIsQ0FBQztJQUNoRDtJQUNBLE9BQU9KO0FBQ1g7QUFDQVYseUJBQXlCLEdBQUdHO0FBQzVCLFNBQVNELFVBQVVhLGdCQUFnQjtJQUMvQixJQUFJQSxvQkFBb0IsTUFBTTtRQUMxQixPQUFPO0lBQ1g7SUFDQSxJQUFJQSxpQkFBaUJDLFdBQVcsSUFBSUQsaUJBQWlCQyxXQUFXLENBQUNDLElBQUksS0FBS1YsU0FBU1csVUFBVSxDQUFDQyxNQUFNLEVBQUU7UUFDbEcsT0FBTztJQUNYO0lBQ0Esd0ZBQXdGO0lBQ3hGLGtEQUFrRDtJQUNsRCxJQUFJSixpQkFBaUJDLFdBQVcsSUFBSUQsaUJBQWlCQyxXQUFXLFlBQVlSLHVCQUF1QlksbUJBQW1CLEVBQUU7UUFDcEgsTUFBTUMsVUFBVUMsTUFBTUMsSUFBSSxDQUFDUixpQkFBaUJDLFdBQVcsQ0FBQ0ssT0FBTyxDQUFDRyxNQUFNO1FBQ3RFLE9BQU9ILFFBQVFJLElBQUksQ0FBQyxDQUFDQyxTQUFXQSxPQUFPVCxJQUFJLEtBQUtWLFNBQVNXLFVBQVUsQ0FBQ0MsTUFBTTtJQUM5RTtJQUNBLE9BQU87QUFDWDtBQUNBbkIsaUJBQWlCLEdBQUdFLFdBQ3BCLGtDQUFrQyIsInNvdXJjZXMiOlsid2VicGFjazovL2Jsb2ctYXBwbGljYXRpb24vLi9ub2RlX21vZHVsZXMvbW9uZ29kYi9saWIvY21hcC93aXJlX3Byb3RvY29sL3NoYXJlZC5qcz9mYjg1Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5pc1NoYXJkZWQgPSBleHBvcnRzLmdldFJlYWRQcmVmZXJlbmNlID0gdm9pZCAwO1xuY29uc3QgZXJyb3JfMSA9IHJlcXVpcmUoXCIuLi8uLi9lcnJvclwiKTtcbmNvbnN0IHJlYWRfcHJlZmVyZW5jZV8xID0gcmVxdWlyZShcIi4uLy4uL3JlYWRfcHJlZmVyZW5jZVwiKTtcbmNvbnN0IGNvbW1vbl8xID0gcmVxdWlyZShcIi4uLy4uL3NkYW0vY29tbW9uXCIpO1xuY29uc3QgdG9wb2xvZ3lfZGVzY3JpcHRpb25fMSA9IHJlcXVpcmUoXCIuLi8uLi9zZGFtL3RvcG9sb2d5X2Rlc2NyaXB0aW9uXCIpO1xuZnVuY3Rpb24gZ2V0UmVhZFByZWZlcmVuY2Uob3B0aW9ucykge1xuICAgIC8vIERlZmF1bHQgdG8gY29tbWFuZCB2ZXJzaW9uIG9mIHRoZSByZWFkUHJlZmVyZW5jZVxuICAgIGxldCByZWFkUHJlZmVyZW5jZSA9IG9wdGlvbnM/LnJlYWRQcmVmZXJlbmNlID8/IHJlYWRfcHJlZmVyZW5jZV8xLlJlYWRQcmVmZXJlbmNlLnByaW1hcnk7XG4gICAgLy8gSWYgd2UgaGF2ZSBhbiBvcHRpb24gcmVhZFByZWZlcmVuY2Ugb3ZlcnJpZGUgdGhlIGNvbW1hbmQgb25lXG4gICAgaWYgKG9wdGlvbnM/LnJlYWRQcmVmZXJlbmNlKSB7XG4gICAgICAgIHJlYWRQcmVmZXJlbmNlID0gb3B0aW9ucy5yZWFkUHJlZmVyZW5jZTtcbiAgICB9XG4gICAgaWYgKHR5cGVvZiByZWFkUHJlZmVyZW5jZSA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgcmVhZFByZWZlcmVuY2UgPSByZWFkX3ByZWZlcmVuY2VfMS5SZWFkUHJlZmVyZW5jZS5mcm9tU3RyaW5nKHJlYWRQcmVmZXJlbmNlKTtcbiAgICB9XG4gICAgaWYgKCEocmVhZFByZWZlcmVuY2UgaW5zdGFuY2VvZiByZWFkX3ByZWZlcmVuY2VfMS5SZWFkUHJlZmVyZW5jZSkpIHtcbiAgICAgICAgdGhyb3cgbmV3IGVycm9yXzEuTW9uZ29JbnZhbGlkQXJndW1lbnRFcnJvcignT3B0aW9uIFwicmVhZFByZWZlcmVuY2VcIiBtdXN0IGJlIGEgUmVhZFByZWZlcmVuY2UgaW5zdGFuY2UnKTtcbiAgICB9XG4gICAgcmV0dXJuIHJlYWRQcmVmZXJlbmNlO1xufVxuZXhwb3J0cy5nZXRSZWFkUHJlZmVyZW5jZSA9IGdldFJlYWRQcmVmZXJlbmNlO1xuZnVuY3Rpb24gaXNTaGFyZGVkKHRvcG9sb2d5T3JTZXJ2ZXIpIHtcbiAgICBpZiAodG9wb2xvZ3lPclNlcnZlciA9PSBudWxsKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgaWYgKHRvcG9sb2d5T3JTZXJ2ZXIuZGVzY3JpcHRpb24gJiYgdG9wb2xvZ3lPclNlcnZlci5kZXNjcmlwdGlvbi50eXBlID09PSBjb21tb25fMS5TZXJ2ZXJUeXBlLk1vbmdvcykge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgLy8gTk9URTogVGhpcyBpcyBpbmNyZWRpYmx5IGluZWZmaWNpZW50LCBhbmQgc2hvdWxkIGJlIHJlbW92ZWQgb25jZSBjb21tYW5kIGNvbnN0cnVjdGlvblxuICAgIC8vICAgICAgIGhhcHBlbnMgYmFzZWQgb24gYFNlcnZlcmAgbm90IGBUb3BvbG9neWAuXG4gICAgaWYgKHRvcG9sb2d5T3JTZXJ2ZXIuZGVzY3JpcHRpb24gJiYgdG9wb2xvZ3lPclNlcnZlci5kZXNjcmlwdGlvbiBpbnN0YW5jZW9mIHRvcG9sb2d5X2Rlc2NyaXB0aW9uXzEuVG9wb2xvZ3lEZXNjcmlwdGlvbikge1xuICAgICAgICBjb25zdCBzZXJ2ZXJzID0gQXJyYXkuZnJvbSh0b3BvbG9neU9yU2VydmVyLmRlc2NyaXB0aW9uLnNlcnZlcnMudmFsdWVzKCkpO1xuICAgICAgICByZXR1cm4gc2VydmVycy5zb21lKChzZXJ2ZXIpID0+IHNlcnZlci50eXBlID09PSBjb21tb25fMS5TZXJ2ZXJUeXBlLk1vbmdvcyk7XG4gICAgfVxuICAgIHJldHVybiBmYWxzZTtcbn1cbmV4cG9ydHMuaXNTaGFyZGVkID0gaXNTaGFyZGVkO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9c2hhcmVkLmpzLm1hcCJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsImlzU2hhcmRlZCIsImdldFJlYWRQcmVmZXJlbmNlIiwiZXJyb3JfMSIsInJlcXVpcmUiLCJyZWFkX3ByZWZlcmVuY2VfMSIsImNvbW1vbl8xIiwidG9wb2xvZ3lfZGVzY3JpcHRpb25fMSIsIm9wdGlvbnMiLCJyZWFkUHJlZmVyZW5jZSIsIlJlYWRQcmVmZXJlbmNlIiwicHJpbWFyeSIsImZyb21TdHJpbmciLCJNb25nb0ludmFsaWRBcmd1bWVudEVycm9yIiwidG9wb2xvZ3lPclNlcnZlciIsImRlc2NyaXB0aW9uIiwidHlwZSIsIlNlcnZlclR5cGUiLCJNb25nb3MiLCJUb3BvbG9neURlc2NyaXB0aW9uIiwic2VydmVycyIsIkFycmF5IiwiZnJvbSIsInZhbHVlcyIsInNvbWUiLCJzZXJ2ZXIiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongodb/lib/cmap/wire_protocol/shared.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongodb/lib/collection.js":
/*!************************************************!*\
  !*** ./node_modules/mongodb/lib/collection.js ***!
  \************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.Collection = void 0;\nconst bson_1 = __webpack_require__(/*! ./bson */ \"(ssr)/./node_modules/mongodb/lib/bson.js\");\nconst ordered_1 = __webpack_require__(/*! ./bulk/ordered */ \"(ssr)/./node_modules/mongodb/lib/bulk/ordered.js\");\nconst unordered_1 = __webpack_require__(/*! ./bulk/unordered */ \"(ssr)/./node_modules/mongodb/lib/bulk/unordered.js\");\nconst change_stream_1 = __webpack_require__(/*! ./change_stream */ \"(ssr)/./node_modules/mongodb/lib/change_stream.js\");\nconst aggregation_cursor_1 = __webpack_require__(/*! ./cursor/aggregation_cursor */ \"(ssr)/./node_modules/mongodb/lib/cursor/aggregation_cursor.js\");\nconst find_cursor_1 = __webpack_require__(/*! ./cursor/find_cursor */ \"(ssr)/./node_modules/mongodb/lib/cursor/find_cursor.js\");\nconst list_indexes_cursor_1 = __webpack_require__(/*! ./cursor/list_indexes_cursor */ \"(ssr)/./node_modules/mongodb/lib/cursor/list_indexes_cursor.js\");\nconst list_search_indexes_cursor_1 = __webpack_require__(/*! ./cursor/list_search_indexes_cursor */ \"(ssr)/./node_modules/mongodb/lib/cursor/list_search_indexes_cursor.js\");\nconst error_1 = __webpack_require__(/*! ./error */ \"(ssr)/./node_modules/mongodb/lib/error.js\");\nconst bulk_write_1 = __webpack_require__(/*! ./operations/bulk_write */ \"(ssr)/./node_modules/mongodb/lib/operations/bulk_write.js\");\nconst count_1 = __webpack_require__(/*! ./operations/count */ \"(ssr)/./node_modules/mongodb/lib/operations/count.js\");\nconst count_documents_1 = __webpack_require__(/*! ./operations/count_documents */ \"(ssr)/./node_modules/mongodb/lib/operations/count_documents.js\");\nconst delete_1 = __webpack_require__(/*! ./operations/delete */ \"(ssr)/./node_modules/mongodb/lib/operations/delete.js\");\nconst distinct_1 = __webpack_require__(/*! ./operations/distinct */ \"(ssr)/./node_modules/mongodb/lib/operations/distinct.js\");\nconst drop_1 = __webpack_require__(/*! ./operations/drop */ \"(ssr)/./node_modules/mongodb/lib/operations/drop.js\");\nconst estimated_document_count_1 = __webpack_require__(/*! ./operations/estimated_document_count */ \"(ssr)/./node_modules/mongodb/lib/operations/estimated_document_count.js\");\nconst execute_operation_1 = __webpack_require__(/*! ./operations/execute_operation */ \"(ssr)/./node_modules/mongodb/lib/operations/execute_operation.js\");\nconst find_and_modify_1 = __webpack_require__(/*! ./operations/find_and_modify */ \"(ssr)/./node_modules/mongodb/lib/operations/find_and_modify.js\");\nconst indexes_1 = __webpack_require__(/*! ./operations/indexes */ \"(ssr)/./node_modules/mongodb/lib/operations/indexes.js\");\nconst insert_1 = __webpack_require__(/*! ./operations/insert */ \"(ssr)/./node_modules/mongodb/lib/operations/insert.js\");\nconst is_capped_1 = __webpack_require__(/*! ./operations/is_capped */ \"(ssr)/./node_modules/mongodb/lib/operations/is_capped.js\");\nconst options_operation_1 = __webpack_require__(/*! ./operations/options_operation */ \"(ssr)/./node_modules/mongodb/lib/operations/options_operation.js\");\nconst rename_1 = __webpack_require__(/*! ./operations/rename */ \"(ssr)/./node_modules/mongodb/lib/operations/rename.js\");\nconst create_1 = __webpack_require__(/*! ./operations/search_indexes/create */ \"(ssr)/./node_modules/mongodb/lib/operations/search_indexes/create.js\");\nconst drop_2 = __webpack_require__(/*! ./operations/search_indexes/drop */ \"(ssr)/./node_modules/mongodb/lib/operations/search_indexes/drop.js\");\nconst update_1 = __webpack_require__(/*! ./operations/search_indexes/update */ \"(ssr)/./node_modules/mongodb/lib/operations/search_indexes/update.js\");\nconst update_2 = __webpack_require__(/*! ./operations/update */ \"(ssr)/./node_modules/mongodb/lib/operations/update.js\");\nconst read_concern_1 = __webpack_require__(/*! ./read_concern */ \"(ssr)/./node_modules/mongodb/lib/read_concern.js\");\nconst read_preference_1 = __webpack_require__(/*! ./read_preference */ \"(ssr)/./node_modules/mongodb/lib/read_preference.js\");\nconst utils_1 = __webpack_require__(/*! ./utils */ \"(ssr)/./node_modules/mongodb/lib/utils.js\");\nconst write_concern_1 = __webpack_require__(/*! ./write_concern */ \"(ssr)/./node_modules/mongodb/lib/write_concern.js\");\n/**\n * The **Collection** class is an internal class that embodies a MongoDB collection\n * allowing for insert/find/update/delete and other command operation on that MongoDB collection.\n *\n * **COLLECTION Cannot directly be instantiated**\n * @public\n *\n * @example\n * ```ts\n * import { MongoClient } from 'mongodb';\n *\n * interface Pet {\n *   name: string;\n *   kind: 'dog' | 'cat' | 'fish';\n * }\n *\n * const client = new MongoClient('mongodb://localhost:27017');\n * const pets = client.db().collection<Pet>('pets');\n *\n * const petCursor = pets.find();\n *\n * for await (const pet of petCursor) {\n *   console.log(`${pet.name} is a ${pet.kind}!`);\n * }\n * ```\n */ class Collection {\n    /**\n     * Create a new Collection instance\n     * @internal\n     */ constructor(db, name, options){\n        // Internal state\n        this.s = {\n            db,\n            options,\n            namespace: new utils_1.MongoDBCollectionNamespace(db.databaseName, name),\n            pkFactory: db.options?.pkFactory ?? utils_1.DEFAULT_PK_FACTORY,\n            readPreference: read_preference_1.ReadPreference.fromOptions(options),\n            bsonOptions: (0, bson_1.resolveBSONOptions)(options, db),\n            readConcern: read_concern_1.ReadConcern.fromOptions(options),\n            writeConcern: write_concern_1.WriteConcern.fromOptions(options)\n        };\n        this.client = db.client;\n    }\n    /**\n     * The name of the database this collection belongs to\n     */ get dbName() {\n        return this.s.namespace.db;\n    }\n    /**\n     * The name of this collection\n     */ get collectionName() {\n        return this.s.namespace.collection;\n    }\n    /**\n     * The namespace of this collection, in the format `${this.dbName}.${this.collectionName}`\n     */ get namespace() {\n        return this.fullNamespace.toString();\n    }\n    /**\n     *  @internal\n     *\n     * The `MongoDBNamespace` for the collection.\n     */ get fullNamespace() {\n        return this.s.namespace;\n    }\n    /**\n     * The current readConcern of the collection. If not explicitly defined for\n     * this collection, will be inherited from the parent DB\n     */ get readConcern() {\n        if (this.s.readConcern == null) {\n            return this.s.db.readConcern;\n        }\n        return this.s.readConcern;\n    }\n    /**\n     * The current readPreference of the collection. If not explicitly defined for\n     * this collection, will be inherited from the parent DB\n     */ get readPreference() {\n        if (this.s.readPreference == null) {\n            return this.s.db.readPreference;\n        }\n        return this.s.readPreference;\n    }\n    get bsonOptions() {\n        return this.s.bsonOptions;\n    }\n    /**\n     * The current writeConcern of the collection. If not explicitly defined for\n     * this collection, will be inherited from the parent DB\n     */ get writeConcern() {\n        if (this.s.writeConcern == null) {\n            return this.s.db.writeConcern;\n        }\n        return this.s.writeConcern;\n    }\n    /** The current index hint for the collection */ get hint() {\n        return this.s.collectionHint;\n    }\n    set hint(v) {\n        this.s.collectionHint = (0, utils_1.normalizeHintField)(v);\n    }\n    /**\n     * Inserts a single document into MongoDB. If documents passed in do not contain the **_id** field,\n     * one will be added to each of the documents missing it by the driver, mutating the document. This behavior\n     * can be overridden by setting the **forceServerObjectId** flag.\n     *\n     * @param doc - The document to insert\n     * @param options - Optional settings for the command\n     */ async insertOne(doc, options) {\n        return (0, execute_operation_1.executeOperation)(this.client, new insert_1.InsertOneOperation(this, doc, (0, utils_1.resolveOptions)(this, options)));\n    }\n    /**\n     * Inserts an array of documents into MongoDB. If documents passed in do not contain the **_id** field,\n     * one will be added to each of the documents missing it by the driver, mutating the document. This behavior\n     * can be overridden by setting the **forceServerObjectId** flag.\n     *\n     * @param docs - The documents to insert\n     * @param options - Optional settings for the command\n     */ async insertMany(docs, options) {\n        return (0, execute_operation_1.executeOperation)(this.client, new insert_1.InsertManyOperation(this, docs, (0, utils_1.resolveOptions)(this, options ?? {\n            ordered: true\n        })));\n    }\n    /**\n     * Perform a bulkWrite operation without a fluent API\n     *\n     * Legal operation types are\n     * - `insertOne`\n     * - `replaceOne`\n     * - `updateOne`\n     * - `updateMany`\n     * - `deleteOne`\n     * - `deleteMany`\n     *\n     * If documents passed in do not contain the **_id** field,\n     * one will be added to each of the documents missing it by the driver, mutating the document. This behavior\n     * can be overridden by setting the **forceServerObjectId** flag.\n     *\n     * @param operations - Bulk operations to perform\n     * @param options - Optional settings for the command\n     * @throws MongoDriverError if operations is not an array\n     */ async bulkWrite(operations, options) {\n        if (!Array.isArray(operations)) {\n            throw new error_1.MongoInvalidArgumentError('Argument \"operations\" must be an array of documents');\n        }\n        return (0, execute_operation_1.executeOperation)(this.client, new bulk_write_1.BulkWriteOperation(this, operations, (0, utils_1.resolveOptions)(this, options ?? {\n            ordered: true\n        })));\n    }\n    /**\n     * Update a single document in a collection\n     *\n     * @param filter - The filter used to select the document to update\n     * @param update - The update operations to be applied to the document\n     * @param options - Optional settings for the command\n     */ async updateOne(filter, update, options) {\n        return (0, execute_operation_1.executeOperation)(this.client, new update_2.UpdateOneOperation(this, filter, update, (0, utils_1.resolveOptions)(this, options)));\n    }\n    /**\n     * Replace a document in a collection with another document\n     *\n     * @param filter - The filter used to select the document to replace\n     * @param replacement - The Document that replaces the matching document\n     * @param options - Optional settings for the command\n     */ async replaceOne(filter, replacement, options) {\n        return (0, execute_operation_1.executeOperation)(this.client, new update_2.ReplaceOneOperation(this, filter, replacement, (0, utils_1.resolveOptions)(this, options)));\n    }\n    /**\n     * Update multiple documents in a collection\n     *\n     * @param filter - The filter used to select the documents to update\n     * @param update - The update operations to be applied to the documents\n     * @param options - Optional settings for the command\n     */ async updateMany(filter, update, options) {\n        return (0, execute_operation_1.executeOperation)(this.client, new update_2.UpdateManyOperation(this, filter, update, (0, utils_1.resolveOptions)(this, options)));\n    }\n    /**\n     * Delete a document from a collection\n     *\n     * @param filter - The filter used to select the document to remove\n     * @param options - Optional settings for the command\n     */ async deleteOne(filter = {}, options = {}) {\n        return (0, execute_operation_1.executeOperation)(this.client, new delete_1.DeleteOneOperation(this, filter, (0, utils_1.resolveOptions)(this, options)));\n    }\n    /**\n     * Delete multiple documents from a collection\n     *\n     * @param filter - The filter used to select the documents to remove\n     * @param options - Optional settings for the command\n     */ async deleteMany(filter = {}, options = {}) {\n        return (0, execute_operation_1.executeOperation)(this.client, new delete_1.DeleteManyOperation(this, filter, (0, utils_1.resolveOptions)(this, options)));\n    }\n    /**\n     * Rename the collection.\n     *\n     * @remarks\n     * This operation does not inherit options from the Db or MongoClient.\n     *\n     * @param newName - New name of of the collection.\n     * @param options - Optional settings for the command\n     */ async rename(newName, options) {\n        // Intentionally, we do not inherit options from parent for this operation.\n        return (0, execute_operation_1.executeOperation)(this.client, new rename_1.RenameOperation(this, newName, {\n            ...options,\n            readPreference: read_preference_1.ReadPreference.PRIMARY\n        }));\n    }\n    /**\n     * Drop the collection from the database, removing it permanently. New accesses will create a new collection.\n     *\n     * @param options - Optional settings for the command\n     */ async drop(options) {\n        return (0, execute_operation_1.executeOperation)(this.client, new drop_1.DropCollectionOperation(this.s.db, this.collectionName, options));\n    }\n    async findOne(filter = {}, options = {}) {\n        const cursor = this.find(filter, options).limit(-1).batchSize(1);\n        const res = await cursor.next();\n        await cursor.close();\n        return res;\n    }\n    find(filter = {}, options = {}) {\n        return new find_cursor_1.FindCursor(this.client, this.s.namespace, filter, (0, utils_1.resolveOptions)(this, options));\n    }\n    /**\n     * Returns the options of the collection.\n     *\n     * @param options - Optional settings for the command\n     */ async options(options) {\n        return (0, execute_operation_1.executeOperation)(this.client, new options_operation_1.OptionsOperation(this, (0, utils_1.resolveOptions)(this, options)));\n    }\n    /**\n     * Returns if the collection is a capped collection\n     *\n     * @param options - Optional settings for the command\n     */ async isCapped(options) {\n        return (0, execute_operation_1.executeOperation)(this.client, new is_capped_1.IsCappedOperation(this, (0, utils_1.resolveOptions)(this, options)));\n    }\n    /**\n     * Creates an index on the db and collection collection.\n     *\n     * @param indexSpec - The field name or index specification to create an index for\n     * @param options - Optional settings for the command\n     *\n     * @example\n     * ```ts\n     * const collection = client.db('foo').collection('bar');\n     *\n     * await collection.createIndex({ a: 1, b: -1 });\n     *\n     * // Alternate syntax for { c: 1, d: -1 } that ensures order of indexes\n     * await collection.createIndex([ [c, 1], [d, -1] ]);\n     *\n     * // Equivalent to { e: 1 }\n     * await collection.createIndex('e');\n     *\n     * // Equivalent to { f: 1, g: 1 }\n     * await collection.createIndex(['f', 'g'])\n     *\n     * // Equivalent to { h: 1, i: -1 }\n     * await collection.createIndex([ { h: 1 }, { i: -1 } ]);\n     *\n     * // Equivalent to { j: 1, k: -1, l: 2d }\n     * await collection.createIndex(['j', ['k', -1], { l: '2d' }])\n     * ```\n     */ async createIndex(indexSpec, options) {\n        return (0, execute_operation_1.executeOperation)(this.client, new indexes_1.CreateIndexOperation(this, this.collectionName, indexSpec, (0, utils_1.resolveOptions)(this, options)));\n    }\n    /**\n     * Creates multiple indexes in the collection, this method is only supported for\n     * MongoDB 2.6 or higher. Earlier version of MongoDB will throw a command not supported\n     * error.\n     *\n     * **Note**: Unlike {@link Collection#createIndex| createIndex}, this function takes in raw index specifications.\n     * Index specifications are defined {@link https://www.mongodb.com/docs/manual/reference/command/createIndexes/| here}.\n     *\n     * @param indexSpecs - An array of index specifications to be created\n     * @param options - Optional settings for the command\n     *\n     * @example\n     * ```ts\n     * const collection = client.db('foo').collection('bar');\n     * await collection.createIndexes([\n     *   // Simple index on field fizz\n     *   {\n     *     key: { fizz: 1 },\n     *   }\n     *   // wildcard index\n     *   {\n     *     key: { '$**': 1 }\n     *   },\n     *   // named index on darmok and jalad\n     *   {\n     *     key: { darmok: 1, jalad: -1 }\n     *     name: 'tanagra'\n     *   }\n     * ]);\n     * ```\n     */ async createIndexes(indexSpecs, options) {\n        return (0, execute_operation_1.executeOperation)(this.client, new indexes_1.CreateIndexesOperation(this, this.collectionName, indexSpecs, (0, utils_1.resolveOptions)(this, {\n            ...options,\n            maxTimeMS: undefined\n        })));\n    }\n    /**\n     * Drops an index from this collection.\n     *\n     * @param indexName - Name of the index to drop.\n     * @param options - Optional settings for the command\n     */ async dropIndex(indexName, options) {\n        return (0, execute_operation_1.executeOperation)(this.client, new indexes_1.DropIndexOperation(this, indexName, {\n            ...(0, utils_1.resolveOptions)(this, options),\n            readPreference: read_preference_1.ReadPreference.primary\n        }));\n    }\n    /**\n     * Drops all indexes from this collection.\n     *\n     * @param options - Optional settings for the command\n     */ async dropIndexes(options) {\n        try {\n            await (0, execute_operation_1.executeOperation)(this.client, new indexes_1.DropIndexOperation(this, \"*\", (0, utils_1.resolveOptions)(this, options)));\n            return true;\n        } catch  {\n            return false;\n        }\n    }\n    /**\n     * Get the list of all indexes information for the collection.\n     *\n     * @param options - Optional settings for the command\n     */ listIndexes(options) {\n        return new list_indexes_cursor_1.ListIndexesCursor(this, (0, utils_1.resolveOptions)(this, options));\n    }\n    /**\n     * Checks if one or more indexes exist on the collection, fails on first non-existing index\n     *\n     * @param indexes - One or more index names to check.\n     * @param options - Optional settings for the command\n     */ async indexExists(indexes, options) {\n        return (0, execute_operation_1.executeOperation)(this.client, new indexes_1.IndexExistsOperation(this, indexes, (0, utils_1.resolveOptions)(this, options)));\n    }\n    /**\n     * Retrieves this collections index info.\n     *\n     * @param options - Optional settings for the command\n     */ async indexInformation(options) {\n        return (0, execute_operation_1.executeOperation)(this.client, new indexes_1.IndexInformationOperation(this.s.db, this.collectionName, (0, utils_1.resolveOptions)(this, options)));\n    }\n    /**\n     * Gets an estimate of the count of documents in a collection using collection metadata.\n     * This will always run a count command on all server versions.\n     *\n     * due to an oversight in versions 5.0.0-5.0.8 of MongoDB, the count command,\n     * which estimatedDocumentCount uses in its implementation, was not included in v1 of\n     * the Stable API, and so users of the Stable API with estimatedDocumentCount are\n     * recommended to upgrade their server version to 5.0.9+ or set apiStrict: false to avoid\n     * encountering errors.\n     *\n     * @see {@link https://www.mongodb.com/docs/manual/reference/command/count/#behavior|Count: Behavior}\n     * @param options - Optional settings for the command\n     */ async estimatedDocumentCount(options) {\n        return (0, execute_operation_1.executeOperation)(this.client, new estimated_document_count_1.EstimatedDocumentCountOperation(this, (0, utils_1.resolveOptions)(this, options)));\n    }\n    /**\n     * Gets the number of documents matching the filter.\n     * For a fast count of the total documents in a collection see {@link Collection#estimatedDocumentCount| estimatedDocumentCount}.\n     * **Note**: When migrating from {@link Collection#count| count} to {@link Collection#countDocuments| countDocuments}\n     * the following query operators must be replaced:\n     *\n     * | Operator | Replacement |\n     * | -------- | ----------- |\n     * | `$where`   | [`$expr`][1] |\n     * | `$near`    | [`$geoWithin`][2] with [`$center`][3] |\n     * | `$nearSphere` | [`$geoWithin`][2] with [`$centerSphere`][4] |\n     *\n     * [1]: https://www.mongodb.com/docs/manual/reference/operator/query/expr/\n     * [2]: https://www.mongodb.com/docs/manual/reference/operator/query/geoWithin/\n     * [3]: https://www.mongodb.com/docs/manual/reference/operator/query/center/#op._S_center\n     * [4]: https://www.mongodb.com/docs/manual/reference/operator/query/centerSphere/#op._S_centerSphere\n     *\n     * @param filter - The filter for the count\n     * @param options - Optional settings for the command\n     *\n     * @see https://www.mongodb.com/docs/manual/reference/operator/query/expr/\n     * @see https://www.mongodb.com/docs/manual/reference/operator/query/geoWithin/\n     * @see https://www.mongodb.com/docs/manual/reference/operator/query/center/#op._S_center\n     * @see https://www.mongodb.com/docs/manual/reference/operator/query/centerSphere/#op._S_centerSphere\n     */ async countDocuments(filter = {}, options = {}) {\n        return (0, execute_operation_1.executeOperation)(this.client, new count_documents_1.CountDocumentsOperation(this, filter, (0, utils_1.resolveOptions)(this, options)));\n    }\n    async distinct(key, filter = {}, options = {}) {\n        return (0, execute_operation_1.executeOperation)(this.client, new distinct_1.DistinctOperation(this, key, filter, (0, utils_1.resolveOptions)(this, options)));\n    }\n    /**\n     * Retrieve all the indexes on the collection.\n     *\n     * @param options - Optional settings for the command\n     */ async indexes(options) {\n        return (0, execute_operation_1.executeOperation)(this.client, new indexes_1.IndexesOperation(this, (0, utils_1.resolveOptions)(this, options)));\n    }\n    async findOneAndDelete(filter, options) {\n        return (0, execute_operation_1.executeOperation)(this.client, new find_and_modify_1.FindOneAndDeleteOperation(this, filter, (0, utils_1.resolveOptions)(this, options)));\n    }\n    async findOneAndReplace(filter, replacement, options) {\n        return (0, execute_operation_1.executeOperation)(this.client, new find_and_modify_1.FindOneAndReplaceOperation(this, filter, replacement, (0, utils_1.resolveOptions)(this, options)));\n    }\n    async findOneAndUpdate(filter, update, options) {\n        return (0, execute_operation_1.executeOperation)(this.client, new find_and_modify_1.FindOneAndUpdateOperation(this, filter, update, (0, utils_1.resolveOptions)(this, options)));\n    }\n    /**\n     * Execute an aggregation framework pipeline against the collection, needs MongoDB \\>= 2.2\n     *\n     * @param pipeline - An array of aggregation pipelines to execute\n     * @param options - Optional settings for the command\n     */ aggregate(pipeline = [], options) {\n        if (!Array.isArray(pipeline)) {\n            throw new error_1.MongoInvalidArgumentError('Argument \"pipeline\" must be an array of aggregation stages');\n        }\n        return new aggregation_cursor_1.AggregationCursor(this.client, this.s.namespace, pipeline, (0, utils_1.resolveOptions)(this, options));\n    }\n    /**\n     * Create a new Change Stream, watching for new changes (insertions, updates, replacements, deletions, and invalidations) in this collection.\n     *\n     * @remarks\n     * watch() accepts two generic arguments for distinct use cases:\n     * - The first is to override the schema that may be defined for this specific collection\n     * - The second is to override the shape of the change stream document entirely, if it is not provided the type will default to ChangeStreamDocument of the first argument\n     * @example\n     * By just providing the first argument I can type the change to be `ChangeStreamDocument<{ _id: number }>`\n     * ```ts\n     * collection.watch<{ _id: number }>()\n     *   .on('change', change => console.log(change._id.toFixed(4)));\n     * ```\n     *\n     * @example\n     * Passing a second argument provides a way to reflect the type changes caused by an advanced pipeline.\n     * Here, we are using a pipeline to have MongoDB filter for insert changes only and add a comment.\n     * No need start from scratch on the ChangeStreamInsertDocument type!\n     * By using an intersection we can save time and ensure defaults remain the same type!\n     * ```ts\n     * collection\n     *   .watch<Schema, ChangeStreamInsertDocument<Schema> & { comment: string }>([\n     *     { $addFields: { comment: 'big changes' } },\n     *     { $match: { operationType: 'insert' } }\n     *   ])\n     *   .on('change', change => {\n     *     change.comment.startsWith('big');\n     *     change.operationType === 'insert';\n     *     // No need to narrow in code because the generics did that for us!\n     *     expectType<Schema>(change.fullDocument);\n     *   });\n     * ```\n     *\n     * @param pipeline - An array of {@link https://www.mongodb.com/docs/manual/reference/operator/aggregation-pipeline/|aggregation pipeline stages} through which to pass change stream documents. This allows for filtering (using $match) and manipulating the change stream documents.\n     * @param options - Optional settings for the command\n     * @typeParam TLocal - Type of the data being detected by the change stream\n     * @typeParam TChange - Type of the whole change stream document emitted\n     */ watch(pipeline = [], options = {}) {\n        // Allow optionally not specifying a pipeline\n        if (!Array.isArray(pipeline)) {\n            options = pipeline;\n            pipeline = [];\n        }\n        return new change_stream_1.ChangeStream(this, pipeline, (0, utils_1.resolveOptions)(this, options));\n    }\n    /**\n     * Initiate an Out of order batch write operation. All operations will be buffered into insert/update/remove commands executed out of order.\n     *\n     * @throws MongoNotConnectedError\n     * @remarks\n     * **NOTE:** MongoClient must be connected prior to calling this method due to a known limitation in this legacy implementation.\n     * However, `collection.bulkWrite()` provides an equivalent API that does not require prior connecting.\n     */ initializeUnorderedBulkOp(options) {\n        return new unordered_1.UnorderedBulkOperation(this, (0, utils_1.resolveOptions)(this, options));\n    }\n    /**\n     * Initiate an In order bulk write operation. Operations will be serially executed in the order they are added, creating a new operation for each switch in types.\n     *\n     * @throws MongoNotConnectedError\n     * @remarks\n     * **NOTE:** MongoClient must be connected prior to calling this method due to a known limitation in this legacy implementation.\n     * However, `collection.bulkWrite()` provides an equivalent API that does not require prior connecting.\n     */ initializeOrderedBulkOp(options) {\n        return new ordered_1.OrderedBulkOperation(this, (0, utils_1.resolveOptions)(this, options));\n    }\n    /**\n     * An estimated count of matching documents in the db to a filter.\n     *\n     * **NOTE:** This method has been deprecated, since it does not provide an accurate count of the documents\n     * in a collection. To obtain an accurate count of documents in the collection, use {@link Collection#countDocuments| countDocuments}.\n     * To obtain an estimated count of all documents in the collection, use {@link Collection#estimatedDocumentCount| estimatedDocumentCount}.\n     *\n     * @deprecated use {@link Collection#countDocuments| countDocuments} or {@link Collection#estimatedDocumentCount| estimatedDocumentCount} instead\n     *\n     * @param filter - The filter for the count.\n     * @param options - Optional settings for the command\n     */ async count(filter = {}, options = {}) {\n        return (0, execute_operation_1.executeOperation)(this.client, new count_1.CountOperation(this.fullNamespace, filter, (0, utils_1.resolveOptions)(this, options)));\n    }\n    listSearchIndexes(indexNameOrOptions, options) {\n        options = typeof indexNameOrOptions === \"object\" ? indexNameOrOptions : options == null ? {} : options;\n        const indexName = indexNameOrOptions == null ? null : typeof indexNameOrOptions === \"object\" ? null : indexNameOrOptions;\n        return new list_search_indexes_cursor_1.ListSearchIndexesCursor(this, indexName, options);\n    }\n    /**\n     * Creates a single search index for the collection.\n     *\n     * @param description - The index description for the new search index.\n     * @returns A promise that resolves to the name of the new search index.\n     *\n     * @remarks Only available when used against a 7.0+ Atlas cluster.\n     */ async createSearchIndex(description) {\n        const [index] = await this.createSearchIndexes([\n            description\n        ]);\n        return index;\n    }\n    /**\n     * Creates multiple search indexes for the current collection.\n     *\n     * @param descriptions - An array of `SearchIndexDescription`s for the new search indexes.\n     * @returns A promise that resolves to an array of the newly created search index names.\n     *\n     * @remarks Only available when used against a 7.0+ Atlas cluster.\n     * @returns\n     */ async createSearchIndexes(descriptions) {\n        return (0, execute_operation_1.executeOperation)(this.client, new create_1.CreateSearchIndexesOperation(this, descriptions));\n    }\n    /**\n     * Deletes a search index by index name.\n     *\n     * @param name - The name of the search index to be deleted.\n     *\n     * @remarks Only available when used against a 7.0+ Atlas cluster.\n     */ async dropSearchIndex(name) {\n        return (0, execute_operation_1.executeOperation)(this.client, new drop_2.DropSearchIndexOperation(this, name));\n    }\n    /**\n     * Updates a search index by replacing the existing index definition with the provided definition.\n     *\n     * @param name - The name of the search index to update.\n     * @param definition - The new search index definition.\n     *\n     * @remarks Only available when used against a 7.0+ Atlas cluster.\n     */ async updateSearchIndex(name, definition) {\n        return (0, execute_operation_1.executeOperation)(this.client, new update_1.UpdateSearchIndexOperation(this, name, definition));\n    }\n}\nexports.Collection = Collection; //# sourceMappingURL=collection.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongodb/lib/collection.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongodb/lib/connection_string.js":
/*!*******************************************************!*\
  !*** ./node_modules/mongodb/lib/connection_string.js ***!
  \*******************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.FEATURE_FLAGS = exports.DEFAULT_OPTIONS = exports.OPTIONS = exports.parseOptions = exports.resolveSRVRecord = void 0;\nconst dns = __webpack_require__(/*! dns */ \"dns\");\nconst mongodb_connection_string_url_1 = __webpack_require__(/*! mongodb-connection-string-url */ \"(ssr)/./node_modules/mongodb-connection-string-url/lib/index.js\");\nconst url_1 = __webpack_require__(/*! url */ \"url\");\nconst mongo_credentials_1 = __webpack_require__(/*! ./cmap/auth/mongo_credentials */ \"(ssr)/./node_modules/mongodb/lib/cmap/auth/mongo_credentials.js\");\nconst providers_1 = __webpack_require__(/*! ./cmap/auth/providers */ \"(ssr)/./node_modules/mongodb/lib/cmap/auth/providers.js\");\nconst client_metadata_1 = __webpack_require__(/*! ./cmap/handshake/client_metadata */ \"(ssr)/./node_modules/mongodb/lib/cmap/handshake/client_metadata.js\");\nconst compression_1 = __webpack_require__(/*! ./cmap/wire_protocol/compression */ \"(ssr)/./node_modules/mongodb/lib/cmap/wire_protocol/compression.js\");\nconst encrypter_1 = __webpack_require__(/*! ./encrypter */ \"(ssr)/./node_modules/mongodb/lib/encrypter.js\");\nconst error_1 = __webpack_require__(/*! ./error */ \"(ssr)/./node_modules/mongodb/lib/error.js\");\nconst mongo_client_1 = __webpack_require__(/*! ./mongo_client */ \"(ssr)/./node_modules/mongodb/lib/mongo_client.js\");\nconst mongo_logger_1 = __webpack_require__(/*! ./mongo_logger */ \"(ssr)/./node_modules/mongodb/lib/mongo_logger.js\");\nconst read_concern_1 = __webpack_require__(/*! ./read_concern */ \"(ssr)/./node_modules/mongodb/lib/read_concern.js\");\nconst read_preference_1 = __webpack_require__(/*! ./read_preference */ \"(ssr)/./node_modules/mongodb/lib/read_preference.js\");\nconst monitor_1 = __webpack_require__(/*! ./sdam/monitor */ \"(ssr)/./node_modules/mongodb/lib/sdam/monitor.js\");\nconst utils_1 = __webpack_require__(/*! ./utils */ \"(ssr)/./node_modules/mongodb/lib/utils.js\");\nconst write_concern_1 = __webpack_require__(/*! ./write_concern */ \"(ssr)/./node_modules/mongodb/lib/write_concern.js\");\nconst VALID_TXT_RECORDS = [\n    \"authSource\",\n    \"replicaSet\",\n    \"loadBalanced\"\n];\nconst LB_SINGLE_HOST_ERROR = \"loadBalanced option only supported with a single host in the URI\";\nconst LB_REPLICA_SET_ERROR = \"loadBalanced option not supported with a replicaSet option\";\nconst LB_DIRECT_CONNECTION_ERROR = \"loadBalanced option not supported when directConnection is provided\";\n/**\n * Lookup a `mongodb+srv` connection string, combine the parts and reparse it as a normal\n * connection string.\n *\n * @param uri - The connection string to parse\n * @param options - Optional user provided connection string options\n */ async function resolveSRVRecord(options) {\n    if (typeof options.srvHost !== \"string\") {\n        throw new error_1.MongoAPIError('Option \"srvHost\" must not be empty');\n    }\n    if (options.srvHost.split(\".\").length < 3) {\n        // TODO(NODE-3484): Replace with MongoConnectionStringError\n        throw new error_1.MongoAPIError(\"URI must include hostname, domain name, and tld\");\n    }\n    // Resolve the SRV record and use the result as the list of hosts to connect to.\n    const lookupAddress = options.srvHost;\n    const addresses = await dns.promises.resolveSrv(`_${options.srvServiceName}._tcp.${lookupAddress}`);\n    if (addresses.length === 0) {\n        throw new error_1.MongoAPIError(\"No addresses found at host\");\n    }\n    for (const { name } of addresses){\n        if (!(0, utils_1.matchesParentDomain)(name, lookupAddress)) {\n            throw new error_1.MongoAPIError(\"Server record does not share hostname with parent URI\");\n        }\n    }\n    const hostAddresses = addresses.map((r)=>utils_1.HostAddress.fromString(`${r.name}:${r.port ?? 27017}`));\n    validateLoadBalancedOptions(hostAddresses, options, true);\n    // Resolve TXT record and add options from there if they exist.\n    let record;\n    try {\n        record = await dns.promises.resolveTxt(lookupAddress);\n    } catch (error) {\n        if (error.code !== \"ENODATA\" && error.code !== \"ENOTFOUND\") {\n            throw error;\n        }\n        return hostAddresses;\n    }\n    if (record.length > 1) {\n        throw new error_1.MongoParseError(\"Multiple text records not allowed\");\n    }\n    const txtRecordOptions = new url_1.URLSearchParams(record[0].join(\"\"));\n    const txtRecordOptionKeys = [\n        ...txtRecordOptions.keys()\n    ];\n    if (txtRecordOptionKeys.some((key)=>!VALID_TXT_RECORDS.includes(key))) {\n        throw new error_1.MongoParseError(`Text record may only set any of: ${VALID_TXT_RECORDS.join(\", \")}`);\n    }\n    if (VALID_TXT_RECORDS.some((option)=>txtRecordOptions.get(option) === \"\")) {\n        throw new error_1.MongoParseError(\"Cannot have empty URI params in DNS TXT Record\");\n    }\n    const source = txtRecordOptions.get(\"authSource\") ?? undefined;\n    const replicaSet = txtRecordOptions.get(\"replicaSet\") ?? undefined;\n    const loadBalanced = txtRecordOptions.get(\"loadBalanced\") ?? undefined;\n    if (!options.userSpecifiedAuthSource && source && options.credentials && !providers_1.AUTH_MECHS_AUTH_SRC_EXTERNAL.has(options.credentials.mechanism)) {\n        options.credentials = mongo_credentials_1.MongoCredentials.merge(options.credentials, {\n            source\n        });\n    }\n    if (!options.userSpecifiedReplicaSet && replicaSet) {\n        options.replicaSet = replicaSet;\n    }\n    if (loadBalanced === \"true\") {\n        options.loadBalanced = true;\n    }\n    if (options.replicaSet && options.srvMaxHosts > 0) {\n        throw new error_1.MongoParseError(\"Cannot combine replicaSet option with srvMaxHosts\");\n    }\n    validateLoadBalancedOptions(hostAddresses, options, true);\n    return hostAddresses;\n}\nexports.resolveSRVRecord = resolveSRVRecord;\n/**\n * Checks if TLS options are valid\n *\n * @param allOptions - All options provided by user or included in default options map\n * @throws MongoAPIError if TLS options are invalid\n */ function checkTLSOptions(allOptions) {\n    if (!allOptions) return;\n    const check = (a, b)=>{\n        if (allOptions.has(a) && allOptions.has(b)) {\n            throw new error_1.MongoAPIError(`The '${a}' option cannot be used with the '${b}' option`);\n        }\n    };\n    check(\"tlsInsecure\", \"tlsAllowInvalidCertificates\");\n    check(\"tlsInsecure\", \"tlsAllowInvalidHostnames\");\n    check(\"tlsInsecure\", \"tlsDisableCertificateRevocationCheck\");\n    check(\"tlsInsecure\", \"tlsDisableOCSPEndpointCheck\");\n    check(\"tlsAllowInvalidCertificates\", \"tlsDisableCertificateRevocationCheck\");\n    check(\"tlsAllowInvalidCertificates\", \"tlsDisableOCSPEndpointCheck\");\n    check(\"tlsDisableCertificateRevocationCheck\", \"tlsDisableOCSPEndpointCheck\");\n}\nfunction getBoolean(name, value) {\n    if (typeof value === \"boolean\") return value;\n    switch(value){\n        case \"true\":\n            return true;\n        case \"false\":\n            return false;\n        default:\n            throw new error_1.MongoParseError(`${name} must be either \"true\" or \"false\"`);\n    }\n}\nfunction getIntFromOptions(name, value) {\n    const parsedInt = (0, utils_1.parseInteger)(value);\n    if (parsedInt != null) {\n        return parsedInt;\n    }\n    throw new error_1.MongoParseError(`Expected ${name} to be stringified int value, got: ${value}`);\n}\nfunction getUIntFromOptions(name, value) {\n    const parsedValue = getIntFromOptions(name, value);\n    if (parsedValue < 0) {\n        throw new error_1.MongoParseError(`${name} can only be a positive int value, got: ${value}`);\n    }\n    return parsedValue;\n}\nfunction* entriesFromString(value) {\n    if (value === \"\") {\n        return;\n    }\n    const keyValuePairs = value.split(\",\");\n    for (const keyValue of keyValuePairs){\n        const [key, value] = keyValue.split(/:(.*)/);\n        if (value == null) {\n            throw new error_1.MongoParseError(\"Cannot have undefined values in key value pairs\");\n        }\n        yield [\n            key,\n            value\n        ];\n    }\n}\nclass CaseInsensitiveMap extends Map {\n    constructor(entries = []){\n        super(entries.map(([k, v])=>[\n                k.toLowerCase(),\n                v\n            ]));\n    }\n    has(k) {\n        return super.has(k.toLowerCase());\n    }\n    get(k) {\n        return super.get(k.toLowerCase());\n    }\n    set(k, v) {\n        return super.set(k.toLowerCase(), v);\n    }\n    delete(k) {\n        return super.delete(k.toLowerCase());\n    }\n}\nfunction parseOptions(uri, mongoClient = undefined, options = {}) {\n    if (mongoClient != null && !(mongoClient instanceof mongo_client_1.MongoClient)) {\n        options = mongoClient;\n        mongoClient = undefined;\n    }\n    // validate BSONOptions\n    if (options.useBigInt64 && typeof options.promoteLongs === \"boolean\" && !options.promoteLongs) {\n        throw new error_1.MongoAPIError(\"Must request either bigint or Long for int64 deserialization\");\n    }\n    if (options.useBigInt64 && typeof options.promoteValues === \"boolean\" && !options.promoteValues) {\n        throw new error_1.MongoAPIError(\"Must request either bigint or Long for int64 deserialization\");\n    }\n    const url = new mongodb_connection_string_url_1.default(uri);\n    const { hosts, isSRV } = url;\n    const mongoOptions = Object.create(null);\n    // Feature flags\n    for (const flag of Object.getOwnPropertySymbols(options)){\n        if (exports.FEATURE_FLAGS.has(flag)) {\n            mongoOptions[flag] = options[flag];\n        }\n    }\n    mongoOptions.hosts = isSRV ? [] : hosts.map(utils_1.HostAddress.fromString);\n    const urlOptions = new CaseInsensitiveMap();\n    if (url.pathname !== \"/\" && url.pathname !== \"\") {\n        const dbName = decodeURIComponent(url.pathname[0] === \"/\" ? url.pathname.slice(1) : url.pathname);\n        if (dbName) {\n            urlOptions.set(\"dbName\", [\n                dbName\n            ]);\n        }\n    }\n    if (url.username !== \"\") {\n        const auth = {\n            username: decodeURIComponent(url.username)\n        };\n        if (typeof url.password === \"string\") {\n            auth.password = decodeURIComponent(url.password);\n        }\n        urlOptions.set(\"auth\", [\n            auth\n        ]);\n    }\n    for (const key of url.searchParams.keys()){\n        const values = url.searchParams.getAll(key);\n        const isReadPreferenceTags = /readPreferenceTags/i.test(key);\n        if (!isReadPreferenceTags && values.length > 1) {\n            throw new error_1.MongoInvalidArgumentError(`URI option \"${key}\" cannot appear more than once in the connection string`);\n        }\n        if (!isReadPreferenceTags && values.includes(\"\")) {\n            throw new error_1.MongoAPIError(`URI option \"${key}\" cannot be specified with no value`);\n        }\n        if (!urlOptions.has(key)) {\n            urlOptions.set(key, values);\n        }\n    }\n    const objectOptions = new CaseInsensitiveMap(Object.entries(options).filter(([, v])=>v != null));\n    // Validate options that can only be provided by one of uri or object\n    if (urlOptions.has(\"serverApi\")) {\n        throw new error_1.MongoParseError(\"URI cannot contain `serverApi`, it can only be passed to the client\");\n    }\n    const uriMechanismProperties = urlOptions.get(\"authMechanismProperties\");\n    if (uriMechanismProperties) {\n        for (const property of uriMechanismProperties){\n            if (/(^|,)ALLOWED_HOSTS:/.test(property)) {\n                throw new error_1.MongoParseError(\"Auth mechanism property ALLOWED_HOSTS is not allowed in the connection string.\");\n            }\n        }\n    }\n    if (objectOptions.has(\"loadBalanced\")) {\n        throw new error_1.MongoParseError(\"loadBalanced is only a valid option in the URI\");\n    }\n    // All option collection\n    const allProvidedOptions = new CaseInsensitiveMap();\n    const allProvidedKeys = new Set([\n        ...urlOptions.keys(),\n        ...objectOptions.keys()\n    ]);\n    for (const key of allProvidedKeys){\n        const values = [];\n        const objectOptionValue = objectOptions.get(key);\n        if (objectOptionValue != null) {\n            values.push(objectOptionValue);\n        }\n        const urlValues = urlOptions.get(key) ?? [];\n        values.push(...urlValues);\n        allProvidedOptions.set(key, values);\n    }\n    if (allProvidedOptions.has(\"tls\") || allProvidedOptions.has(\"ssl\")) {\n        const tlsAndSslOpts = (allProvidedOptions.get(\"tls\") || []).concat(allProvidedOptions.get(\"ssl\") || []).map(getBoolean.bind(null, \"tls/ssl\"));\n        if (new Set(tlsAndSslOpts).size !== 1) {\n            throw new error_1.MongoParseError(\"All values of tls/ssl must be the same.\");\n        }\n    }\n    checkTLSOptions(allProvidedOptions);\n    const unsupportedOptions = (0, utils_1.setDifference)(allProvidedKeys, Array.from(Object.keys(exports.OPTIONS)).map((s)=>s.toLowerCase()));\n    if (unsupportedOptions.size !== 0) {\n        const optionWord = unsupportedOptions.size > 1 ? \"options\" : \"option\";\n        const isOrAre = unsupportedOptions.size > 1 ? \"are\" : \"is\";\n        throw new error_1.MongoParseError(`${optionWord} ${Array.from(unsupportedOptions).join(\", \")} ${isOrAre} not supported`);\n    }\n    // Option parsing and setting\n    for (const [key, descriptor] of Object.entries(exports.OPTIONS)){\n        const values = allProvidedOptions.get(key);\n        if (!values || values.length === 0) {\n            if (exports.DEFAULT_OPTIONS.has(key)) {\n                setOption(mongoOptions, key, descriptor, [\n                    exports.DEFAULT_OPTIONS.get(key)\n                ]);\n            }\n        } else {\n            const { deprecated } = descriptor;\n            if (deprecated) {\n                const deprecatedMsg = typeof deprecated === \"string\" ? `: ${deprecated}` : \"\";\n                (0, utils_1.emitWarning)(`${key} is a deprecated option${deprecatedMsg}`);\n            }\n            setOption(mongoOptions, key, descriptor, values);\n        }\n    }\n    if (mongoOptions.credentials) {\n        const isGssapi = mongoOptions.credentials.mechanism === providers_1.AuthMechanism.MONGODB_GSSAPI;\n        const isX509 = mongoOptions.credentials.mechanism === providers_1.AuthMechanism.MONGODB_X509;\n        const isAws = mongoOptions.credentials.mechanism === providers_1.AuthMechanism.MONGODB_AWS;\n        const isOidc = mongoOptions.credentials.mechanism === providers_1.AuthMechanism.MONGODB_OIDC;\n        if ((isGssapi || isX509) && allProvidedOptions.has(\"authSource\") && mongoOptions.credentials.source !== \"$external\") {\n            // If authSource was explicitly given and its incorrect, we error\n            throw new error_1.MongoParseError(`authMechanism ${mongoOptions.credentials.mechanism} requires an authSource of '$external'`);\n        }\n        if (!(isGssapi || isX509 || isAws || isOidc) && mongoOptions.dbName && !allProvidedOptions.has(\"authSource\")) {\n            // inherit the dbName unless GSSAPI or X509, then silently ignore dbName\n            // and there was no specific authSource given\n            mongoOptions.credentials = mongo_credentials_1.MongoCredentials.merge(mongoOptions.credentials, {\n                source: mongoOptions.dbName\n            });\n        }\n        if (isAws && mongoOptions.credentials.username && !mongoOptions.credentials.password) {\n            throw new error_1.MongoMissingCredentialsError(`When using ${mongoOptions.credentials.mechanism} password must be set when a username is specified`);\n        }\n        mongoOptions.credentials.validate();\n        // Check if the only auth related option provided was authSource, if so we can remove credentials\n        if (mongoOptions.credentials.password === \"\" && mongoOptions.credentials.username === \"\" && mongoOptions.credentials.mechanism === providers_1.AuthMechanism.MONGODB_DEFAULT && Object.keys(mongoOptions.credentials.mechanismProperties).length === 0) {\n            delete mongoOptions.credentials;\n        }\n    }\n    if (!mongoOptions.dbName) {\n        // dbName default is applied here because of the credential validation above\n        mongoOptions.dbName = \"test\";\n    }\n    validateLoadBalancedOptions(hosts, mongoOptions, isSRV);\n    if (mongoClient && mongoOptions.autoEncryption) {\n        encrypter_1.Encrypter.checkForMongoCrypt();\n        mongoOptions.encrypter = new encrypter_1.Encrypter(mongoClient, uri, options);\n        mongoOptions.autoEncrypter = mongoOptions.encrypter.autoEncrypter;\n    }\n    // Potential SRV Overrides and SRV connection string validations\n    mongoOptions.userSpecifiedAuthSource = objectOptions.has(\"authSource\") || urlOptions.has(\"authSource\");\n    mongoOptions.userSpecifiedReplicaSet = objectOptions.has(\"replicaSet\") || urlOptions.has(\"replicaSet\");\n    if (isSRV) {\n        // SRV Record is resolved upon connecting\n        mongoOptions.srvHost = hosts[0];\n        if (mongoOptions.directConnection) {\n            throw new error_1.MongoAPIError(\"SRV URI does not support directConnection\");\n        }\n        if (mongoOptions.srvMaxHosts > 0 && typeof mongoOptions.replicaSet === \"string\") {\n            throw new error_1.MongoParseError(\"Cannot use srvMaxHosts option with replicaSet\");\n        }\n        // SRV turns on TLS by default, but users can override and turn it off\n        const noUserSpecifiedTLS = !objectOptions.has(\"tls\") && !urlOptions.has(\"tls\");\n        const noUserSpecifiedSSL = !objectOptions.has(\"ssl\") && !urlOptions.has(\"ssl\");\n        if (noUserSpecifiedTLS && noUserSpecifiedSSL) {\n            mongoOptions.tls = true;\n        }\n    } else {\n        const userSpecifiedSrvOptions = urlOptions.has(\"srvMaxHosts\") || objectOptions.has(\"srvMaxHosts\") || urlOptions.has(\"srvServiceName\") || objectOptions.has(\"srvServiceName\");\n        if (userSpecifiedSrvOptions) {\n            throw new error_1.MongoParseError(\"Cannot use srvMaxHosts or srvServiceName with a non-srv connection string\");\n        }\n    }\n    if (mongoOptions.directConnection && mongoOptions.hosts.length !== 1) {\n        throw new error_1.MongoParseError(\"directConnection option requires exactly one host\");\n    }\n    if (!mongoOptions.proxyHost && (mongoOptions.proxyPort || mongoOptions.proxyUsername || mongoOptions.proxyPassword)) {\n        throw new error_1.MongoParseError(\"Must specify proxyHost if other proxy options are passed\");\n    }\n    if (mongoOptions.proxyUsername && !mongoOptions.proxyPassword || !mongoOptions.proxyUsername && mongoOptions.proxyPassword) {\n        throw new error_1.MongoParseError(\"Can only specify both of proxy username/password or neither\");\n    }\n    const proxyOptions = [\n        \"proxyHost\",\n        \"proxyPort\",\n        \"proxyUsername\",\n        \"proxyPassword\"\n    ].map((key)=>urlOptions.get(key) ?? []);\n    if (proxyOptions.some((options)=>options.length > 1)) {\n        throw new error_1.MongoParseError(\"Proxy options cannot be specified multiple times in the connection string\");\n    }\n    const loggerFeatureFlag = Symbol.for(\"@@mdb.enableMongoLogger\");\n    mongoOptions[loggerFeatureFlag] = mongoOptions[loggerFeatureFlag] ?? false;\n    let loggerEnvOptions = {};\n    let loggerClientOptions = {};\n    if (mongoOptions[loggerFeatureFlag]) {\n        loggerEnvOptions = {\n            MONGODB_LOG_COMMAND: process.env.MONGODB_LOG_COMMAND,\n            MONGODB_LOG_TOPOLOGY: process.env.MONGODB_LOG_TOPOLOGY,\n            MONGODB_LOG_SERVER_SELECTION: process.env.MONGODB_LOG_SERVER_SELECTION,\n            MONGODB_LOG_CONNECTION: process.env.MONGODB_LOG_CONNECTION,\n            MONGODB_LOG_CLIENT: process.env.MONGODB_LOG_CLIENT,\n            MONGODB_LOG_ALL: process.env.MONGODB_LOG_ALL,\n            MONGODB_LOG_MAX_DOCUMENT_LENGTH: process.env.MONGODB_LOG_MAX_DOCUMENT_LENGTH,\n            MONGODB_LOG_PATH: process.env.MONGODB_LOG_PATH,\n            ...mongoOptions[Symbol.for(\"@@mdb.internalLoggerConfig\")]\n        };\n        loggerClientOptions = {\n            mongodbLogPath: mongoOptions.mongodbLogPath,\n            mongodbLogComponentSeverities: mongoOptions.mongodbLogComponentSeverities,\n            mongodbLogMaxDocumentLength: mongoOptions.mongodbLogMaxDocumentLength\n        };\n    }\n    mongoOptions.mongoLoggerOptions = mongo_logger_1.MongoLogger.resolveOptions(loggerEnvOptions, loggerClientOptions);\n    mongoOptions.metadata = (0, client_metadata_1.makeClientMetadata)(mongoOptions);\n    return mongoOptions;\n}\nexports.parseOptions = parseOptions;\n/**\n * #### Throws if LB mode is true:\n * - hosts contains more than one host\n * - there is a replicaSet name set\n * - directConnection is set\n * - if srvMaxHosts is used when an srv connection string is passed in\n *\n * @throws MongoParseError\n */ function validateLoadBalancedOptions(hosts, mongoOptions, isSrv) {\n    if (mongoOptions.loadBalanced) {\n        if (hosts.length > 1) {\n            throw new error_1.MongoParseError(LB_SINGLE_HOST_ERROR);\n        }\n        if (mongoOptions.replicaSet) {\n            throw new error_1.MongoParseError(LB_REPLICA_SET_ERROR);\n        }\n        if (mongoOptions.directConnection) {\n            throw new error_1.MongoParseError(LB_DIRECT_CONNECTION_ERROR);\n        }\n        if (isSrv && mongoOptions.srvMaxHosts > 0) {\n            throw new error_1.MongoParseError(\"Cannot limit srv hosts with loadBalanced enabled\");\n        }\n    }\n    return;\n}\nfunction setOption(mongoOptions, key, descriptor, values) {\n    const { target, type, transform } = descriptor;\n    const name = target ?? key;\n    switch(type){\n        case \"boolean\":\n            mongoOptions[name] = getBoolean(name, values[0]);\n            break;\n        case \"int\":\n            mongoOptions[name] = getIntFromOptions(name, values[0]);\n            break;\n        case \"uint\":\n            mongoOptions[name] = getUIntFromOptions(name, values[0]);\n            break;\n        case \"string\":\n            if (values[0] == null) {\n                break;\n            }\n            mongoOptions[name] = String(values[0]);\n            break;\n        case \"record\":\n            if (!(0, utils_1.isRecord)(values[0])) {\n                throw new error_1.MongoParseError(`${name} must be an object`);\n            }\n            mongoOptions[name] = values[0];\n            break;\n        case \"any\":\n            mongoOptions[name] = values[0];\n            break;\n        default:\n            {\n                if (!transform) {\n                    throw new error_1.MongoParseError(\"Descriptors missing a type must define a transform\");\n                }\n                const transformValue = transform({\n                    name,\n                    options: mongoOptions,\n                    values\n                });\n                mongoOptions[name] = transformValue;\n                break;\n            }\n    }\n}\nexports.OPTIONS = {\n    appName: {\n        type: \"string\"\n    },\n    auth: {\n        target: \"credentials\",\n        transform ({ name, options, values: [value] }) {\n            if (!(0, utils_1.isRecord)(value, [\n                \"username\",\n                \"password\"\n            ])) {\n                throw new error_1.MongoParseError(`${name} must be an object with 'username' and 'password' properties`);\n            }\n            return mongo_credentials_1.MongoCredentials.merge(options.credentials, {\n                username: value.username,\n                password: value.password\n            });\n        }\n    },\n    authMechanism: {\n        target: \"credentials\",\n        transform ({ options, values: [value] }) {\n            const mechanisms = Object.values(providers_1.AuthMechanism);\n            const [mechanism] = mechanisms.filter((m)=>m.match(RegExp(String.raw`\\b${value}\\b`, \"i\")));\n            if (!mechanism) {\n                throw new error_1.MongoParseError(`authMechanism one of ${mechanisms}, got ${value}`);\n            }\n            let source = options.credentials?.source;\n            if (mechanism === providers_1.AuthMechanism.MONGODB_PLAIN || providers_1.AUTH_MECHS_AUTH_SRC_EXTERNAL.has(mechanism)) {\n                // some mechanisms have '$external' as the Auth Source\n                source = \"$external\";\n            }\n            let password = options.credentials?.password;\n            if (mechanism === providers_1.AuthMechanism.MONGODB_X509 && password === \"\") {\n                password = undefined;\n            }\n            return mongo_credentials_1.MongoCredentials.merge(options.credentials, {\n                mechanism,\n                source,\n                password\n            });\n        }\n    },\n    authMechanismProperties: {\n        target: \"credentials\",\n        transform ({ options, values }) {\n            // We can have a combination of options passed in the URI and options passed\n            // as an object to the MongoClient. So we must transform the string options\n            // as well as merge them together with a potentially provided object.\n            let mechanismProperties = Object.create(null);\n            for (const optionValue of values){\n                if (typeof optionValue === \"string\") {\n                    for (const [key, value] of entriesFromString(optionValue)){\n                        try {\n                            mechanismProperties[key] = getBoolean(key, value);\n                        } catch  {\n                            mechanismProperties[key] = value;\n                        }\n                    }\n                } else {\n                    if (!(0, utils_1.isRecord)(optionValue)) {\n                        throw new error_1.MongoParseError(\"AuthMechanismProperties must be an object\");\n                    }\n                    mechanismProperties = {\n                        ...optionValue\n                    };\n                }\n            }\n            return mongo_credentials_1.MongoCredentials.merge(options.credentials, {\n                mechanismProperties\n            });\n        }\n    },\n    authSource: {\n        target: \"credentials\",\n        transform ({ options, values: [value] }) {\n            const source = String(value);\n            return mongo_credentials_1.MongoCredentials.merge(options.credentials, {\n                source\n            });\n        }\n    },\n    autoEncryption: {\n        type: \"record\"\n    },\n    bsonRegExp: {\n        type: \"boolean\"\n    },\n    serverApi: {\n        target: \"serverApi\",\n        transform ({ values: [version] }) {\n            const serverApiToValidate = typeof version === \"string\" ? {\n                version\n            } : version;\n            const versionToValidate = serverApiToValidate && serverApiToValidate.version;\n            if (!versionToValidate) {\n                throw new error_1.MongoParseError(`Invalid \\`serverApi\\` property; must specify a version from the following enum: [\"${Object.values(mongo_client_1.ServerApiVersion).join('\", \"')}\"]`);\n            }\n            if (!Object.values(mongo_client_1.ServerApiVersion).some((v)=>v === versionToValidate)) {\n                throw new error_1.MongoParseError(`Invalid server API version=${versionToValidate}; must be in the following enum: [\"${Object.values(mongo_client_1.ServerApiVersion).join('\", \"')}\"]`);\n            }\n            return serverApiToValidate;\n        }\n    },\n    checkKeys: {\n        type: \"boolean\"\n    },\n    compressors: {\n        default: \"none\",\n        target: \"compressors\",\n        transform ({ values }) {\n            const compressionList = new Set();\n            for (const compVal of values){\n                const compValArray = typeof compVal === \"string\" ? compVal.split(\",\") : compVal;\n                if (!Array.isArray(compValArray)) {\n                    throw new error_1.MongoInvalidArgumentError(\"compressors must be an array or a comma-delimited list of strings\");\n                }\n                for (const c of compValArray){\n                    if (Object.keys(compression_1.Compressor).includes(String(c))) {\n                        compressionList.add(String(c));\n                    } else {\n                        throw new error_1.MongoInvalidArgumentError(`${c} is not a valid compression mechanism. Must be one of: ${Object.keys(compression_1.Compressor)}.`);\n                    }\n                }\n            }\n            return [\n                ...compressionList\n            ];\n        }\n    },\n    connectTimeoutMS: {\n        default: 30000,\n        type: \"uint\"\n    },\n    dbName: {\n        type: \"string\"\n    },\n    directConnection: {\n        default: false,\n        type: \"boolean\"\n    },\n    driverInfo: {\n        default: {},\n        type: \"record\"\n    },\n    enableUtf8Validation: {\n        type: \"boolean\",\n        default: true\n    },\n    family: {\n        transform ({ name, values: [value] }) {\n            const transformValue = getIntFromOptions(name, value);\n            if (transformValue === 4 || transformValue === 6) {\n                return transformValue;\n            }\n            throw new error_1.MongoParseError(`Option 'family' must be 4 or 6 got ${transformValue}.`);\n        }\n    },\n    fieldsAsRaw: {\n        type: \"record\"\n    },\n    forceServerObjectId: {\n        default: false,\n        type: \"boolean\"\n    },\n    fsync: {\n        deprecated: \"Please use journal instead\",\n        target: \"writeConcern\",\n        transform ({ name, options, values: [value] }) {\n            const wc = write_concern_1.WriteConcern.fromOptions({\n                writeConcern: {\n                    ...options.writeConcern,\n                    fsync: getBoolean(name, value)\n                }\n            });\n            if (!wc) throw new error_1.MongoParseError(`Unable to make a writeConcern from fsync=${value}`);\n            return wc;\n        }\n    },\n    heartbeatFrequencyMS: {\n        default: 10000,\n        type: \"uint\"\n    },\n    ignoreUndefined: {\n        type: \"boolean\"\n    },\n    j: {\n        deprecated: \"Please use journal instead\",\n        target: \"writeConcern\",\n        transform ({ name, options, values: [value] }) {\n            const wc = write_concern_1.WriteConcern.fromOptions({\n                writeConcern: {\n                    ...options.writeConcern,\n                    journal: getBoolean(name, value)\n                }\n            });\n            if (!wc) throw new error_1.MongoParseError(`Unable to make a writeConcern from journal=${value}`);\n            return wc;\n        }\n    },\n    journal: {\n        target: \"writeConcern\",\n        transform ({ name, options, values: [value] }) {\n            const wc = write_concern_1.WriteConcern.fromOptions({\n                writeConcern: {\n                    ...options.writeConcern,\n                    journal: getBoolean(name, value)\n                }\n            });\n            if (!wc) throw new error_1.MongoParseError(`Unable to make a writeConcern from journal=${value}`);\n            return wc;\n        }\n    },\n    loadBalanced: {\n        default: false,\n        type: \"boolean\"\n    },\n    localThresholdMS: {\n        default: 15,\n        type: \"uint\"\n    },\n    maxConnecting: {\n        default: 2,\n        transform ({ name, values: [value] }) {\n            const maxConnecting = getUIntFromOptions(name, value);\n            if (maxConnecting === 0) {\n                throw new error_1.MongoInvalidArgumentError(\"maxConnecting must be > 0 if specified\");\n            }\n            return maxConnecting;\n        }\n    },\n    maxIdleTimeMS: {\n        default: 0,\n        type: \"uint\"\n    },\n    maxPoolSize: {\n        default: 100,\n        type: \"uint\"\n    },\n    maxStalenessSeconds: {\n        target: \"readPreference\",\n        transform ({ name, options, values: [value] }) {\n            const maxStalenessSeconds = getUIntFromOptions(name, value);\n            if (options.readPreference) {\n                return read_preference_1.ReadPreference.fromOptions({\n                    readPreference: {\n                        ...options.readPreference,\n                        maxStalenessSeconds\n                    }\n                });\n            } else {\n                return new read_preference_1.ReadPreference(\"secondary\", undefined, {\n                    maxStalenessSeconds\n                });\n            }\n        }\n    },\n    minInternalBufferSize: {\n        type: \"uint\"\n    },\n    minPoolSize: {\n        default: 0,\n        type: \"uint\"\n    },\n    minHeartbeatFrequencyMS: {\n        default: 500,\n        type: \"uint\"\n    },\n    monitorCommands: {\n        default: false,\n        type: \"boolean\"\n    },\n    name: {\n        target: \"driverInfo\",\n        transform ({ values: [value], options }) {\n            return {\n                ...options.driverInfo,\n                name: String(value)\n            };\n        }\n    },\n    noDelay: {\n        default: true,\n        type: \"boolean\"\n    },\n    pkFactory: {\n        default: utils_1.DEFAULT_PK_FACTORY,\n        transform ({ values: [value] }) {\n            if ((0, utils_1.isRecord)(value, [\n                \"createPk\"\n            ]) && typeof value.createPk === \"function\") {\n                return value;\n            }\n            throw new error_1.MongoParseError(`Option pkFactory must be an object with a createPk function, got ${value}`);\n        }\n    },\n    promoteBuffers: {\n        type: \"boolean\"\n    },\n    promoteLongs: {\n        type: \"boolean\"\n    },\n    promoteValues: {\n        type: \"boolean\"\n    },\n    useBigInt64: {\n        type: \"boolean\"\n    },\n    proxyHost: {\n        type: \"string\"\n    },\n    proxyPassword: {\n        type: \"string\"\n    },\n    proxyPort: {\n        type: \"uint\"\n    },\n    proxyUsername: {\n        type: \"string\"\n    },\n    raw: {\n        default: false,\n        type: \"boolean\"\n    },\n    readConcern: {\n        transform ({ values: [value], options }) {\n            if (value instanceof read_concern_1.ReadConcern || (0, utils_1.isRecord)(value, [\n                \"level\"\n            ])) {\n                return read_concern_1.ReadConcern.fromOptions({\n                    ...options.readConcern,\n                    ...value\n                });\n            }\n            throw new error_1.MongoParseError(`ReadConcern must be an object, got ${JSON.stringify(value)}`);\n        }\n    },\n    readConcernLevel: {\n        target: \"readConcern\",\n        transform ({ values: [level], options }) {\n            return read_concern_1.ReadConcern.fromOptions({\n                ...options.readConcern,\n                level: level\n            });\n        }\n    },\n    readPreference: {\n        default: read_preference_1.ReadPreference.primary,\n        transform ({ values: [value], options }) {\n            if (value instanceof read_preference_1.ReadPreference) {\n                return read_preference_1.ReadPreference.fromOptions({\n                    readPreference: {\n                        ...options.readPreference,\n                        ...value\n                    },\n                    ...value\n                });\n            }\n            if ((0, utils_1.isRecord)(value, [\n                \"mode\"\n            ])) {\n                const rp = read_preference_1.ReadPreference.fromOptions({\n                    readPreference: {\n                        ...options.readPreference,\n                        ...value\n                    },\n                    ...value\n                });\n                if (rp) return rp;\n                else throw new error_1.MongoParseError(`Cannot make read preference from ${JSON.stringify(value)}`);\n            }\n            if (typeof value === \"string\") {\n                const rpOpts = {\n                    hedge: options.readPreference?.hedge,\n                    maxStalenessSeconds: options.readPreference?.maxStalenessSeconds\n                };\n                return new read_preference_1.ReadPreference(value, options.readPreference?.tags, rpOpts);\n            }\n            throw new error_1.MongoParseError(`Unknown ReadPreference value: ${value}`);\n        }\n    },\n    readPreferenceTags: {\n        target: \"readPreference\",\n        transform ({ values, options }) {\n            const tags = Array.isArray(values[0]) ? values[0] : values;\n            const readPreferenceTags = [];\n            for (const tag of tags){\n                const readPreferenceTag = Object.create(null);\n                if (typeof tag === \"string\") {\n                    for (const [k, v] of entriesFromString(tag)){\n                        readPreferenceTag[k] = v;\n                    }\n                }\n                if ((0, utils_1.isRecord)(tag)) {\n                    for (const [k, v] of Object.entries(tag)){\n                        readPreferenceTag[k] = v;\n                    }\n                }\n                readPreferenceTags.push(readPreferenceTag);\n            }\n            return read_preference_1.ReadPreference.fromOptions({\n                readPreference: options.readPreference,\n                readPreferenceTags\n            });\n        }\n    },\n    replicaSet: {\n        type: \"string\"\n    },\n    retryReads: {\n        default: true,\n        type: \"boolean\"\n    },\n    retryWrites: {\n        default: true,\n        type: \"boolean\"\n    },\n    serializeFunctions: {\n        type: \"boolean\"\n    },\n    serverMonitoringMode: {\n        default: \"auto\",\n        transform ({ values: [value] }) {\n            if (!Object.values(monitor_1.ServerMonitoringMode).includes(value)) {\n                throw new error_1.MongoParseError(\"serverMonitoringMode must be one of `auto`, `poll`, or `stream`\");\n            }\n            return value;\n        }\n    },\n    serverSelectionTimeoutMS: {\n        default: 30000,\n        type: \"uint\"\n    },\n    servername: {\n        type: \"string\"\n    },\n    socketTimeoutMS: {\n        default: 0,\n        type: \"uint\"\n    },\n    srvMaxHosts: {\n        type: \"uint\",\n        default: 0\n    },\n    srvServiceName: {\n        type: \"string\",\n        default: \"mongodb\"\n    },\n    ssl: {\n        target: \"tls\",\n        type: \"boolean\"\n    },\n    tls: {\n        type: \"boolean\"\n    },\n    tlsAllowInvalidCertificates: {\n        target: \"rejectUnauthorized\",\n        transform ({ name, values: [value] }) {\n            // allowInvalidCertificates is the inverse of rejectUnauthorized\n            return !getBoolean(name, value);\n        }\n    },\n    tlsAllowInvalidHostnames: {\n        target: \"checkServerIdentity\",\n        transform ({ name, values: [value] }) {\n            // tlsAllowInvalidHostnames means setting the checkServerIdentity function to a noop\n            return getBoolean(name, value) ? ()=>undefined : undefined;\n        }\n    },\n    tlsCAFile: {\n        type: \"string\"\n    },\n    tlsCRLFile: {\n        type: \"string\"\n    },\n    tlsCertificateKeyFile: {\n        type: \"string\"\n    },\n    tlsCertificateKeyFilePassword: {\n        target: \"passphrase\",\n        type: \"any\"\n    },\n    tlsInsecure: {\n        transform ({ name, options, values: [value] }) {\n            const tlsInsecure = getBoolean(name, value);\n            if (tlsInsecure) {\n                options.checkServerIdentity = ()=>undefined;\n                options.rejectUnauthorized = false;\n            } else {\n                options.checkServerIdentity = options.tlsAllowInvalidHostnames ? ()=>undefined : undefined;\n                options.rejectUnauthorized = options.tlsAllowInvalidCertificates ? false : true;\n            }\n            return tlsInsecure;\n        }\n    },\n    w: {\n        target: \"writeConcern\",\n        transform ({ values: [value], options }) {\n            return write_concern_1.WriteConcern.fromOptions({\n                writeConcern: {\n                    ...options.writeConcern,\n                    w: value\n                }\n            });\n        }\n    },\n    waitQueueTimeoutMS: {\n        default: 0,\n        type: \"uint\"\n    },\n    writeConcern: {\n        target: \"writeConcern\",\n        transform ({ values: [value], options }) {\n            if ((0, utils_1.isRecord)(value) || value instanceof write_concern_1.WriteConcern) {\n                return write_concern_1.WriteConcern.fromOptions({\n                    writeConcern: {\n                        ...options.writeConcern,\n                        ...value\n                    }\n                });\n            } else if (value === \"majority\" || typeof value === \"number\") {\n                return write_concern_1.WriteConcern.fromOptions({\n                    writeConcern: {\n                        ...options.writeConcern,\n                        w: value\n                    }\n                });\n            }\n            throw new error_1.MongoParseError(`Invalid WriteConcern cannot parse: ${JSON.stringify(value)}`);\n        }\n    },\n    wtimeout: {\n        deprecated: \"Please use wtimeoutMS instead\",\n        target: \"writeConcern\",\n        transform ({ values: [value], options }) {\n            const wc = write_concern_1.WriteConcern.fromOptions({\n                writeConcern: {\n                    ...options.writeConcern,\n                    wtimeout: getUIntFromOptions(\"wtimeout\", value)\n                }\n            });\n            if (wc) return wc;\n            throw new error_1.MongoParseError(`Cannot make WriteConcern from wtimeout`);\n        }\n    },\n    wtimeoutMS: {\n        target: \"writeConcern\",\n        transform ({ values: [value], options }) {\n            const wc = write_concern_1.WriteConcern.fromOptions({\n                writeConcern: {\n                    ...options.writeConcern,\n                    wtimeoutMS: getUIntFromOptions(\"wtimeoutMS\", value)\n                }\n            });\n            if (wc) return wc;\n            throw new error_1.MongoParseError(`Cannot make WriteConcern from wtimeout`);\n        }\n    },\n    zlibCompressionLevel: {\n        default: 0,\n        type: \"int\"\n    },\n    // Custom types for modifying core behavior\n    connectionType: {\n        type: \"any\"\n    },\n    srvPoller: {\n        type: \"any\"\n    },\n    // Accepted NodeJS Options\n    minDHSize: {\n        type: \"any\"\n    },\n    pskCallback: {\n        type: \"any\"\n    },\n    secureContext: {\n        type: \"any\"\n    },\n    enableTrace: {\n        type: \"any\"\n    },\n    requestCert: {\n        type: \"any\"\n    },\n    rejectUnauthorized: {\n        type: \"any\"\n    },\n    checkServerIdentity: {\n        type: \"any\"\n    },\n    ALPNProtocols: {\n        type: \"any\"\n    },\n    SNICallback: {\n        type: \"any\"\n    },\n    session: {\n        type: \"any\"\n    },\n    requestOCSP: {\n        type: \"any\"\n    },\n    localAddress: {\n        type: \"any\"\n    },\n    localPort: {\n        type: \"any\"\n    },\n    hints: {\n        type: \"any\"\n    },\n    lookup: {\n        type: \"any\"\n    },\n    ca: {\n        type: \"any\"\n    },\n    cert: {\n        type: \"any\"\n    },\n    ciphers: {\n        type: \"any\"\n    },\n    crl: {\n        type: \"any\"\n    },\n    ecdhCurve: {\n        type: \"any\"\n    },\n    key: {\n        type: \"any\"\n    },\n    passphrase: {\n        type: \"any\"\n    },\n    pfx: {\n        type: \"any\"\n    },\n    secureProtocol: {\n        type: \"any\"\n    },\n    index: {\n        type: \"any\"\n    },\n    // Legacy options from v3 era\n    useNewUrlParser: {\n        type: \"boolean\",\n        deprecated: \"useNewUrlParser has no effect since Node.js Driver version 4.0.0 and will be removed in the next major version\"\n    },\n    useUnifiedTopology: {\n        type: \"boolean\",\n        deprecated: \"useUnifiedTopology has no effect since Node.js Driver version 4.0.0 and will be removed in the next major version\"\n    },\n    // MongoLogger\n    /**\n     * @internal\n     * TODO: NODE-5671 - remove internal flag\n     */ mongodbLogPath: {\n        type: \"any\"\n    },\n    /**\n     * @internal\n     * TODO: NODE-5671 - remove internal flag\n     */ mongodbLogComponentSeverities: {\n        type: \"any\"\n    },\n    /**\n     * @internal\n     * TODO: NODE-5671 - remove internal flag\n     */ mongodbLogMaxDocumentLength: {\n        type: \"uint\"\n    }\n};\nexports.DEFAULT_OPTIONS = new CaseInsensitiveMap(Object.entries(exports.OPTIONS).filter(([, descriptor])=>descriptor.default != null).map(([k, d])=>[\n        k,\n        d.default\n    ]));\n/**\n * Set of permitted feature flags\n * @internal\n */ exports.FEATURE_FLAGS = new Set([\n    Symbol.for(\"@@mdb.skipPingOnConnect\"),\n    Symbol.for(\"@@mdb.enableMongoLogger\"),\n    Symbol.for(\"@@mdb.internalLoggerConfig\")\n]); //# sourceMappingURL=connection_string.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongodb/lib/connection_string.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongodb/lib/constants.js":
/*!***********************************************!*\
  !*** ./node_modules/mongodb/lib/constants.js ***!
  \***********************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.TOPOLOGY_EVENTS = exports.CMAP_EVENTS = exports.HEARTBEAT_EVENTS = exports.RESUME_TOKEN_CHANGED = exports.END = exports.CHANGE = exports.INIT = exports.MORE = exports.RESPONSE = exports.SERVER_HEARTBEAT_FAILED = exports.SERVER_HEARTBEAT_SUCCEEDED = exports.SERVER_HEARTBEAT_STARTED = exports.COMMAND_FAILED = exports.COMMAND_SUCCEEDED = exports.COMMAND_STARTED = exports.CLUSTER_TIME_RECEIVED = exports.CONNECTION_CHECKED_IN = exports.CONNECTION_CHECKED_OUT = exports.CONNECTION_CHECK_OUT_FAILED = exports.CONNECTION_CHECK_OUT_STARTED = exports.CONNECTION_CLOSED = exports.CONNECTION_READY = exports.CONNECTION_CREATED = exports.CONNECTION_POOL_READY = exports.CONNECTION_POOL_CLEARED = exports.CONNECTION_POOL_CLOSED = exports.CONNECTION_POOL_CREATED = exports.TOPOLOGY_DESCRIPTION_CHANGED = exports.TOPOLOGY_CLOSED = exports.TOPOLOGY_OPENING = exports.SERVER_DESCRIPTION_CHANGED = exports.SERVER_CLOSED = exports.SERVER_OPENING = exports.DESCRIPTION_RECEIVED = exports.UNPINNED = exports.PINNED = exports.MESSAGE = exports.ENDED = exports.CLOSED = exports.CONNECT = exports.OPEN = exports.CLOSE = exports.TIMEOUT = exports.ERROR = exports.SYSTEM_JS_COLLECTION = exports.SYSTEM_COMMAND_COLLECTION = exports.SYSTEM_USER_COLLECTION = exports.SYSTEM_PROFILE_COLLECTION = exports.SYSTEM_INDEX_COLLECTION = exports.SYSTEM_NAMESPACE_COLLECTION = void 0;\nexports.LEGACY_HELLO_COMMAND_CAMEL_CASE = exports.LEGACY_HELLO_COMMAND = exports.MONGO_CLIENT_EVENTS = exports.LOCAL_SERVER_EVENTS = exports.SERVER_RELAY_EVENTS = exports.APM_EVENTS = void 0;\nexports.SYSTEM_NAMESPACE_COLLECTION = \"system.namespaces\";\nexports.SYSTEM_INDEX_COLLECTION = \"system.indexes\";\nexports.SYSTEM_PROFILE_COLLECTION = \"system.profile\";\nexports.SYSTEM_USER_COLLECTION = \"system.users\";\nexports.SYSTEM_COMMAND_COLLECTION = \"$cmd\";\nexports.SYSTEM_JS_COLLECTION = \"system.js\";\n// events\nexports.ERROR = \"error\";\nexports.TIMEOUT = \"timeout\";\nexports.CLOSE = \"close\";\nexports.OPEN = \"open\";\nexports.CONNECT = \"connect\";\nexports.CLOSED = \"closed\";\nexports.ENDED = \"ended\";\nexports.MESSAGE = \"message\";\nexports.PINNED = \"pinned\";\nexports.UNPINNED = \"unpinned\";\nexports.DESCRIPTION_RECEIVED = \"descriptionReceived\";\nexports.SERVER_OPENING = \"serverOpening\";\nexports.SERVER_CLOSED = \"serverClosed\";\nexports.SERVER_DESCRIPTION_CHANGED = \"serverDescriptionChanged\";\nexports.TOPOLOGY_OPENING = \"topologyOpening\";\nexports.TOPOLOGY_CLOSED = \"topologyClosed\";\nexports.TOPOLOGY_DESCRIPTION_CHANGED = \"topologyDescriptionChanged\";\n/** @internal */ exports.CONNECTION_POOL_CREATED = \"connectionPoolCreated\";\n/** @internal */ exports.CONNECTION_POOL_CLOSED = \"connectionPoolClosed\";\n/** @internal */ exports.CONNECTION_POOL_CLEARED = \"connectionPoolCleared\";\n/** @internal */ exports.CONNECTION_POOL_READY = \"connectionPoolReady\";\n/** @internal */ exports.CONNECTION_CREATED = \"connectionCreated\";\n/** @internal */ exports.CONNECTION_READY = \"connectionReady\";\n/** @internal */ exports.CONNECTION_CLOSED = \"connectionClosed\";\n/** @internal */ exports.CONNECTION_CHECK_OUT_STARTED = \"connectionCheckOutStarted\";\n/** @internal */ exports.CONNECTION_CHECK_OUT_FAILED = \"connectionCheckOutFailed\";\n/** @internal */ exports.CONNECTION_CHECKED_OUT = \"connectionCheckedOut\";\n/** @internal */ exports.CONNECTION_CHECKED_IN = \"connectionCheckedIn\";\nexports.CLUSTER_TIME_RECEIVED = \"clusterTimeReceived\";\nexports.COMMAND_STARTED = \"commandStarted\";\nexports.COMMAND_SUCCEEDED = \"commandSucceeded\";\nexports.COMMAND_FAILED = \"commandFailed\";\nexports.SERVER_HEARTBEAT_STARTED = \"serverHeartbeatStarted\";\nexports.SERVER_HEARTBEAT_SUCCEEDED = \"serverHeartbeatSucceeded\";\nexports.SERVER_HEARTBEAT_FAILED = \"serverHeartbeatFailed\";\nexports.RESPONSE = \"response\";\nexports.MORE = \"more\";\nexports.INIT = \"init\";\nexports.CHANGE = \"change\";\nexports.END = \"end\";\nexports.RESUME_TOKEN_CHANGED = \"resumeTokenChanged\";\n/** @public */ exports.HEARTBEAT_EVENTS = Object.freeze([\n    exports.SERVER_HEARTBEAT_STARTED,\n    exports.SERVER_HEARTBEAT_SUCCEEDED,\n    exports.SERVER_HEARTBEAT_FAILED\n]);\n/** @public */ exports.CMAP_EVENTS = Object.freeze([\n    exports.CONNECTION_POOL_CREATED,\n    exports.CONNECTION_POOL_READY,\n    exports.CONNECTION_POOL_CLEARED,\n    exports.CONNECTION_POOL_CLOSED,\n    exports.CONNECTION_CREATED,\n    exports.CONNECTION_READY,\n    exports.CONNECTION_CLOSED,\n    exports.CONNECTION_CHECK_OUT_STARTED,\n    exports.CONNECTION_CHECK_OUT_FAILED,\n    exports.CONNECTION_CHECKED_OUT,\n    exports.CONNECTION_CHECKED_IN\n]);\n/** @public */ exports.TOPOLOGY_EVENTS = Object.freeze([\n    exports.SERVER_OPENING,\n    exports.SERVER_CLOSED,\n    exports.SERVER_DESCRIPTION_CHANGED,\n    exports.TOPOLOGY_OPENING,\n    exports.TOPOLOGY_CLOSED,\n    exports.TOPOLOGY_DESCRIPTION_CHANGED,\n    exports.ERROR,\n    exports.TIMEOUT,\n    exports.CLOSE\n]);\n/** @public */ exports.APM_EVENTS = Object.freeze([\n    exports.COMMAND_STARTED,\n    exports.COMMAND_SUCCEEDED,\n    exports.COMMAND_FAILED\n]);\n/**\n * All events that we relay to the `Topology`\n * @internal\n */ exports.SERVER_RELAY_EVENTS = Object.freeze([\n    exports.SERVER_HEARTBEAT_STARTED,\n    exports.SERVER_HEARTBEAT_SUCCEEDED,\n    exports.SERVER_HEARTBEAT_FAILED,\n    exports.COMMAND_STARTED,\n    exports.COMMAND_SUCCEEDED,\n    exports.COMMAND_FAILED,\n    ...exports.CMAP_EVENTS\n]);\n/**\n * All events we listen to from `Server` instances, but do not forward to the client\n * @internal\n */ exports.LOCAL_SERVER_EVENTS = Object.freeze([\n    exports.CONNECT,\n    exports.DESCRIPTION_RECEIVED,\n    exports.CLOSED,\n    exports.ENDED\n]);\n/** @public */ exports.MONGO_CLIENT_EVENTS = Object.freeze([\n    ...exports.CMAP_EVENTS,\n    ...exports.APM_EVENTS,\n    ...exports.TOPOLOGY_EVENTS,\n    ...exports.HEARTBEAT_EVENTS\n]);\n/**\n * @internal\n * The legacy hello command that was deprecated in MongoDB 5.0.\n */ exports.LEGACY_HELLO_COMMAND = \"ismaster\";\n/**\n * @internal\n * The legacy hello command that was deprecated in MongoDB 5.0.\n */ exports.LEGACY_HELLO_COMMAND_CAMEL_CASE = \"isMaster\"; //# sourceMappingURL=constants.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongodb/lib/constants.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongodb/lib/cursor/abstract_cursor.js":
/*!************************************************************!*\
  !*** ./node_modules/mongodb/lib/cursor/abstract_cursor.js ***!
  \************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.assertUninitialized = exports.AbstractCursor = exports.CURSOR_FLAGS = void 0;\nconst stream_1 = __webpack_require__(/*! stream */ \"stream\");\nconst bson_1 = __webpack_require__(/*! ../bson */ \"(ssr)/./node_modules/mongodb/lib/bson.js\");\nconst error_1 = __webpack_require__(/*! ../error */ \"(ssr)/./node_modules/mongodb/lib/error.js\");\nconst mongo_types_1 = __webpack_require__(/*! ../mongo_types */ \"(ssr)/./node_modules/mongodb/lib/mongo_types.js\");\nconst execute_operation_1 = __webpack_require__(/*! ../operations/execute_operation */ \"(ssr)/./node_modules/mongodb/lib/operations/execute_operation.js\");\nconst get_more_1 = __webpack_require__(/*! ../operations/get_more */ \"(ssr)/./node_modules/mongodb/lib/operations/get_more.js\");\nconst kill_cursors_1 = __webpack_require__(/*! ../operations/kill_cursors */ \"(ssr)/./node_modules/mongodb/lib/operations/kill_cursors.js\");\nconst read_concern_1 = __webpack_require__(/*! ../read_concern */ \"(ssr)/./node_modules/mongodb/lib/read_concern.js\");\nconst read_preference_1 = __webpack_require__(/*! ../read_preference */ \"(ssr)/./node_modules/mongodb/lib/read_preference.js\");\nconst sessions_1 = __webpack_require__(/*! ../sessions */ \"(ssr)/./node_modules/mongodb/lib/sessions.js\");\nconst utils_1 = __webpack_require__(/*! ../utils */ \"(ssr)/./node_modules/mongodb/lib/utils.js\");\n/** @internal */ const kId = Symbol(\"id\");\n/** @internal */ const kDocuments = Symbol(\"documents\");\n/** @internal */ const kServer = Symbol(\"server\");\n/** @internal */ const kNamespace = Symbol(\"namespace\");\n/** @internal */ const kClient = Symbol(\"client\");\n/** @internal */ const kSession = Symbol(\"session\");\n/** @internal */ const kOptions = Symbol(\"options\");\n/** @internal */ const kTransform = Symbol(\"transform\");\n/** @internal */ const kInitialized = Symbol(\"initialized\");\n/** @internal */ const kClosed = Symbol(\"closed\");\n/** @internal */ const kKilled = Symbol(\"killed\");\n/** @internal */ const kInit = Symbol(\"kInit\");\n/** @public */ exports.CURSOR_FLAGS = [\n    \"tailable\",\n    \"oplogReplay\",\n    \"noCursorTimeout\",\n    \"awaitData\",\n    \"exhaust\",\n    \"partial\"\n];\n/** @public */ class AbstractCursor extends mongo_types_1.TypedEventEmitter {\n    /** @internal */ constructor(client, namespace, options = {}){\n        super();\n        if (!client.s.isMongoClient) {\n            throw new error_1.MongoRuntimeError(\"Cursor must be constructed with MongoClient\");\n        }\n        this[kClient] = client;\n        this[kNamespace] = namespace;\n        this[kId] = null;\n        this[kDocuments] = new utils_1.List();\n        this[kInitialized] = false;\n        this[kClosed] = false;\n        this[kKilled] = false;\n        this[kOptions] = {\n            readPreference: options.readPreference && options.readPreference instanceof read_preference_1.ReadPreference ? options.readPreference : read_preference_1.ReadPreference.primary,\n            ...(0, bson_1.pluckBSONSerializeOptions)(options)\n        };\n        const readConcern = read_concern_1.ReadConcern.fromOptions(options);\n        if (readConcern) {\n            this[kOptions].readConcern = readConcern;\n        }\n        if (typeof options.batchSize === \"number\") {\n            this[kOptions].batchSize = options.batchSize;\n        }\n        // we check for undefined specifically here to allow falsy values\n        // eslint-disable-next-line no-restricted-syntax\n        if (options.comment !== undefined) {\n            this[kOptions].comment = options.comment;\n        }\n        if (typeof options.maxTimeMS === \"number\") {\n            this[kOptions].maxTimeMS = options.maxTimeMS;\n        }\n        if (typeof options.maxAwaitTimeMS === \"number\") {\n            this[kOptions].maxAwaitTimeMS = options.maxAwaitTimeMS;\n        }\n        if (options.session instanceof sessions_1.ClientSession) {\n            this[kSession] = options.session;\n        } else {\n            this[kSession] = this[kClient].startSession({\n                owner: this,\n                explicit: false\n            });\n        }\n    }\n    get id() {\n        return this[kId] ?? undefined;\n    }\n    /** @internal */ get isDead() {\n        return (this[kId]?.isZero() ?? false) || this[kClosed] || this[kKilled];\n    }\n    /** @internal */ get client() {\n        return this[kClient];\n    }\n    /** @internal */ get server() {\n        return this[kServer];\n    }\n    get namespace() {\n        return this[kNamespace];\n    }\n    get readPreference() {\n        return this[kOptions].readPreference;\n    }\n    get readConcern() {\n        return this[kOptions].readConcern;\n    }\n    /** @internal */ get session() {\n        return this[kSession];\n    }\n    set session(clientSession) {\n        this[kSession] = clientSession;\n    }\n    /** @internal */ get cursorOptions() {\n        return this[kOptions];\n    }\n    get closed() {\n        return this[kClosed];\n    }\n    get killed() {\n        return this[kKilled];\n    }\n    get loadBalanced() {\n        return !!this[kClient].topology?.loadBalanced;\n    }\n    /** Returns current buffered documents length */ bufferedCount() {\n        return this[kDocuments].length;\n    }\n    /** Returns current buffered documents */ readBufferedDocuments(number) {\n        const bufferedDocs = [];\n        const documentsToRead = Math.min(number ?? this[kDocuments].length, this[kDocuments].length);\n        for(let count = 0; count < documentsToRead; count++){\n            const document = this[kDocuments].shift();\n            if (document != null) {\n                bufferedDocs.push(document);\n            }\n        }\n        return bufferedDocs;\n    }\n    async *[Symbol.asyncIterator]() {\n        if (this.closed) {\n            return;\n        }\n        try {\n            while(true){\n                const document = await this.next();\n                // Intentional strict null check, because users can map cursors to falsey values.\n                // We allow mapping to all values except for null.\n                // eslint-disable-next-line no-restricted-syntax\n                if (document === null) {\n                    if (!this.closed) {\n                        const message = \"Cursor returned a `null` document, but the cursor is not exhausted.  Mapping documents to `null` is not supported in the cursor transform.\";\n                        await cleanupCursor(this, {\n                            needsToEmitClosed: true\n                        }).catch(()=>null);\n                        throw new error_1.MongoAPIError(message);\n                    }\n                    break;\n                }\n                yield document;\n                if (this[kId] === bson_1.Long.ZERO) {\n                    break;\n                }\n            }\n        } finally{\n            // Only close the cursor if it has not already been closed. This finally clause handles\n            // the case when a user would break out of a for await of loop early.\n            if (!this.closed) {\n                await this.close().catch(()=>null);\n            }\n        }\n    }\n    stream(options) {\n        if (options?.transform) {\n            const transform = options.transform;\n            const readable = new ReadableCursorStream(this);\n            return readable.pipe(new stream_1.Transform({\n                objectMode: true,\n                highWaterMark: 1,\n                transform (chunk, _, callback) {\n                    try {\n                        const transformed = transform(chunk);\n                        callback(undefined, transformed);\n                    } catch (err) {\n                        callback(err);\n                    }\n                }\n            }));\n        }\n        return new ReadableCursorStream(this);\n    }\n    async hasNext() {\n        if (this[kId] === bson_1.Long.ZERO) {\n            return false;\n        }\n        if (this[kDocuments].length !== 0) {\n            return true;\n        }\n        const doc = await next(this, {\n            blocking: true,\n            transform: false\n        });\n        if (doc) {\n            this[kDocuments].unshift(doc);\n            return true;\n        }\n        return false;\n    }\n    /** Get the next available document from the cursor, returns null if no more documents are available. */ async next() {\n        if (this[kId] === bson_1.Long.ZERO) {\n            throw new error_1.MongoCursorExhaustedError();\n        }\n        return next(this, {\n            blocking: true,\n            transform: true\n        });\n    }\n    /**\n     * Try to get the next available document from the cursor or `null` if an empty batch is returned\n     */ async tryNext() {\n        if (this[kId] === bson_1.Long.ZERO) {\n            throw new error_1.MongoCursorExhaustedError();\n        }\n        return next(this, {\n            blocking: false,\n            transform: true\n        });\n    }\n    /**\n     * Iterates over all the documents for this cursor using the iterator, callback pattern.\n     *\n     * If the iterator returns `false`, iteration will stop.\n     *\n     * @param iterator - The iteration callback.\n     * @deprecated - Will be removed in a future release. Use for await...of instead.\n     */ async forEach(iterator) {\n        if (typeof iterator !== \"function\") {\n            throw new error_1.MongoInvalidArgumentError('Argument \"iterator\" must be a function');\n        }\n        for await (const document of this){\n            const result = iterator(document);\n            if (result === false) {\n                break;\n            }\n        }\n    }\n    async close() {\n        const needsToEmitClosed = !this[kClosed];\n        this[kClosed] = true;\n        await cleanupCursor(this, {\n            needsToEmitClosed\n        });\n    }\n    /**\n     * Returns an array of documents. The caller is responsible for making sure that there\n     * is enough memory to store the results. Note that the array only contains partial\n     * results when this cursor had been previously accessed. In that case,\n     * cursor.rewind() can be used to reset the cursor.\n     */ async toArray() {\n        const array = [];\n        for await (const document of this){\n            array.push(document);\n        }\n        return array;\n    }\n    /**\n     * Add a cursor flag to the cursor\n     *\n     * @param flag - The flag to set, must be one of following ['tailable', 'oplogReplay', 'noCursorTimeout', 'awaitData', 'partial' -.\n     * @param value - The flag boolean value.\n     */ addCursorFlag(flag, value) {\n        assertUninitialized(this);\n        if (!exports.CURSOR_FLAGS.includes(flag)) {\n            throw new error_1.MongoInvalidArgumentError(`Flag ${flag} is not one of ${exports.CURSOR_FLAGS}`);\n        }\n        if (typeof value !== \"boolean\") {\n            throw new error_1.MongoInvalidArgumentError(`Flag ${flag} must be a boolean value`);\n        }\n        this[kOptions][flag] = value;\n        return this;\n    }\n    /**\n     * Map all documents using the provided function\n     * If there is a transform set on the cursor, that will be called first and the result passed to\n     * this function's transform.\n     *\n     * @remarks\n     *\n     * **Note** Cursors use `null` internally to indicate that there are no more documents in the cursor. Providing a mapping\n     * function that maps values to `null` will result in the cursor closing itself before it has finished iterating\n     * all documents.  This will **not** result in a memory leak, just surprising behavior.  For example:\n     *\n     * ```typescript\n     * const cursor = collection.find({});\n     * cursor.map(() => null);\n     *\n     * const documents = await cursor.toArray();\n     * // documents is always [], regardless of how many documents are in the collection.\n     * ```\n     *\n     * Other falsey values are allowed:\n     *\n     * ```typescript\n     * const cursor = collection.find({});\n     * cursor.map(() => '');\n     *\n     * const documents = await cursor.toArray();\n     * // documents is now an array of empty strings\n     * ```\n     *\n     * **Note for Typescript Users:** adding a transform changes the return type of the iteration of this cursor,\n     * it **does not** return a new instance of a cursor. This means when calling map,\n     * you should always assign the result to a new variable in order to get a correctly typed cursor variable.\n     * Take note of the following example:\n     *\n     * @example\n     * ```typescript\n     * const cursor: FindCursor<Document> = coll.find();\n     * const mappedCursor: FindCursor<number> = cursor.map(doc => Object.keys(doc).length);\n     * const keyCounts: number[] = await mappedCursor.toArray(); // cursor.toArray() still returns Document[]\n     * ```\n     * @param transform - The mapping transformation method.\n     */ map(transform) {\n        assertUninitialized(this);\n        const oldTransform = this[kTransform]; // TODO(NODE-3283): Improve transform typing\n        if (oldTransform) {\n            this[kTransform] = (doc)=>{\n                return transform(oldTransform(doc));\n            };\n        } else {\n            this[kTransform] = transform;\n        }\n        return this;\n    }\n    /**\n     * Set the ReadPreference for the cursor.\n     *\n     * @param readPreference - The new read preference for the cursor.\n     */ withReadPreference(readPreference) {\n        assertUninitialized(this);\n        if (readPreference instanceof read_preference_1.ReadPreference) {\n            this[kOptions].readPreference = readPreference;\n        } else if (typeof readPreference === \"string\") {\n            this[kOptions].readPreference = read_preference_1.ReadPreference.fromString(readPreference);\n        } else {\n            throw new error_1.MongoInvalidArgumentError(`Invalid read preference: ${readPreference}`);\n        }\n        return this;\n    }\n    /**\n     * Set the ReadPreference for the cursor.\n     *\n     * @param readPreference - The new read preference for the cursor.\n     */ withReadConcern(readConcern) {\n        assertUninitialized(this);\n        const resolvedReadConcern = read_concern_1.ReadConcern.fromOptions({\n            readConcern\n        });\n        if (resolvedReadConcern) {\n            this[kOptions].readConcern = resolvedReadConcern;\n        }\n        return this;\n    }\n    /**\n     * Set a maxTimeMS on the cursor query, allowing for hard timeout limits on queries (Only supported on MongoDB 2.6 or higher)\n     *\n     * @param value - Number of milliseconds to wait before aborting the query.\n     */ maxTimeMS(value) {\n        assertUninitialized(this);\n        if (typeof value !== \"number\") {\n            throw new error_1.MongoInvalidArgumentError(\"Argument for maxTimeMS must be a number\");\n        }\n        this[kOptions].maxTimeMS = value;\n        return this;\n    }\n    /**\n     * Set the batch size for the cursor.\n     *\n     * @param value - The number of documents to return per batch. See {@link https://www.mongodb.com/docs/manual/reference/command/find/|find command documentation}.\n     */ batchSize(value) {\n        assertUninitialized(this);\n        if (this[kOptions].tailable) {\n            throw new error_1.MongoTailableCursorError(\"Tailable cursor does not support batchSize\");\n        }\n        if (typeof value !== \"number\") {\n            throw new error_1.MongoInvalidArgumentError('Operation \"batchSize\" requires an integer');\n        }\n        this[kOptions].batchSize = value;\n        return this;\n    }\n    /**\n     * Rewind this cursor to its uninitialized state. Any options that are present on the cursor will\n     * remain in effect. Iterating this cursor will cause new queries to be sent to the server, even\n     * if the resultant data has already been retrieved by this cursor.\n     */ rewind() {\n        if (!this[kInitialized]) {\n            return;\n        }\n        this[kId] = null;\n        this[kDocuments].clear();\n        this[kClosed] = false;\n        this[kKilled] = false;\n        this[kInitialized] = false;\n        const session = this[kSession];\n        if (session) {\n            // We only want to end this session if we created it, and it hasn't ended yet\n            if (session.explicit === false) {\n                if (!session.hasEnded) {\n                    session.endSession().catch(()=>null);\n                }\n                this[kSession] = this.client.startSession({\n                    owner: this,\n                    explicit: false\n                });\n            }\n        }\n    }\n    /** @internal */ async getMore(batchSize) {\n        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n        const getMoreOperation = new get_more_1.GetMoreOperation(this[kNamespace], this[kId], this[kServer], {\n            ...this[kOptions],\n            session: this[kSession],\n            batchSize\n        });\n        return (0, execute_operation_1.executeOperation)(this[kClient], getMoreOperation);\n    }\n    /**\n     * @internal\n     *\n     * This function is exposed for the unified test runner's createChangeStream\n     * operation.  We cannot refactor to use the abstract _initialize method without\n     * a significant refactor.\n     */ async [kInit]() {\n        try {\n            const state = await this._initialize(this[kSession]);\n            const response = state.response;\n            this[kServer] = state.server;\n            if (response.cursor) {\n                // TODO(NODE-2674): Preserve int64 sent from MongoDB\n                this[kId] = typeof response.cursor.id === \"number\" ? bson_1.Long.fromNumber(response.cursor.id) : typeof response.cursor.id === \"bigint\" ? bson_1.Long.fromBigInt(response.cursor.id) : response.cursor.id;\n                if (response.cursor.ns) {\n                    this[kNamespace] = (0, utils_1.ns)(response.cursor.ns);\n                }\n                this[kDocuments].pushMany(response.cursor.firstBatch);\n            }\n            // When server responses return without a cursor document, we close this cursor\n            // and return the raw server response. This is often the case for explain commands\n            // for example\n            if (this[kId] == null) {\n                this[kId] = bson_1.Long.ZERO;\n                // TODO(NODE-3286): ExecutionResult needs to accept a generic parameter\n                this[kDocuments].push(state.response);\n            }\n            // the cursor is now initialized, even if it is dead\n            this[kInitialized] = true;\n        } catch (error) {\n            // the cursor is now initialized, even if an error occurred\n            this[kInitialized] = true;\n            await cleanupCursor(this, {\n                error\n            });\n            throw error;\n        }\n        if (this.isDead) {\n            await cleanupCursor(this, undefined);\n        }\n        return;\n    }\n}\n/** @event */ AbstractCursor.CLOSE = \"close\";\nexports.AbstractCursor = AbstractCursor;\n/**\n * @param cursor - the cursor on which to call `next`\n * @param blocking - a boolean indicating whether or not the cursor should `block` until data\n *     is available.  Generally, this flag is set to `false` because if the getMore returns no documents,\n *     the cursor has been exhausted.  In certain scenarios (ChangeStreams, tailable await cursors and\n *     `tryNext`, for example) blocking is necessary because a getMore returning no documents does\n *     not indicate the end of the cursor.\n * @param transform - if true, the cursor's transform function is applied to the result document (if the transform exists)\n * @returns the next document in the cursor, or `null`.  When `blocking` is `true`, a `null` document means\n * the cursor has been exhausted.  Otherwise, it means that there is no document available in the cursor's buffer.\n */ async function next(cursor, { blocking, transform }) {\n    if (cursor.closed) {\n        return null;\n    }\n    do {\n        if (cursor[kId] == null) {\n            // All cursors must operate within a session, one must be made implicitly if not explicitly provided\n            await cursor[kInit]();\n        }\n        if (cursor[kDocuments].length !== 0) {\n            const doc = cursor[kDocuments].shift();\n            if (doc != null && transform && cursor[kTransform]) {\n                try {\n                    return cursor[kTransform](doc);\n                } catch (error) {\n                    // `cleanupCursorAsync` should never throw, but if it does we want to throw the original\n                    // error instead.\n                    await cleanupCursor(cursor, {\n                        error,\n                        needsToEmitClosed: true\n                    }).catch(()=>null);\n                    throw error;\n                }\n            }\n            return doc;\n        }\n        if (cursor.isDead) {\n            // if the cursor is dead, we clean it up\n            // cleanupCursorAsync should never throw, but if it does it indicates a bug in the driver\n            // and we should surface the error\n            await cleanupCursor(cursor, {});\n            return null;\n        }\n        // otherwise need to call getMore\n        const batchSize = cursor[kOptions].batchSize || 1000;\n        try {\n            const response = await cursor.getMore(batchSize);\n            if (response) {\n                const cursorId = typeof response.cursor.id === \"number\" ? bson_1.Long.fromNumber(response.cursor.id) : typeof response.cursor.id === \"bigint\" ? bson_1.Long.fromBigInt(response.cursor.id) : response.cursor.id;\n                cursor[kDocuments].pushMany(response.cursor.nextBatch);\n                cursor[kId] = cursorId;\n            }\n        } catch (error) {\n            // `cleanupCursorAsync` should never throw, but if it does we want to throw the original\n            // error instead.\n            await cleanupCursor(cursor, {\n                error\n            }).catch(()=>null);\n            throw error;\n        }\n        if (cursor.isDead) {\n            // If we successfully received a response from a cursor BUT the cursor indicates that it is exhausted,\n            // we intentionally clean up the cursor to release its session back into the pool before the cursor\n            // is iterated.  This prevents a cursor that is exhausted on the server from holding\n            // onto a session indefinitely until the AbstractCursor is iterated.\n            //\n            // cleanupCursorAsync should never throw, but if it does it indicates a bug in the driver\n            // and we should surface the error\n            await cleanupCursor(cursor, {});\n        }\n        if (cursor[kDocuments].length === 0 && blocking === false) {\n            return null;\n        }\n    }while (!cursor.isDead || cursor[kDocuments].length !== 0);\n    return null;\n}\nasync function cleanupCursor(cursor, options) {\n    const cursorId = cursor[kId];\n    const cursorNs = cursor[kNamespace];\n    const server = cursor[kServer];\n    const session = cursor[kSession];\n    const error = options?.error;\n    // Cursors only emit closed events once the client-side cursor has been exhausted fully or there\n    // was an error.  Notably, when the server returns a cursor id of 0 and a non-empty batch, we\n    // cleanup the cursor but don't emit a `close` event.\n    const needsToEmitClosed = options?.needsToEmitClosed ?? cursor[kDocuments].length === 0;\n    if (error) {\n        if (cursor.loadBalanced && error instanceof error_1.MongoNetworkError) {\n            return completeCleanup();\n        }\n    }\n    if (cursorId == null || server == null || cursorId.isZero() || cursorNs == null) {\n        if (needsToEmitClosed) {\n            cursor[kClosed] = true;\n            cursor[kId] = bson_1.Long.ZERO;\n            cursor.emit(AbstractCursor.CLOSE);\n        }\n        if (session) {\n            if (session.owner === cursor) {\n                await session.endSession({\n                    error\n                });\n                return;\n            }\n            if (!session.inTransaction()) {\n                (0, sessions_1.maybeClearPinnedConnection)(session, {\n                    error\n                });\n            }\n        }\n        return;\n    }\n    async function completeCleanup() {\n        if (session) {\n            if (session.owner === cursor) {\n                try {\n                    await session.endSession({\n                        error\n                    });\n                } finally{\n                    cursor.emit(AbstractCursor.CLOSE);\n                }\n                return;\n            }\n            if (!session.inTransaction()) {\n                (0, sessions_1.maybeClearPinnedConnection)(session, {\n                    error\n                });\n            }\n        }\n        cursor.emit(AbstractCursor.CLOSE);\n        return;\n    }\n    cursor[kKilled] = true;\n    if (session.hasEnded) {\n        return completeCleanup();\n    }\n    try {\n        await (0, execute_operation_1.executeOperation)(cursor[kClient], new kill_cursors_1.KillCursorsOperation(cursorId, cursorNs, server, {\n            session\n        })).catch(()=>null);\n    } finally{\n        await completeCleanup();\n    }\n}\n/** @internal */ function assertUninitialized(cursor) {\n    if (cursor[kInitialized]) {\n        throw new error_1.MongoCursorInUseError();\n    }\n}\nexports.assertUninitialized = assertUninitialized;\nclass ReadableCursorStream extends stream_1.Readable {\n    constructor(cursor){\n        super({\n            objectMode: true,\n            autoDestroy: false,\n            highWaterMark: 1\n        });\n        this._readInProgress = false;\n        this._cursor = cursor;\n    }\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    _read(size) {\n        if (!this._readInProgress) {\n            this._readInProgress = true;\n            this._readNext();\n        }\n    }\n    _destroy(error, callback) {\n        this._cursor.close().then(()=>callback(error), (closeError)=>callback(closeError));\n    }\n    _readNext() {\n        next(this._cursor, {\n            blocking: true,\n            transform: true\n        }).then((result)=>{\n            if (result == null) {\n                this.push(null);\n            } else if (this.destroyed) {\n                this._cursor.close().catch(()=>null);\n            } else {\n                if (this.push(result)) {\n                    return this._readNext();\n                }\n                this._readInProgress = false;\n            }\n        }, (err)=>{\n            // NOTE: This is questionable, but we have a test backing the behavior. It seems the\n            //       desired behavior is that a stream ends cleanly when a user explicitly closes\n            //       a client during iteration. Alternatively, we could do the \"right\" thing and\n            //       propagate the error message by removing this special case.\n            if (err.message.match(/server is closed/)) {\n                this._cursor.close().catch(()=>null);\n                return this.push(null);\n            }\n            // NOTE: This is also perhaps questionable. The rationale here is that these errors tend\n            //       to be \"operation was interrupted\", where a cursor has been closed but there is an\n            //       active getMore in-flight. This used to check if the cursor was killed but once\n            //       that changed to happen in cleanup legitimate errors would not destroy the\n            //       stream. There are change streams test specifically test these cases.\n            if (err.message.match(/operation was interrupted/)) {\n                return this.push(null);\n            }\n            // NOTE: The two above checks on the message of the error will cause a null to be pushed\n            //       to the stream, thus closing the stream before the destroy call happens. This means\n            //       that either of those error messages on a change stream will not get a proper\n            //       'error' event to be emitted (the error passed to destroy). Change stream resumability\n            //       relies on that error event to be emitted to create its new cursor and thus was not\n            //       working on 4.4 servers because the error emitted on failover was \"interrupted at\n            //       shutdown\" while on 5.0+ it is \"The server is in quiesce mode and will shut down\".\n            //       See NODE-4475.\n            return this.destroy(err);\n        });\n    }\n} //# sourceMappingURL=abstract_cursor.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongodb/lib/cursor/abstract_cursor.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongodb/lib/cursor/aggregation_cursor.js":
/*!***************************************************************!*\
  !*** ./node_modules/mongodb/lib/cursor/aggregation_cursor.js ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.AggregationCursor = void 0;\nconst aggregate_1 = __webpack_require__(/*! ../operations/aggregate */ \"(ssr)/./node_modules/mongodb/lib/operations/aggregate.js\");\nconst execute_operation_1 = __webpack_require__(/*! ../operations/execute_operation */ \"(ssr)/./node_modules/mongodb/lib/operations/execute_operation.js\");\nconst utils_1 = __webpack_require__(/*! ../utils */ \"(ssr)/./node_modules/mongodb/lib/utils.js\");\nconst abstract_cursor_1 = __webpack_require__(/*! ./abstract_cursor */ \"(ssr)/./node_modules/mongodb/lib/cursor/abstract_cursor.js\");\n/** @internal */ const kPipeline = Symbol(\"pipeline\");\n/** @internal */ const kOptions = Symbol(\"options\");\n/**\n * The **AggregationCursor** class is an internal class that embodies an aggregation cursor on MongoDB\n * allowing for iteration over the results returned from the underlying query. It supports\n * one by one document iteration, conversion to an array or can be iterated as a Node 4.X\n * or higher stream\n * @public\n */ class AggregationCursor extends abstract_cursor_1.AbstractCursor {\n    /** @internal */ constructor(client, namespace, pipeline = [], options = {}){\n        super(client, namespace, options);\n        this[kPipeline] = pipeline;\n        this[kOptions] = options;\n    }\n    get pipeline() {\n        return this[kPipeline];\n    }\n    clone() {\n        const clonedOptions = (0, utils_1.mergeOptions)({}, this[kOptions]);\n        delete clonedOptions.session;\n        return new AggregationCursor(this.client, this.namespace, this[kPipeline], {\n            ...clonedOptions\n        });\n    }\n    map(transform) {\n        return super.map(transform);\n    }\n    /** @internal */ async _initialize(session) {\n        const aggregateOperation = new aggregate_1.AggregateOperation(this.namespace, this[kPipeline], {\n            ...this[kOptions],\n            ...this.cursorOptions,\n            session\n        });\n        const response = await (0, execute_operation_1.executeOperation)(this.client, aggregateOperation);\n        // TODO: NODE-2882\n        return {\n            server: aggregateOperation.server,\n            session,\n            response\n        };\n    }\n    /** Execute the explain for the cursor */ async explain(verbosity) {\n        return (0, execute_operation_1.executeOperation)(this.client, new aggregate_1.AggregateOperation(this.namespace, this[kPipeline], {\n            ...this[kOptions],\n            ...this.cursorOptions,\n            explain: verbosity ?? true\n        }));\n    }\n    group($group) {\n        (0, abstract_cursor_1.assertUninitialized)(this);\n        this[kPipeline].push({\n            $group\n        });\n        return this;\n    }\n    /** Add a limit stage to the aggregation pipeline */ limit($limit) {\n        (0, abstract_cursor_1.assertUninitialized)(this);\n        this[kPipeline].push({\n            $limit\n        });\n        return this;\n    }\n    /** Add a match stage to the aggregation pipeline */ match($match) {\n        (0, abstract_cursor_1.assertUninitialized)(this);\n        this[kPipeline].push({\n            $match\n        });\n        return this;\n    }\n    /** Add an out stage to the aggregation pipeline */ out($out) {\n        (0, abstract_cursor_1.assertUninitialized)(this);\n        this[kPipeline].push({\n            $out\n        });\n        return this;\n    }\n    /**\n     * Add a project stage to the aggregation pipeline\n     *\n     * @remarks\n     * In order to strictly type this function you must provide an interface\n     * that represents the effect of your projection on the result documents.\n     *\n     * By default chaining a projection to your cursor changes the returned type to the generic {@link Document} type.\n     * You should specify a parameterized type to have assertions on your final results.\n     *\n     * @example\n     * ```typescript\n     * // Best way\n     * const docs: AggregationCursor<{ a: number }> = cursor.project<{ a: number }>({ _id: 0, a: true });\n     * // Flexible way\n     * const docs: AggregationCursor<Document> = cursor.project({ _id: 0, a: true });\n     * ```\n     *\n     * @remarks\n     * In order to strictly type this function you must provide an interface\n     * that represents the effect of your projection on the result documents.\n     *\n     * **Note for Typescript Users:** adding a transform changes the return type of the iteration of this cursor,\n     * it **does not** return a new instance of a cursor. This means when calling project,\n     * you should always assign the result to a new variable in order to get a correctly typed cursor variable.\n     * Take note of the following example:\n     *\n     * @example\n     * ```typescript\n     * const cursor: AggregationCursor<{ a: number; b: string }> = coll.aggregate([]);\n     * const projectCursor = cursor.project<{ a: number }>({ _id: 0, a: true });\n     * const aPropOnlyArray: {a: number}[] = await projectCursor.toArray();\n     *\n     * // or always use chaining and save the final cursor\n     *\n     * const cursor = coll.aggregate().project<{ a: string }>({\n     *   _id: 0,\n     *   a: { $convert: { input: '$a', to: 'string' }\n     * }});\n     * ```\n     */ project($project) {\n        (0, abstract_cursor_1.assertUninitialized)(this);\n        this[kPipeline].push({\n            $project\n        });\n        return this;\n    }\n    /** Add a lookup stage to the aggregation pipeline */ lookup($lookup) {\n        (0, abstract_cursor_1.assertUninitialized)(this);\n        this[kPipeline].push({\n            $lookup\n        });\n        return this;\n    }\n    /** Add a redact stage to the aggregation pipeline */ redact($redact) {\n        (0, abstract_cursor_1.assertUninitialized)(this);\n        this[kPipeline].push({\n            $redact\n        });\n        return this;\n    }\n    /** Add a skip stage to the aggregation pipeline */ skip($skip) {\n        (0, abstract_cursor_1.assertUninitialized)(this);\n        this[kPipeline].push({\n            $skip\n        });\n        return this;\n    }\n    /** Add a sort stage to the aggregation pipeline */ sort($sort) {\n        (0, abstract_cursor_1.assertUninitialized)(this);\n        this[kPipeline].push({\n            $sort\n        });\n        return this;\n    }\n    /** Add a unwind stage to the aggregation pipeline */ unwind($unwind) {\n        (0, abstract_cursor_1.assertUninitialized)(this);\n        this[kPipeline].push({\n            $unwind\n        });\n        return this;\n    }\n    /** Add a geoNear stage to the aggregation pipeline */ geoNear($geoNear) {\n        (0, abstract_cursor_1.assertUninitialized)(this);\n        this[kPipeline].push({\n            $geoNear\n        });\n        return this;\n    }\n}\nexports.AggregationCursor = AggregationCursor; //# sourceMappingURL=aggregation_cursor.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongodb/lib/cursor/aggregation_cursor.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongodb/lib/cursor/change_stream_cursor.js":
/*!*****************************************************************!*\
  !*** ./node_modules/mongodb/lib/cursor/change_stream_cursor.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.ChangeStreamCursor = void 0;\nconst change_stream_1 = __webpack_require__(/*! ../change_stream */ \"(ssr)/./node_modules/mongodb/lib/change_stream.js\");\nconst constants_1 = __webpack_require__(/*! ../constants */ \"(ssr)/./node_modules/mongodb/lib/constants.js\");\nconst aggregate_1 = __webpack_require__(/*! ../operations/aggregate */ \"(ssr)/./node_modules/mongodb/lib/operations/aggregate.js\");\nconst execute_operation_1 = __webpack_require__(/*! ../operations/execute_operation */ \"(ssr)/./node_modules/mongodb/lib/operations/execute_operation.js\");\nconst utils_1 = __webpack_require__(/*! ../utils */ \"(ssr)/./node_modules/mongodb/lib/utils.js\");\nconst abstract_cursor_1 = __webpack_require__(/*! ./abstract_cursor */ \"(ssr)/./node_modules/mongodb/lib/cursor/abstract_cursor.js\");\n/** @internal */ class ChangeStreamCursor extends abstract_cursor_1.AbstractCursor {\n    constructor(client, namespace, pipeline = [], options = {}){\n        super(client, namespace, options);\n        this.pipeline = pipeline;\n        this.options = options;\n        this._resumeToken = null;\n        this.startAtOperationTime = options.startAtOperationTime;\n        if (options.startAfter) {\n            this.resumeToken = options.startAfter;\n        } else if (options.resumeAfter) {\n            this.resumeToken = options.resumeAfter;\n        }\n    }\n    set resumeToken(token) {\n        this._resumeToken = token;\n        this.emit(change_stream_1.ChangeStream.RESUME_TOKEN_CHANGED, token);\n    }\n    get resumeToken() {\n        return this._resumeToken;\n    }\n    get resumeOptions() {\n        const options = {\n            ...this.options\n        };\n        for (const key of [\n            \"resumeAfter\",\n            \"startAfter\",\n            \"startAtOperationTime\"\n        ]){\n            delete options[key];\n        }\n        if (this.resumeToken != null) {\n            if (this.options.startAfter && !this.hasReceived) {\n                options.startAfter = this.resumeToken;\n            } else {\n                options.resumeAfter = this.resumeToken;\n            }\n        } else if (this.startAtOperationTime != null && (0, utils_1.maxWireVersion)(this.server) >= 7) {\n            options.startAtOperationTime = this.startAtOperationTime;\n        }\n        return options;\n    }\n    cacheResumeToken(resumeToken) {\n        if (this.bufferedCount() === 0 && this.postBatchResumeToken) {\n            this.resumeToken = this.postBatchResumeToken;\n        } else {\n            this.resumeToken = resumeToken;\n        }\n        this.hasReceived = true;\n    }\n    _processBatch(response) {\n        const cursor = response.cursor;\n        if (cursor.postBatchResumeToken) {\n            this.postBatchResumeToken = response.cursor.postBatchResumeToken;\n            const batch = \"firstBatch\" in response.cursor ? response.cursor.firstBatch : response.cursor.nextBatch;\n            if (batch.length === 0) {\n                this.resumeToken = cursor.postBatchResumeToken;\n            }\n        }\n    }\n    clone() {\n        return new ChangeStreamCursor(this.client, this.namespace, this.pipeline, {\n            ...this.cursorOptions\n        });\n    }\n    async _initialize(session) {\n        const aggregateOperation = new aggregate_1.AggregateOperation(this.namespace, this.pipeline, {\n            ...this.cursorOptions,\n            ...this.options,\n            session\n        });\n        const response = await (0, execute_operation_1.executeOperation)(session.client, aggregateOperation);\n        const server = aggregateOperation.server;\n        this.maxWireVersion = (0, utils_1.maxWireVersion)(server);\n        if (this.startAtOperationTime == null && this.resumeAfter == null && this.startAfter == null && this.maxWireVersion >= 7) {\n            this.startAtOperationTime = response.operationTime;\n        }\n        this._processBatch(response);\n        this.emit(constants_1.INIT, response);\n        this.emit(constants_1.RESPONSE);\n        // TODO: NODE-2882\n        return {\n            server,\n            session,\n            response\n        };\n    }\n    async getMore(batchSize) {\n        const response = await super.getMore(batchSize);\n        this.maxWireVersion = (0, utils_1.maxWireVersion)(this.server);\n        this._processBatch(response);\n        this.emit(change_stream_1.ChangeStream.MORE, response);\n        this.emit(change_stream_1.ChangeStream.RESPONSE);\n        return response;\n    }\n}\nexports.ChangeStreamCursor = ChangeStreamCursor; //# sourceMappingURL=change_stream_cursor.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongodb/lib/cursor/change_stream_cursor.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongodb/lib/cursor/find_cursor.js":
/*!********************************************************!*\
  !*** ./node_modules/mongodb/lib/cursor/find_cursor.js ***!
  \********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.FindCursor = exports.FLAGS = void 0;\nconst bson_1 = __webpack_require__(/*! ../bson */ \"(ssr)/./node_modules/mongodb/lib/bson.js\");\nconst error_1 = __webpack_require__(/*! ../error */ \"(ssr)/./node_modules/mongodb/lib/error.js\");\nconst count_1 = __webpack_require__(/*! ../operations/count */ \"(ssr)/./node_modules/mongodb/lib/operations/count.js\");\nconst execute_operation_1 = __webpack_require__(/*! ../operations/execute_operation */ \"(ssr)/./node_modules/mongodb/lib/operations/execute_operation.js\");\nconst find_1 = __webpack_require__(/*! ../operations/find */ \"(ssr)/./node_modules/mongodb/lib/operations/find.js\");\nconst sort_1 = __webpack_require__(/*! ../sort */ \"(ssr)/./node_modules/mongodb/lib/sort.js\");\nconst utils_1 = __webpack_require__(/*! ../utils */ \"(ssr)/./node_modules/mongodb/lib/utils.js\");\nconst abstract_cursor_1 = __webpack_require__(/*! ./abstract_cursor */ \"(ssr)/./node_modules/mongodb/lib/cursor/abstract_cursor.js\");\n/** @internal */ const kFilter = Symbol(\"filter\");\n/** @internal */ const kNumReturned = Symbol(\"numReturned\");\n/** @internal */ const kBuiltOptions = Symbol(\"builtOptions\");\n/** @public Flags allowed for cursor */ exports.FLAGS = [\n    \"tailable\",\n    \"oplogReplay\",\n    \"noCursorTimeout\",\n    \"awaitData\",\n    \"exhaust\",\n    \"partial\"\n];\n/** @public */ class FindCursor extends abstract_cursor_1.AbstractCursor {\n    /** @internal */ constructor(client, namespace, filter = {}, options = {}){\n        super(client, namespace, options);\n        this[kFilter] = filter;\n        this[kBuiltOptions] = options;\n        if (options.sort != null) {\n            this[kBuiltOptions].sort = (0, sort_1.formatSort)(options.sort);\n        }\n    }\n    clone() {\n        const clonedOptions = (0, utils_1.mergeOptions)({}, this[kBuiltOptions]);\n        delete clonedOptions.session;\n        return new FindCursor(this.client, this.namespace, this[kFilter], {\n            ...clonedOptions\n        });\n    }\n    map(transform) {\n        return super.map(transform);\n    }\n    /** @internal */ async _initialize(session) {\n        const findOperation = new find_1.FindOperation(undefined, this.namespace, this[kFilter], {\n            ...this[kBuiltOptions],\n            ...this.cursorOptions,\n            session\n        });\n        const response = await (0, execute_operation_1.executeOperation)(this.client, findOperation);\n        // the response is not a cursor when `explain` is enabled\n        this[kNumReturned] = response.cursor?.firstBatch?.length;\n        // TODO: NODE-2882\n        return {\n            server: findOperation.server,\n            session,\n            response\n        };\n    }\n    /** @internal */ async getMore(batchSize) {\n        const numReturned = this[kNumReturned];\n        if (numReturned) {\n            // TODO(DRIVERS-1448): Remove logic to enforce `limit` in the driver\n            const limit = this[kBuiltOptions].limit;\n            batchSize = limit && limit > 0 && numReturned + batchSize > limit ? limit - numReturned : batchSize;\n            if (batchSize <= 0) {\n                // this is an optimization for the special case of a limit for a find command to avoid an\n                // extra getMore when the limit has been reached and the limit is a multiple of the batchSize.\n                // This is a consequence of the new query engine in 5.0 having no knowledge of the limit as it\n                // produces results for the find command.  Once a batch is filled up, it is returned and only\n                // on the subsequent getMore will the query framework consider the limit, determine the cursor\n                // is exhausted and return a cursorId of zero.\n                // instead, if we determine there are no more documents to request from the server, we preemptively\n                // close the cursor\n                await this.close().catch(()=>null);\n                return {\n                    cursor: {\n                        id: bson_1.Long.ZERO,\n                        nextBatch: []\n                    }\n                };\n            }\n        }\n        const response = await super.getMore(batchSize);\n        // TODO: wrap this in some logic to prevent it from happening if we don't need this support\n        if (response) {\n            this[kNumReturned] = this[kNumReturned] + response.cursor.nextBatch.length;\n        }\n        return response;\n    }\n    /**\n     * Get the count of documents for this cursor\n     * @deprecated Use `collection.estimatedDocumentCount` or `collection.countDocuments` instead\n     */ async count(options) {\n        (0, utils_1.emitWarningOnce)(\"cursor.count is deprecated and will be removed in the next major version, please use `collection.estimatedDocumentCount` or `collection.countDocuments` instead \");\n        if (typeof options === \"boolean\") {\n            throw new error_1.MongoInvalidArgumentError(\"Invalid first parameter to count\");\n        }\n        return (0, execute_operation_1.executeOperation)(this.client, new count_1.CountOperation(this.namespace, this[kFilter], {\n            ...this[kBuiltOptions],\n            ...this.cursorOptions,\n            ...options\n        }));\n    }\n    /** Execute the explain for the cursor */ async explain(verbosity) {\n        return (0, execute_operation_1.executeOperation)(this.client, new find_1.FindOperation(undefined, this.namespace, this[kFilter], {\n            ...this[kBuiltOptions],\n            ...this.cursorOptions,\n            explain: verbosity ?? true\n        }));\n    }\n    /** Set the cursor query */ filter(filter) {\n        (0, abstract_cursor_1.assertUninitialized)(this);\n        this[kFilter] = filter;\n        return this;\n    }\n    /**\n     * Set the cursor hint\n     *\n     * @param hint - If specified, then the query system will only consider plans using the hinted index.\n     */ hint(hint) {\n        (0, abstract_cursor_1.assertUninitialized)(this);\n        this[kBuiltOptions].hint = hint;\n        return this;\n    }\n    /**\n     * Set the cursor min\n     *\n     * @param min - Specify a $min value to specify the inclusive lower bound for a specific index in order to constrain the results of find(). The $min specifies the lower bound for all keys of a specific index in order.\n     */ min(min) {\n        (0, abstract_cursor_1.assertUninitialized)(this);\n        this[kBuiltOptions].min = min;\n        return this;\n    }\n    /**\n     * Set the cursor max\n     *\n     * @param max - Specify a $max value to specify the exclusive upper bound for a specific index in order to constrain the results of find(). The $max specifies the upper bound for all keys of a specific index in order.\n     */ max(max) {\n        (0, abstract_cursor_1.assertUninitialized)(this);\n        this[kBuiltOptions].max = max;\n        return this;\n    }\n    /**\n     * Set the cursor returnKey.\n     * If set to true, modifies the cursor to only return the index field or fields for the results of the query, rather than documents.\n     * If set to true and the query does not use an index to perform the read operation, the returned documents will not contain any fields.\n     *\n     * @param value - the returnKey value.\n     */ returnKey(value) {\n        (0, abstract_cursor_1.assertUninitialized)(this);\n        this[kBuiltOptions].returnKey = value;\n        return this;\n    }\n    /**\n     * Modifies the output of a query by adding a field $recordId to matching documents. $recordId is the internal key which uniquely identifies a document in a collection.\n     *\n     * @param value - The $showDiskLoc option has now been deprecated and replaced with the showRecordId field. $showDiskLoc will still be accepted for OP_QUERY stye find.\n     */ showRecordId(value) {\n        (0, abstract_cursor_1.assertUninitialized)(this);\n        this[kBuiltOptions].showRecordId = value;\n        return this;\n    }\n    /**\n     * Add a query modifier to the cursor query\n     *\n     * @param name - The query modifier (must start with $, such as $orderby etc)\n     * @param value - The modifier value.\n     */ addQueryModifier(name, value) {\n        (0, abstract_cursor_1.assertUninitialized)(this);\n        if (name[0] !== \"$\") {\n            throw new error_1.MongoInvalidArgumentError(`${name} is not a valid query modifier`);\n        }\n        // Strip of the $\n        const field = name.substr(1);\n        // NOTE: consider some TS magic for this\n        switch(field){\n            case \"comment\":\n                this[kBuiltOptions].comment = value;\n                break;\n            case \"explain\":\n                this[kBuiltOptions].explain = value;\n                break;\n            case \"hint\":\n                this[kBuiltOptions].hint = value;\n                break;\n            case \"max\":\n                this[kBuiltOptions].max = value;\n                break;\n            case \"maxTimeMS\":\n                this[kBuiltOptions].maxTimeMS = value;\n                break;\n            case \"min\":\n                this[kBuiltOptions].min = value;\n                break;\n            case \"orderby\":\n                this[kBuiltOptions].sort = (0, sort_1.formatSort)(value);\n                break;\n            case \"query\":\n                this[kFilter] = value;\n                break;\n            case \"returnKey\":\n                this[kBuiltOptions].returnKey = value;\n                break;\n            case \"showDiskLoc\":\n                this[kBuiltOptions].showRecordId = value;\n                break;\n            default:\n                throw new error_1.MongoInvalidArgumentError(`Invalid query modifier: ${name}`);\n        }\n        return this;\n    }\n    /**\n     * Add a comment to the cursor query allowing for tracking the comment in the log.\n     *\n     * @param value - The comment attached to this query.\n     */ comment(value) {\n        (0, abstract_cursor_1.assertUninitialized)(this);\n        this[kBuiltOptions].comment = value;\n        return this;\n    }\n    /**\n     * Set a maxAwaitTimeMS on a tailing cursor query to allow to customize the timeout value for the option awaitData (Only supported on MongoDB 3.2 or higher, ignored otherwise)\n     *\n     * @param value - Number of milliseconds to wait before aborting the tailed query.\n     */ maxAwaitTimeMS(value) {\n        (0, abstract_cursor_1.assertUninitialized)(this);\n        if (typeof value !== \"number\") {\n            throw new error_1.MongoInvalidArgumentError(\"Argument for maxAwaitTimeMS must be a number\");\n        }\n        this[kBuiltOptions].maxAwaitTimeMS = value;\n        return this;\n    }\n    /**\n     * Set a maxTimeMS on the cursor query, allowing for hard timeout limits on queries (Only supported on MongoDB 2.6 or higher)\n     *\n     * @param value - Number of milliseconds to wait before aborting the query.\n     */ maxTimeMS(value) {\n        (0, abstract_cursor_1.assertUninitialized)(this);\n        if (typeof value !== \"number\") {\n            throw new error_1.MongoInvalidArgumentError(\"Argument for maxTimeMS must be a number\");\n        }\n        this[kBuiltOptions].maxTimeMS = value;\n        return this;\n    }\n    /**\n     * Add a project stage to the aggregation pipeline\n     *\n     * @remarks\n     * In order to strictly type this function you must provide an interface\n     * that represents the effect of your projection on the result documents.\n     *\n     * By default chaining a projection to your cursor changes the returned type to the generic\n     * {@link Document} type.\n     * You should specify a parameterized type to have assertions on your final results.\n     *\n     * @example\n     * ```typescript\n     * // Best way\n     * const docs: FindCursor<{ a: number }> = cursor.project<{ a: number }>({ _id: 0, a: true });\n     * // Flexible way\n     * const docs: FindCursor<Document> = cursor.project({ _id: 0, a: true });\n     * ```\n     *\n     * @remarks\n     *\n     * **Note for Typescript Users:** adding a transform changes the return type of the iteration of this cursor,\n     * it **does not** return a new instance of a cursor. This means when calling project,\n     * you should always assign the result to a new variable in order to get a correctly typed cursor variable.\n     * Take note of the following example:\n     *\n     * @example\n     * ```typescript\n     * const cursor: FindCursor<{ a: number; b: string }> = coll.find();\n     * const projectCursor = cursor.project<{ a: number }>({ _id: 0, a: true });\n     * const aPropOnlyArray: {a: number}[] = await projectCursor.toArray();\n     *\n     * // or always use chaining and save the final cursor\n     *\n     * const cursor = coll.find().project<{ a: string }>({\n     *   _id: 0,\n     *   a: { $convert: { input: '$a', to: 'string' }\n     * }});\n     * ```\n     */ project(value) {\n        (0, abstract_cursor_1.assertUninitialized)(this);\n        this[kBuiltOptions].projection = value;\n        return this;\n    }\n    /**\n     * Sets the sort order of the cursor query.\n     *\n     * @param sort - The key or keys set for the sort.\n     * @param direction - The direction of the sorting (1 or -1).\n     */ sort(sort, direction) {\n        (0, abstract_cursor_1.assertUninitialized)(this);\n        if (this[kBuiltOptions].tailable) {\n            throw new error_1.MongoTailableCursorError(\"Tailable cursor does not support sorting\");\n        }\n        this[kBuiltOptions].sort = (0, sort_1.formatSort)(sort, direction);\n        return this;\n    }\n    /**\n     * Allows disk use for blocking sort operations exceeding 100MB memory. (MongoDB 3.2 or higher)\n     *\n     * @remarks\n     * {@link https://www.mongodb.com/docs/manual/reference/command/find/#find-cmd-allowdiskuse | find command allowDiskUse documentation}\n     */ allowDiskUse(allow = true) {\n        (0, abstract_cursor_1.assertUninitialized)(this);\n        if (!this[kBuiltOptions].sort) {\n            throw new error_1.MongoInvalidArgumentError('Option \"allowDiskUse\" requires a sort specification');\n        }\n        // As of 6.0 the default is true. This allows users to get back to the old behavior.\n        if (!allow) {\n            this[kBuiltOptions].allowDiskUse = false;\n            return this;\n        }\n        this[kBuiltOptions].allowDiskUse = true;\n        return this;\n    }\n    /**\n     * Set the collation options for the cursor.\n     *\n     * @param value - The cursor collation options (MongoDB 3.4 or higher) settings for update operation (see 3.4 documentation for available fields).\n     */ collation(value) {\n        (0, abstract_cursor_1.assertUninitialized)(this);\n        this[kBuiltOptions].collation = value;\n        return this;\n    }\n    /**\n     * Set the limit for the cursor.\n     *\n     * @param value - The limit for the cursor query.\n     */ limit(value) {\n        (0, abstract_cursor_1.assertUninitialized)(this);\n        if (this[kBuiltOptions].tailable) {\n            throw new error_1.MongoTailableCursorError(\"Tailable cursor does not support limit\");\n        }\n        if (typeof value !== \"number\") {\n            throw new error_1.MongoInvalidArgumentError('Operation \"limit\" requires an integer');\n        }\n        this[kBuiltOptions].limit = value;\n        return this;\n    }\n    /**\n     * Set the skip for the cursor.\n     *\n     * @param value - The skip for the cursor query.\n     */ skip(value) {\n        (0, abstract_cursor_1.assertUninitialized)(this);\n        if (this[kBuiltOptions].tailable) {\n            throw new error_1.MongoTailableCursorError(\"Tailable cursor does not support skip\");\n        }\n        if (typeof value !== \"number\") {\n            throw new error_1.MongoInvalidArgumentError('Operation \"skip\" requires an integer');\n        }\n        this[kBuiltOptions].skip = value;\n        return this;\n    }\n}\nexports.FindCursor = FindCursor; //# sourceMappingURL=find_cursor.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongodb/lib/cursor/find_cursor.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongodb/lib/cursor/list_collections_cursor.js":
/*!********************************************************************!*\
  !*** ./node_modules/mongodb/lib/cursor/list_collections_cursor.js ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.ListCollectionsCursor = void 0;\nconst execute_operation_1 = __webpack_require__(/*! ../operations/execute_operation */ \"(ssr)/./node_modules/mongodb/lib/operations/execute_operation.js\");\nconst list_collections_1 = __webpack_require__(/*! ../operations/list_collections */ \"(ssr)/./node_modules/mongodb/lib/operations/list_collections.js\");\nconst abstract_cursor_1 = __webpack_require__(/*! ./abstract_cursor */ \"(ssr)/./node_modules/mongodb/lib/cursor/abstract_cursor.js\");\n/** @public */ class ListCollectionsCursor extends abstract_cursor_1.AbstractCursor {\n    constructor(db, filter, options){\n        super(db.client, db.s.namespace, options);\n        this.parent = db;\n        this.filter = filter;\n        this.options = options;\n    }\n    clone() {\n        return new ListCollectionsCursor(this.parent, this.filter, {\n            ...this.options,\n            ...this.cursorOptions\n        });\n    }\n    /** @internal */ async _initialize(session) {\n        const operation = new list_collections_1.ListCollectionsOperation(this.parent, this.filter, {\n            ...this.cursorOptions,\n            ...this.options,\n            session\n        });\n        const response = await (0, execute_operation_1.executeOperation)(this.parent.client, operation);\n        // TODO: NODE-2882\n        return {\n            server: operation.server,\n            session,\n            response\n        };\n    }\n}\nexports.ListCollectionsCursor = ListCollectionsCursor; //# sourceMappingURL=list_collections_cursor.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbW9uZ29kYi9saWIvY3Vyc29yL2xpc3RfY29sbGVjdGlvbnNfY3Vyc29yLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2JBLDhDQUE2QztJQUFFRyxPQUFPO0FBQUssQ0FBQyxFQUFDO0FBQzdERCw2QkFBNkIsR0FBRyxLQUFLO0FBQ3JDLE1BQU1HLHNCQUFzQkMsbUJBQU9BLENBQUMseUdBQWlDO0FBQ3JFLE1BQU1DLHFCQUFxQkQsbUJBQU9BLENBQUMsdUdBQWdDO0FBQ25FLE1BQU1FLG9CQUFvQkYsbUJBQU9BLENBQUMscUZBQW1CO0FBQ3JELFlBQVksR0FDWixNQUFNRiw4QkFBOEJJLGtCQUFrQkMsY0FBYztJQUNoRUMsWUFBWUMsRUFBRSxFQUFFQyxNQUFNLEVBQUVDLE9BQU8sQ0FBRTtRQUM3QixLQUFLLENBQUNGLEdBQUdHLE1BQU0sRUFBRUgsR0FBR0ksQ0FBQyxDQUFDQyxTQUFTLEVBQUVIO1FBQ2pDLElBQUksQ0FBQ0ksTUFBTSxHQUFHTjtRQUNkLElBQUksQ0FBQ0MsTUFBTSxHQUFHQTtRQUNkLElBQUksQ0FBQ0MsT0FBTyxHQUFHQTtJQUNuQjtJQUNBSyxRQUFRO1FBQ0osT0FBTyxJQUFJZCxzQkFBc0IsSUFBSSxDQUFDYSxNQUFNLEVBQUUsSUFBSSxDQUFDTCxNQUFNLEVBQUU7WUFDdkQsR0FBRyxJQUFJLENBQUNDLE9BQU87WUFDZixHQUFHLElBQUksQ0FBQ00sYUFBYTtRQUN6QjtJQUNKO0lBQ0EsY0FBYyxHQUNkLE1BQU1DLFlBQVlDLE9BQU8sRUFBRTtRQUN2QixNQUFNQyxZQUFZLElBQUlmLG1CQUFtQmdCLHdCQUF3QixDQUFDLElBQUksQ0FBQ04sTUFBTSxFQUFFLElBQUksQ0FBQ0wsTUFBTSxFQUFFO1lBQ3hGLEdBQUcsSUFBSSxDQUFDTyxhQUFhO1lBQ3JCLEdBQUcsSUFBSSxDQUFDTixPQUFPO1lBQ2ZRO1FBQ0o7UUFDQSxNQUFNRyxXQUFXLE1BQU0sQ0FBQyxHQUFHbkIsb0JBQW9Cb0IsZ0JBQWdCLEVBQUUsSUFBSSxDQUFDUixNQUFNLENBQUNILE1BQU0sRUFBRVE7UUFDckYsa0JBQWtCO1FBQ2xCLE9BQU87WUFBRUksUUFBUUosVUFBVUksTUFBTTtZQUFFTDtZQUFTRztRQUFTO0lBQ3pEO0FBQ0o7QUFDQXRCLDZCQUE2QixHQUFHRSx1QkFDaEMsbURBQW1EIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYmxvZy1hcHBsaWNhdGlvbi8uL25vZGVfbW9kdWxlcy9tb25nb2RiL2xpYi9jdXJzb3IvbGlzdF9jb2xsZWN0aW9uc19jdXJzb3IuanM/MDdhNyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuTGlzdENvbGxlY3Rpb25zQ3Vyc29yID0gdm9pZCAwO1xuY29uc3QgZXhlY3V0ZV9vcGVyYXRpb25fMSA9IHJlcXVpcmUoXCIuLi9vcGVyYXRpb25zL2V4ZWN1dGVfb3BlcmF0aW9uXCIpO1xuY29uc3QgbGlzdF9jb2xsZWN0aW9uc18xID0gcmVxdWlyZShcIi4uL29wZXJhdGlvbnMvbGlzdF9jb2xsZWN0aW9uc1wiKTtcbmNvbnN0IGFic3RyYWN0X2N1cnNvcl8xID0gcmVxdWlyZShcIi4vYWJzdHJhY3RfY3Vyc29yXCIpO1xuLyoqIEBwdWJsaWMgKi9cbmNsYXNzIExpc3RDb2xsZWN0aW9uc0N1cnNvciBleHRlbmRzIGFic3RyYWN0X2N1cnNvcl8xLkFic3RyYWN0Q3Vyc29yIHtcbiAgICBjb25zdHJ1Y3RvcihkYiwgZmlsdGVyLCBvcHRpb25zKSB7XG4gICAgICAgIHN1cGVyKGRiLmNsaWVudCwgZGIucy5uYW1lc3BhY2UsIG9wdGlvbnMpO1xuICAgICAgICB0aGlzLnBhcmVudCA9IGRiO1xuICAgICAgICB0aGlzLmZpbHRlciA9IGZpbHRlcjtcbiAgICAgICAgdGhpcy5vcHRpb25zID0gb3B0aW9ucztcbiAgICB9XG4gICAgY2xvbmUoKSB7XG4gICAgICAgIHJldHVybiBuZXcgTGlzdENvbGxlY3Rpb25zQ3Vyc29yKHRoaXMucGFyZW50LCB0aGlzLmZpbHRlciwge1xuICAgICAgICAgICAgLi4udGhpcy5vcHRpb25zLFxuICAgICAgICAgICAgLi4udGhpcy5jdXJzb3JPcHRpb25zXG4gICAgICAgIH0pO1xuICAgIH1cbiAgICAvKiogQGludGVybmFsICovXG4gICAgYXN5bmMgX2luaXRpYWxpemUoc2Vzc2lvbikge1xuICAgICAgICBjb25zdCBvcGVyYXRpb24gPSBuZXcgbGlzdF9jb2xsZWN0aW9uc18xLkxpc3RDb2xsZWN0aW9uc09wZXJhdGlvbih0aGlzLnBhcmVudCwgdGhpcy5maWx0ZXIsIHtcbiAgICAgICAgICAgIC4uLnRoaXMuY3Vyc29yT3B0aW9ucyxcbiAgICAgICAgICAgIC4uLnRoaXMub3B0aW9ucyxcbiAgICAgICAgICAgIHNlc3Npb25cbiAgICAgICAgfSk7XG4gICAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgKDAsIGV4ZWN1dGVfb3BlcmF0aW9uXzEuZXhlY3V0ZU9wZXJhdGlvbikodGhpcy5wYXJlbnQuY2xpZW50LCBvcGVyYXRpb24pO1xuICAgICAgICAvLyBUT0RPOiBOT0RFLTI4ODJcbiAgICAgICAgcmV0dXJuIHsgc2VydmVyOiBvcGVyYXRpb24uc2VydmVyLCBzZXNzaW9uLCByZXNwb25zZSB9O1xuICAgIH1cbn1cbmV4cG9ydHMuTGlzdENvbGxlY3Rpb25zQ3Vyc29yID0gTGlzdENvbGxlY3Rpb25zQ3Vyc29yO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bGlzdF9jb2xsZWN0aW9uc19jdXJzb3IuanMubWFwIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiTGlzdENvbGxlY3Rpb25zQ3Vyc29yIiwiZXhlY3V0ZV9vcGVyYXRpb25fMSIsInJlcXVpcmUiLCJsaXN0X2NvbGxlY3Rpb25zXzEiLCJhYnN0cmFjdF9jdXJzb3JfMSIsIkFic3RyYWN0Q3Vyc29yIiwiY29uc3RydWN0b3IiLCJkYiIsImZpbHRlciIsIm9wdGlvbnMiLCJjbGllbnQiLCJzIiwibmFtZXNwYWNlIiwicGFyZW50IiwiY2xvbmUiLCJjdXJzb3JPcHRpb25zIiwiX2luaXRpYWxpemUiLCJzZXNzaW9uIiwib3BlcmF0aW9uIiwiTGlzdENvbGxlY3Rpb25zT3BlcmF0aW9uIiwicmVzcG9uc2UiLCJleGVjdXRlT3BlcmF0aW9uIiwic2VydmVyIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongodb/lib/cursor/list_collections_cursor.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongodb/lib/cursor/list_indexes_cursor.js":
/*!****************************************************************!*\
  !*** ./node_modules/mongodb/lib/cursor/list_indexes_cursor.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.ListIndexesCursor = void 0;\nconst execute_operation_1 = __webpack_require__(/*! ../operations/execute_operation */ \"(ssr)/./node_modules/mongodb/lib/operations/execute_operation.js\");\nconst indexes_1 = __webpack_require__(/*! ../operations/indexes */ \"(ssr)/./node_modules/mongodb/lib/operations/indexes.js\");\nconst abstract_cursor_1 = __webpack_require__(/*! ./abstract_cursor */ \"(ssr)/./node_modules/mongodb/lib/cursor/abstract_cursor.js\");\n/** @public */ class ListIndexesCursor extends abstract_cursor_1.AbstractCursor {\n    constructor(collection, options){\n        super(collection.client, collection.s.namespace, options);\n        this.parent = collection;\n        this.options = options;\n    }\n    clone() {\n        return new ListIndexesCursor(this.parent, {\n            ...this.options,\n            ...this.cursorOptions\n        });\n    }\n    /** @internal */ async _initialize(session) {\n        const operation = new indexes_1.ListIndexesOperation(this.parent, {\n            ...this.cursorOptions,\n            ...this.options,\n            session\n        });\n        const response = await (0, execute_operation_1.executeOperation)(this.parent.client, operation);\n        // TODO: NODE-2882\n        return {\n            server: operation.server,\n            session,\n            response\n        };\n    }\n}\nexports.ListIndexesCursor = ListIndexesCursor; //# sourceMappingURL=list_indexes_cursor.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbW9uZ29kYi9saWIvY3Vyc29yL2xpc3RfaW5kZXhlc19jdXJzb3IuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYkEsOENBQTZDO0lBQUVHLE9BQU87QUFBSyxDQUFDLEVBQUM7QUFDN0RELHlCQUF5QixHQUFHLEtBQUs7QUFDakMsTUFBTUcsc0JBQXNCQyxtQkFBT0EsQ0FBQyx5R0FBaUM7QUFDckUsTUFBTUMsWUFBWUQsbUJBQU9BLENBQUMscUZBQXVCO0FBQ2pELE1BQU1FLG9CQUFvQkYsbUJBQU9BLENBQUMscUZBQW1CO0FBQ3JELFlBQVksR0FDWixNQUFNRiwwQkFBMEJJLGtCQUFrQkMsY0FBYztJQUM1REMsWUFBWUMsVUFBVSxFQUFFQyxPQUFPLENBQUU7UUFDN0IsS0FBSyxDQUFDRCxXQUFXRSxNQUFNLEVBQUVGLFdBQVdHLENBQUMsQ0FBQ0MsU0FBUyxFQUFFSDtRQUNqRCxJQUFJLENBQUNJLE1BQU0sR0FBR0w7UUFDZCxJQUFJLENBQUNDLE9BQU8sR0FBR0E7SUFDbkI7SUFDQUssUUFBUTtRQUNKLE9BQU8sSUFBSWIsa0JBQWtCLElBQUksQ0FBQ1ksTUFBTSxFQUFFO1lBQ3RDLEdBQUcsSUFBSSxDQUFDSixPQUFPO1lBQ2YsR0FBRyxJQUFJLENBQUNNLGFBQWE7UUFDekI7SUFDSjtJQUNBLGNBQWMsR0FDZCxNQUFNQyxZQUFZQyxPQUFPLEVBQUU7UUFDdkIsTUFBTUMsWUFBWSxJQUFJZCxVQUFVZSxvQkFBb0IsQ0FBQyxJQUFJLENBQUNOLE1BQU0sRUFBRTtZQUM5RCxHQUFHLElBQUksQ0FBQ0UsYUFBYTtZQUNyQixHQUFHLElBQUksQ0FBQ04sT0FBTztZQUNmUTtRQUNKO1FBQ0EsTUFBTUcsV0FBVyxNQUFNLENBQUMsR0FBR2xCLG9CQUFvQm1CLGdCQUFnQixFQUFFLElBQUksQ0FBQ1IsTUFBTSxDQUFDSCxNQUFNLEVBQUVRO1FBQ3JGLGtCQUFrQjtRQUNsQixPQUFPO1lBQUVJLFFBQVFKLFVBQVVJLE1BQU07WUFBRUw7WUFBU0c7UUFBUztJQUN6RDtBQUNKO0FBQ0FyQix5QkFBeUIsR0FBR0UsbUJBQzVCLCtDQUErQyIsInNvdXJjZXMiOlsid2VicGFjazovL2Jsb2ctYXBwbGljYXRpb24vLi9ub2RlX21vZHVsZXMvbW9uZ29kYi9saWIvY3Vyc29yL2xpc3RfaW5kZXhlc19jdXJzb3IuanM/ODk1NiJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuTGlzdEluZGV4ZXNDdXJzb3IgPSB2b2lkIDA7XG5jb25zdCBleGVjdXRlX29wZXJhdGlvbl8xID0gcmVxdWlyZShcIi4uL29wZXJhdGlvbnMvZXhlY3V0ZV9vcGVyYXRpb25cIik7XG5jb25zdCBpbmRleGVzXzEgPSByZXF1aXJlKFwiLi4vb3BlcmF0aW9ucy9pbmRleGVzXCIpO1xuY29uc3QgYWJzdHJhY3RfY3Vyc29yXzEgPSByZXF1aXJlKFwiLi9hYnN0cmFjdF9jdXJzb3JcIik7XG4vKiogQHB1YmxpYyAqL1xuY2xhc3MgTGlzdEluZGV4ZXNDdXJzb3IgZXh0ZW5kcyBhYnN0cmFjdF9jdXJzb3JfMS5BYnN0cmFjdEN1cnNvciB7XG4gICAgY29uc3RydWN0b3IoY29sbGVjdGlvbiwgb3B0aW9ucykge1xuICAgICAgICBzdXBlcihjb2xsZWN0aW9uLmNsaWVudCwgY29sbGVjdGlvbi5zLm5hbWVzcGFjZSwgb3B0aW9ucyk7XG4gICAgICAgIHRoaXMucGFyZW50ID0gY29sbGVjdGlvbjtcbiAgICAgICAgdGhpcy5vcHRpb25zID0gb3B0aW9ucztcbiAgICB9XG4gICAgY2xvbmUoKSB7XG4gICAgICAgIHJldHVybiBuZXcgTGlzdEluZGV4ZXNDdXJzb3IodGhpcy5wYXJlbnQsIHtcbiAgICAgICAgICAgIC4uLnRoaXMub3B0aW9ucyxcbiAgICAgICAgICAgIC4uLnRoaXMuY3Vyc29yT3B0aW9uc1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgLyoqIEBpbnRlcm5hbCAqL1xuICAgIGFzeW5jIF9pbml0aWFsaXplKHNlc3Npb24pIHtcbiAgICAgICAgY29uc3Qgb3BlcmF0aW9uID0gbmV3IGluZGV4ZXNfMS5MaXN0SW5kZXhlc09wZXJhdGlvbih0aGlzLnBhcmVudCwge1xuICAgICAgICAgICAgLi4udGhpcy5jdXJzb3JPcHRpb25zLFxuICAgICAgICAgICAgLi4udGhpcy5vcHRpb25zLFxuICAgICAgICAgICAgc2Vzc2lvblxuICAgICAgICB9KTtcbiAgICAgICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCAoMCwgZXhlY3V0ZV9vcGVyYXRpb25fMS5leGVjdXRlT3BlcmF0aW9uKSh0aGlzLnBhcmVudC5jbGllbnQsIG9wZXJhdGlvbik7XG4gICAgICAgIC8vIFRPRE86IE5PREUtMjg4MlxuICAgICAgICByZXR1cm4geyBzZXJ2ZXI6IG9wZXJhdGlvbi5zZXJ2ZXIsIHNlc3Npb24sIHJlc3BvbnNlIH07XG4gICAgfVxufVxuZXhwb3J0cy5MaXN0SW5kZXhlc0N1cnNvciA9IExpc3RJbmRleGVzQ3Vyc29yO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bGlzdF9pbmRleGVzX2N1cnNvci5qcy5tYXAiXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJMaXN0SW5kZXhlc0N1cnNvciIsImV4ZWN1dGVfb3BlcmF0aW9uXzEiLCJyZXF1aXJlIiwiaW5kZXhlc18xIiwiYWJzdHJhY3RfY3Vyc29yXzEiLCJBYnN0cmFjdEN1cnNvciIsImNvbnN0cnVjdG9yIiwiY29sbGVjdGlvbiIsIm9wdGlvbnMiLCJjbGllbnQiLCJzIiwibmFtZXNwYWNlIiwicGFyZW50IiwiY2xvbmUiLCJjdXJzb3JPcHRpb25zIiwiX2luaXRpYWxpemUiLCJzZXNzaW9uIiwib3BlcmF0aW9uIiwiTGlzdEluZGV4ZXNPcGVyYXRpb24iLCJyZXNwb25zZSIsImV4ZWN1dGVPcGVyYXRpb24iLCJzZXJ2ZXIiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongodb/lib/cursor/list_indexes_cursor.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongodb/lib/cursor/list_search_indexes_cursor.js":
/*!***********************************************************************!*\
  !*** ./node_modules/mongodb/lib/cursor/list_search_indexes_cursor.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.ListSearchIndexesCursor = void 0;\nconst aggregation_cursor_1 = __webpack_require__(/*! ./aggregation_cursor */ \"(ssr)/./node_modules/mongodb/lib/cursor/aggregation_cursor.js\");\n/** @public */ class ListSearchIndexesCursor extends aggregation_cursor_1.AggregationCursor {\n    /** @internal */ constructor({ fullNamespace: ns, client }, name, options = {}){\n        const pipeline = name == null ? [\n            {\n                $listSearchIndexes: {}\n            }\n        ] : [\n            {\n                $listSearchIndexes: {\n                    name\n                }\n            }\n        ];\n        super(client, ns, pipeline, options);\n    }\n}\nexports.ListSearchIndexesCursor = ListSearchIndexesCursor; //# sourceMappingURL=list_search_indexes_cursor.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbW9uZ29kYi9saWIvY3Vyc29yL2xpc3Rfc2VhcmNoX2luZGV4ZXNfY3Vyc29yLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2JBLDhDQUE2QztJQUFFRyxPQUFPO0FBQUssQ0FBQyxFQUFDO0FBQzdERCwrQkFBK0IsR0FBRyxLQUFLO0FBQ3ZDLE1BQU1HLHVCQUF1QkMsbUJBQU9BLENBQUMsMkZBQXNCO0FBQzNELFlBQVksR0FDWixNQUFNRixnQ0FBZ0NDLHFCQUFxQkUsaUJBQWlCO0lBQ3hFLGNBQWMsR0FDZEMsWUFBWSxFQUFFQyxlQUFlQyxFQUFFLEVBQUVDLE1BQU0sRUFBRSxFQUFFQyxJQUFJLEVBQUVDLFVBQVUsQ0FBQyxDQUFDLENBQUU7UUFDM0QsTUFBTUMsV0FBV0YsUUFBUSxPQUFPO1lBQUM7Z0JBQUVHLG9CQUFvQixDQUFDO1lBQUU7U0FBRSxHQUFHO1lBQUM7Z0JBQUVBLG9CQUFvQjtvQkFBRUg7Z0JBQUs7WUFBRTtTQUFFO1FBQ2pHLEtBQUssQ0FBQ0QsUUFBUUQsSUFBSUksVUFBVUQ7SUFDaEM7QUFDSjtBQUNBWCwrQkFBK0IsR0FBR0UseUJBQ2xDLHNEQUFzRCIsInNvdXJjZXMiOlsid2VicGFjazovL2Jsb2ctYXBwbGljYXRpb24vLi9ub2RlX21vZHVsZXMvbW9uZ29kYi9saWIvY3Vyc29yL2xpc3Rfc2VhcmNoX2luZGV4ZXNfY3Vyc29yLmpzPzQ4NDkiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLkxpc3RTZWFyY2hJbmRleGVzQ3Vyc29yID0gdm9pZCAwO1xuY29uc3QgYWdncmVnYXRpb25fY3Vyc29yXzEgPSByZXF1aXJlKFwiLi9hZ2dyZWdhdGlvbl9jdXJzb3JcIik7XG4vKiogQHB1YmxpYyAqL1xuY2xhc3MgTGlzdFNlYXJjaEluZGV4ZXNDdXJzb3IgZXh0ZW5kcyBhZ2dyZWdhdGlvbl9jdXJzb3JfMS5BZ2dyZWdhdGlvbkN1cnNvciB7XG4gICAgLyoqIEBpbnRlcm5hbCAqL1xuICAgIGNvbnN0cnVjdG9yKHsgZnVsbE5hbWVzcGFjZTogbnMsIGNsaWVudCB9LCBuYW1lLCBvcHRpb25zID0ge30pIHtcbiAgICAgICAgY29uc3QgcGlwZWxpbmUgPSBuYW1lID09IG51bGwgPyBbeyAkbGlzdFNlYXJjaEluZGV4ZXM6IHt9IH1dIDogW3sgJGxpc3RTZWFyY2hJbmRleGVzOiB7IG5hbWUgfSB9XTtcbiAgICAgICAgc3VwZXIoY2xpZW50LCBucywgcGlwZWxpbmUsIG9wdGlvbnMpO1xuICAgIH1cbn1cbmV4cG9ydHMuTGlzdFNlYXJjaEluZGV4ZXNDdXJzb3IgPSBMaXN0U2VhcmNoSW5kZXhlc0N1cnNvcjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWxpc3Rfc2VhcmNoX2luZGV4ZXNfY3Vyc29yLmpzLm1hcCJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsIkxpc3RTZWFyY2hJbmRleGVzQ3Vyc29yIiwiYWdncmVnYXRpb25fY3Vyc29yXzEiLCJyZXF1aXJlIiwiQWdncmVnYXRpb25DdXJzb3IiLCJjb25zdHJ1Y3RvciIsImZ1bGxOYW1lc3BhY2UiLCJucyIsImNsaWVudCIsIm5hbWUiLCJvcHRpb25zIiwicGlwZWxpbmUiLCIkbGlzdFNlYXJjaEluZGV4ZXMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongodb/lib/cursor/list_search_indexes_cursor.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongodb/lib/cursor/run_command_cursor.js":
/*!***************************************************************!*\
  !*** ./node_modules/mongodb/lib/cursor/run_command_cursor.js ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.RunCommandCursor = void 0;\nconst error_1 = __webpack_require__(/*! ../error */ \"(ssr)/./node_modules/mongodb/lib/error.js\");\nconst execute_operation_1 = __webpack_require__(/*! ../operations/execute_operation */ \"(ssr)/./node_modules/mongodb/lib/operations/execute_operation.js\");\nconst get_more_1 = __webpack_require__(/*! ../operations/get_more */ \"(ssr)/./node_modules/mongodb/lib/operations/get_more.js\");\nconst run_command_1 = __webpack_require__(/*! ../operations/run_command */ \"(ssr)/./node_modules/mongodb/lib/operations/run_command.js\");\nconst utils_1 = __webpack_require__(/*! ../utils */ \"(ssr)/./node_modules/mongodb/lib/utils.js\");\nconst abstract_cursor_1 = __webpack_require__(/*! ./abstract_cursor */ \"(ssr)/./node_modules/mongodb/lib/cursor/abstract_cursor.js\");\n/** @public */ class RunCommandCursor extends abstract_cursor_1.AbstractCursor {\n    /**\n     * Controls the `getMore.comment` field\n     * @param comment - any BSON value\n     */ setComment(comment) {\n        this.getMoreOptions.comment = comment;\n        return this;\n    }\n    /**\n     * Controls the `getMore.maxTimeMS` field. Only valid when cursor is tailable await\n     * @param maxTimeMS - the number of milliseconds to wait for new data\n     */ setMaxTimeMS(maxTimeMS) {\n        this.getMoreOptions.maxAwaitTimeMS = maxTimeMS;\n        return this;\n    }\n    /**\n     * Controls the `getMore.batchSize` field\n     * @param maxTimeMS - the number documents to return in the `nextBatch`\n     */ setBatchSize(batchSize) {\n        this.getMoreOptions.batchSize = batchSize;\n        return this;\n    }\n    /** Unsupported for RunCommandCursor */ clone() {\n        throw new error_1.MongoAPIError(\"Clone not supported, create a new cursor with db.runCursorCommand\");\n    }\n    /** Unsupported for RunCommandCursor: readConcern must be configured directly on command document */ withReadConcern(_) {\n        throw new error_1.MongoAPIError(\"RunCommandCursor does not support readConcern it must be attached to the command being run\");\n    }\n    /** Unsupported for RunCommandCursor: various cursor flags must be configured directly on command document */ addCursorFlag(_, __) {\n        throw new error_1.MongoAPIError(\"RunCommandCursor does not support cursor flags, they must be attached to the command being run\");\n    }\n    /** Unsupported for RunCommandCursor: maxTimeMS must be configured directly on command document */ maxTimeMS(_) {\n        throw new error_1.MongoAPIError(\"maxTimeMS must be configured on the command document directly, to configure getMore.maxTimeMS use cursor.setMaxTimeMS()\");\n    }\n    /** Unsupported for RunCommandCursor: batchSize must be configured directly on command document */ batchSize(_) {\n        throw new error_1.MongoAPIError(\"batchSize must be configured on the command document directly, to configure getMore.batchSize use cursor.setBatchSize()\");\n    }\n    /** @internal */ constructor(db, command, options = {}){\n        super(db.client, (0, utils_1.ns)(db.namespace), options);\n        this.getMoreOptions = {};\n        this.db = db;\n        this.command = Object.freeze({\n            ...command\n        });\n    }\n    /** @internal */ async _initialize(session) {\n        const operation = new run_command_1.RunCommandOperation(this.db, this.command, {\n            ...this.cursorOptions,\n            session: session,\n            readPreference: this.cursorOptions.readPreference\n        });\n        const response = await (0, execute_operation_1.executeOperation)(this.client, operation);\n        if (response.cursor == null) {\n            throw new error_1.MongoUnexpectedServerResponseError(\"Expected server to respond with cursor\");\n        }\n        return {\n            server: operation.server,\n            session,\n            response\n        };\n    }\n    /** @internal */ async getMore(_batchSize) {\n        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n        const getMoreOperation = new get_more_1.GetMoreOperation(this.namespace, this.id, this.server, {\n            ...this.cursorOptions,\n            session: this.session,\n            ...this.getMoreOptions\n        });\n        return (0, execute_operation_1.executeOperation)(this.client, getMoreOperation);\n    }\n}\nexports.RunCommandCursor = RunCommandCursor; //# sourceMappingURL=run_command_cursor.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongodb/lib/cursor/run_command_cursor.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongodb/lib/db.js":
/*!****************************************!*\
  !*** ./node_modules/mongodb/lib/db.js ***!
  \****************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.Db = void 0;\nconst admin_1 = __webpack_require__(/*! ./admin */ \"(ssr)/./node_modules/mongodb/lib/admin.js\");\nconst bson_1 = __webpack_require__(/*! ./bson */ \"(ssr)/./node_modules/mongodb/lib/bson.js\");\nconst change_stream_1 = __webpack_require__(/*! ./change_stream */ \"(ssr)/./node_modules/mongodb/lib/change_stream.js\");\nconst collection_1 = __webpack_require__(/*! ./collection */ \"(ssr)/./node_modules/mongodb/lib/collection.js\");\nconst CONSTANTS = __webpack_require__(/*! ./constants */ \"(ssr)/./node_modules/mongodb/lib/constants.js\");\nconst aggregation_cursor_1 = __webpack_require__(/*! ./cursor/aggregation_cursor */ \"(ssr)/./node_modules/mongodb/lib/cursor/aggregation_cursor.js\");\nconst list_collections_cursor_1 = __webpack_require__(/*! ./cursor/list_collections_cursor */ \"(ssr)/./node_modules/mongodb/lib/cursor/list_collections_cursor.js\");\nconst run_command_cursor_1 = __webpack_require__(/*! ./cursor/run_command_cursor */ \"(ssr)/./node_modules/mongodb/lib/cursor/run_command_cursor.js\");\nconst error_1 = __webpack_require__(/*! ./error */ \"(ssr)/./node_modules/mongodb/lib/error.js\");\nconst collections_1 = __webpack_require__(/*! ./operations/collections */ \"(ssr)/./node_modules/mongodb/lib/operations/collections.js\");\nconst create_collection_1 = __webpack_require__(/*! ./operations/create_collection */ \"(ssr)/./node_modules/mongodb/lib/operations/create_collection.js\");\nconst drop_1 = __webpack_require__(/*! ./operations/drop */ \"(ssr)/./node_modules/mongodb/lib/operations/drop.js\");\nconst execute_operation_1 = __webpack_require__(/*! ./operations/execute_operation */ \"(ssr)/./node_modules/mongodb/lib/operations/execute_operation.js\");\nconst indexes_1 = __webpack_require__(/*! ./operations/indexes */ \"(ssr)/./node_modules/mongodb/lib/operations/indexes.js\");\nconst profiling_level_1 = __webpack_require__(/*! ./operations/profiling_level */ \"(ssr)/./node_modules/mongodb/lib/operations/profiling_level.js\");\nconst remove_user_1 = __webpack_require__(/*! ./operations/remove_user */ \"(ssr)/./node_modules/mongodb/lib/operations/remove_user.js\");\nconst rename_1 = __webpack_require__(/*! ./operations/rename */ \"(ssr)/./node_modules/mongodb/lib/operations/rename.js\");\nconst run_command_1 = __webpack_require__(/*! ./operations/run_command */ \"(ssr)/./node_modules/mongodb/lib/operations/run_command.js\");\nconst set_profiling_level_1 = __webpack_require__(/*! ./operations/set_profiling_level */ \"(ssr)/./node_modules/mongodb/lib/operations/set_profiling_level.js\");\nconst stats_1 = __webpack_require__(/*! ./operations/stats */ \"(ssr)/./node_modules/mongodb/lib/operations/stats.js\");\nconst read_concern_1 = __webpack_require__(/*! ./read_concern */ \"(ssr)/./node_modules/mongodb/lib/read_concern.js\");\nconst read_preference_1 = __webpack_require__(/*! ./read_preference */ \"(ssr)/./node_modules/mongodb/lib/read_preference.js\");\nconst utils_1 = __webpack_require__(/*! ./utils */ \"(ssr)/./node_modules/mongodb/lib/utils.js\");\nconst write_concern_1 = __webpack_require__(/*! ./write_concern */ \"(ssr)/./node_modules/mongodb/lib/write_concern.js\");\n// Allowed parameters\nconst DB_OPTIONS_ALLOW_LIST = [\n    \"writeConcern\",\n    \"readPreference\",\n    \"readPreferenceTags\",\n    \"native_parser\",\n    \"forceServerObjectId\",\n    \"pkFactory\",\n    \"serializeFunctions\",\n    \"raw\",\n    \"authSource\",\n    \"ignoreUndefined\",\n    \"readConcern\",\n    \"retryMiliSeconds\",\n    \"numberOfRetries\",\n    \"useBigInt64\",\n    \"promoteBuffers\",\n    \"promoteLongs\",\n    \"bsonRegExp\",\n    \"enableUtf8Validation\",\n    \"promoteValues\",\n    \"compression\",\n    \"retryWrites\"\n];\n/**\n * The **Db** class is a class that represents a MongoDB Database.\n * @public\n *\n * @example\n * ```ts\n * import { MongoClient } from 'mongodb';\n *\n * interface Pet {\n *   name: string;\n *   kind: 'dog' | 'cat' | 'fish';\n * }\n *\n * const client = new MongoClient('mongodb://localhost:27017');\n * const db = client.db();\n *\n * // Create a collection that validates our union\n * await db.createCollection<Pet>('pets', {\n *   validator: { $expr: { $in: ['$kind', ['dog', 'cat', 'fish']] } }\n * })\n * ```\n */ class Db {\n    /**\n     * Creates a new Db instance.\n     *\n     * Db name cannot contain a dot, the server may apply more restrictions when an operation is run.\n     *\n     * @param client - The MongoClient for the database.\n     * @param databaseName - The name of the database this instance represents.\n     * @param options - Optional settings for Db construction.\n     */ constructor(client, databaseName, options){\n        options = options ?? {};\n        // Filter the options\n        options = (0, utils_1.filterOptions)(options, DB_OPTIONS_ALLOW_LIST);\n        // Ensure there are no dots in database name\n        if (typeof databaseName === \"string\" && databaseName.includes(\".\")) {\n            throw new error_1.MongoInvalidArgumentError(`Database names cannot contain the character '.'`);\n        }\n        // Internal state of the db object\n        this.s = {\n            // Options\n            options,\n            // Unpack read preference\n            readPreference: read_preference_1.ReadPreference.fromOptions(options),\n            // Merge bson options\n            bsonOptions: (0, bson_1.resolveBSONOptions)(options, client),\n            // Set up the primary key factory or fallback to ObjectId\n            pkFactory: options?.pkFactory ?? utils_1.DEFAULT_PK_FACTORY,\n            // ReadConcern\n            readConcern: read_concern_1.ReadConcern.fromOptions(options),\n            writeConcern: write_concern_1.WriteConcern.fromOptions(options),\n            // Namespace\n            namespace: new utils_1.MongoDBNamespace(databaseName)\n        };\n        this.client = client;\n    }\n    get databaseName() {\n        return this.s.namespace.db;\n    }\n    // Options\n    get options() {\n        return this.s.options;\n    }\n    /**\n     * Check if a secondary can be used (because the read preference is *not* set to primary)\n     */ get secondaryOk() {\n        return this.s.readPreference?.preference !== \"primary\" || false;\n    }\n    get readConcern() {\n        return this.s.readConcern;\n    }\n    /**\n     * The current readPreference of the Db. If not explicitly defined for\n     * this Db, will be inherited from the parent MongoClient\n     */ get readPreference() {\n        if (this.s.readPreference == null) {\n            return this.client.readPreference;\n        }\n        return this.s.readPreference;\n    }\n    get bsonOptions() {\n        return this.s.bsonOptions;\n    }\n    // get the write Concern\n    get writeConcern() {\n        return this.s.writeConcern;\n    }\n    get namespace() {\n        return this.s.namespace.toString();\n    }\n    /**\n     * Create a new collection on a server with the specified options. Use this to create capped collections.\n     * More information about command options available at https://www.mongodb.com/docs/manual/reference/command/create/\n     *\n     * Collection namespace validation is performed server-side.\n     *\n     * @param name - The name of the collection to create\n     * @param options - Optional settings for the command\n     */ async createCollection(name, options) {\n        return (0, execute_operation_1.executeOperation)(this.client, new create_collection_1.CreateCollectionOperation(this, name, (0, utils_1.resolveOptions)(this, options)));\n    }\n    /**\n     * Execute a command\n     *\n     * @remarks\n     * This command does not inherit options from the MongoClient.\n     *\n     * The driver will ensure the following fields are attached to the command sent to the server:\n     * - `lsid` - sourced from an implicit session or options.session\n     * - `$readPreference` - defaults to primary or can be configured by options.readPreference\n     * - `$db` - sourced from the name of this database\n     *\n     * If the client has a serverApi setting:\n     * - `apiVersion`\n     * - `apiStrict`\n     * - `apiDeprecationErrors`\n     *\n     * When in a transaction:\n     * - `readConcern` - sourced from readConcern set on the TransactionOptions\n     * - `writeConcern` - sourced from writeConcern set on the TransactionOptions\n     *\n     * Attaching any of the above fields to the command will have no effect as the driver will overwrite the value.\n     *\n     * @param command - The command to run\n     * @param options - Optional settings for the command\n     */ async command(command, options) {\n        // Intentionally, we do not inherit options from parent for this operation.\n        return (0, execute_operation_1.executeOperation)(this.client, new run_command_1.RunCommandOperation(this, command, {\n            ...(0, bson_1.resolveBSONOptions)(options),\n            session: options?.session,\n            readPreference: options?.readPreference\n        }));\n    }\n    /**\n     * Execute an aggregation framework pipeline against the database, needs MongoDB \\>= 3.6\n     *\n     * @param pipeline - An array of aggregation stages to be executed\n     * @param options - Optional settings for the command\n     */ aggregate(pipeline = [], options) {\n        return new aggregation_cursor_1.AggregationCursor(this.client, this.s.namespace, pipeline, (0, utils_1.resolveOptions)(this, options));\n    }\n    /** Return the Admin db instance */ admin() {\n        return new admin_1.Admin(this);\n    }\n    /**\n     * Returns a reference to a MongoDB Collection. If it does not exist it will be created implicitly.\n     *\n     * Collection namespace validation is performed server-side.\n     *\n     * @param name - the collection name we wish to access.\n     * @returns return the new Collection instance\n     */ collection(name, options = {}) {\n        if (typeof options === \"function\") {\n            throw new error_1.MongoInvalidArgumentError(\"The callback form of this helper has been removed.\");\n        }\n        return new collection_1.Collection(this, name, (0, utils_1.resolveOptions)(this, options));\n    }\n    /**\n     * Get all the db statistics.\n     *\n     * @param options - Optional settings for the command\n     */ async stats(options) {\n        return (0, execute_operation_1.executeOperation)(this.client, new stats_1.DbStatsOperation(this, (0, utils_1.resolveOptions)(this, options)));\n    }\n    listCollections(filter = {}, options = {}) {\n        return new list_collections_cursor_1.ListCollectionsCursor(this, filter, (0, utils_1.resolveOptions)(this, options));\n    }\n    /**\n     * Rename a collection.\n     *\n     * @remarks\n     * This operation does not inherit options from the MongoClient.\n     *\n     * @param fromCollection - Name of current collection to rename\n     * @param toCollection - New name of of the collection\n     * @param options - Optional settings for the command\n     */ async renameCollection(fromCollection, toCollection, options) {\n        // Intentionally, we do not inherit options from parent for this operation.\n        return (0, execute_operation_1.executeOperation)(this.client, new rename_1.RenameOperation(this.collection(fromCollection), toCollection, {\n            ...options,\n            new_collection: true,\n            readPreference: read_preference_1.ReadPreference.primary\n        }));\n    }\n    /**\n     * Drop a collection from the database, removing it permanently. New accesses will create a new collection.\n     *\n     * @param name - Name of collection to drop\n     * @param options - Optional settings for the command\n     */ async dropCollection(name, options) {\n        return (0, execute_operation_1.executeOperation)(this.client, new drop_1.DropCollectionOperation(this, name, (0, utils_1.resolveOptions)(this, options)));\n    }\n    /**\n     * Drop a database, removing it permanently from the server.\n     *\n     * @param options - Optional settings for the command\n     */ async dropDatabase(options) {\n        return (0, execute_operation_1.executeOperation)(this.client, new drop_1.DropDatabaseOperation(this, (0, utils_1.resolveOptions)(this, options)));\n    }\n    /**\n     * Fetch all collections for the current db.\n     *\n     * @param options - Optional settings for the command\n     */ async collections(options) {\n        return (0, execute_operation_1.executeOperation)(this.client, new collections_1.CollectionsOperation(this, (0, utils_1.resolveOptions)(this, options)));\n    }\n    /**\n     * Creates an index on the db and collection.\n     *\n     * @param name - Name of the collection to create the index on.\n     * @param indexSpec - Specify the field to index, or an index specification\n     * @param options - Optional settings for the command\n     */ async createIndex(name, indexSpec, options) {\n        return (0, execute_operation_1.executeOperation)(this.client, new indexes_1.CreateIndexOperation(this, name, indexSpec, (0, utils_1.resolveOptions)(this, options)));\n    }\n    /**\n     * Remove a user from a database\n     *\n     * @param username - The username to remove\n     * @param options - Optional settings for the command\n     */ async removeUser(username, options) {\n        return (0, execute_operation_1.executeOperation)(this.client, new remove_user_1.RemoveUserOperation(this, username, (0, utils_1.resolveOptions)(this, options)));\n    }\n    /**\n     * Set the current profiling level of MongoDB\n     *\n     * @param level - The new profiling level (off, slow_only, all).\n     * @param options - Optional settings for the command\n     */ async setProfilingLevel(level, options) {\n        return (0, execute_operation_1.executeOperation)(this.client, new set_profiling_level_1.SetProfilingLevelOperation(this, level, (0, utils_1.resolveOptions)(this, options)));\n    }\n    /**\n     * Retrieve the current profiling Level for MongoDB\n     *\n     * @param options - Optional settings for the command\n     */ async profilingLevel(options) {\n        return (0, execute_operation_1.executeOperation)(this.client, new profiling_level_1.ProfilingLevelOperation(this, (0, utils_1.resolveOptions)(this, options)));\n    }\n    /**\n     * Retrieves this collections index info.\n     *\n     * @param name - The name of the collection.\n     * @param options - Optional settings for the command\n     */ async indexInformation(name, options) {\n        return (0, execute_operation_1.executeOperation)(this.client, new indexes_1.IndexInformationOperation(this, name, (0, utils_1.resolveOptions)(this, options)));\n    }\n    /**\n     * Create a new Change Stream, watching for new changes (insertions, updates,\n     * replacements, deletions, and invalidations) in this database. Will ignore all\n     * changes to system collections.\n     *\n     * @remarks\n     * watch() accepts two generic arguments for distinct use cases:\n     * - The first is to provide the schema that may be defined for all the collections within this database\n     * - The second is to override the shape of the change stream document entirely, if it is not provided the type will default to ChangeStreamDocument of the first argument\n     *\n     * @param pipeline - An array of {@link https://www.mongodb.com/docs/manual/reference/operator/aggregation-pipeline/|aggregation pipeline stages} through which to pass change stream documents. This allows for filtering (using $match) and manipulating the change stream documents.\n     * @param options - Optional settings for the command\n     * @typeParam TSchema - Type of the data being detected by the change stream\n     * @typeParam TChange - Type of the whole change stream document emitted\n     */ watch(pipeline = [], options = {}) {\n        // Allow optionally not specifying a pipeline\n        if (!Array.isArray(pipeline)) {\n            options = pipeline;\n            pipeline = [];\n        }\n        return new change_stream_1.ChangeStream(this, pipeline, (0, utils_1.resolveOptions)(this, options));\n    }\n    /**\n     * A low level cursor API providing basic driver functionality:\n     * - ClientSession management\n     * - ReadPreference for server selection\n     * - Running getMores automatically when a local batch is exhausted\n     *\n     * @param command - The command that will start a cursor on the server.\n     * @param options - Configurations for running the command, bson options will apply to getMores\n     */ runCursorCommand(command, options) {\n        return new run_command_cursor_1.RunCommandCursor(this, command, options);\n    }\n}\nDb.SYSTEM_NAMESPACE_COLLECTION = CONSTANTS.SYSTEM_NAMESPACE_COLLECTION;\nDb.SYSTEM_INDEX_COLLECTION = CONSTANTS.SYSTEM_INDEX_COLLECTION;\nDb.SYSTEM_PROFILE_COLLECTION = CONSTANTS.SYSTEM_PROFILE_COLLECTION;\nDb.SYSTEM_USER_COLLECTION = CONSTANTS.SYSTEM_USER_COLLECTION;\nDb.SYSTEM_COMMAND_COLLECTION = CONSTANTS.SYSTEM_COMMAND_COLLECTION;\nDb.SYSTEM_JS_COLLECTION = CONSTANTS.SYSTEM_JS_COLLECTION;\nexports.Db = Db; //# sourceMappingURL=db.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongodb/lib/db.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongodb/lib/deps.js":
/*!******************************************!*\
  !*** ./node_modules/mongodb/lib/deps.js ***!
  \******************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.getMongoDBClientEncryption = exports.aws4 = exports.getSocks = exports.getSnappy = exports.getGcpMetadata = exports.getAwsCredentialProvider = exports.getZstdLibrary = exports.ZStandard = exports.getKerberos = exports.Kerberos = void 0;\nconst error_1 = __webpack_require__(/*! ./error */ \"(ssr)/./node_modules/mongodb/lib/error.js\");\nfunction makeErrorModule(error) {\n    const props = error ? {\n        kModuleError: error\n    } : {};\n    return new Proxy(props, {\n        get: (_, key)=>{\n            if (key === \"kModuleError\") {\n                return error;\n            }\n            throw error;\n        },\n        set: ()=>{\n            throw error;\n        }\n    });\n}\nexports.Kerberos = makeErrorModule(new error_1.MongoMissingDependencyError(\"Optional module `kerberos` not found. Please install it to enable kerberos authentication\"));\nfunction getKerberos() {\n    try {\n        // Ensure you always wrap an optional require in the try block NODE-3199\n        exports.Kerberos = __webpack_require__(/*! kerberos */ \"?07fb\");\n        return exports.Kerberos;\n    } catch  {\n        return exports.Kerberos;\n    }\n}\nexports.getKerberos = getKerberos;\nexports.ZStandard = makeErrorModule(new error_1.MongoMissingDependencyError(\"Optional module `@mongodb-js/zstd` not found. Please install it to enable zstd compression\"));\nfunction getZstdLibrary() {\n    try {\n        exports.ZStandard = __webpack_require__(/*! @mongodb-js/zstd */ \"?e185\");\n        return exports.ZStandard;\n    } catch  {\n        return exports.ZStandard;\n    }\n}\nexports.getZstdLibrary = getZstdLibrary;\nfunction getAwsCredentialProvider() {\n    try {\n        // Ensure you always wrap an optional require in the try block NODE-3199\n        const credentialProvider = __webpack_require__(/*! @aws-sdk/credential-providers */ \"?4bb6\");\n        return credentialProvider;\n    } catch  {\n        return makeErrorModule(new error_1.MongoMissingDependencyError(\"Optional module `@aws-sdk/credential-providers` not found.\" + \" Please install it to enable getting aws credentials via the official sdk.\"));\n    }\n}\nexports.getAwsCredentialProvider = getAwsCredentialProvider;\nfunction getGcpMetadata() {\n    try {\n        // Ensure you always wrap an optional require in the try block NODE-3199\n        const credentialProvider = __webpack_require__(/*! gcp-metadata */ \"?a71c\");\n        return credentialProvider;\n    } catch  {\n        return makeErrorModule(new error_1.MongoMissingDependencyError(\"Optional module `gcp-metadata` not found.\" + \" Please install it to enable getting gcp credentials via the official sdk.\"));\n    }\n}\nexports.getGcpMetadata = getGcpMetadata;\nfunction getSnappy() {\n    try {\n        // Ensure you always wrap an optional require in the try block NODE-3199\n        const value = __webpack_require__(/*! snappy */ \"?aa0a\");\n        return value;\n    } catch (cause) {\n        const kModuleError = new error_1.MongoMissingDependencyError(\"Optional module `snappy` not found. Please install it to enable snappy compression\", {\n            cause\n        });\n        return {\n            kModuleError\n        };\n    }\n}\nexports.getSnappy = getSnappy;\nfunction getSocks() {\n    try {\n        // Ensure you always wrap an optional require in the try block NODE-3199\n        const value = __webpack_require__(/*! socks */ \"?8f6e\");\n        return value;\n    } catch (cause) {\n        const kModuleError = new error_1.MongoMissingDependencyError(\"Optional module `socks` not found. Please install it to connections over a SOCKS5 proxy\", {\n            cause\n        });\n        return {\n            kModuleError\n        };\n    }\n}\nexports.getSocks = getSocks;\nexports.aws4 = makeErrorModule(new error_1.MongoMissingDependencyError(\"Optional module `aws4` not found. Please install it to enable AWS authentication\"));\ntry {\n    // Ensure you always wrap an optional require in the try block NODE-3199\n    exports.aws4 = __webpack_require__(/*! aws4 */ \"?36ed\");\n} catch  {} // eslint-disable-line\n/** A utility function to get the instance of mongodb-client-encryption, if it exists. */ function getMongoDBClientEncryption() {\n    let mongodbClientEncryption = null;\n    try {\n        // NOTE(NODE-3199): Ensure you always wrap an optional require literally in the try block\n        // Cannot be moved to helper utility function, bundlers search and replace the actual require call\n        // in a way that makes this line throw at bundle time, not runtime, catching here will make bundling succeed\n        mongodbClientEncryption = __webpack_require__(/*! mongodb-client-encryption */ \"?a5d2\");\n    } catch (cause) {\n        const kModuleError = new error_1.MongoMissingDependencyError(\"Optional module `mongodb-client-encryption` not found. Please install it to use auto encryption or ClientEncryption.\", {\n            cause\n        });\n        return {\n            kModuleError\n        };\n    }\n    return mongodbClientEncryption;\n}\nexports.getMongoDBClientEncryption = getMongoDBClientEncryption; //# sourceMappingURL=deps.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongodb/lib/deps.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongodb/lib/encrypter.js":
/*!***********************************************!*\
  !*** ./node_modules/mongodb/lib/encrypter.js ***!
  \***********************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.Encrypter = void 0;\nconst util_1 = __webpack_require__(/*! util */ \"util\");\nconst auto_encrypter_1 = __webpack_require__(/*! ./client-side-encryption/auto_encrypter */ \"(ssr)/./node_modules/mongodb/lib/client-side-encryption/auto_encrypter.js\");\nconst constants_1 = __webpack_require__(/*! ./constants */ \"(ssr)/./node_modules/mongodb/lib/constants.js\");\nconst deps_1 = __webpack_require__(/*! ./deps */ \"(ssr)/./node_modules/mongodb/lib/deps.js\");\nconst error_1 = __webpack_require__(/*! ./error */ \"(ssr)/./node_modules/mongodb/lib/error.js\");\nconst mongo_client_1 = __webpack_require__(/*! ./mongo_client */ \"(ssr)/./node_modules/mongodb/lib/mongo_client.js\");\n/** @internal */ const kInternalClient = Symbol(\"internalClient\");\n/** @internal */ class Encrypter {\n    constructor(client, uri, options){\n        if (typeof options.autoEncryption !== \"object\") {\n            throw new error_1.MongoInvalidArgumentError('Option \"autoEncryption\" must be specified');\n        }\n        // initialize to null, if we call getInternalClient, we may set this it is important to not overwrite those function calls.\n        this[kInternalClient] = null;\n        this.bypassAutoEncryption = !!options.autoEncryption.bypassAutoEncryption;\n        this.needsConnecting = false;\n        if (options.maxPoolSize === 0 && options.autoEncryption.keyVaultClient == null) {\n            options.autoEncryption.keyVaultClient = client;\n        } else if (options.autoEncryption.keyVaultClient == null) {\n            options.autoEncryption.keyVaultClient = this.getInternalClient(client, uri, options);\n        }\n        if (this.bypassAutoEncryption) {\n            options.autoEncryption.metadataClient = undefined;\n        } else if (options.maxPoolSize === 0) {\n            options.autoEncryption.metadataClient = client;\n        } else {\n            options.autoEncryption.metadataClient = this.getInternalClient(client, uri, options);\n        }\n        if (options.proxyHost) {\n            options.autoEncryption.proxyOptions = {\n                proxyHost: options.proxyHost,\n                proxyPort: options.proxyPort,\n                proxyUsername: options.proxyUsername,\n                proxyPassword: options.proxyPassword\n            };\n        }\n        this.autoEncrypter = new auto_encrypter_1.AutoEncrypter(client, options.autoEncryption);\n    }\n    getInternalClient(client, uri, options) {\n        // TODO(NODE-4144): Remove new variable for type narrowing\n        let internalClient = this[kInternalClient];\n        if (internalClient == null) {\n            const clonedOptions = {};\n            for (const key of [\n                ...Object.getOwnPropertyNames(options),\n                ...Object.getOwnPropertySymbols(options)\n            ]){\n                if ([\n                    \"autoEncryption\",\n                    \"minPoolSize\",\n                    \"servers\",\n                    \"caseTranslate\",\n                    \"dbName\"\n                ].includes(key)) continue;\n                Reflect.set(clonedOptions, key, Reflect.get(options, key));\n            }\n            clonedOptions.minPoolSize = 0;\n            internalClient = new mongo_client_1.MongoClient(uri, clonedOptions);\n            this[kInternalClient] = internalClient;\n            for (const eventName of constants_1.MONGO_CLIENT_EVENTS){\n                for (const listener of client.listeners(eventName)){\n                    internalClient.on(eventName, listener);\n                }\n            }\n            client.on(\"newListener\", (eventName, listener)=>{\n                internalClient?.on(eventName, listener);\n            });\n            this.needsConnecting = true;\n        }\n        return internalClient;\n    }\n    async connectInternalClient() {\n        // TODO(NODE-4144): Remove new variable for type narrowing\n        const internalClient = this[kInternalClient];\n        if (this.needsConnecting && internalClient != null) {\n            this.needsConnecting = false;\n            await internalClient.connect();\n        }\n    }\n    closeCallback(client, force, callback) {\n        (0, util_1.callbackify)(this.close.bind(this))(client, force, callback);\n    }\n    async close(client, force) {\n        const maybeError = await this.autoEncrypter.teardown(!!force).catch((e)=>e);\n        const internalClient = this[kInternalClient];\n        if (internalClient != null && client !== internalClient) {\n            return internalClient.close(force);\n        }\n        if (maybeError) {\n            throw maybeError;\n        }\n    }\n    static checkForMongoCrypt() {\n        const mongodbClientEncryption = (0, deps_1.getMongoDBClientEncryption)();\n        if (\"kModuleError\" in mongodbClientEncryption) {\n            throw new error_1.MongoMissingDependencyError(\"Auto-encryption requested, but the module is not installed. \" + \"Please add `mongodb-client-encryption` as a dependency of your project\");\n        }\n    }\n}\nexports.Encrypter = Encrypter; //# sourceMappingURL=encrypter.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongodb/lib/encrypter.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongodb/lib/error.js":
/*!*******************************************!*\
  !*** ./node_modules/mongodb/lib/error.js ***!
  \*******************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.isResumableError = exports.isNetworkTimeoutError = exports.isSDAMUnrecoverableError = exports.isNodeShuttingDownError = exports.isRetryableReadError = exports.isRetryableWriteError = exports.needsRetryableWriteLabel = exports.MongoWriteConcernError = exports.MongoServerSelectionError = exports.MongoSystemError = exports.MongoMissingDependencyError = exports.MongoMissingCredentialsError = exports.MongoCompatibilityError = exports.MongoInvalidArgumentError = exports.MongoParseError = exports.MongoNetworkTimeoutError = exports.MongoNetworkError = exports.isNetworkErrorBeforeHandshake = exports.MongoTopologyClosedError = exports.MongoCursorExhaustedError = exports.MongoServerClosedError = exports.MongoCursorInUseError = exports.MongoUnexpectedServerResponseError = exports.MongoGridFSChunkError = exports.MongoGridFSStreamError = exports.MongoTailableCursorError = exports.MongoChangeStreamError = exports.MongoAzureError = exports.MongoAWSError = exports.MongoKerberosError = exports.MongoExpiredSessionError = exports.MongoTransactionError = exports.MongoNotConnectedError = exports.MongoDecompressionError = exports.MongoBatchReExecutionError = exports.MongoRuntimeError = exports.MongoAPIError = exports.MongoDriverError = exports.MongoServerError = exports.MongoError = exports.MongoErrorLabel = exports.GET_MORE_RESUMABLE_CODES = exports.MONGODB_ERROR_CODES = exports.NODE_IS_RECOVERING_ERROR_MESSAGE = exports.LEGACY_NOT_PRIMARY_OR_SECONDARY_ERROR_MESSAGE = exports.LEGACY_NOT_WRITABLE_PRIMARY_ERROR_MESSAGE = void 0;\n/** @internal */ const kErrorLabels = Symbol(\"errorLabels\");\n/**\n * @internal\n * The legacy error message from the server that indicates the node is not a writable primary\n * https://github.com/mongodb/specifications/blob/b07c26dc40d04ac20349f989db531c9845fdd755/source/server-discovery-and-monitoring/server-discovery-and-monitoring.rst#not-writable-primary-and-node-is-recovering\n */ exports.LEGACY_NOT_WRITABLE_PRIMARY_ERROR_MESSAGE = new RegExp(\"not master\", \"i\");\n/**\n * @internal\n * The legacy error message from the server that indicates the node is not a primary or secondary\n * https://github.com/mongodb/specifications/blob/b07c26dc40d04ac20349f989db531c9845fdd755/source/server-discovery-and-monitoring/server-discovery-and-monitoring.rst#not-writable-primary-and-node-is-recovering\n */ exports.LEGACY_NOT_PRIMARY_OR_SECONDARY_ERROR_MESSAGE = new RegExp(\"not master or secondary\", \"i\");\n/**\n * @internal\n * The error message from the server that indicates the node is recovering\n * https://github.com/mongodb/specifications/blob/b07c26dc40d04ac20349f989db531c9845fdd755/source/server-discovery-and-monitoring/server-discovery-and-monitoring.rst#not-writable-primary-and-node-is-recovering\n */ exports.NODE_IS_RECOVERING_ERROR_MESSAGE = new RegExp(\"node is recovering\", \"i\");\n/** @internal MongoDB Error Codes */ exports.MONGODB_ERROR_CODES = Object.freeze({\n    HostUnreachable: 6,\n    HostNotFound: 7,\n    NetworkTimeout: 89,\n    ShutdownInProgress: 91,\n    PrimarySteppedDown: 189,\n    ExceededTimeLimit: 262,\n    SocketException: 9001,\n    NotWritablePrimary: 10107,\n    InterruptedAtShutdown: 11600,\n    InterruptedDueToReplStateChange: 11602,\n    NotPrimaryNoSecondaryOk: 13435,\n    NotPrimaryOrSecondary: 13436,\n    StaleShardVersion: 63,\n    StaleEpoch: 150,\n    StaleConfig: 13388,\n    RetryChangeStream: 234,\n    FailedToSatisfyReadPreference: 133,\n    CursorNotFound: 43,\n    LegacyNotPrimary: 10058,\n    WriteConcernFailed: 64,\n    NamespaceNotFound: 26,\n    IllegalOperation: 20,\n    MaxTimeMSExpired: 50,\n    UnknownReplWriteConcern: 79,\n    UnsatisfiableWriteConcern: 100,\n    Reauthenticate: 391\n});\n// From spec@https://github.com/mongodb/specifications/blob/f93d78191f3db2898a59013a7ed5650352ef6da8/source/change-streams/change-streams.rst#resumable-error\nexports.GET_MORE_RESUMABLE_CODES = new Set([\n    exports.MONGODB_ERROR_CODES.HostUnreachable,\n    exports.MONGODB_ERROR_CODES.HostNotFound,\n    exports.MONGODB_ERROR_CODES.NetworkTimeout,\n    exports.MONGODB_ERROR_CODES.ShutdownInProgress,\n    exports.MONGODB_ERROR_CODES.PrimarySteppedDown,\n    exports.MONGODB_ERROR_CODES.ExceededTimeLimit,\n    exports.MONGODB_ERROR_CODES.SocketException,\n    exports.MONGODB_ERROR_CODES.NotWritablePrimary,\n    exports.MONGODB_ERROR_CODES.InterruptedAtShutdown,\n    exports.MONGODB_ERROR_CODES.InterruptedDueToReplStateChange,\n    exports.MONGODB_ERROR_CODES.NotPrimaryNoSecondaryOk,\n    exports.MONGODB_ERROR_CODES.NotPrimaryOrSecondary,\n    exports.MONGODB_ERROR_CODES.StaleShardVersion,\n    exports.MONGODB_ERROR_CODES.StaleEpoch,\n    exports.MONGODB_ERROR_CODES.StaleConfig,\n    exports.MONGODB_ERROR_CODES.RetryChangeStream,\n    exports.MONGODB_ERROR_CODES.FailedToSatisfyReadPreference,\n    exports.MONGODB_ERROR_CODES.CursorNotFound\n]);\n/** @public */ exports.MongoErrorLabel = Object.freeze({\n    RetryableWriteError: \"RetryableWriteError\",\n    TransientTransactionError: \"TransientTransactionError\",\n    UnknownTransactionCommitResult: \"UnknownTransactionCommitResult\",\n    ResumableChangeStreamError: \"ResumableChangeStreamError\",\n    HandshakeError: \"HandshakeError\",\n    ResetPool: \"ResetPool\",\n    PoolRequstedRetry: \"PoolRequstedRetry\",\n    InterruptInUseConnections: \"InterruptInUseConnections\",\n    NoWritesPerformed: \"NoWritesPerformed\"\n});\nfunction isAggregateError(e) {\n    return \"errors\" in e && Array.isArray(e.errors);\n}\n/**\n * @public\n * @category Error\n *\n * @privateRemarks\n * mongodb-client-encryption has a dependency on this error, it uses the constructor with a string argument\n */ class MongoError extends Error {\n    /**\n     * **Do not use this constructor!**\n     *\n     * Meant for internal use only.\n     *\n     * @remarks\n     * This class is only meant to be constructed within the driver. This constructor is\n     * not subject to semantic versioning compatibility guarantees and may change at any time.\n     *\n     * @public\n     **/ constructor(message, options){\n        super(message, options);\n        this[kErrorLabels] = new Set();\n    }\n    /** @internal */ static buildErrorMessage(e) {\n        if (typeof e === \"string\") {\n            return e;\n        }\n        if (isAggregateError(e) && e.message.length === 0) {\n            return e.errors.length === 0 ? \"AggregateError has an empty errors array. Please check the `cause` property for more information.\" : e.errors.map(({ message })=>message).join(\", \");\n        }\n        return e.message;\n    }\n    get name() {\n        return \"MongoError\";\n    }\n    /** Legacy name for server error responses */ get errmsg() {\n        return this.message;\n    }\n    /**\n     * Checks the error to see if it has an error label\n     *\n     * @param label - The error label to check for\n     * @returns returns true if the error has the provided error label\n     */ hasErrorLabel(label) {\n        return this[kErrorLabels].has(label);\n    }\n    addErrorLabel(label) {\n        this[kErrorLabels].add(label);\n    }\n    get errorLabels() {\n        return Array.from(this[kErrorLabels]);\n    }\n}\nexports.MongoError = MongoError;\n/**\n * An error coming from the mongo server\n *\n * @public\n * @category Error\n */ class MongoServerError extends MongoError {\n    /**\n     * **Do not use this constructor!**\n     *\n     * Meant for internal use only.\n     *\n     * @remarks\n     * This class is only meant to be constructed within the driver. This constructor is\n     * not subject to semantic versioning compatibility guarantees and may change at any time.\n     *\n     * @public\n     **/ constructor(message){\n        super(message.message || message.errmsg || message.$err || \"n/a\");\n        if (message.errorLabels) {\n            this[kErrorLabels] = new Set(message.errorLabels);\n        }\n        for(const name in message){\n            if (name !== \"errorLabels\" && name !== \"errmsg\" && name !== \"message\") this[name] = message[name];\n        }\n    }\n    get name() {\n        return \"MongoServerError\";\n    }\n}\nexports.MongoServerError = MongoServerError;\n/**\n * An error generated by the driver\n *\n * @public\n * @category Error\n */ class MongoDriverError extends MongoError {\n    /**\n     * **Do not use this constructor!**\n     *\n     * Meant for internal use only.\n     *\n     * @remarks\n     * This class is only meant to be constructed within the driver. This constructor is\n     * not subject to semantic versioning compatibility guarantees and may change at any time.\n     *\n     * @public\n     **/ constructor(message, options){\n        super(message, options);\n    }\n    get name() {\n        return \"MongoDriverError\";\n    }\n}\nexports.MongoDriverError = MongoDriverError;\n/**\n * An error generated when the driver API is used incorrectly\n *\n * @privateRemarks\n * Should **never** be directly instantiated\n *\n * @public\n * @category Error\n */ class MongoAPIError extends MongoDriverError {\n    /**\n     * **Do not use this constructor!**\n     *\n     * Meant for internal use only.\n     *\n     * @remarks\n     * This class is only meant to be constructed within the driver. This constructor is\n     * not subject to semantic versioning compatibility guarantees and may change at any time.\n     *\n     * @public\n     **/ constructor(message, options){\n        super(message, options);\n    }\n    get name() {\n        return \"MongoAPIError\";\n    }\n}\nexports.MongoAPIError = MongoAPIError;\n/**\n * An error generated when the driver encounters unexpected input\n * or reaches an unexpected/invalid internal state\n *\n * @privateRemarks\n * Should **never** be directly instantiated.\n *\n * @public\n * @category Error\n */ class MongoRuntimeError extends MongoDriverError {\n    /**\n     * **Do not use this constructor!**\n     *\n     * Meant for internal use only.\n     *\n     * @remarks\n     * This class is only meant to be constructed within the driver. This constructor is\n     * not subject to semantic versioning compatibility guarantees and may change at any time.\n     *\n     * @public\n     **/ constructor(message, options){\n        super(message, options);\n    }\n    get name() {\n        return \"MongoRuntimeError\";\n    }\n}\nexports.MongoRuntimeError = MongoRuntimeError;\n/**\n * An error generated when a batch command is re-executed after one of the commands in the batch\n * has failed\n *\n * @public\n * @category Error\n */ class MongoBatchReExecutionError extends MongoAPIError {\n    /**\n     * **Do not use this constructor!**\n     *\n     * Meant for internal use only.\n     *\n     * @remarks\n     * This class is only meant to be constructed within the driver. This constructor is\n     * not subject to semantic versioning compatibility guarantees and may change at any time.\n     *\n     * @public\n     **/ constructor(message = \"This batch has already been executed, create new batch to execute\"){\n        super(message);\n    }\n    get name() {\n        return \"MongoBatchReExecutionError\";\n    }\n}\nexports.MongoBatchReExecutionError = MongoBatchReExecutionError;\n/**\n * An error generated when the driver fails to decompress\n * data received from the server.\n *\n * @public\n * @category Error\n */ class MongoDecompressionError extends MongoRuntimeError {\n    /**\n     * **Do not use this constructor!**\n     *\n     * Meant for internal use only.\n     *\n     * @remarks\n     * This class is only meant to be constructed within the driver. This constructor is\n     * not subject to semantic versioning compatibility guarantees and may change at any time.\n     *\n     * @public\n     **/ constructor(message){\n        super(message);\n    }\n    get name() {\n        return \"MongoDecompressionError\";\n    }\n}\nexports.MongoDecompressionError = MongoDecompressionError;\n/**\n * An error thrown when the user attempts to operate on a database or collection through a MongoClient\n * that has not yet successfully called the \"connect\" method\n *\n * @public\n * @category Error\n */ class MongoNotConnectedError extends MongoAPIError {\n    /**\n     * **Do not use this constructor!**\n     *\n     * Meant for internal use only.\n     *\n     * @remarks\n     * This class is only meant to be constructed within the driver. This constructor is\n     * not subject to semantic versioning compatibility guarantees and may change at any time.\n     *\n     * @public\n     **/ constructor(message){\n        super(message);\n    }\n    get name() {\n        return \"MongoNotConnectedError\";\n    }\n}\nexports.MongoNotConnectedError = MongoNotConnectedError;\n/**\n * An error generated when the user makes a mistake in the usage of transactions.\n * (e.g. attempting to commit a transaction with a readPreference other than primary)\n *\n * @public\n * @category Error\n */ class MongoTransactionError extends MongoAPIError {\n    /**\n     * **Do not use this constructor!**\n     *\n     * Meant for internal use only.\n     *\n     * @remarks\n     * This class is only meant to be constructed within the driver. This constructor is\n     * not subject to semantic versioning compatibility guarantees and may change at any time.\n     *\n     * @public\n     **/ constructor(message){\n        super(message);\n    }\n    get name() {\n        return \"MongoTransactionError\";\n    }\n}\nexports.MongoTransactionError = MongoTransactionError;\n/**\n * An error generated when the user attempts to operate\n * on a session that has expired or has been closed.\n *\n * @public\n * @category Error\n */ class MongoExpiredSessionError extends MongoAPIError {\n    /**\n     * **Do not use this constructor!**\n     *\n     * Meant for internal use only.\n     *\n     * @remarks\n     * This class is only meant to be constructed within the driver. This constructor is\n     * not subject to semantic versioning compatibility guarantees and may change at any time.\n     *\n     * @public\n     **/ constructor(message = \"Cannot use a session that has ended\"){\n        super(message);\n    }\n    get name() {\n        return \"MongoExpiredSessionError\";\n    }\n}\nexports.MongoExpiredSessionError = MongoExpiredSessionError;\n/**\n * A error generated when the user attempts to authenticate\n * via Kerberos, but fails to connect to the Kerberos client.\n *\n * @public\n * @category Error\n */ class MongoKerberosError extends MongoRuntimeError {\n    /**\n     * **Do not use this constructor!**\n     *\n     * Meant for internal use only.\n     *\n     * @remarks\n     * This class is only meant to be constructed within the driver. This constructor is\n     * not subject to semantic versioning compatibility guarantees and may change at any time.\n     *\n     * @public\n     **/ constructor(message){\n        super(message);\n    }\n    get name() {\n        return \"MongoKerberosError\";\n    }\n}\nexports.MongoKerberosError = MongoKerberosError;\n/**\n * A error generated when the user attempts to authenticate\n * via AWS, but fails\n *\n * @public\n * @category Error\n */ class MongoAWSError extends MongoRuntimeError {\n    /**\n     * **Do not use this constructor!**\n     *\n     * Meant for internal use only.\n     *\n     * @remarks\n     * This class is only meant to be constructed within the driver. This constructor is\n     * not subject to semantic versioning compatibility guarantees and may change at any time.\n     *\n     * @public\n     **/ constructor(message){\n        super(message);\n    }\n    get name() {\n        return \"MongoAWSError\";\n    }\n}\nexports.MongoAWSError = MongoAWSError;\n/**\n * A error generated when the user attempts to authenticate\n * via Azure, but fails.\n *\n * @public\n * @category Error\n */ class MongoAzureError extends MongoRuntimeError {\n    /**\n     * **Do not use this constructor!**\n     *\n     * Meant for internal use only.\n     *\n     * @remarks\n     * This class is only meant to be constructed within the driver. This constructor is\n     * not subject to semantic versioning compatibility guarantees and may change at any time.\n     *\n     * @public\n     **/ constructor(message){\n        super(message);\n    }\n    get name() {\n        return \"MongoAzureError\";\n    }\n}\nexports.MongoAzureError = MongoAzureError;\n/**\n * An error generated when a ChangeStream operation fails to execute.\n *\n * @public\n * @category Error\n */ class MongoChangeStreamError extends MongoRuntimeError {\n    /**\n     * **Do not use this constructor!**\n     *\n     * Meant for internal use only.\n     *\n     * @remarks\n     * This class is only meant to be constructed within the driver. This constructor is\n     * not subject to semantic versioning compatibility guarantees and may change at any time.\n     *\n     * @public\n     **/ constructor(message){\n        super(message);\n    }\n    get name() {\n        return \"MongoChangeStreamError\";\n    }\n}\nexports.MongoChangeStreamError = MongoChangeStreamError;\n/**\n * An error thrown when the user calls a function or method not supported on a tailable cursor\n *\n * @public\n * @category Error\n */ class MongoTailableCursorError extends MongoAPIError {\n    /**\n     * **Do not use this constructor!**\n     *\n     * Meant for internal use only.\n     *\n     * @remarks\n     * This class is only meant to be constructed within the driver. This constructor is\n     * not subject to semantic versioning compatibility guarantees and may change at any time.\n     *\n     * @public\n     **/ constructor(message = \"Tailable cursor does not support this operation\"){\n        super(message);\n    }\n    get name() {\n        return \"MongoTailableCursorError\";\n    }\n}\nexports.MongoTailableCursorError = MongoTailableCursorError;\n/** An error generated when a GridFSStream operation fails to execute.\n *\n * @public\n * @category Error\n */ class MongoGridFSStreamError extends MongoRuntimeError {\n    /**\n     * **Do not use this constructor!**\n     *\n     * Meant for internal use only.\n     *\n     * @remarks\n     * This class is only meant to be constructed within the driver. This constructor is\n     * not subject to semantic versioning compatibility guarantees and may change at any time.\n     *\n     * @public\n     **/ constructor(message){\n        super(message);\n    }\n    get name() {\n        return \"MongoGridFSStreamError\";\n    }\n}\nexports.MongoGridFSStreamError = MongoGridFSStreamError;\n/**\n * An error generated when a malformed or invalid chunk is\n * encountered when reading from a GridFSStream.\n *\n * @public\n * @category Error\n */ class MongoGridFSChunkError extends MongoRuntimeError {\n    /**\n     * **Do not use this constructor!**\n     *\n     * Meant for internal use only.\n     *\n     * @remarks\n     * This class is only meant to be constructed within the driver. This constructor is\n     * not subject to semantic versioning compatibility guarantees and may change at any time.\n     *\n     * @public\n     **/ constructor(message){\n        super(message);\n    }\n    get name() {\n        return \"MongoGridFSChunkError\";\n    }\n}\nexports.MongoGridFSChunkError = MongoGridFSChunkError;\n/**\n * An error generated when a **parsable** unexpected response comes from the server.\n * This is generally an error where the driver in a state expecting a certain behavior to occur in\n * the next message from MongoDB but it receives something else.\n * This error **does not** represent an issue with wire message formatting.\n *\n * #### Example\n * When an operation fails, it is the driver's job to retry it. It must perform serverSelection\n * again to make sure that it attempts the operation against a server in a good state. If server\n * selection returns a server that does not support retryable operations, this error is used.\n * This scenario is unlikely as retryable support would also have been determined on the first attempt\n * but it is possible the state change could report a selectable server that does not support retries.\n *\n * @public\n * @category Error\n */ class MongoUnexpectedServerResponseError extends MongoRuntimeError {\n    /**\n     * **Do not use this constructor!**\n     *\n     * Meant for internal use only.\n     *\n     * @remarks\n     * This class is only meant to be constructed within the driver. This constructor is\n     * not subject to semantic versioning compatibility guarantees and may change at any time.\n     *\n     * @public\n     **/ constructor(message){\n        super(message);\n    }\n    get name() {\n        return \"MongoUnexpectedServerResponseError\";\n    }\n}\nexports.MongoUnexpectedServerResponseError = MongoUnexpectedServerResponseError;\n/**\n * An error thrown when the user attempts to add options to a cursor that has already been\n * initialized\n *\n * @public\n * @category Error\n */ class MongoCursorInUseError extends MongoAPIError {\n    /**\n     * **Do not use this constructor!**\n     *\n     * Meant for internal use only.\n     *\n     * @remarks\n     * This class is only meant to be constructed within the driver. This constructor is\n     * not subject to semantic versioning compatibility guarantees and may change at any time.\n     *\n     * @public\n     **/ constructor(message = \"Cursor is already initialized\"){\n        super(message);\n    }\n    get name() {\n        return \"MongoCursorInUseError\";\n    }\n}\nexports.MongoCursorInUseError = MongoCursorInUseError;\n/**\n * An error generated when an attempt is made to operate\n * on a closed/closing server.\n *\n * @public\n * @category Error\n */ class MongoServerClosedError extends MongoAPIError {\n    /**\n     * **Do not use this constructor!**\n     *\n     * Meant for internal use only.\n     *\n     * @remarks\n     * This class is only meant to be constructed within the driver. This constructor is\n     * not subject to semantic versioning compatibility guarantees and may change at any time.\n     *\n     * @public\n     **/ constructor(message = \"Server is closed\"){\n        super(message);\n    }\n    get name() {\n        return \"MongoServerClosedError\";\n    }\n}\nexports.MongoServerClosedError = MongoServerClosedError;\n/**\n * An error thrown when an attempt is made to read from a cursor that has been exhausted\n *\n * @public\n * @category Error\n */ class MongoCursorExhaustedError extends MongoAPIError {\n    /**\n     * **Do not use this constructor!**\n     *\n     * Meant for internal use only.\n     *\n     * @remarks\n     * This class is only meant to be constructed within the driver. This constructor is\n     * not subject to semantic versioning compatibility guarantees and may change at any time.\n     *\n     * @public\n     **/ constructor(message){\n        super(message || \"Cursor is exhausted\");\n    }\n    get name() {\n        return \"MongoCursorExhaustedError\";\n    }\n}\nexports.MongoCursorExhaustedError = MongoCursorExhaustedError;\n/**\n * An error generated when an attempt is made to operate on a\n * dropped, or otherwise unavailable, database.\n *\n * @public\n * @category Error\n */ class MongoTopologyClosedError extends MongoAPIError {\n    /**\n     * **Do not use this constructor!**\n     *\n     * Meant for internal use only.\n     *\n     * @remarks\n     * This class is only meant to be constructed within the driver. This constructor is\n     * not subject to semantic versioning compatibility guarantees and may change at any time.\n     *\n     * @public\n     **/ constructor(message = \"Topology is closed\"){\n        super(message);\n    }\n    get name() {\n        return \"MongoTopologyClosedError\";\n    }\n}\nexports.MongoTopologyClosedError = MongoTopologyClosedError;\n/** @internal */ const kBeforeHandshake = Symbol(\"beforeHandshake\");\nfunction isNetworkErrorBeforeHandshake(err) {\n    return err[kBeforeHandshake] === true;\n}\nexports.isNetworkErrorBeforeHandshake = isNetworkErrorBeforeHandshake;\n/**\n * An error indicating an issue with the network, including TCP errors and timeouts.\n * @public\n * @category Error\n */ class MongoNetworkError extends MongoError {\n    /**\n     * **Do not use this constructor!**\n     *\n     * Meant for internal use only.\n     *\n     * @remarks\n     * This class is only meant to be constructed within the driver. This constructor is\n     * not subject to semantic versioning compatibility guarantees and may change at any time.\n     *\n     * @public\n     **/ constructor(message, options){\n        super(message, {\n            cause: options?.cause\n        });\n        if (options && typeof options.beforeHandshake === \"boolean\") {\n            this[kBeforeHandshake] = options.beforeHandshake;\n        }\n    }\n    get name() {\n        return \"MongoNetworkError\";\n    }\n}\nexports.MongoNetworkError = MongoNetworkError;\n/**\n * An error indicating a network timeout occurred\n * @public\n * @category Error\n *\n * @privateRemarks\n * mongodb-client-encryption has a dependency on this error with an instanceof check\n */ class MongoNetworkTimeoutError extends MongoNetworkError {\n    /**\n     * **Do not use this constructor!**\n     *\n     * Meant for internal use only.\n     *\n     * @remarks\n     * This class is only meant to be constructed within the driver. This constructor is\n     * not subject to semantic versioning compatibility guarantees and may change at any time.\n     *\n     * @public\n     **/ constructor(message, options){\n        super(message, options);\n    }\n    get name() {\n        return \"MongoNetworkTimeoutError\";\n    }\n}\nexports.MongoNetworkTimeoutError = MongoNetworkTimeoutError;\n/**\n * An error used when attempting to parse a value (like a connection string)\n * @public\n * @category Error\n */ class MongoParseError extends MongoDriverError {\n    /**\n     * **Do not use this constructor!**\n     *\n     * Meant for internal use only.\n     *\n     * @remarks\n     * This class is only meant to be constructed within the driver. This constructor is\n     * not subject to semantic versioning compatibility guarantees and may change at any time.\n     *\n     * @public\n     **/ constructor(message){\n        super(message);\n    }\n    get name() {\n        return \"MongoParseError\";\n    }\n}\nexports.MongoParseError = MongoParseError;\n/**\n * An error generated when the user supplies malformed or unexpected arguments\n * or when a required argument or field is not provided.\n *\n *\n * @public\n * @category Error\n */ class MongoInvalidArgumentError extends MongoAPIError {\n    /**\n     * **Do not use this constructor!**\n     *\n     * Meant for internal use only.\n     *\n     * @remarks\n     * This class is only meant to be constructed within the driver. This constructor is\n     * not subject to semantic versioning compatibility guarantees and may change at any time.\n     *\n     * @public\n     **/ constructor(message){\n        super(message);\n    }\n    get name() {\n        return \"MongoInvalidArgumentError\";\n    }\n}\nexports.MongoInvalidArgumentError = MongoInvalidArgumentError;\n/**\n * An error generated when a feature that is not enabled or allowed for the current server\n * configuration is used\n *\n *\n * @public\n * @category Error\n */ class MongoCompatibilityError extends MongoAPIError {\n    /**\n     * **Do not use this constructor!**\n     *\n     * Meant for internal use only.\n     *\n     * @remarks\n     * This class is only meant to be constructed within the driver. This constructor is\n     * not subject to semantic versioning compatibility guarantees and may change at any time.\n     *\n     * @public\n     **/ constructor(message){\n        super(message);\n    }\n    get name() {\n        return \"MongoCompatibilityError\";\n    }\n}\nexports.MongoCompatibilityError = MongoCompatibilityError;\n/**\n * An error generated when the user fails to provide authentication credentials before attempting\n * to connect to a mongo server instance.\n *\n *\n * @public\n * @category Error\n */ class MongoMissingCredentialsError extends MongoAPIError {\n    /**\n     * **Do not use this constructor!**\n     *\n     * Meant for internal use only.\n     *\n     * @remarks\n     * This class is only meant to be constructed within the driver. This constructor is\n     * not subject to semantic versioning compatibility guarantees and may change at any time.\n     *\n     * @public\n     **/ constructor(message){\n        super(message);\n    }\n    get name() {\n        return \"MongoMissingCredentialsError\";\n    }\n}\nexports.MongoMissingCredentialsError = MongoMissingCredentialsError;\n/**\n * An error generated when a required module or dependency is not present in the local environment\n *\n * @public\n * @category Error\n */ class MongoMissingDependencyError extends MongoAPIError {\n    /**\n     * **Do not use this constructor!**\n     *\n     * Meant for internal use only.\n     *\n     * @remarks\n     * This class is only meant to be constructed within the driver. This constructor is\n     * not subject to semantic versioning compatibility guarantees and may change at any time.\n     *\n     * @public\n     **/ constructor(message, options = {}){\n        super(message, options);\n    }\n    get name() {\n        return \"MongoMissingDependencyError\";\n    }\n}\nexports.MongoMissingDependencyError = MongoMissingDependencyError;\n/**\n * An error signifying a general system issue\n * @public\n * @category Error\n */ class MongoSystemError extends MongoError {\n    /**\n     * **Do not use this constructor!**\n     *\n     * Meant for internal use only.\n     *\n     * @remarks\n     * This class is only meant to be constructed within the driver. This constructor is\n     * not subject to semantic versioning compatibility guarantees and may change at any time.\n     *\n     * @public\n     **/ constructor(message, reason){\n        if (reason && reason.error) {\n            super(MongoError.buildErrorMessage(reason.error.message || reason.error), {\n                cause: reason.error\n            });\n        } else {\n            super(message);\n        }\n        if (reason) {\n            this.reason = reason;\n        }\n        this.code = reason.error?.code;\n    }\n    get name() {\n        return \"MongoSystemError\";\n    }\n}\nexports.MongoSystemError = MongoSystemError;\n/**\n * An error signifying a client-side server selection error\n * @public\n * @category Error\n */ class MongoServerSelectionError extends MongoSystemError {\n    /**\n     * **Do not use this constructor!**\n     *\n     * Meant for internal use only.\n     *\n     * @remarks\n     * This class is only meant to be constructed within the driver. This constructor is\n     * not subject to semantic versioning compatibility guarantees and may change at any time.\n     *\n     * @public\n     **/ constructor(message, reason){\n        super(message, reason);\n    }\n    get name() {\n        return \"MongoServerSelectionError\";\n    }\n}\nexports.MongoServerSelectionError = MongoServerSelectionError;\nfunction makeWriteConcernResultObject(input) {\n    const output = Object.assign({}, input);\n    if (output.ok === 0) {\n        output.ok = 1;\n        delete output.errmsg;\n        delete output.code;\n        delete output.codeName;\n    }\n    return output;\n}\n/**\n * An error thrown when the server reports a writeConcernError\n * @public\n * @category Error\n */ class MongoWriteConcernError extends MongoServerError {\n    /**\n     * **Do not use this constructor!**\n     *\n     * Meant for internal use only.\n     *\n     * @remarks\n     * This class is only meant to be constructed within the driver. This constructor is\n     * not subject to semantic versioning compatibility guarantees and may change at any time.\n     *\n     * @public\n     **/ constructor(message, result){\n        if (result && Array.isArray(result.errorLabels)) {\n            message.errorLabels = result.errorLabels;\n        }\n        super(message);\n        this.errInfo = message.errInfo;\n        if (result != null) {\n            this.result = makeWriteConcernResultObject(result);\n        }\n    }\n    get name() {\n        return \"MongoWriteConcernError\";\n    }\n}\nexports.MongoWriteConcernError = MongoWriteConcernError;\n// https://github.com/mongodb/specifications/blob/master/source/retryable-reads/retryable-reads.rst#retryable-error\nconst RETRYABLE_READ_ERROR_CODES = new Set([\n    exports.MONGODB_ERROR_CODES.HostUnreachable,\n    exports.MONGODB_ERROR_CODES.HostNotFound,\n    exports.MONGODB_ERROR_CODES.NetworkTimeout,\n    exports.MONGODB_ERROR_CODES.ShutdownInProgress,\n    exports.MONGODB_ERROR_CODES.PrimarySteppedDown,\n    exports.MONGODB_ERROR_CODES.SocketException,\n    exports.MONGODB_ERROR_CODES.NotWritablePrimary,\n    exports.MONGODB_ERROR_CODES.InterruptedAtShutdown,\n    exports.MONGODB_ERROR_CODES.InterruptedDueToReplStateChange,\n    exports.MONGODB_ERROR_CODES.NotPrimaryNoSecondaryOk,\n    exports.MONGODB_ERROR_CODES.NotPrimaryOrSecondary\n]);\n// see: https://github.com/mongodb/specifications/blob/master/source/retryable-writes/retryable-writes.rst#terms\nconst RETRYABLE_WRITE_ERROR_CODES = new Set([\n    ...RETRYABLE_READ_ERROR_CODES,\n    exports.MONGODB_ERROR_CODES.ExceededTimeLimit\n]);\nfunction needsRetryableWriteLabel(error, maxWireVersion) {\n    // pre-4.4 server, then the driver adds an error label for every valid case\n    // execute operation will only inspect the label, code/message logic is handled here\n    if (error instanceof MongoNetworkError) {\n        return true;\n    }\n    if (error instanceof MongoError) {\n        if ((maxWireVersion >= 9 || isRetryableWriteError(error)) && !error.hasErrorLabel(exports.MongoErrorLabel.HandshakeError)) {\n            // If we already have the error label no need to add it again. 4.4+ servers add the label.\n            // In the case where we have a handshake error, need to fall down to the logic checking\n            // the codes.\n            return false;\n        }\n    }\n    if (error instanceof MongoWriteConcernError) {\n        return RETRYABLE_WRITE_ERROR_CODES.has(error.result?.code ?? error.code ?? 0);\n    }\n    if (error instanceof MongoError && typeof error.code === \"number\") {\n        return RETRYABLE_WRITE_ERROR_CODES.has(error.code);\n    }\n    const isNotWritablePrimaryError = exports.LEGACY_NOT_WRITABLE_PRIMARY_ERROR_MESSAGE.test(error.message);\n    if (isNotWritablePrimaryError) {\n        return true;\n    }\n    const isNodeIsRecoveringError = exports.NODE_IS_RECOVERING_ERROR_MESSAGE.test(error.message);\n    if (isNodeIsRecoveringError) {\n        return true;\n    }\n    return false;\n}\nexports.needsRetryableWriteLabel = needsRetryableWriteLabel;\nfunction isRetryableWriteError(error) {\n    return error.hasErrorLabel(exports.MongoErrorLabel.RetryableWriteError) || error.hasErrorLabel(exports.MongoErrorLabel.PoolRequstedRetry);\n}\nexports.isRetryableWriteError = isRetryableWriteError;\n/** Determines whether an error is something the driver should attempt to retry */ function isRetryableReadError(error) {\n    const hasRetryableErrorCode = typeof error.code === \"number\" ? RETRYABLE_READ_ERROR_CODES.has(error.code) : false;\n    if (hasRetryableErrorCode) {\n        return true;\n    }\n    if (error instanceof MongoNetworkError) {\n        return true;\n    }\n    const isNotWritablePrimaryError = exports.LEGACY_NOT_WRITABLE_PRIMARY_ERROR_MESSAGE.test(error.message);\n    if (isNotWritablePrimaryError) {\n        return true;\n    }\n    const isNodeIsRecoveringError = exports.NODE_IS_RECOVERING_ERROR_MESSAGE.test(error.message);\n    if (isNodeIsRecoveringError) {\n        return true;\n    }\n    return false;\n}\nexports.isRetryableReadError = isRetryableReadError;\nconst SDAM_RECOVERING_CODES = new Set([\n    exports.MONGODB_ERROR_CODES.ShutdownInProgress,\n    exports.MONGODB_ERROR_CODES.PrimarySteppedDown,\n    exports.MONGODB_ERROR_CODES.InterruptedAtShutdown,\n    exports.MONGODB_ERROR_CODES.InterruptedDueToReplStateChange,\n    exports.MONGODB_ERROR_CODES.NotPrimaryOrSecondary\n]);\nconst SDAM_NOT_PRIMARY_CODES = new Set([\n    exports.MONGODB_ERROR_CODES.NotWritablePrimary,\n    exports.MONGODB_ERROR_CODES.NotPrimaryNoSecondaryOk,\n    exports.MONGODB_ERROR_CODES.LegacyNotPrimary\n]);\nconst SDAM_NODE_SHUTTING_DOWN_ERROR_CODES = new Set([\n    exports.MONGODB_ERROR_CODES.InterruptedAtShutdown,\n    exports.MONGODB_ERROR_CODES.ShutdownInProgress\n]);\nfunction isRecoveringError(err) {\n    if (typeof err.code === \"number\") {\n        // If any error code exists, we ignore the error.message\n        return SDAM_RECOVERING_CODES.has(err.code);\n    }\n    return exports.LEGACY_NOT_PRIMARY_OR_SECONDARY_ERROR_MESSAGE.test(err.message) || exports.NODE_IS_RECOVERING_ERROR_MESSAGE.test(err.message);\n}\nfunction isNotWritablePrimaryError(err) {\n    if (typeof err.code === \"number\") {\n        // If any error code exists, we ignore the error.message\n        return SDAM_NOT_PRIMARY_CODES.has(err.code);\n    }\n    if (isRecoveringError(err)) {\n        return false;\n    }\n    return exports.LEGACY_NOT_WRITABLE_PRIMARY_ERROR_MESSAGE.test(err.message);\n}\nfunction isNodeShuttingDownError(err) {\n    return !!(typeof err.code === \"number\" && SDAM_NODE_SHUTTING_DOWN_ERROR_CODES.has(err.code));\n}\nexports.isNodeShuttingDownError = isNodeShuttingDownError;\n/**\n * Determines whether SDAM can recover from a given error. If it cannot\n * then the pool will be cleared, and server state will completely reset\n * locally.\n *\n * @see https://github.com/mongodb/specifications/blob/master/source/server-discovery-and-monitoring/server-discovery-and-monitoring.rst#not-master-and-node-is-recovering\n */ function isSDAMUnrecoverableError(error) {\n    // NOTE: null check is here for a strictly pre-CMAP world, a timeout or\n    //       close event are considered unrecoverable\n    if (error instanceof MongoParseError || error == null) {\n        return true;\n    }\n    return isRecoveringError(error) || isNotWritablePrimaryError(error);\n}\nexports.isSDAMUnrecoverableError = isSDAMUnrecoverableError;\nfunction isNetworkTimeoutError(err) {\n    return !!(err instanceof MongoNetworkError && err.message.match(/timed out/));\n}\nexports.isNetworkTimeoutError = isNetworkTimeoutError;\nfunction isResumableError(error, wireVersion) {\n    if (error == null || !(error instanceof MongoError)) {\n        return false;\n    }\n    if (error instanceof MongoNetworkError) {\n        return true;\n    }\n    if (wireVersion != null && wireVersion >= 9) {\n        // DRIVERS-1308: For 4.4 drivers running against 4.4 servers, drivers will add a special case to treat the CursorNotFound error code as resumable\n        if (error.code === exports.MONGODB_ERROR_CODES.CursorNotFound) {\n            return true;\n        }\n        return error.hasErrorLabel(exports.MongoErrorLabel.ResumableChangeStreamError);\n    }\n    if (typeof error.code === \"number\") {\n        return exports.GET_MORE_RESUMABLE_CODES.has(error.code);\n    }\n    return false;\n}\nexports.isResumableError = isResumableError; //# sourceMappingURL=error.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongodb/lib/error.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongodb/lib/explain.js":
/*!*********************************************!*\
  !*** ./node_modules/mongodb/lib/explain.js ***!
  \*********************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.Explain = exports.ExplainVerbosity = void 0;\nconst error_1 = __webpack_require__(/*! ./error */ \"(ssr)/./node_modules/mongodb/lib/error.js\");\n/** @public */ exports.ExplainVerbosity = Object.freeze({\n    queryPlanner: \"queryPlanner\",\n    queryPlannerExtended: \"queryPlannerExtended\",\n    executionStats: \"executionStats\",\n    allPlansExecution: \"allPlansExecution\"\n});\n/** @internal */ class Explain {\n    constructor(verbosity){\n        if (typeof verbosity === \"boolean\") {\n            this.verbosity = verbosity ? exports.ExplainVerbosity.allPlansExecution : exports.ExplainVerbosity.queryPlanner;\n        } else {\n            this.verbosity = verbosity;\n        }\n    }\n    static fromOptions(options) {\n        if (options?.explain == null) return;\n        const explain = options.explain;\n        if (typeof explain === \"boolean\" || typeof explain === \"string\") {\n            return new Explain(explain);\n        }\n        throw new error_1.MongoInvalidArgumentError('Field \"explain\" must be a string or a boolean');\n    }\n}\nexports.Explain = Explain; //# sourceMappingURL=explain.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbW9uZ29kYi9saWIvZXhwbGFpbi5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiQSw4Q0FBNkM7SUFBRUcsT0FBTztBQUFLLENBQUMsRUFBQztBQUM3REQsZUFBZSxHQUFHQSx3QkFBd0IsR0FBRyxLQUFLO0FBQ2xELE1BQU1JLFVBQVVDLG1CQUFPQSxDQUFDLDBEQUFTO0FBQ2pDLFlBQVksR0FDWkwsd0JBQXdCLEdBQUdGLE9BQU9RLE1BQU0sQ0FBQztJQUNyQ0MsY0FBYztJQUNkQyxzQkFBc0I7SUFDdEJDLGdCQUFnQjtJQUNoQkMsbUJBQW1CO0FBQ3ZCO0FBQ0EsY0FBYyxHQUNkLE1BQU1SO0lBQ0ZTLFlBQVlDLFNBQVMsQ0FBRTtRQUNuQixJQUFJLE9BQU9BLGNBQWMsV0FBVztZQUNoQyxJQUFJLENBQUNBLFNBQVMsR0FBR0EsWUFDWFosUUFBUUcsZ0JBQWdCLENBQUNPLGlCQUFpQixHQUMxQ1YsUUFBUUcsZ0JBQWdCLENBQUNJLFlBQVk7UUFDL0MsT0FDSztZQUNELElBQUksQ0FBQ0ssU0FBUyxHQUFHQTtRQUNyQjtJQUNKO0lBQ0EsT0FBT0MsWUFBWUMsT0FBTyxFQUFFO1FBQ3hCLElBQUlBLFNBQVNDLFdBQVcsTUFDcEI7UUFDSixNQUFNQSxVQUFVRCxRQUFRQyxPQUFPO1FBQy9CLElBQUksT0FBT0EsWUFBWSxhQUFhLE9BQU9BLFlBQVksVUFBVTtZQUM3RCxPQUFPLElBQUliLFFBQVFhO1FBQ3ZCO1FBQ0EsTUFBTSxJQUFJWCxRQUFRWSx5QkFBeUIsQ0FBQztJQUNoRDtBQUNKO0FBQ0FoQixlQUFlLEdBQUdFLFNBQ2xCLG1DQUFtQyIsInNvdXJjZXMiOlsid2VicGFjazovL2Jsb2ctYXBwbGljYXRpb24vLi9ub2RlX21vZHVsZXMvbW9uZ29kYi9saWIvZXhwbGFpbi5qcz82MjYyIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5FeHBsYWluID0gZXhwb3J0cy5FeHBsYWluVmVyYm9zaXR5ID0gdm9pZCAwO1xuY29uc3QgZXJyb3JfMSA9IHJlcXVpcmUoXCIuL2Vycm9yXCIpO1xuLyoqIEBwdWJsaWMgKi9cbmV4cG9ydHMuRXhwbGFpblZlcmJvc2l0eSA9IE9iamVjdC5mcmVlemUoe1xuICAgIHF1ZXJ5UGxhbm5lcjogJ3F1ZXJ5UGxhbm5lcicsXG4gICAgcXVlcnlQbGFubmVyRXh0ZW5kZWQ6ICdxdWVyeVBsYW5uZXJFeHRlbmRlZCcsXG4gICAgZXhlY3V0aW9uU3RhdHM6ICdleGVjdXRpb25TdGF0cycsXG4gICAgYWxsUGxhbnNFeGVjdXRpb246ICdhbGxQbGFuc0V4ZWN1dGlvbidcbn0pO1xuLyoqIEBpbnRlcm5hbCAqL1xuY2xhc3MgRXhwbGFpbiB7XG4gICAgY29uc3RydWN0b3IodmVyYm9zaXR5KSB7XG4gICAgICAgIGlmICh0eXBlb2YgdmVyYm9zaXR5ID09PSAnYm9vbGVhbicpIHtcbiAgICAgICAgICAgIHRoaXMudmVyYm9zaXR5ID0gdmVyYm9zaXR5XG4gICAgICAgICAgICAgICAgPyBleHBvcnRzLkV4cGxhaW5WZXJib3NpdHkuYWxsUGxhbnNFeGVjdXRpb25cbiAgICAgICAgICAgICAgICA6IGV4cG9ydHMuRXhwbGFpblZlcmJvc2l0eS5xdWVyeVBsYW5uZXI7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0aGlzLnZlcmJvc2l0eSA9IHZlcmJvc2l0eTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBzdGF0aWMgZnJvbU9wdGlvbnMob3B0aW9ucykge1xuICAgICAgICBpZiAob3B0aW9ucz8uZXhwbGFpbiA9PSBudWxsKVxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICBjb25zdCBleHBsYWluID0gb3B0aW9ucy5leHBsYWluO1xuICAgICAgICBpZiAodHlwZW9mIGV4cGxhaW4gPT09ICdib29sZWFuJyB8fCB0eXBlb2YgZXhwbGFpbiA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgIHJldHVybiBuZXcgRXhwbGFpbihleHBsYWluKTtcbiAgICAgICAgfVxuICAgICAgICB0aHJvdyBuZXcgZXJyb3JfMS5Nb25nb0ludmFsaWRBcmd1bWVudEVycm9yKCdGaWVsZCBcImV4cGxhaW5cIiBtdXN0IGJlIGEgc3RyaW5nIG9yIGEgYm9vbGVhbicpO1xuICAgIH1cbn1cbmV4cG9ydHMuRXhwbGFpbiA9IEV4cGxhaW47XG4vLyMgc291cmNlTWFwcGluZ1VSTD1leHBsYWluLmpzLm1hcCJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsIkV4cGxhaW4iLCJFeHBsYWluVmVyYm9zaXR5IiwiZXJyb3JfMSIsInJlcXVpcmUiLCJmcmVlemUiLCJxdWVyeVBsYW5uZXIiLCJxdWVyeVBsYW5uZXJFeHRlbmRlZCIsImV4ZWN1dGlvblN0YXRzIiwiYWxsUGxhbnNFeGVjdXRpb24iLCJjb25zdHJ1Y3RvciIsInZlcmJvc2l0eSIsImZyb21PcHRpb25zIiwib3B0aW9ucyIsImV4cGxhaW4iLCJNb25nb0ludmFsaWRBcmd1bWVudEVycm9yIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongodb/lib/explain.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongodb/lib/gridfs/download.js":
/*!*****************************************************!*\
  !*** ./node_modules/mongodb/lib/gridfs/download.js ***!
  \*****************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.GridFSBucketReadStream = void 0;\nconst stream_1 = __webpack_require__(/*! stream */ \"stream\");\nconst error_1 = __webpack_require__(/*! ../error */ \"(ssr)/./node_modules/mongodb/lib/error.js\");\n/**\n * A readable stream that enables you to read buffers from GridFS.\n *\n * Do not instantiate this class directly. Use `openDownloadStream()` instead.\n * @public\n */ class GridFSBucketReadStream extends stream_1.Readable {\n    /**\n     * @param chunks - Handle for chunks collection\n     * @param files - Handle for files collection\n     * @param readPreference - The read preference to use\n     * @param filter - The filter to use to find the file document\n     * @internal\n     */ constructor(chunks, files, readPreference, filter, options){\n        super({\n            emitClose: true\n        });\n        this.s = {\n            bytesToTrim: 0,\n            bytesToSkip: 0,\n            bytesRead: 0,\n            chunks,\n            expected: 0,\n            files,\n            filter,\n            init: false,\n            expectedEnd: 0,\n            options: {\n                start: 0,\n                end: 0,\n                ...options\n            },\n            readPreference\n        };\n    }\n    /**\n     * Reads from the cursor and pushes to the stream.\n     * Private Impl, do not call directly\n     * @internal\n     */ _read() {\n        if (this.destroyed) return;\n        waitForFile(this, ()=>doRead(this));\n    }\n    /**\n     * Sets the 0-based offset in bytes to start streaming from. Throws\n     * an error if this stream has entered flowing mode\n     * (e.g. if you've already called `on('data')`)\n     *\n     * @param start - 0-based offset in bytes to start streaming from\n     */ start(start = 0) {\n        throwIfInitialized(this);\n        this.s.options.start = start;\n        return this;\n    }\n    /**\n     * Sets the 0-based offset in bytes to start streaming from. Throws\n     * an error if this stream has entered flowing mode\n     * (e.g. if you've already called `on('data')`)\n     *\n     * @param end - Offset in bytes to stop reading at\n     */ end(end = 0) {\n        throwIfInitialized(this);\n        this.s.options.end = end;\n        return this;\n    }\n    /**\n     * Marks this stream as aborted (will never push another `data` event)\n     * and kills the underlying cursor. Will emit the 'end' event, and then\n     * the 'close' event once the cursor is successfully killed.\n     */ async abort() {\n        this.push(null);\n        this.destroy();\n        await this.s.cursor?.close();\n    }\n}\n/**\n * Fires when the stream loaded the file document corresponding to the provided id.\n * @event\n */ GridFSBucketReadStream.FILE = \"file\";\nexports.GridFSBucketReadStream = GridFSBucketReadStream;\nfunction throwIfInitialized(stream) {\n    if (stream.s.init) {\n        throw new error_1.MongoGridFSStreamError(\"Options cannot be changed after the stream is initialized\");\n    }\n}\nfunction doRead(stream) {\n    if (stream.destroyed) return;\n    if (!stream.s.cursor) return;\n    if (!stream.s.file) return;\n    const handleReadResult = ({ error, doc })=>{\n        if (stream.destroyed) {\n            return;\n        }\n        if (error) {\n            stream.destroy(error);\n            return;\n        }\n        if (!doc) {\n            stream.push(null);\n            stream.s.cursor?.close().then(()=>null, (error)=>stream.destroy(error));\n            return;\n        }\n        if (!stream.s.file) return;\n        const bytesRemaining = stream.s.file.length - stream.s.bytesRead;\n        const expectedN = stream.s.expected++;\n        const expectedLength = Math.min(stream.s.file.chunkSize, bytesRemaining);\n        if (doc.n > expectedN) {\n            return stream.destroy(new error_1.MongoGridFSChunkError(`ChunkIsMissing: Got unexpected n: ${doc.n}, expected: ${expectedN}`));\n        }\n        if (doc.n < expectedN) {\n            return stream.destroy(new error_1.MongoGridFSChunkError(`ExtraChunk: Got unexpected n: ${doc.n}, expected: ${expectedN}`));\n        }\n        let buf = Buffer.isBuffer(doc.data) ? doc.data : doc.data.buffer;\n        if (buf.byteLength !== expectedLength) {\n            if (bytesRemaining <= 0) {\n                return stream.destroy(new error_1.MongoGridFSChunkError(`ExtraChunk: Got unexpected n: ${doc.n}, expected file length ${stream.s.file.length} bytes but already read ${stream.s.bytesRead} bytes`));\n            }\n            return stream.destroy(new error_1.MongoGridFSChunkError(`ChunkIsWrongSize: Got unexpected length: ${buf.byteLength}, expected: ${expectedLength}`));\n        }\n        stream.s.bytesRead += buf.byteLength;\n        if (buf.byteLength === 0) {\n            return stream.push(null);\n        }\n        let sliceStart = null;\n        let sliceEnd = null;\n        if (stream.s.bytesToSkip != null) {\n            sliceStart = stream.s.bytesToSkip;\n            stream.s.bytesToSkip = 0;\n        }\n        const atEndOfStream = expectedN === stream.s.expectedEnd - 1;\n        const bytesLeftToRead = stream.s.options.end - stream.s.bytesToSkip;\n        if (atEndOfStream && stream.s.bytesToTrim != null) {\n            sliceEnd = stream.s.file.chunkSize - stream.s.bytesToTrim;\n        } else if (stream.s.options.end && bytesLeftToRead < doc.data.byteLength) {\n            sliceEnd = bytesLeftToRead;\n        }\n        if (sliceStart != null || sliceEnd != null) {\n            buf = buf.slice(sliceStart || 0, sliceEnd || buf.byteLength);\n        }\n        stream.push(buf);\n        return;\n    };\n    stream.s.cursor.next().then((doc)=>handleReadResult({\n            error: null,\n            doc\n        }), (error)=>handleReadResult({\n            error,\n            doc: null\n        }));\n}\nfunction init(stream) {\n    const findOneOptions = {};\n    if (stream.s.readPreference) {\n        findOneOptions.readPreference = stream.s.readPreference;\n    }\n    if (stream.s.options && stream.s.options.sort) {\n        findOneOptions.sort = stream.s.options.sort;\n    }\n    if (stream.s.options && stream.s.options.skip) {\n        findOneOptions.skip = stream.s.options.skip;\n    }\n    const handleReadResult = ({ error, doc })=>{\n        if (error) {\n            return stream.destroy(error);\n        }\n        if (!doc) {\n            const identifier = stream.s.filter._id ? stream.s.filter._id.toString() : stream.s.filter.filename;\n            const errmsg = `FileNotFound: file ${identifier} was not found`;\n            // TODO(NODE-3483)\n            const err = new error_1.MongoRuntimeError(errmsg);\n            err.code = \"ENOENT\"; // TODO: NODE-3338 set property as part of constructor\n            return stream.destroy(err);\n        }\n        // If document is empty, kill the stream immediately and don't\n        // execute any reads\n        if (doc.length <= 0) {\n            stream.push(null);\n            return;\n        }\n        if (stream.destroyed) {\n            // If user destroys the stream before we have a cursor, wait\n            // until the query is done to say we're 'closed' because we can't\n            // cancel a query.\n            stream.destroy();\n            return;\n        }\n        try {\n            stream.s.bytesToSkip = handleStartOption(stream, doc, stream.s.options);\n        } catch (error) {\n            return stream.destroy(error);\n        }\n        const filter = {\n            files_id: doc._id\n        };\n        // Currently (MongoDB 3.4.4) skip function does not support the index,\n        // it needs to retrieve all the documents first and then skip them. (CS-25811)\n        // As work around we use $gte on the \"n\" field.\n        if (stream.s.options && stream.s.options.start != null) {\n            const skip = Math.floor(stream.s.options.start / doc.chunkSize);\n            if (skip > 0) {\n                filter[\"n\"] = {\n                    $gte: skip\n                };\n            }\n        }\n        stream.s.cursor = stream.s.chunks.find(filter).sort({\n            n: 1\n        });\n        if (stream.s.readPreference) {\n            stream.s.cursor.withReadPreference(stream.s.readPreference);\n        }\n        stream.s.expectedEnd = Math.ceil(doc.length / doc.chunkSize);\n        stream.s.file = doc;\n        try {\n            stream.s.bytesToTrim = handleEndOption(stream, doc, stream.s.cursor, stream.s.options);\n        } catch (error) {\n            return stream.destroy(error);\n        }\n        stream.emit(GridFSBucketReadStream.FILE, doc);\n        return;\n    };\n    stream.s.files.findOne(stream.s.filter, findOneOptions).then((doc)=>handleReadResult({\n            error: null,\n            doc\n        }), (error)=>handleReadResult({\n            error,\n            doc: null\n        }));\n}\nfunction waitForFile(stream, callback) {\n    if (stream.s.file) {\n        return callback();\n    }\n    if (!stream.s.init) {\n        init(stream);\n        stream.s.init = true;\n    }\n    stream.once(\"file\", ()=>{\n        callback();\n    });\n}\nfunction handleStartOption(stream, doc, options) {\n    if (options && options.start != null) {\n        if (options.start > doc.length) {\n            throw new error_1.MongoInvalidArgumentError(`Stream start (${options.start}) must not be more than the length of the file (${doc.length})`);\n        }\n        if (options.start < 0) {\n            throw new error_1.MongoInvalidArgumentError(`Stream start (${options.start}) must not be negative`);\n        }\n        if (options.end != null && options.end < options.start) {\n            throw new error_1.MongoInvalidArgumentError(`Stream start (${options.start}) must not be greater than stream end (${options.end})`);\n        }\n        stream.s.bytesRead = Math.floor(options.start / doc.chunkSize) * doc.chunkSize;\n        stream.s.expected = Math.floor(options.start / doc.chunkSize);\n        return options.start - stream.s.bytesRead;\n    }\n    throw new error_1.MongoInvalidArgumentError(\"Start option must be defined\");\n}\nfunction handleEndOption(stream, doc, cursor, options) {\n    if (options && options.end != null) {\n        if (options.end > doc.length) {\n            throw new error_1.MongoInvalidArgumentError(`Stream end (${options.end}) must not be more than the length of the file (${doc.length})`);\n        }\n        if (options.start == null || options.start < 0) {\n            throw new error_1.MongoInvalidArgumentError(`Stream end (${options.end}) must not be negative`);\n        }\n        const start = options.start != null ? Math.floor(options.start / doc.chunkSize) : 0;\n        cursor.limit(Math.ceil(options.end / doc.chunkSize) - start);\n        stream.s.expectedEnd = Math.ceil(options.end / doc.chunkSize);\n        return Math.ceil(options.end / doc.chunkSize) * doc.chunkSize - options.end;\n    }\n    throw new error_1.MongoInvalidArgumentError(\"End option must be defined\");\n} //# sourceMappingURL=download.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongodb/lib/gridfs/download.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongodb/lib/gridfs/index.js":
/*!**************************************************!*\
  !*** ./node_modules/mongodb/lib/gridfs/index.js ***!
  \**************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.GridFSBucket = void 0;\nconst error_1 = __webpack_require__(/*! ../error */ \"(ssr)/./node_modules/mongodb/lib/error.js\");\nconst mongo_types_1 = __webpack_require__(/*! ../mongo_types */ \"(ssr)/./node_modules/mongodb/lib/mongo_types.js\");\nconst write_concern_1 = __webpack_require__(/*! ../write_concern */ \"(ssr)/./node_modules/mongodb/lib/write_concern.js\");\nconst download_1 = __webpack_require__(/*! ./download */ \"(ssr)/./node_modules/mongodb/lib/gridfs/download.js\");\nconst upload_1 = __webpack_require__(/*! ./upload */ \"(ssr)/./node_modules/mongodb/lib/gridfs/upload.js\");\nconst DEFAULT_GRIDFS_BUCKET_OPTIONS = {\n    bucketName: \"fs\",\n    chunkSizeBytes: 255 * 1024\n};\n/**\n * Constructor for a streaming GridFS interface\n * @public\n */ class GridFSBucket extends mongo_types_1.TypedEventEmitter {\n    constructor(db, options){\n        super();\n        this.setMaxListeners(0);\n        const privateOptions = {\n            ...DEFAULT_GRIDFS_BUCKET_OPTIONS,\n            ...options,\n            writeConcern: write_concern_1.WriteConcern.fromOptions(options)\n        };\n        this.s = {\n            db,\n            options: privateOptions,\n            _chunksCollection: db.collection(privateOptions.bucketName + \".chunks\"),\n            _filesCollection: db.collection(privateOptions.bucketName + \".files\"),\n            checkedIndexes: false,\n            calledOpenUploadStream: false\n        };\n    }\n    /**\n     * Returns a writable stream (GridFSBucketWriteStream) for writing\n     * buffers to GridFS. The stream's 'id' property contains the resulting\n     * file's id.\n     *\n     * @param filename - The value of the 'filename' key in the files doc\n     * @param options - Optional settings.\n     */ openUploadStream(filename, options) {\n        return new upload_1.GridFSBucketWriteStream(this, filename, options);\n    }\n    /**\n     * Returns a writable stream (GridFSBucketWriteStream) for writing\n     * buffers to GridFS for a custom file id. The stream's 'id' property contains the resulting\n     * file's id.\n     */ openUploadStreamWithId(id, filename, options) {\n        return new upload_1.GridFSBucketWriteStream(this, filename, {\n            ...options,\n            id\n        });\n    }\n    /** Returns a readable stream (GridFSBucketReadStream) for streaming file data from GridFS. */ openDownloadStream(id, options) {\n        return new download_1.GridFSBucketReadStream(this.s._chunksCollection, this.s._filesCollection, this.s.options.readPreference, {\n            _id: id\n        }, options);\n    }\n    /**\n     * Deletes a file with the given id\n     *\n     * @param id - The id of the file doc\n     */ async delete(id) {\n        const { deletedCount } = await this.s._filesCollection.deleteOne({\n            _id: id\n        });\n        // Delete orphaned chunks before returning FileNotFound\n        await this.s._chunksCollection.deleteMany({\n            files_id: id\n        });\n        if (deletedCount === 0) {\n            // TODO(NODE-3483): Replace with more appropriate error\n            // Consider creating new error MongoGridFSFileNotFoundError\n            throw new error_1.MongoRuntimeError(`File not found for id ${id}`);\n        }\n    }\n    /** Convenience wrapper around find on the files collection */ find(filter = {}, options = {}) {\n        return this.s._filesCollection.find(filter, options);\n    }\n    /**\n     * Returns a readable stream (GridFSBucketReadStream) for streaming the\n     * file with the given name from GridFS. If there are multiple files with\n     * the same name, this will stream the most recent file with the given name\n     * (as determined by the `uploadDate` field). You can set the `revision`\n     * option to change this behavior.\n     */ openDownloadStreamByName(filename, options) {\n        let sort = {\n            uploadDate: -1\n        };\n        let skip = undefined;\n        if (options && options.revision != null) {\n            if (options.revision >= 0) {\n                sort = {\n                    uploadDate: 1\n                };\n                skip = options.revision;\n            } else {\n                skip = -options.revision - 1;\n            }\n        }\n        return new download_1.GridFSBucketReadStream(this.s._chunksCollection, this.s._filesCollection, this.s.options.readPreference, {\n            filename\n        }, {\n            ...options,\n            sort,\n            skip\n        });\n    }\n    /**\n     * Renames the file with the given _id to the given string\n     *\n     * @param id - the id of the file to rename\n     * @param filename - new name for the file\n     */ async rename(id, filename) {\n        const filter = {\n            _id: id\n        };\n        const update = {\n            $set: {\n                filename\n            }\n        };\n        const { matchedCount } = await this.s._filesCollection.updateOne(filter, update);\n        if (matchedCount === 0) {\n            throw new error_1.MongoRuntimeError(`File with id ${id} not found`);\n        }\n    }\n    /** Removes this bucket's files collection, followed by its chunks collection. */ async drop() {\n        await this.s._filesCollection.drop();\n        await this.s._chunksCollection.drop();\n    }\n}\n/**\n * When the first call to openUploadStream is made, the upload stream will\n * check to see if it needs to create the proper indexes on the chunks and\n * files collections. This event is fired either when 1) it determines that\n * no index creation is necessary, 2) when it successfully creates the\n * necessary indexes.\n * @event\n */ GridFSBucket.INDEX = \"index\";\nexports.GridFSBucket = GridFSBucket; //# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongodb/lib/gridfs/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongodb/lib/gridfs/upload.js":
/*!***************************************************!*\
  !*** ./node_modules/mongodb/lib/gridfs/upload.js ***!
  \***************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.GridFSBucketWriteStream = void 0;\nconst stream_1 = __webpack_require__(/*! stream */ \"stream\");\nconst bson_1 = __webpack_require__(/*! ../bson */ \"(ssr)/./node_modules/mongodb/lib/bson.js\");\nconst error_1 = __webpack_require__(/*! ../error */ \"(ssr)/./node_modules/mongodb/lib/error.js\");\nconst write_concern_1 = __webpack_require__(/*! ./../write_concern */ \"(ssr)/./node_modules/mongodb/lib/write_concern.js\");\n/**\n * A writable stream that enables you to write buffers to GridFS.\n *\n * Do not instantiate this class directly. Use `openUploadStream()` instead.\n * @public\n */ class GridFSBucketWriteStream extends stream_1.Writable {\n    /**\n     * @param bucket - Handle for this stream's corresponding bucket\n     * @param filename - The value of the 'filename' key in the files doc\n     * @param options - Optional settings.\n     * @internal\n     */ constructor(bucket, filename, options){\n        super();\n        /**\n         * The document containing information about the inserted file.\n         * This property is defined _after_ the finish event has been emitted.\n         * It will remain `null` if an error occurs.\n         *\n         * @example\n         * ```ts\n         * fs.createReadStream('file.txt')\n         *   .pipe(bucket.openUploadStream('file.txt'))\n         *   .on('finish', function () {\n         *     console.log(this.gridFSFile)\n         *   })\n         * ```\n         */ this.gridFSFile = null;\n        options = options ?? {};\n        this.bucket = bucket;\n        this.chunks = bucket.s._chunksCollection;\n        this.filename = filename;\n        this.files = bucket.s._filesCollection;\n        this.options = options;\n        this.writeConcern = write_concern_1.WriteConcern.fromOptions(options) || bucket.s.options.writeConcern;\n        // Signals the write is all done\n        this.done = false;\n        this.id = options.id ? options.id : new bson_1.ObjectId();\n        // properly inherit the default chunksize from parent\n        this.chunkSizeBytes = options.chunkSizeBytes || this.bucket.s.options.chunkSizeBytes;\n        this.bufToStore = Buffer.alloc(this.chunkSizeBytes);\n        this.length = 0;\n        this.n = 0;\n        this.pos = 0;\n        this.state = {\n            streamEnd: false,\n            outstandingRequests: 0,\n            errored: false,\n            aborted: false\n        };\n        if (!this.bucket.s.calledOpenUploadStream) {\n            this.bucket.s.calledOpenUploadStream = true;\n            checkIndexes(this).then(()=>{\n                this.bucket.s.checkedIndexes = true;\n                this.bucket.emit(\"index\");\n            }, ()=>null);\n        }\n    }\n    /**\n     * @internal\n     *\n     * The stream is considered constructed when the indexes are done being created\n     */ _construct(callback) {\n        if (this.bucket.s.checkedIndexes) {\n            return process.nextTick(callback);\n        }\n        this.bucket.once(\"index\", callback);\n    }\n    /**\n     * @internal\n     * Write a buffer to the stream.\n     *\n     * @param chunk - Buffer to write\n     * @param encoding - Optional encoding for the buffer\n     * @param callback - Function to call when the chunk was added to the buffer, or if the entire chunk was persisted to MongoDB if this chunk caused a flush.\n     */ _write(chunk, encoding, callback) {\n        doWrite(this, chunk, encoding, callback);\n    }\n    /** @internal */ _final(callback) {\n        if (this.state.streamEnd) {\n            return process.nextTick(callback);\n        }\n        this.state.streamEnd = true;\n        writeRemnant(this, callback);\n    }\n    /**\n     * Places this write stream into an aborted state (all future writes fail)\n     * and deletes all chunks that have already been written.\n     */ async abort() {\n        if (this.state.streamEnd) {\n            // TODO(NODE-3485): Replace with MongoGridFSStreamClosed\n            throw new error_1.MongoAPIError(\"Cannot abort a stream that has already completed\");\n        }\n        if (this.state.aborted) {\n            // TODO(NODE-3485): Replace with MongoGridFSStreamClosed\n            throw new error_1.MongoAPIError(\"Cannot call abort() on a stream twice\");\n        }\n        this.state.aborted = true;\n        await this.chunks.deleteMany({\n            files_id: this.id\n        });\n    }\n}\nexports.GridFSBucketWriteStream = GridFSBucketWriteStream;\nfunction handleError(stream, error, callback) {\n    if (stream.state.errored) {\n        process.nextTick(callback);\n        return;\n    }\n    stream.state.errored = true;\n    process.nextTick(callback, error);\n}\nfunction createChunkDoc(filesId, n, data) {\n    return {\n        _id: new bson_1.ObjectId(),\n        files_id: filesId,\n        n,\n        data\n    };\n}\nasync function checkChunksIndex(stream) {\n    const index = {\n        files_id: 1,\n        n: 1\n    };\n    let indexes;\n    try {\n        indexes = await stream.chunks.listIndexes().toArray();\n    } catch (error) {\n        if (error instanceof error_1.MongoError && error.code === error_1.MONGODB_ERROR_CODES.NamespaceNotFound) {\n            indexes = [];\n        } else {\n            throw error;\n        }\n    }\n    const hasChunksIndex = !!indexes.find((index)=>{\n        const keys = Object.keys(index.key);\n        if (keys.length === 2 && index.key.files_id === 1 && index.key.n === 1) {\n            return true;\n        }\n        return false;\n    });\n    if (!hasChunksIndex) {\n        await stream.chunks.createIndex(index, {\n            ...stream.writeConcern,\n            background: true,\n            unique: true\n        });\n    }\n}\nfunction checkDone(stream, callback) {\n    if (stream.done) {\n        return process.nextTick(callback);\n    }\n    if (stream.state.streamEnd && stream.state.outstandingRequests === 0 && !stream.state.errored) {\n        // Set done so we do not trigger duplicate createFilesDoc\n        stream.done = true;\n        // Create a new files doc\n        const gridFSFile = createFilesDoc(stream.id, stream.length, stream.chunkSizeBytes, stream.filename, stream.options.contentType, stream.options.aliases, stream.options.metadata);\n        if (isAborted(stream, callback)) {\n            return;\n        }\n        stream.files.insertOne(gridFSFile, {\n            writeConcern: stream.writeConcern\n        }).then(()=>{\n            stream.gridFSFile = gridFSFile;\n            callback();\n        }, (error)=>handleError(stream, error, callback));\n        return;\n    }\n    process.nextTick(callback);\n}\nasync function checkIndexes(stream) {\n    const doc = await stream.files.findOne({}, {\n        projection: {\n            _id: 1\n        }\n    });\n    if (doc != null) {\n        // If at least one document exists assume the collection has the required index\n        return;\n    }\n    const index = {\n        filename: 1,\n        uploadDate: 1\n    };\n    let indexes;\n    try {\n        indexes = await stream.files.listIndexes().toArray();\n    } catch (error) {\n        if (error instanceof error_1.MongoError && error.code === error_1.MONGODB_ERROR_CODES.NamespaceNotFound) {\n            indexes = [];\n        } else {\n            throw error;\n        }\n    }\n    const hasFileIndex = !!indexes.find((index)=>{\n        const keys = Object.keys(index.key);\n        if (keys.length === 2 && index.key.filename === 1 && index.key.uploadDate === 1) {\n            return true;\n        }\n        return false;\n    });\n    if (!hasFileIndex) {\n        await stream.files.createIndex(index, {\n            background: false\n        });\n    }\n    await checkChunksIndex(stream);\n}\nfunction createFilesDoc(_id, length, chunkSize, filename, contentType, aliases, metadata) {\n    const ret = {\n        _id,\n        length,\n        chunkSize,\n        uploadDate: new Date(),\n        filename\n    };\n    if (contentType) {\n        ret.contentType = contentType;\n    }\n    if (aliases) {\n        ret.aliases = aliases;\n    }\n    if (metadata) {\n        ret.metadata = metadata;\n    }\n    return ret;\n}\nfunction doWrite(stream, chunk, encoding, callback) {\n    if (isAborted(stream, callback)) {\n        return;\n    }\n    const inputBuf = Buffer.isBuffer(chunk) ? chunk : Buffer.from(chunk, encoding);\n    stream.length += inputBuf.length;\n    // Input is small enough to fit in our buffer\n    if (stream.pos + inputBuf.length < stream.chunkSizeBytes) {\n        inputBuf.copy(stream.bufToStore, stream.pos);\n        stream.pos += inputBuf.length;\n        process.nextTick(callback);\n        return;\n    }\n    // Otherwise, buffer is too big for current chunk, so we need to flush\n    // to MongoDB.\n    let inputBufRemaining = inputBuf.length;\n    let spaceRemaining = stream.chunkSizeBytes - stream.pos;\n    let numToCopy = Math.min(spaceRemaining, inputBuf.length);\n    let outstandingRequests = 0;\n    while(inputBufRemaining > 0){\n        const inputBufPos = inputBuf.length - inputBufRemaining;\n        inputBuf.copy(stream.bufToStore, stream.pos, inputBufPos, inputBufPos + numToCopy);\n        stream.pos += numToCopy;\n        spaceRemaining -= numToCopy;\n        let doc;\n        if (spaceRemaining === 0) {\n            doc = createChunkDoc(stream.id, stream.n, Buffer.from(stream.bufToStore));\n            ++stream.state.outstandingRequests;\n            ++outstandingRequests;\n            if (isAborted(stream, callback)) {\n                return;\n            }\n            stream.chunks.insertOne(doc, {\n                writeConcern: stream.writeConcern\n            }).then(()=>{\n                --stream.state.outstandingRequests;\n                --outstandingRequests;\n                if (!outstandingRequests) {\n                    checkDone(stream, callback);\n                }\n            }, (error)=>handleError(stream, error, callback));\n            spaceRemaining = stream.chunkSizeBytes;\n            stream.pos = 0;\n            ++stream.n;\n        }\n        inputBufRemaining -= numToCopy;\n        numToCopy = Math.min(spaceRemaining, inputBufRemaining);\n    }\n}\nfunction writeRemnant(stream, callback) {\n    // Buffer is empty, so don't bother to insert\n    if (stream.pos === 0) {\n        return checkDone(stream, callback);\n    }\n    ++stream.state.outstandingRequests;\n    // Create a new buffer to make sure the buffer isn't bigger than it needs\n    // to be.\n    const remnant = Buffer.alloc(stream.pos);\n    stream.bufToStore.copy(remnant, 0, 0, stream.pos);\n    const doc = createChunkDoc(stream.id, stream.n, remnant);\n    // If the stream was aborted, do not write remnant\n    if (isAborted(stream, callback)) {\n        return;\n    }\n    stream.chunks.insertOne(doc, {\n        writeConcern: stream.writeConcern\n    }).then(()=>{\n        --stream.state.outstandingRequests;\n        checkDone(stream, callback);\n    }, (error)=>handleError(stream, error, callback));\n}\nfunction isAborted(stream, callback) {\n    if (stream.state.aborted) {\n        process.nextTick(callback, new error_1.MongoAPIError(\"Stream has been aborted\"));\n        return true;\n    }\n    return false;\n} //# sourceMappingURL=upload.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongodb/lib/gridfs/upload.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongodb/lib/index.js":
/*!*******************************************!*\
  !*** ./node_modules/mongodb/lib/index.js ***!
  \*******************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.MongoUnexpectedServerResponseError = exports.MongoTransactionError = exports.MongoTopologyClosedError = exports.MongoTailableCursorError = exports.MongoSystemError = exports.MongoServerSelectionError = exports.MongoServerError = exports.MongoServerClosedError = exports.MongoRuntimeError = exports.MongoParseError = exports.MongoNotConnectedError = exports.MongoNetworkTimeoutError = exports.MongoNetworkError = exports.MongoMissingDependencyError = exports.MongoMissingCredentialsError = exports.MongoKerberosError = exports.MongoInvalidArgumentError = exports.MongoGridFSStreamError = exports.MongoGridFSChunkError = exports.MongoExpiredSessionError = exports.MongoError = exports.MongoDriverError = exports.MongoDecompressionError = exports.MongoCursorInUseError = exports.MongoCursorExhaustedError = exports.MongoCompatibilityError = exports.MongoChangeStreamError = exports.MongoBatchReExecutionError = exports.MongoAzureError = exports.MongoAWSError = exports.MongoAPIError = exports.ChangeStreamCursor = exports.ClientEncryption = exports.MongoBulkWriteError = exports.UUID = exports.Timestamp = exports.ObjectId = exports.MinKey = exports.MaxKey = exports.Long = exports.Int32 = exports.Double = exports.Decimal128 = exports.DBRef = exports.Code = exports.BSONType = exports.BSONSymbol = exports.BSONRegExp = exports.Binary = exports.BSON = void 0;\nexports.ConnectionPoolReadyEvent = exports.ConnectionPoolMonitoringEvent = exports.ConnectionPoolCreatedEvent = exports.ConnectionPoolClosedEvent = exports.ConnectionPoolClearedEvent = exports.ConnectionCreatedEvent = exports.ConnectionClosedEvent = exports.ConnectionCheckOutStartedEvent = exports.ConnectionCheckOutFailedEvent = exports.ConnectionCheckedOutEvent = exports.ConnectionCheckedInEvent = exports.CommandSucceededEvent = exports.CommandStartedEvent = exports.CommandFailedEvent = exports.WriteConcern = exports.ReadPreference = exports.ReadConcern = exports.TopologyType = exports.ServerType = exports.ReadPreferenceMode = exports.ReadConcernLevel = exports.ProfilingLevel = exports.ReturnDocument = exports.ServerApiVersion = exports.ExplainVerbosity = exports.MongoErrorLabel = exports.CURSOR_FLAGS = exports.Compressor = exports.AuthMechanism = exports.GSSAPICanonicalizationValue = exports.AutoEncryptionLoggerLevel = exports.BatchType = exports.UnorderedBulkOperation = exports.OrderedBulkOperation = exports.MongoClient = exports.ListIndexesCursor = exports.ListCollectionsCursor = exports.GridFSBucketWriteStream = exports.GridFSBucketReadStream = exports.GridFSBucket = exports.FindCursor = exports.Db = exports.Collection = exports.ClientSession = exports.ChangeStream = exports.CancellationToken = exports.AggregationCursor = exports.Admin = exports.AbstractCursor = exports.MongoWriteConcernError = void 0;\nexports.MongoCryptKMSRequestNetworkTimeoutError = exports.MongoCryptInvalidArgumentError = exports.MongoCryptError = exports.MongoCryptCreateEncryptedCollectionError = exports.MongoCryptCreateDataKeyError = exports.MongoCryptAzureKMSRequestError = exports.SrvPollingEvent = exports.TopologyOpeningEvent = exports.TopologyDescriptionChangedEvent = exports.TopologyClosedEvent = exports.ServerOpeningEvent = exports.ServerHeartbeatSucceededEvent = exports.ServerHeartbeatStartedEvent = exports.ServerHeartbeatFailedEvent = exports.ServerDescriptionChangedEvent = exports.ServerClosedEvent = exports.ConnectionReadyEvent = void 0;\nconst admin_1 = __webpack_require__(/*! ./admin */ \"(ssr)/./node_modules/mongodb/lib/admin.js\");\nObject.defineProperty(exports, \"Admin\", ({\n    enumerable: true,\n    get: function() {\n        return admin_1.Admin;\n    }\n}));\nconst ordered_1 = __webpack_require__(/*! ./bulk/ordered */ \"(ssr)/./node_modules/mongodb/lib/bulk/ordered.js\");\nObject.defineProperty(exports, \"OrderedBulkOperation\", ({\n    enumerable: true,\n    get: function() {\n        return ordered_1.OrderedBulkOperation;\n    }\n}));\nconst unordered_1 = __webpack_require__(/*! ./bulk/unordered */ \"(ssr)/./node_modules/mongodb/lib/bulk/unordered.js\");\nObject.defineProperty(exports, \"UnorderedBulkOperation\", ({\n    enumerable: true,\n    get: function() {\n        return unordered_1.UnorderedBulkOperation;\n    }\n}));\nconst change_stream_1 = __webpack_require__(/*! ./change_stream */ \"(ssr)/./node_modules/mongodb/lib/change_stream.js\");\nObject.defineProperty(exports, \"ChangeStream\", ({\n    enumerable: true,\n    get: function() {\n        return change_stream_1.ChangeStream;\n    }\n}));\nconst collection_1 = __webpack_require__(/*! ./collection */ \"(ssr)/./node_modules/mongodb/lib/collection.js\");\nObject.defineProperty(exports, \"Collection\", ({\n    enumerable: true,\n    get: function() {\n        return collection_1.Collection;\n    }\n}));\nconst abstract_cursor_1 = __webpack_require__(/*! ./cursor/abstract_cursor */ \"(ssr)/./node_modules/mongodb/lib/cursor/abstract_cursor.js\");\nObject.defineProperty(exports, \"AbstractCursor\", ({\n    enumerable: true,\n    get: function() {\n        return abstract_cursor_1.AbstractCursor;\n    }\n}));\nconst aggregation_cursor_1 = __webpack_require__(/*! ./cursor/aggregation_cursor */ \"(ssr)/./node_modules/mongodb/lib/cursor/aggregation_cursor.js\");\nObject.defineProperty(exports, \"AggregationCursor\", ({\n    enumerable: true,\n    get: function() {\n        return aggregation_cursor_1.AggregationCursor;\n    }\n}));\nconst find_cursor_1 = __webpack_require__(/*! ./cursor/find_cursor */ \"(ssr)/./node_modules/mongodb/lib/cursor/find_cursor.js\");\nObject.defineProperty(exports, \"FindCursor\", ({\n    enumerable: true,\n    get: function() {\n        return find_cursor_1.FindCursor;\n    }\n}));\nconst list_collections_cursor_1 = __webpack_require__(/*! ./cursor/list_collections_cursor */ \"(ssr)/./node_modules/mongodb/lib/cursor/list_collections_cursor.js\");\nObject.defineProperty(exports, \"ListCollectionsCursor\", ({\n    enumerable: true,\n    get: function() {\n        return list_collections_cursor_1.ListCollectionsCursor;\n    }\n}));\nconst list_indexes_cursor_1 = __webpack_require__(/*! ./cursor/list_indexes_cursor */ \"(ssr)/./node_modules/mongodb/lib/cursor/list_indexes_cursor.js\");\nObject.defineProperty(exports, \"ListIndexesCursor\", ({\n    enumerable: true,\n    get: function() {\n        return list_indexes_cursor_1.ListIndexesCursor;\n    }\n}));\nconst db_1 = __webpack_require__(/*! ./db */ \"(ssr)/./node_modules/mongodb/lib/db.js\");\nObject.defineProperty(exports, \"Db\", ({\n    enumerable: true,\n    get: function() {\n        return db_1.Db;\n    }\n}));\nconst gridfs_1 = __webpack_require__(/*! ./gridfs */ \"(ssr)/./node_modules/mongodb/lib/gridfs/index.js\");\nObject.defineProperty(exports, \"GridFSBucket\", ({\n    enumerable: true,\n    get: function() {\n        return gridfs_1.GridFSBucket;\n    }\n}));\nconst download_1 = __webpack_require__(/*! ./gridfs/download */ \"(ssr)/./node_modules/mongodb/lib/gridfs/download.js\");\nObject.defineProperty(exports, \"GridFSBucketReadStream\", ({\n    enumerable: true,\n    get: function() {\n        return download_1.GridFSBucketReadStream;\n    }\n}));\nconst upload_1 = __webpack_require__(/*! ./gridfs/upload */ \"(ssr)/./node_modules/mongodb/lib/gridfs/upload.js\");\nObject.defineProperty(exports, \"GridFSBucketWriteStream\", ({\n    enumerable: true,\n    get: function() {\n        return upload_1.GridFSBucketWriteStream;\n    }\n}));\nconst mongo_client_1 = __webpack_require__(/*! ./mongo_client */ \"(ssr)/./node_modules/mongodb/lib/mongo_client.js\");\nObject.defineProperty(exports, \"MongoClient\", ({\n    enumerable: true,\n    get: function() {\n        return mongo_client_1.MongoClient;\n    }\n}));\nconst mongo_types_1 = __webpack_require__(/*! ./mongo_types */ \"(ssr)/./node_modules/mongodb/lib/mongo_types.js\");\nObject.defineProperty(exports, \"CancellationToken\", ({\n    enumerable: true,\n    get: function() {\n        return mongo_types_1.CancellationToken;\n    }\n}));\nconst sessions_1 = __webpack_require__(/*! ./sessions */ \"(ssr)/./node_modules/mongodb/lib/sessions.js\");\nObject.defineProperty(exports, \"ClientSession\", ({\n    enumerable: true,\n    get: function() {\n        return sessions_1.ClientSession;\n    }\n}));\n/** @public */ var bson_1 = __webpack_require__(/*! ./bson */ \"(ssr)/./node_modules/mongodb/lib/bson.js\");\nObject.defineProperty(exports, \"BSON\", ({\n    enumerable: true,\n    get: function() {\n        return bson_1.BSON;\n    }\n}));\nvar bson_2 = __webpack_require__(/*! ./bson */ \"(ssr)/./node_modules/mongodb/lib/bson.js\");\nObject.defineProperty(exports, \"Binary\", ({\n    enumerable: true,\n    get: function() {\n        return bson_2.Binary;\n    }\n}));\nObject.defineProperty(exports, \"BSONRegExp\", ({\n    enumerable: true,\n    get: function() {\n        return bson_2.BSONRegExp;\n    }\n}));\nObject.defineProperty(exports, \"BSONSymbol\", ({\n    enumerable: true,\n    get: function() {\n        return bson_2.BSONSymbol;\n    }\n}));\nObject.defineProperty(exports, \"BSONType\", ({\n    enumerable: true,\n    get: function() {\n        return bson_2.BSONType;\n    }\n}));\nObject.defineProperty(exports, \"Code\", ({\n    enumerable: true,\n    get: function() {\n        return bson_2.Code;\n    }\n}));\nObject.defineProperty(exports, \"DBRef\", ({\n    enumerable: true,\n    get: function() {\n        return bson_2.DBRef;\n    }\n}));\nObject.defineProperty(exports, \"Decimal128\", ({\n    enumerable: true,\n    get: function() {\n        return bson_2.Decimal128;\n    }\n}));\nObject.defineProperty(exports, \"Double\", ({\n    enumerable: true,\n    get: function() {\n        return bson_2.Double;\n    }\n}));\nObject.defineProperty(exports, \"Int32\", ({\n    enumerable: true,\n    get: function() {\n        return bson_2.Int32;\n    }\n}));\nObject.defineProperty(exports, \"Long\", ({\n    enumerable: true,\n    get: function() {\n        return bson_2.Long;\n    }\n}));\nObject.defineProperty(exports, \"MaxKey\", ({\n    enumerable: true,\n    get: function() {\n        return bson_2.MaxKey;\n    }\n}));\nObject.defineProperty(exports, \"MinKey\", ({\n    enumerable: true,\n    get: function() {\n        return bson_2.MinKey;\n    }\n}));\nObject.defineProperty(exports, \"ObjectId\", ({\n    enumerable: true,\n    get: function() {\n        return bson_2.ObjectId;\n    }\n}));\nObject.defineProperty(exports, \"Timestamp\", ({\n    enumerable: true,\n    get: function() {\n        return bson_2.Timestamp;\n    }\n}));\nObject.defineProperty(exports, \"UUID\", ({\n    enumerable: true,\n    get: function() {\n        return bson_2.UUID;\n    }\n}));\nvar common_1 = __webpack_require__(/*! ./bulk/common */ \"(ssr)/./node_modules/mongodb/lib/bulk/common.js\");\nObject.defineProperty(exports, \"MongoBulkWriteError\", ({\n    enumerable: true,\n    get: function() {\n        return common_1.MongoBulkWriteError;\n    }\n}));\nvar client_encryption_1 = __webpack_require__(/*! ./client-side-encryption/client_encryption */ \"(ssr)/./node_modules/mongodb/lib/client-side-encryption/client_encryption.js\");\nObject.defineProperty(exports, \"ClientEncryption\", ({\n    enumerable: true,\n    get: function() {\n        return client_encryption_1.ClientEncryption;\n    }\n}));\nvar change_stream_cursor_1 = __webpack_require__(/*! ./cursor/change_stream_cursor */ \"(ssr)/./node_modules/mongodb/lib/cursor/change_stream_cursor.js\");\nObject.defineProperty(exports, \"ChangeStreamCursor\", ({\n    enumerable: true,\n    get: function() {\n        return change_stream_cursor_1.ChangeStreamCursor;\n    }\n}));\nvar error_1 = __webpack_require__(/*! ./error */ \"(ssr)/./node_modules/mongodb/lib/error.js\");\nObject.defineProperty(exports, \"MongoAPIError\", ({\n    enumerable: true,\n    get: function() {\n        return error_1.MongoAPIError;\n    }\n}));\nObject.defineProperty(exports, \"MongoAWSError\", ({\n    enumerable: true,\n    get: function() {\n        return error_1.MongoAWSError;\n    }\n}));\nObject.defineProperty(exports, \"MongoAzureError\", ({\n    enumerable: true,\n    get: function() {\n        return error_1.MongoAzureError;\n    }\n}));\nObject.defineProperty(exports, \"MongoBatchReExecutionError\", ({\n    enumerable: true,\n    get: function() {\n        return error_1.MongoBatchReExecutionError;\n    }\n}));\nObject.defineProperty(exports, \"MongoChangeStreamError\", ({\n    enumerable: true,\n    get: function() {\n        return error_1.MongoChangeStreamError;\n    }\n}));\nObject.defineProperty(exports, \"MongoCompatibilityError\", ({\n    enumerable: true,\n    get: function() {\n        return error_1.MongoCompatibilityError;\n    }\n}));\nObject.defineProperty(exports, \"MongoCursorExhaustedError\", ({\n    enumerable: true,\n    get: function() {\n        return error_1.MongoCursorExhaustedError;\n    }\n}));\nObject.defineProperty(exports, \"MongoCursorInUseError\", ({\n    enumerable: true,\n    get: function() {\n        return error_1.MongoCursorInUseError;\n    }\n}));\nObject.defineProperty(exports, \"MongoDecompressionError\", ({\n    enumerable: true,\n    get: function() {\n        return error_1.MongoDecompressionError;\n    }\n}));\nObject.defineProperty(exports, \"MongoDriverError\", ({\n    enumerable: true,\n    get: function() {\n        return error_1.MongoDriverError;\n    }\n}));\nObject.defineProperty(exports, \"MongoError\", ({\n    enumerable: true,\n    get: function() {\n        return error_1.MongoError;\n    }\n}));\nObject.defineProperty(exports, \"MongoExpiredSessionError\", ({\n    enumerable: true,\n    get: function() {\n        return error_1.MongoExpiredSessionError;\n    }\n}));\nObject.defineProperty(exports, \"MongoGridFSChunkError\", ({\n    enumerable: true,\n    get: function() {\n        return error_1.MongoGridFSChunkError;\n    }\n}));\nObject.defineProperty(exports, \"MongoGridFSStreamError\", ({\n    enumerable: true,\n    get: function() {\n        return error_1.MongoGridFSStreamError;\n    }\n}));\nObject.defineProperty(exports, \"MongoInvalidArgumentError\", ({\n    enumerable: true,\n    get: function() {\n        return error_1.MongoInvalidArgumentError;\n    }\n}));\nObject.defineProperty(exports, \"MongoKerberosError\", ({\n    enumerable: true,\n    get: function() {\n        return error_1.MongoKerberosError;\n    }\n}));\nObject.defineProperty(exports, \"MongoMissingCredentialsError\", ({\n    enumerable: true,\n    get: function() {\n        return error_1.MongoMissingCredentialsError;\n    }\n}));\nObject.defineProperty(exports, \"MongoMissingDependencyError\", ({\n    enumerable: true,\n    get: function() {\n        return error_1.MongoMissingDependencyError;\n    }\n}));\nObject.defineProperty(exports, \"MongoNetworkError\", ({\n    enumerable: true,\n    get: function() {\n        return error_1.MongoNetworkError;\n    }\n}));\nObject.defineProperty(exports, \"MongoNetworkTimeoutError\", ({\n    enumerable: true,\n    get: function() {\n        return error_1.MongoNetworkTimeoutError;\n    }\n}));\nObject.defineProperty(exports, \"MongoNotConnectedError\", ({\n    enumerable: true,\n    get: function() {\n        return error_1.MongoNotConnectedError;\n    }\n}));\nObject.defineProperty(exports, \"MongoParseError\", ({\n    enumerable: true,\n    get: function() {\n        return error_1.MongoParseError;\n    }\n}));\nObject.defineProperty(exports, \"MongoRuntimeError\", ({\n    enumerable: true,\n    get: function() {\n        return error_1.MongoRuntimeError;\n    }\n}));\nObject.defineProperty(exports, \"MongoServerClosedError\", ({\n    enumerable: true,\n    get: function() {\n        return error_1.MongoServerClosedError;\n    }\n}));\nObject.defineProperty(exports, \"MongoServerError\", ({\n    enumerable: true,\n    get: function() {\n        return error_1.MongoServerError;\n    }\n}));\nObject.defineProperty(exports, \"MongoServerSelectionError\", ({\n    enumerable: true,\n    get: function() {\n        return error_1.MongoServerSelectionError;\n    }\n}));\nObject.defineProperty(exports, \"MongoSystemError\", ({\n    enumerable: true,\n    get: function() {\n        return error_1.MongoSystemError;\n    }\n}));\nObject.defineProperty(exports, \"MongoTailableCursorError\", ({\n    enumerable: true,\n    get: function() {\n        return error_1.MongoTailableCursorError;\n    }\n}));\nObject.defineProperty(exports, \"MongoTopologyClosedError\", ({\n    enumerable: true,\n    get: function() {\n        return error_1.MongoTopologyClosedError;\n    }\n}));\nObject.defineProperty(exports, \"MongoTransactionError\", ({\n    enumerable: true,\n    get: function() {\n        return error_1.MongoTransactionError;\n    }\n}));\nObject.defineProperty(exports, \"MongoUnexpectedServerResponseError\", ({\n    enumerable: true,\n    get: function() {\n        return error_1.MongoUnexpectedServerResponseError;\n    }\n}));\nObject.defineProperty(exports, \"MongoWriteConcernError\", ({\n    enumerable: true,\n    get: function() {\n        return error_1.MongoWriteConcernError;\n    }\n}));\n// enums\nvar common_2 = __webpack_require__(/*! ./bulk/common */ \"(ssr)/./node_modules/mongodb/lib/bulk/common.js\");\nObject.defineProperty(exports, \"BatchType\", ({\n    enumerable: true,\n    get: function() {\n        return common_2.BatchType;\n    }\n}));\nvar auto_encrypter_1 = __webpack_require__(/*! ./client-side-encryption/auto_encrypter */ \"(ssr)/./node_modules/mongodb/lib/client-side-encryption/auto_encrypter.js\");\nObject.defineProperty(exports, \"AutoEncryptionLoggerLevel\", ({\n    enumerable: true,\n    get: function() {\n        return auto_encrypter_1.AutoEncryptionLoggerLevel;\n    }\n}));\nvar gssapi_1 = __webpack_require__(/*! ./cmap/auth/gssapi */ \"(ssr)/./node_modules/mongodb/lib/cmap/auth/gssapi.js\");\nObject.defineProperty(exports, \"GSSAPICanonicalizationValue\", ({\n    enumerable: true,\n    get: function() {\n        return gssapi_1.GSSAPICanonicalizationValue;\n    }\n}));\nvar providers_1 = __webpack_require__(/*! ./cmap/auth/providers */ \"(ssr)/./node_modules/mongodb/lib/cmap/auth/providers.js\");\nObject.defineProperty(exports, \"AuthMechanism\", ({\n    enumerable: true,\n    get: function() {\n        return providers_1.AuthMechanism;\n    }\n}));\nvar compression_1 = __webpack_require__(/*! ./cmap/wire_protocol/compression */ \"(ssr)/./node_modules/mongodb/lib/cmap/wire_protocol/compression.js\");\nObject.defineProperty(exports, \"Compressor\", ({\n    enumerable: true,\n    get: function() {\n        return compression_1.Compressor;\n    }\n}));\nvar abstract_cursor_2 = __webpack_require__(/*! ./cursor/abstract_cursor */ \"(ssr)/./node_modules/mongodb/lib/cursor/abstract_cursor.js\");\nObject.defineProperty(exports, \"CURSOR_FLAGS\", ({\n    enumerable: true,\n    get: function() {\n        return abstract_cursor_2.CURSOR_FLAGS;\n    }\n}));\nvar error_2 = __webpack_require__(/*! ./error */ \"(ssr)/./node_modules/mongodb/lib/error.js\");\nObject.defineProperty(exports, \"MongoErrorLabel\", ({\n    enumerable: true,\n    get: function() {\n        return error_2.MongoErrorLabel;\n    }\n}));\nvar explain_1 = __webpack_require__(/*! ./explain */ \"(ssr)/./node_modules/mongodb/lib/explain.js\");\nObject.defineProperty(exports, \"ExplainVerbosity\", ({\n    enumerable: true,\n    get: function() {\n        return explain_1.ExplainVerbosity;\n    }\n}));\nvar mongo_client_2 = __webpack_require__(/*! ./mongo_client */ \"(ssr)/./node_modules/mongodb/lib/mongo_client.js\");\nObject.defineProperty(exports, \"ServerApiVersion\", ({\n    enumerable: true,\n    get: function() {\n        return mongo_client_2.ServerApiVersion;\n    }\n}));\nvar find_and_modify_1 = __webpack_require__(/*! ./operations/find_and_modify */ \"(ssr)/./node_modules/mongodb/lib/operations/find_and_modify.js\");\nObject.defineProperty(exports, \"ReturnDocument\", ({\n    enumerable: true,\n    get: function() {\n        return find_and_modify_1.ReturnDocument;\n    }\n}));\nvar set_profiling_level_1 = __webpack_require__(/*! ./operations/set_profiling_level */ \"(ssr)/./node_modules/mongodb/lib/operations/set_profiling_level.js\");\nObject.defineProperty(exports, \"ProfilingLevel\", ({\n    enumerable: true,\n    get: function() {\n        return set_profiling_level_1.ProfilingLevel;\n    }\n}));\nvar read_concern_1 = __webpack_require__(/*! ./read_concern */ \"(ssr)/./node_modules/mongodb/lib/read_concern.js\");\nObject.defineProperty(exports, \"ReadConcernLevel\", ({\n    enumerable: true,\n    get: function() {\n        return read_concern_1.ReadConcernLevel;\n    }\n}));\nvar read_preference_1 = __webpack_require__(/*! ./read_preference */ \"(ssr)/./node_modules/mongodb/lib/read_preference.js\");\nObject.defineProperty(exports, \"ReadPreferenceMode\", ({\n    enumerable: true,\n    get: function() {\n        return read_preference_1.ReadPreferenceMode;\n    }\n}));\nvar common_3 = __webpack_require__(/*! ./sdam/common */ \"(ssr)/./node_modules/mongodb/lib/sdam/common.js\");\nObject.defineProperty(exports, \"ServerType\", ({\n    enumerable: true,\n    get: function() {\n        return common_3.ServerType;\n    }\n}));\nObject.defineProperty(exports, \"TopologyType\", ({\n    enumerable: true,\n    get: function() {\n        return common_3.TopologyType;\n    }\n}));\n// Helper classes\nvar read_concern_2 = __webpack_require__(/*! ./read_concern */ \"(ssr)/./node_modules/mongodb/lib/read_concern.js\");\nObject.defineProperty(exports, \"ReadConcern\", ({\n    enumerable: true,\n    get: function() {\n        return read_concern_2.ReadConcern;\n    }\n}));\nvar read_preference_2 = __webpack_require__(/*! ./read_preference */ \"(ssr)/./node_modules/mongodb/lib/read_preference.js\");\nObject.defineProperty(exports, \"ReadPreference\", ({\n    enumerable: true,\n    get: function() {\n        return read_preference_2.ReadPreference;\n    }\n}));\nvar write_concern_1 = __webpack_require__(/*! ./write_concern */ \"(ssr)/./node_modules/mongodb/lib/write_concern.js\");\nObject.defineProperty(exports, \"WriteConcern\", ({\n    enumerable: true,\n    get: function() {\n        return write_concern_1.WriteConcern;\n    }\n}));\n// events\nvar command_monitoring_events_1 = __webpack_require__(/*! ./cmap/command_monitoring_events */ \"(ssr)/./node_modules/mongodb/lib/cmap/command_monitoring_events.js\");\nObject.defineProperty(exports, \"CommandFailedEvent\", ({\n    enumerable: true,\n    get: function() {\n        return command_monitoring_events_1.CommandFailedEvent;\n    }\n}));\nObject.defineProperty(exports, \"CommandStartedEvent\", ({\n    enumerable: true,\n    get: function() {\n        return command_monitoring_events_1.CommandStartedEvent;\n    }\n}));\nObject.defineProperty(exports, \"CommandSucceededEvent\", ({\n    enumerable: true,\n    get: function() {\n        return command_monitoring_events_1.CommandSucceededEvent;\n    }\n}));\nvar connection_pool_events_1 = __webpack_require__(/*! ./cmap/connection_pool_events */ \"(ssr)/./node_modules/mongodb/lib/cmap/connection_pool_events.js\");\nObject.defineProperty(exports, \"ConnectionCheckedInEvent\", ({\n    enumerable: true,\n    get: function() {\n        return connection_pool_events_1.ConnectionCheckedInEvent;\n    }\n}));\nObject.defineProperty(exports, \"ConnectionCheckedOutEvent\", ({\n    enumerable: true,\n    get: function() {\n        return connection_pool_events_1.ConnectionCheckedOutEvent;\n    }\n}));\nObject.defineProperty(exports, \"ConnectionCheckOutFailedEvent\", ({\n    enumerable: true,\n    get: function() {\n        return connection_pool_events_1.ConnectionCheckOutFailedEvent;\n    }\n}));\nObject.defineProperty(exports, \"ConnectionCheckOutStartedEvent\", ({\n    enumerable: true,\n    get: function() {\n        return connection_pool_events_1.ConnectionCheckOutStartedEvent;\n    }\n}));\nObject.defineProperty(exports, \"ConnectionClosedEvent\", ({\n    enumerable: true,\n    get: function() {\n        return connection_pool_events_1.ConnectionClosedEvent;\n    }\n}));\nObject.defineProperty(exports, \"ConnectionCreatedEvent\", ({\n    enumerable: true,\n    get: function() {\n        return connection_pool_events_1.ConnectionCreatedEvent;\n    }\n}));\nObject.defineProperty(exports, \"ConnectionPoolClearedEvent\", ({\n    enumerable: true,\n    get: function() {\n        return connection_pool_events_1.ConnectionPoolClearedEvent;\n    }\n}));\nObject.defineProperty(exports, \"ConnectionPoolClosedEvent\", ({\n    enumerable: true,\n    get: function() {\n        return connection_pool_events_1.ConnectionPoolClosedEvent;\n    }\n}));\nObject.defineProperty(exports, \"ConnectionPoolCreatedEvent\", ({\n    enumerable: true,\n    get: function() {\n        return connection_pool_events_1.ConnectionPoolCreatedEvent;\n    }\n}));\nObject.defineProperty(exports, \"ConnectionPoolMonitoringEvent\", ({\n    enumerable: true,\n    get: function() {\n        return connection_pool_events_1.ConnectionPoolMonitoringEvent;\n    }\n}));\nObject.defineProperty(exports, \"ConnectionPoolReadyEvent\", ({\n    enumerable: true,\n    get: function() {\n        return connection_pool_events_1.ConnectionPoolReadyEvent;\n    }\n}));\nObject.defineProperty(exports, \"ConnectionReadyEvent\", ({\n    enumerable: true,\n    get: function() {\n        return connection_pool_events_1.ConnectionReadyEvent;\n    }\n}));\nvar events_1 = __webpack_require__(/*! ./sdam/events */ \"(ssr)/./node_modules/mongodb/lib/sdam/events.js\");\nObject.defineProperty(exports, \"ServerClosedEvent\", ({\n    enumerable: true,\n    get: function() {\n        return events_1.ServerClosedEvent;\n    }\n}));\nObject.defineProperty(exports, \"ServerDescriptionChangedEvent\", ({\n    enumerable: true,\n    get: function() {\n        return events_1.ServerDescriptionChangedEvent;\n    }\n}));\nObject.defineProperty(exports, \"ServerHeartbeatFailedEvent\", ({\n    enumerable: true,\n    get: function() {\n        return events_1.ServerHeartbeatFailedEvent;\n    }\n}));\nObject.defineProperty(exports, \"ServerHeartbeatStartedEvent\", ({\n    enumerable: true,\n    get: function() {\n        return events_1.ServerHeartbeatStartedEvent;\n    }\n}));\nObject.defineProperty(exports, \"ServerHeartbeatSucceededEvent\", ({\n    enumerable: true,\n    get: function() {\n        return events_1.ServerHeartbeatSucceededEvent;\n    }\n}));\nObject.defineProperty(exports, \"ServerOpeningEvent\", ({\n    enumerable: true,\n    get: function() {\n        return events_1.ServerOpeningEvent;\n    }\n}));\nObject.defineProperty(exports, \"TopologyClosedEvent\", ({\n    enumerable: true,\n    get: function() {\n        return events_1.TopologyClosedEvent;\n    }\n}));\nObject.defineProperty(exports, \"TopologyDescriptionChangedEvent\", ({\n    enumerable: true,\n    get: function() {\n        return events_1.TopologyDescriptionChangedEvent;\n    }\n}));\nObject.defineProperty(exports, \"TopologyOpeningEvent\", ({\n    enumerable: true,\n    get: function() {\n        return events_1.TopologyOpeningEvent;\n    }\n}));\nvar srv_polling_1 = __webpack_require__(/*! ./sdam/srv_polling */ \"(ssr)/./node_modules/mongodb/lib/sdam/srv_polling.js\");\nObject.defineProperty(exports, \"SrvPollingEvent\", ({\n    enumerable: true,\n    get: function() {\n        return srv_polling_1.SrvPollingEvent;\n    }\n}));\nvar errors_1 = __webpack_require__(/*! ./client-side-encryption/errors */ \"(ssr)/./node_modules/mongodb/lib/client-side-encryption/errors.js\");\nObject.defineProperty(exports, \"MongoCryptAzureKMSRequestError\", ({\n    enumerable: true,\n    get: function() {\n        return errors_1.MongoCryptAzureKMSRequestError;\n    }\n}));\nObject.defineProperty(exports, \"MongoCryptCreateDataKeyError\", ({\n    enumerable: true,\n    get: function() {\n        return errors_1.MongoCryptCreateDataKeyError;\n    }\n}));\nObject.defineProperty(exports, \"MongoCryptCreateEncryptedCollectionError\", ({\n    enumerable: true,\n    get: function() {\n        return errors_1.MongoCryptCreateEncryptedCollectionError;\n    }\n}));\nObject.defineProperty(exports, \"MongoCryptError\", ({\n    enumerable: true,\n    get: function() {\n        return errors_1.MongoCryptError;\n    }\n}));\nObject.defineProperty(exports, \"MongoCryptInvalidArgumentError\", ({\n    enumerable: true,\n    get: function() {\n        return errors_1.MongoCryptInvalidArgumentError;\n    }\n}));\nObject.defineProperty(exports, \"MongoCryptKMSRequestNetworkTimeoutError\", ({\n    enumerable: true,\n    get: function() {\n        return errors_1.MongoCryptKMSRequestNetworkTimeoutError;\n    }\n})); //# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongodb/lib/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongodb/lib/mongo_client.js":
/*!**************************************************!*\
  !*** ./node_modules/mongodb/lib/mongo_client.js ***!
  \**************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.MongoClient = exports.ServerApiVersion = void 0;\nconst fs_1 = __webpack_require__(/*! fs */ \"fs\");\nconst util_1 = __webpack_require__(/*! util */ \"util\");\nconst bson_1 = __webpack_require__(/*! ./bson */ \"(ssr)/./node_modules/mongodb/lib/bson.js\");\nconst change_stream_1 = __webpack_require__(/*! ./change_stream */ \"(ssr)/./node_modules/mongodb/lib/change_stream.js\");\nconst mongo_credentials_1 = __webpack_require__(/*! ./cmap/auth/mongo_credentials */ \"(ssr)/./node_modules/mongodb/lib/cmap/auth/mongo_credentials.js\");\nconst providers_1 = __webpack_require__(/*! ./cmap/auth/providers */ \"(ssr)/./node_modules/mongodb/lib/cmap/auth/providers.js\");\nconst connection_string_1 = __webpack_require__(/*! ./connection_string */ \"(ssr)/./node_modules/mongodb/lib/connection_string.js\");\nconst constants_1 = __webpack_require__(/*! ./constants */ \"(ssr)/./node_modules/mongodb/lib/constants.js\");\nconst db_1 = __webpack_require__(/*! ./db */ \"(ssr)/./node_modules/mongodb/lib/db.js\");\nconst error_1 = __webpack_require__(/*! ./error */ \"(ssr)/./node_modules/mongodb/lib/error.js\");\nconst mongo_logger_1 = __webpack_require__(/*! ./mongo_logger */ \"(ssr)/./node_modules/mongodb/lib/mongo_logger.js\");\nconst mongo_types_1 = __webpack_require__(/*! ./mongo_types */ \"(ssr)/./node_modules/mongodb/lib/mongo_types.js\");\nconst execute_operation_1 = __webpack_require__(/*! ./operations/execute_operation */ \"(ssr)/./node_modules/mongodb/lib/operations/execute_operation.js\");\nconst run_command_1 = __webpack_require__(/*! ./operations/run_command */ \"(ssr)/./node_modules/mongodb/lib/operations/run_command.js\");\nconst read_preference_1 = __webpack_require__(/*! ./read_preference */ \"(ssr)/./node_modules/mongodb/lib/read_preference.js\");\nconst server_selection_1 = __webpack_require__(/*! ./sdam/server_selection */ \"(ssr)/./node_modules/mongodb/lib/sdam/server_selection.js\");\nconst topology_1 = __webpack_require__(/*! ./sdam/topology */ \"(ssr)/./node_modules/mongodb/lib/sdam/topology.js\");\nconst sessions_1 = __webpack_require__(/*! ./sessions */ \"(ssr)/./node_modules/mongodb/lib/sessions.js\");\nconst utils_1 = __webpack_require__(/*! ./utils */ \"(ssr)/./node_modules/mongodb/lib/utils.js\");\n/** @public */ exports.ServerApiVersion = Object.freeze({\n    v1: \"1\"\n});\n/** @internal */ const kOptions = Symbol(\"options\");\n/**\n * The **MongoClient** class is a class that allows for making Connections to MongoDB.\n * @public\n *\n * @remarks\n * The programmatically provided options take precedence over the URI options.\n *\n * @example\n * ```ts\n * import { MongoClient } from 'mongodb';\n *\n * // Enable command monitoring for debugging\n * const client = new MongoClient('mongodb://localhost:27017', { monitorCommands: true });\n *\n * client.on('commandStarted', started => console.log(started));\n * client.db().collection('pets');\n * await client.insertOne({ name: 'spot', kind: 'dog' });\n * ```\n */ class MongoClient extends mongo_types_1.TypedEventEmitter {\n    constructor(url, options){\n        super();\n        this[kOptions] = (0, connection_string_1.parseOptions)(url, this, options);\n        this.mongoLogger = new mongo_logger_1.MongoLogger(this[kOptions].mongoLoggerOptions);\n        // eslint-disable-next-line @typescript-eslint/no-this-alias\n        const client = this;\n        // The internal state\n        this.s = {\n            url,\n            bsonOptions: (0, bson_1.resolveBSONOptions)(this[kOptions]),\n            namespace: (0, utils_1.ns)(\"admin\"),\n            hasBeenClosed: false,\n            sessionPool: new sessions_1.ServerSessionPool(this),\n            activeSessions: new Set(),\n            get options () {\n                return client[kOptions];\n            },\n            get readConcern () {\n                return client[kOptions].readConcern;\n            },\n            get writeConcern () {\n                return client[kOptions].writeConcern;\n            },\n            get readPreference () {\n                return client[kOptions].readPreference;\n            },\n            get isMongoClient () {\n                return true;\n            }\n        };\n        this.checkForNonGenuineHosts();\n    }\n    /** @internal */ checkForNonGenuineHosts() {\n        const documentDBHostnames = this[kOptions].hosts.filter((hostAddress)=>(0, utils_1.isHostMatch)(utils_1.DOCUMENT_DB_CHECK, hostAddress.host));\n        const srvHostIsDocumentDB = (0, utils_1.isHostMatch)(utils_1.DOCUMENT_DB_CHECK, this[kOptions].srvHost);\n        const cosmosDBHostnames = this[kOptions].hosts.filter((hostAddress)=>(0, utils_1.isHostMatch)(utils_1.COSMOS_DB_CHECK, hostAddress.host));\n        const srvHostIsCosmosDB = (0, utils_1.isHostMatch)(utils_1.COSMOS_DB_CHECK, this[kOptions].srvHost);\n        if (documentDBHostnames.length !== 0 || srvHostIsDocumentDB) {\n            this.mongoLogger.info(\"client\", utils_1.DOCUMENT_DB_MSG);\n        } else if (cosmosDBHostnames.length !== 0 || srvHostIsCosmosDB) {\n            this.mongoLogger.info(\"client\", utils_1.COSMOS_DB_MSG);\n        }\n    }\n    /** @see MongoOptions */ get options() {\n        return Object.freeze({\n            ...this[kOptions]\n        });\n    }\n    get serverApi() {\n        return this[kOptions].serverApi && Object.freeze({\n            ...this[kOptions].serverApi\n        });\n    }\n    /**\n     * Intended for APM use only\n     * @internal\n     */ get monitorCommands() {\n        return this[kOptions].monitorCommands;\n    }\n    set monitorCommands(value) {\n        this[kOptions].monitorCommands = value;\n    }\n    /** @internal */ get autoEncrypter() {\n        return this[kOptions].autoEncrypter;\n    }\n    get readConcern() {\n        return this.s.readConcern;\n    }\n    get writeConcern() {\n        return this.s.writeConcern;\n    }\n    get readPreference() {\n        return this.s.readPreference;\n    }\n    get bsonOptions() {\n        return this.s.bsonOptions;\n    }\n    /**\n     * Connect to MongoDB using a url\n     *\n     * @see docs.mongodb.org/manual/reference/connection-string/\n     */ async connect() {\n        if (this.connectionLock) {\n            return this.connectionLock;\n        }\n        try {\n            this.connectionLock = this._connect();\n            await this.connectionLock;\n        } finally{\n            // release\n            this.connectionLock = undefined;\n        }\n        return this;\n    }\n    /**\n     * Create a topology to open the connection, must be locked to avoid topology leaks in concurrency scenario.\n     * Locking is enforced by the connect method.\n     *\n     * @internal\n     */ async _connect() {\n        if (this.topology && this.topology.isConnected()) {\n            return this;\n        }\n        const options = this[kOptions];\n        if (options.tls) {\n            if (typeof options.tlsCAFile === \"string\") {\n                options.ca ??= await fs_1.promises.readFile(options.tlsCAFile);\n            }\n            if (typeof options.tlsCRLFile === \"string\") {\n                options.crl ??= await fs_1.promises.readFile(options.tlsCRLFile);\n            }\n            if (typeof options.tlsCertificateKeyFile === \"string\") {\n                if (!options.key || !options.cert) {\n                    const contents = await fs_1.promises.readFile(options.tlsCertificateKeyFile);\n                    options.key ??= contents;\n                    options.cert ??= contents;\n                }\n            }\n        }\n        if (typeof options.srvHost === \"string\") {\n            const hosts = await (0, connection_string_1.resolveSRVRecord)(options);\n            for (const [index, host] of hosts.entries()){\n                options.hosts[index] = host;\n            }\n        }\n        // It is important to perform validation of hosts AFTER SRV resolution, to check the real hostname,\n        // but BEFORE we even attempt connecting with a potentially not allowed hostname\n        if (options.credentials?.mechanism === providers_1.AuthMechanism.MONGODB_OIDC) {\n            const allowedHosts = options.credentials?.mechanismProperties?.ALLOWED_HOSTS || mongo_credentials_1.DEFAULT_ALLOWED_HOSTS;\n            const isServiceAuth = !!options.credentials?.mechanismProperties?.PROVIDER_NAME;\n            if (!isServiceAuth) {\n                for (const host of options.hosts){\n                    if (!(0, utils_1.hostMatchesWildcards)(host.toHostPort().host, allowedHosts)) {\n                        throw new error_1.MongoInvalidArgumentError(`Host '${host}' is not valid for OIDC authentication with ALLOWED_HOSTS of '${allowedHosts.join(\",\")}'`);\n                    }\n                }\n            }\n        }\n        this.topology = new topology_1.Topology(this, options.hosts, options);\n        // Events can be emitted before initialization is complete so we have to\n        // save the reference to the topology on the client ASAP if the event handlers need to access it\n        this.topology.once(topology_1.Topology.OPEN, ()=>this.emit(\"open\", this));\n        for (const event of constants_1.MONGO_CLIENT_EVENTS){\n            this.topology.on(event, (...args)=>this.emit(event, ...args));\n        }\n        const topologyConnect = async ()=>{\n            try {\n                await (0, util_1.promisify)((callback)=>this.topology?.connect(options, callback))();\n            } catch (error) {\n                this.topology?.close({\n                    force: true\n                });\n                throw error;\n            }\n        };\n        if (this.autoEncrypter) {\n            await this.autoEncrypter?.init();\n            await topologyConnect();\n            await options.encrypter.connectInternalClient();\n        } else {\n            await topologyConnect();\n        }\n        return this;\n    }\n    /**\n     * Close the client and its underlying connections\n     *\n     * @param force - Force close, emitting no events\n     */ async close(force = false) {\n        // There's no way to set hasBeenClosed back to false\n        Object.defineProperty(this.s, \"hasBeenClosed\", {\n            value: true,\n            enumerable: true,\n            configurable: false,\n            writable: false\n        });\n        const activeSessionEnds = Array.from(this.s.activeSessions, (session)=>session.endSession());\n        this.s.activeSessions.clear();\n        await Promise.all(activeSessionEnds);\n        if (this.topology == null) {\n            return;\n        }\n        // If we would attempt to select a server and get nothing back we short circuit\n        // to avoid the server selection timeout.\n        const selector = (0, server_selection_1.readPreferenceServerSelector)(read_preference_1.ReadPreference.primaryPreferred);\n        const topologyDescription = this.topology.description;\n        const serverDescriptions = Array.from(topologyDescription.servers.values());\n        const servers = selector(topologyDescription, serverDescriptions);\n        if (servers.length !== 0) {\n            const endSessions = Array.from(this.s.sessionPool.sessions, ({ id })=>id);\n            if (endSessions.length !== 0) {\n                await (0, execute_operation_1.executeOperation)(this, new run_command_1.RunAdminCommandOperation({\n                    endSessions\n                }, {\n                    readPreference: read_preference_1.ReadPreference.primaryPreferred,\n                    noResponse: true\n                })).catch(()=>null); // outcome does not matter;\n            }\n        }\n        // clear out references to old topology\n        const topology = this.topology;\n        this.topology = undefined;\n        await new Promise((resolve, reject)=>{\n            topology.close({\n                force\n            }, (error)=>{\n                if (error) return reject(error);\n                const { encrypter } = this[kOptions];\n                if (encrypter) {\n                    return encrypter.closeCallback(this, force, (error)=>{\n                        if (error) return reject(error);\n                        resolve();\n                    });\n                }\n                resolve();\n            });\n        });\n    }\n    /**\n     * Create a new Db instance sharing the current socket connections.\n     *\n     * @param dbName - The name of the database we want to use. If not provided, use database name from connection string.\n     * @param options - Optional settings for Db construction\n     */ db(dbName, options) {\n        options = options ?? {};\n        // Default to db from connection string if not provided\n        if (!dbName) {\n            dbName = this.options.dbName;\n        }\n        // Copy the options and add out internal override of the not shared flag\n        const finalOptions = Object.assign({}, this[kOptions], options);\n        // Return the db object\n        const db = new db_1.Db(this, dbName, finalOptions);\n        // Return the database\n        return db;\n    }\n    /**\n     * Connect to MongoDB using a url\n     *\n     * @remarks\n     * The programmatically provided options take precedence over the URI options.\n     *\n     * @see https://www.mongodb.com/docs/manual/reference/connection-string/\n     */ static async connect(url, options) {\n        const client = new this(url, options);\n        return client.connect();\n    }\n    /**\n     * Creates a new ClientSession. When using the returned session in an operation\n     * a corresponding ServerSession will be created.\n     *\n     * @remarks\n     * A ClientSession instance may only be passed to operations being performed on the same\n     * MongoClient it was started from.\n     */ startSession(options) {\n        const session = new sessions_1.ClientSession(this, this.s.sessionPool, {\n            explicit: true,\n            ...options\n        }, this[kOptions]);\n        this.s.activeSessions.add(session);\n        session.once(\"ended\", ()=>{\n            this.s.activeSessions.delete(session);\n        });\n        return session;\n    }\n    async withSession(optionsOrExecutor, executor) {\n        const options = {\n            // Always define an owner\n            owner: Symbol(),\n            // If it's an object inherit the options\n            ...typeof optionsOrExecutor === \"object\" ? optionsOrExecutor : {}\n        };\n        const withSessionCallback = typeof optionsOrExecutor === \"function\" ? optionsOrExecutor : executor;\n        if (withSessionCallback == null) {\n            throw new error_1.MongoInvalidArgumentError(\"Missing required callback parameter\");\n        }\n        const session = this.startSession(options);\n        try {\n            return await withSessionCallback(session);\n        } finally{\n            try {\n                await session.endSession();\n            } catch  {\n            // We are not concerned with errors from endSession()\n            }\n        }\n    }\n    /**\n     * Create a new Change Stream, watching for new changes (insertions, updates,\n     * replacements, deletions, and invalidations) in this cluster. Will ignore all\n     * changes to system collections, as well as the local, admin, and config databases.\n     *\n     * @remarks\n     * watch() accepts two generic arguments for distinct use cases:\n     * - The first is to provide the schema that may be defined for all the data within the current cluster\n     * - The second is to override the shape of the change stream document entirely, if it is not provided the type will default to ChangeStreamDocument of the first argument\n     *\n     * @param pipeline - An array of {@link https://www.mongodb.com/docs/manual/reference/operator/aggregation-pipeline/|aggregation pipeline stages} through which to pass change stream documents. This allows for filtering (using $match) and manipulating the change stream documents.\n     * @param options - Optional settings for the command\n     * @typeParam TSchema - Type of the data being detected by the change stream\n     * @typeParam TChange - Type of the whole change stream document emitted\n     */ watch(pipeline = [], options = {}) {\n        // Allow optionally not specifying a pipeline\n        if (!Array.isArray(pipeline)) {\n            options = pipeline;\n            pipeline = [];\n        }\n        return new change_stream_1.ChangeStream(this, pipeline, (0, utils_1.resolveOptions)(this, options));\n    }\n}\nexports.MongoClient = MongoClient; //# sourceMappingURL=mongo_client.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongodb/lib/mongo_client.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongodb/lib/mongo_logger.js":
/*!**************************************************!*\
  !*** ./node_modules/mongodb/lib/mongo_logger.js ***!
  \**************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.MongoLogger = exports.stringifyWithMaxLen = exports.createStdioLogger = exports.MongoLoggableComponent = exports.SEVERITY_LEVEL_MAP = exports.DEFAULT_MAX_DOCUMENT_LENGTH = exports.SeverityLevel = void 0;\nconst bson_1 = __webpack_require__(/*! bson */ \"(ssr)/./node_modules/bson/lib/bson.cjs\");\nconst util_1 = __webpack_require__(/*! util */ \"util\");\nconst constants_1 = __webpack_require__(/*! ./constants */ \"(ssr)/./node_modules/mongodb/lib/constants.js\");\nconst utils_1 = __webpack_require__(/*! ./utils */ \"(ssr)/./node_modules/mongodb/lib/utils.js\");\n/** @internal */ exports.SeverityLevel = Object.freeze({\n    EMERGENCY: \"emergency\",\n    ALERT: \"alert\",\n    CRITICAL: \"critical\",\n    ERROR: \"error\",\n    WARNING: \"warn\",\n    NOTICE: \"notice\",\n    INFORMATIONAL: \"info\",\n    DEBUG: \"debug\",\n    TRACE: \"trace\",\n    OFF: \"off\"\n});\n/** @internal */ exports.DEFAULT_MAX_DOCUMENT_LENGTH = 1000;\n/** @internal */ class SeverityLevelMap extends Map {\n    constructor(entries){\n        const newEntries = [];\n        for (const [level, value] of entries){\n            newEntries.push([\n                value,\n                level\n            ]);\n        }\n        newEntries.push(...entries);\n        super(newEntries);\n    }\n    getNumericSeverityLevel(severity) {\n        return this.get(severity);\n    }\n    getSeverityLevelName(level) {\n        return this.get(level);\n    }\n}\n/** @internal */ exports.SEVERITY_LEVEL_MAP = new SeverityLevelMap([\n    [\n        exports.SeverityLevel.OFF,\n        -Infinity\n    ],\n    [\n        exports.SeverityLevel.EMERGENCY,\n        0\n    ],\n    [\n        exports.SeverityLevel.ALERT,\n        1\n    ],\n    [\n        exports.SeverityLevel.CRITICAL,\n        2\n    ],\n    [\n        exports.SeverityLevel.ERROR,\n        3\n    ],\n    [\n        exports.SeverityLevel.WARNING,\n        4\n    ],\n    [\n        exports.SeverityLevel.NOTICE,\n        5\n    ],\n    [\n        exports.SeverityLevel.INFORMATIONAL,\n        6\n    ],\n    [\n        exports.SeverityLevel.DEBUG,\n        7\n    ],\n    [\n        exports.SeverityLevel.TRACE,\n        8\n    ]\n]);\n/** @internal */ exports.MongoLoggableComponent = Object.freeze({\n    COMMAND: \"command\",\n    TOPOLOGY: \"topology\",\n    SERVER_SELECTION: \"serverSelection\",\n    CONNECTION: \"connection\",\n    CLIENT: \"client\"\n});\n/**\n * Parses a string as one of SeverityLevel\n *\n * @param s - the value to be parsed\n * @returns one of SeverityLevel if value can be parsed as such, otherwise null\n */ function parseSeverityFromString(s) {\n    const validSeverities = Object.values(exports.SeverityLevel);\n    const lowerSeverity = s?.toLowerCase();\n    if (lowerSeverity != null && validSeverities.includes(lowerSeverity)) {\n        return lowerSeverity;\n    }\n    return null;\n}\n/** @internal */ function createStdioLogger(stream) {\n    return {\n        write: (log)=>{\n            stream.write((0, util_1.inspect)(log, {\n                compact: true,\n                breakLength: Infinity\n            }), \"utf-8\");\n            return;\n        }\n    };\n}\nexports.createStdioLogger = createStdioLogger;\n/**\n * resolves the MONGODB_LOG_PATH and mongodbLogPath options from the environment and the\n * mongo client options respectively. The mongodbLogPath can be either 'stdout', 'stderr', a NodeJS\n * Writable or an object which has a `write` method with the signature:\n * ```ts\n * write(log: Log): void\n * ```\n *\n * @returns the MongoDBLogWritable object to write logs to\n */ function resolveLogPath({ MONGODB_LOG_PATH }, { mongodbLogPath }) {\n    if (typeof mongodbLogPath === \"string\" && /^stderr$/i.test(mongodbLogPath)) {\n        return createStdioLogger(process.stderr);\n    }\n    if (typeof mongodbLogPath === \"string\" && /^stdout$/i.test(mongodbLogPath)) {\n        return createStdioLogger(process.stdout);\n    }\n    if (typeof mongodbLogPath === \"object\" && typeof mongodbLogPath?.write === \"function\") {\n        return mongodbLogPath;\n    }\n    if (MONGODB_LOG_PATH && /^stderr$/i.test(MONGODB_LOG_PATH)) {\n        return createStdioLogger(process.stderr);\n    }\n    if (MONGODB_LOG_PATH && /^stdout$/i.test(MONGODB_LOG_PATH)) {\n        return createStdioLogger(process.stdout);\n    }\n    return createStdioLogger(process.stderr);\n}\nfunction resolveSeverityConfiguration(clientOption, environmentOption, defaultSeverity) {\n    return parseSeverityFromString(clientOption) ?? parseSeverityFromString(environmentOption) ?? defaultSeverity;\n}\nfunction compareSeverity(s0, s1) {\n    const s0Num = exports.SEVERITY_LEVEL_MAP.getNumericSeverityLevel(s0);\n    const s1Num = exports.SEVERITY_LEVEL_MAP.getNumericSeverityLevel(s1);\n    return s0Num < s1Num ? -1 : s0Num > s1Num ? 1 : 0;\n}\n/** @internal */ function stringifyWithMaxLen(value, maxDocumentLength) {\n    const ejson = bson_1.EJSON.stringify(value);\n    return maxDocumentLength !== 0 && ejson.length > maxDocumentLength ? `${ejson.slice(0, maxDocumentLength)}...` : ejson;\n}\nexports.stringifyWithMaxLen = stringifyWithMaxLen;\nfunction isLogConvertible(obj) {\n    const objAsLogConvertible = obj;\n    // eslint-disable-next-line no-restricted-syntax\n    return objAsLogConvertible.toLog !== undefined && typeof objAsLogConvertible.toLog === \"function\";\n}\nfunction attachCommandFields(log, commandEvent) {\n    log.commandName = commandEvent.commandName;\n    log.requestId = commandEvent.requestId;\n    log.driverConnectionId = commandEvent?.connectionId;\n    const { host, port } = utils_1.HostAddress.fromString(commandEvent.address).toHostPort();\n    log.serverHost = host;\n    log.serverPort = port;\n    if (commandEvent?.serviceId) {\n        log.serviceId = commandEvent.serviceId.toHexString();\n    }\n    return log;\n}\nfunction attachConnectionFields(log, connectionPoolEvent) {\n    const { host, port } = utils_1.HostAddress.fromString(connectionPoolEvent.address).toHostPort();\n    log.serverHost = host;\n    log.serverPort = port;\n    return log;\n}\nfunction defaultLogTransform(logObject, maxDocumentLength = exports.DEFAULT_MAX_DOCUMENT_LENGTH) {\n    let log = Object.create(null);\n    switch(logObject.name){\n        case constants_1.COMMAND_STARTED:\n            log = attachCommandFields(log, logObject);\n            log.message = \"Command started\";\n            log.command = stringifyWithMaxLen(logObject.command, maxDocumentLength);\n            log.databaseName = logObject.databaseName;\n            return log;\n        case constants_1.COMMAND_SUCCEEDED:\n            log = attachCommandFields(log, logObject);\n            log.message = \"Command succeeded\";\n            log.durationMS = logObject.duration;\n            log.reply = stringifyWithMaxLen(logObject.reply, maxDocumentLength);\n            return log;\n        case constants_1.COMMAND_FAILED:\n            log = attachCommandFields(log, logObject);\n            log.message = \"Command failed\";\n            log.durationMS = logObject.duration;\n            log.failure = logObject.failure;\n            return log;\n        case constants_1.CONNECTION_POOL_CREATED:\n            log = attachConnectionFields(log, logObject);\n            log.message = \"Connection pool created\";\n            if (logObject.options) {\n                const { maxIdleTimeMS, minPoolSize, maxPoolSize, maxConnecting, waitQueueTimeoutMS } = logObject.options;\n                log = {\n                    ...log,\n                    maxIdleTimeMS,\n                    minPoolSize,\n                    maxPoolSize,\n                    maxConnecting,\n                    waitQueueTimeoutMS\n                };\n            }\n            return log;\n        case constants_1.CONNECTION_POOL_READY:\n            log = attachConnectionFields(log, logObject);\n            log.message = \"Connection pool ready\";\n            return log;\n        case constants_1.CONNECTION_POOL_CLEARED:\n            log = attachConnectionFields(log, logObject);\n            log.message = \"Connection pool cleared\";\n            if (logObject.serviceId?._bsontype === \"ObjectId\") {\n                log.serviceId = logObject.serviceId.toHexString();\n            }\n            return log;\n        case constants_1.CONNECTION_POOL_CLOSED:\n            log = attachConnectionFields(log, logObject);\n            log.message = \"Connection pool closed\";\n            return log;\n        case constants_1.CONNECTION_CREATED:\n            log = attachConnectionFields(log, logObject);\n            log.message = \"Connection created\";\n            log.driverConnectionId = logObject.connectionId;\n            return log;\n        case constants_1.CONNECTION_READY:\n            log = attachConnectionFields(log, logObject);\n            log.message = \"Connection ready\";\n            log.driverConnectionId = logObject.connectionId;\n            return log;\n        case constants_1.CONNECTION_CLOSED:\n            log = attachConnectionFields(log, logObject);\n            log.message = \"Connection closed\";\n            log.driverConnectionId = logObject.connectionId;\n            switch(logObject.reason){\n                case \"stale\":\n                    log.reason = \"Connection became stale because the pool was cleared\";\n                    break;\n                case \"idle\":\n                    log.reason = \"Connection has been available but unused for longer than the configured max idle time\";\n                    break;\n                case \"error\":\n                    log.reason = \"An error occurred while using the connection\";\n                    if (logObject.error) {\n                        log.error = logObject.error;\n                    }\n                    break;\n                case \"poolClosed\":\n                    log.reason = \"Connection pool was closed\";\n                    break;\n                default:\n                    log.reason = `Unknown close reason: ${logObject.reason}`;\n            }\n            return log;\n        case constants_1.CONNECTION_CHECK_OUT_STARTED:\n            log = attachConnectionFields(log, logObject);\n            log.message = \"Connection checkout started\";\n            return log;\n        case constants_1.CONNECTION_CHECK_OUT_FAILED:\n            log = attachConnectionFields(log, logObject);\n            log.message = \"Connection checkout failed\";\n            switch(logObject.reason){\n                case \"poolClosed\":\n                    log.reason = \"Connection pool was closed\";\n                    break;\n                case \"timeout\":\n                    log.reason = \"Wait queue timeout elapsed without a connection becoming available\";\n                    break;\n                case \"connectionError\":\n                    log.reason = \"An error occurred while trying to establish a new connection\";\n                    if (logObject.error) {\n                        log.error = logObject.error;\n                    }\n                    break;\n                default:\n                    log.reason = `Unknown close reason: ${logObject.reason}`;\n            }\n            return log;\n        case constants_1.CONNECTION_CHECKED_OUT:\n            log = attachConnectionFields(log, logObject);\n            log.message = \"Connection checked out\";\n            log.driverConnectionId = logObject.connectionId;\n            return log;\n        case constants_1.CONNECTION_CHECKED_IN:\n            log = attachConnectionFields(log, logObject);\n            log.message = \"Connection checked in\";\n            log.driverConnectionId = logObject.connectionId;\n            return log;\n        default:\n            for (const [key, value] of Object.entries(logObject)){\n                if (value != null) log[key] = value;\n            }\n    }\n    return log;\n}\n/** @internal */ class MongoLogger {\n    constructor(options){\n        /**\n         * This method should be used when logging errors that do not have a public driver API for\n         * reporting errors.\n         */ this.error = this.log.bind(this, \"error\");\n        /**\n         * This method should be used to log situations where undesirable application behaviour might\n         * occur. For example, failing to end sessions on `MongoClient.close`.\n         */ this.warn = this.log.bind(this, \"warn\");\n        /**\n         * This method should be used to report high-level information about normal driver behaviour.\n         * For example, the creation of a `MongoClient`.\n         */ this.info = this.log.bind(this, \"info\");\n        /**\n         * This method should be used to report information that would be helpful when debugging an\n         * application. For example, a command starting, succeeding or failing.\n         */ this.debug = this.log.bind(this, \"debug\");\n        /**\n         * This method should be used to report fine-grained details related to logic flow. For example,\n         * entering and exiting a function body.\n         */ this.trace = this.log.bind(this, \"trace\");\n        this.componentSeverities = options.componentSeverities;\n        this.maxDocumentLength = options.maxDocumentLength;\n        this.logDestination = options.logDestination;\n    }\n    log(severity, component, message) {\n        if (compareSeverity(severity, this.componentSeverities[component]) > 0) return;\n        let logMessage = {\n            t: new Date(),\n            c: component,\n            s: severity\n        };\n        if (typeof message === \"string\") {\n            logMessage.message = message;\n        } else if (typeof message === \"object\") {\n            if (isLogConvertible(message)) {\n                logMessage = {\n                    ...logMessage,\n                    ...message.toLog()\n                };\n            } else {\n                logMessage = {\n                    ...logMessage,\n                    ...defaultLogTransform(message, this.maxDocumentLength)\n                };\n            }\n        }\n        this.logDestination.write(logMessage);\n    }\n    /**\n     * Merges options set through environment variables and the MongoClient, preferring environment\n     * variables when both are set, and substituting defaults for values not set. Options set in\n     * constructor take precedence over both environment variables and MongoClient options.\n     *\n     * @remarks\n     * When parsing component severity levels, invalid values are treated as unset and replaced with\n     * the default severity.\n     *\n     * @param envOptions - options set for the logger from the environment\n     * @param clientOptions - options set for the logger in the MongoClient options\n     * @returns a MongoLoggerOptions object to be used when instantiating a new MongoLogger\n     */ static resolveOptions(envOptions, clientOptions) {\n        // client options take precedence over env options\n        const combinedOptions = {\n            ...envOptions,\n            ...clientOptions,\n            mongodbLogPath: resolveLogPath(envOptions, clientOptions)\n        };\n        const defaultSeverity = resolveSeverityConfiguration(combinedOptions.mongodbLogComponentSeverities?.default, combinedOptions.MONGODB_LOG_ALL, exports.SeverityLevel.OFF);\n        return {\n            componentSeverities: {\n                command: resolveSeverityConfiguration(combinedOptions.mongodbLogComponentSeverities?.command, combinedOptions.MONGODB_LOG_COMMAND, defaultSeverity),\n                topology: resolveSeverityConfiguration(combinedOptions.mongodbLogComponentSeverities?.topology, combinedOptions.MONGODB_LOG_TOPOLOGY, defaultSeverity),\n                serverSelection: resolveSeverityConfiguration(combinedOptions.mongodbLogComponentSeverities?.serverSelection, combinedOptions.MONGODB_LOG_SERVER_SELECTION, defaultSeverity),\n                connection: resolveSeverityConfiguration(combinedOptions.mongodbLogComponentSeverities?.connection, combinedOptions.MONGODB_LOG_CONNECTION, defaultSeverity),\n                client: resolveSeverityConfiguration(combinedOptions.mongodbLogComponentSeverities?.client, combinedOptions.MONGODB_LOG_CLIENT, defaultSeverity),\n                default: defaultSeverity\n            },\n            maxDocumentLength: combinedOptions.mongodbLogMaxDocumentLength ?? (0, utils_1.parseUnsignedInteger)(combinedOptions.MONGODB_LOG_MAX_DOCUMENT_LENGTH) ?? 1000,\n            logDestination: combinedOptions.mongodbLogPath\n        };\n    }\n}\nexports.MongoLogger = MongoLogger; //# sourceMappingURL=mongo_logger.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongodb/lib/mongo_logger.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongodb/lib/mongo_types.js":
/*!*************************************************!*\
  !*** ./node_modules/mongodb/lib/mongo_types.js ***!
  \*************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.CancellationToken = exports.TypedEventEmitter = void 0;\nconst events_1 = __webpack_require__(/*! events */ \"events\");\n/**\n * Typescript type safe event emitter\n * @public\n */ class TypedEventEmitter extends events_1.EventEmitter {\n    /** @internal */ emitAndLog(event, ...args) {\n        this.emit(event, ...args);\n        if (this.component) this.mongoLogger?.debug(this.component, args[0]);\n    }\n}\nexports.TypedEventEmitter = TypedEventEmitter;\n/** @public */ class CancellationToken extends TypedEventEmitter {\n}\nexports.CancellationToken = CancellationToken; //# sourceMappingURL=mongo_types.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbW9uZ29kYi9saWIvbW9uZ29fdHlwZXMuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYkEsOENBQTZDO0lBQUVHLE9BQU87QUFBSyxDQUFDLEVBQUM7QUFDN0RELHlCQUF5QixHQUFHQSx5QkFBeUIsR0FBRyxLQUFLO0FBQzdELE1BQU1JLFdBQVdDLG1CQUFPQSxDQUFDLHNCQUFRO0FBQ2pDOzs7Q0FHQyxHQUNELE1BQU1GLDBCQUEwQkMsU0FBU0UsWUFBWTtJQUNqRCxjQUFjLEdBQ2RDLFdBQVdDLEtBQUssRUFBRSxHQUFHQyxJQUFJLEVBQUU7UUFDdkIsSUFBSSxDQUFDQyxJQUFJLENBQUNGLFVBQVVDO1FBQ3BCLElBQUksSUFBSSxDQUFDRSxTQUFTLEVBQ2QsSUFBSSxDQUFDQyxXQUFXLEVBQUVDLE1BQU0sSUFBSSxDQUFDRixTQUFTLEVBQUVGLElBQUksQ0FBQyxFQUFFO0lBQ3ZEO0FBQ0o7QUFDQVQseUJBQXlCLEdBQUdHO0FBQzVCLFlBQVksR0FDWixNQUFNRCwwQkFBMEJDO0FBQ2hDO0FBQ0FILHlCQUF5QixHQUFHRSxtQkFDNUIsdUNBQXVDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYmxvZy1hcHBsaWNhdGlvbi8uL25vZGVfbW9kdWxlcy9tb25nb2RiL2xpYi9tb25nb190eXBlcy5qcz8xNDQ1Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5DYW5jZWxsYXRpb25Ub2tlbiA9IGV4cG9ydHMuVHlwZWRFdmVudEVtaXR0ZXIgPSB2b2lkIDA7XG5jb25zdCBldmVudHNfMSA9IHJlcXVpcmUoXCJldmVudHNcIik7XG4vKipcbiAqIFR5cGVzY3JpcHQgdHlwZSBzYWZlIGV2ZW50IGVtaXR0ZXJcbiAqIEBwdWJsaWNcbiAqL1xuY2xhc3MgVHlwZWRFdmVudEVtaXR0ZXIgZXh0ZW5kcyBldmVudHNfMS5FdmVudEVtaXR0ZXIge1xuICAgIC8qKiBAaW50ZXJuYWwgKi9cbiAgICBlbWl0QW5kTG9nKGV2ZW50LCAuLi5hcmdzKSB7XG4gICAgICAgIHRoaXMuZW1pdChldmVudCwgLi4uYXJncyk7XG4gICAgICAgIGlmICh0aGlzLmNvbXBvbmVudClcbiAgICAgICAgICAgIHRoaXMubW9uZ29Mb2dnZXI/LmRlYnVnKHRoaXMuY29tcG9uZW50LCBhcmdzWzBdKTtcbiAgICB9XG59XG5leHBvcnRzLlR5cGVkRXZlbnRFbWl0dGVyID0gVHlwZWRFdmVudEVtaXR0ZXI7XG4vKiogQHB1YmxpYyAqL1xuY2xhc3MgQ2FuY2VsbGF0aW9uVG9rZW4gZXh0ZW5kcyBUeXBlZEV2ZW50RW1pdHRlciB7XG59XG5leHBvcnRzLkNhbmNlbGxhdGlvblRva2VuID0gQ2FuY2VsbGF0aW9uVG9rZW47XG4vLyMgc291cmNlTWFwcGluZ1VSTD1tb25nb190eXBlcy5qcy5tYXAiXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJDYW5jZWxsYXRpb25Ub2tlbiIsIlR5cGVkRXZlbnRFbWl0dGVyIiwiZXZlbnRzXzEiLCJyZXF1aXJlIiwiRXZlbnRFbWl0dGVyIiwiZW1pdEFuZExvZyIsImV2ZW50IiwiYXJncyIsImVtaXQiLCJjb21wb25lbnQiLCJtb25nb0xvZ2dlciIsImRlYnVnIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongodb/lib/mongo_types.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongodb/lib/operations/aggregate.js":
/*!**********************************************************!*\
  !*** ./node_modules/mongodb/lib/operations/aggregate.js ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.AggregateOperation = exports.DB_AGGREGATE_COLLECTION = void 0;\nconst error_1 = __webpack_require__(/*! ../error */ \"(ssr)/./node_modules/mongodb/lib/error.js\");\nconst utils_1 = __webpack_require__(/*! ../utils */ \"(ssr)/./node_modules/mongodb/lib/utils.js\");\nconst write_concern_1 = __webpack_require__(/*! ../write_concern */ \"(ssr)/./node_modules/mongodb/lib/write_concern.js\");\nconst command_1 = __webpack_require__(/*! ./command */ \"(ssr)/./node_modules/mongodb/lib/operations/command.js\");\nconst operation_1 = __webpack_require__(/*! ./operation */ \"(ssr)/./node_modules/mongodb/lib/operations/operation.js\");\n/** @internal */ exports.DB_AGGREGATE_COLLECTION = 1;\nconst MIN_WIRE_VERSION_$OUT_READ_CONCERN_SUPPORT = 8;\n/** @internal */ class AggregateOperation extends command_1.CommandOperation {\n    constructor(ns, pipeline, options){\n        super(undefined, {\n            ...options,\n            dbName: ns.db\n        });\n        this.options = {\n            ...options\n        };\n        // Covers when ns.collection is null, undefined or the empty string, use DB_AGGREGATE_COLLECTION\n        this.target = ns.collection || exports.DB_AGGREGATE_COLLECTION;\n        this.pipeline = pipeline;\n        // determine if we have a write stage, override read preference if so\n        this.hasWriteStage = false;\n        if (typeof options?.out === \"string\") {\n            this.pipeline = this.pipeline.concat({\n                $out: options.out\n            });\n            this.hasWriteStage = true;\n        } else if (pipeline.length > 0) {\n            const finalStage = pipeline[pipeline.length - 1];\n            if (finalStage.$out || finalStage.$merge) {\n                this.hasWriteStage = true;\n            }\n        }\n        if (this.hasWriteStage) {\n            this.trySecondaryWrite = true;\n        } else {\n            delete this.options.writeConcern;\n        }\n        if (this.explain && this.writeConcern) {\n            throw new error_1.MongoInvalidArgumentError('Option \"explain\" cannot be used on an aggregate call with writeConcern');\n        }\n        if (options?.cursor != null && typeof options.cursor !== \"object\") {\n            throw new error_1.MongoInvalidArgumentError(\"Cursor options must be an object\");\n        }\n    }\n    get canRetryRead() {\n        return !this.hasWriteStage;\n    }\n    addToPipeline(stage) {\n        this.pipeline.push(stage);\n    }\n    async execute(server, session) {\n        const options = this.options;\n        const serverWireVersion = (0, utils_1.maxWireVersion)(server);\n        const command = {\n            aggregate: this.target,\n            pipeline: this.pipeline\n        };\n        if (this.hasWriteStage && serverWireVersion < MIN_WIRE_VERSION_$OUT_READ_CONCERN_SUPPORT) {\n            this.readConcern = undefined;\n        }\n        if (this.hasWriteStage && this.writeConcern) {\n            write_concern_1.WriteConcern.apply(command, this.writeConcern);\n        }\n        if (options.bypassDocumentValidation === true) {\n            command.bypassDocumentValidation = options.bypassDocumentValidation;\n        }\n        if (typeof options.allowDiskUse === \"boolean\") {\n            command.allowDiskUse = options.allowDiskUse;\n        }\n        if (options.hint) {\n            command.hint = options.hint;\n        }\n        if (options.let) {\n            command.let = options.let;\n        }\n        // we check for undefined specifically here to allow falsy values\n        // eslint-disable-next-line no-restricted-syntax\n        if (options.comment !== undefined) {\n            command.comment = options.comment;\n        }\n        command.cursor = options.cursor || {};\n        if (options.batchSize && !this.hasWriteStage) {\n            command.cursor.batchSize = options.batchSize;\n        }\n        return super.executeCommand(server, session, command);\n    }\n}\nexports.AggregateOperation = AggregateOperation;\n(0, operation_1.defineAspects)(AggregateOperation, [\n    operation_1.Aspect.READ_OPERATION,\n    operation_1.Aspect.RETRYABLE,\n    operation_1.Aspect.EXPLAINABLE,\n    operation_1.Aspect.CURSOR_CREATING\n]); //# sourceMappingURL=aggregate.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongodb/lib/operations/aggregate.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongodb/lib/operations/bulk_write.js":
/*!***********************************************************!*\
  !*** ./node_modules/mongodb/lib/operations/bulk_write.js ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.BulkWriteOperation = void 0;\nconst operation_1 = __webpack_require__(/*! ./operation */ \"(ssr)/./node_modules/mongodb/lib/operations/operation.js\");\n/** @internal */ class BulkWriteOperation extends operation_1.AbstractOperation {\n    constructor(collection, operations, options){\n        super(options);\n        this.options = options;\n        this.collection = collection;\n        this.operations = operations;\n    }\n    async execute(server, session) {\n        const coll = this.collection;\n        const operations = this.operations;\n        const options = {\n            ...this.options,\n            ...this.bsonOptions,\n            readPreference: this.readPreference\n        };\n        // Create the bulk operation\n        const bulk = options.ordered === false ? coll.initializeUnorderedBulkOp(options) : coll.initializeOrderedBulkOp(options);\n        // for each op go through and add to the bulk\n        for(let i = 0; i < operations.length; i++){\n            bulk.raw(operations[i]);\n        }\n        // Execute the bulk\n        const result = await bulk.execute({\n            ...options,\n            session\n        });\n        return result;\n    }\n}\nexports.BulkWriteOperation = BulkWriteOperation;\n(0, operation_1.defineAspects)(BulkWriteOperation, [\n    operation_1.Aspect.WRITE_OPERATION\n]); //# sourceMappingURL=bulk_write.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbW9uZ29kYi9saWIvb3BlcmF0aW9ucy9idWxrX3dyaXRlLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2JBLDhDQUE2QztJQUFFRyxPQUFPO0FBQUssQ0FBQyxFQUFDO0FBQzdERCwwQkFBMEIsR0FBRyxLQUFLO0FBQ2xDLE1BQU1HLGNBQWNDLG1CQUFPQSxDQUFDLDZFQUFhO0FBQ3pDLGNBQWMsR0FDZCxNQUFNRiwyQkFBMkJDLFlBQVlFLGlCQUFpQjtJQUMxREMsWUFBWUMsVUFBVSxFQUFFQyxVQUFVLEVBQUVDLE9BQU8sQ0FBRTtRQUN6QyxLQUFLLENBQUNBO1FBQ04sSUFBSSxDQUFDQSxPQUFPLEdBQUdBO1FBQ2YsSUFBSSxDQUFDRixVQUFVLEdBQUdBO1FBQ2xCLElBQUksQ0FBQ0MsVUFBVSxHQUFHQTtJQUN0QjtJQUNBLE1BQU1FLFFBQVFDLE1BQU0sRUFBRUMsT0FBTyxFQUFFO1FBQzNCLE1BQU1DLE9BQU8sSUFBSSxDQUFDTixVQUFVO1FBQzVCLE1BQU1DLGFBQWEsSUFBSSxDQUFDQSxVQUFVO1FBQ2xDLE1BQU1DLFVBQVU7WUFBRSxHQUFHLElBQUksQ0FBQ0EsT0FBTztZQUFFLEdBQUcsSUFBSSxDQUFDSyxXQUFXO1lBQUVDLGdCQUFnQixJQUFJLENBQUNBLGNBQWM7UUFBQztRQUM1Riw0QkFBNEI7UUFDNUIsTUFBTUMsT0FBT1AsUUFBUVEsT0FBTyxLQUFLLFFBQzNCSixLQUFLSyx5QkFBeUIsQ0FBQ1QsV0FDL0JJLEtBQUtNLHVCQUF1QixDQUFDVjtRQUNuQyw2Q0FBNkM7UUFDN0MsSUFBSyxJQUFJVyxJQUFJLEdBQUdBLElBQUlaLFdBQVdhLE1BQU0sRUFBRUQsSUFBSztZQUN4Q0osS0FBS00sR0FBRyxDQUFDZCxVQUFVLENBQUNZLEVBQUU7UUFDMUI7UUFDQSxtQkFBbUI7UUFDbkIsTUFBTUcsU0FBUyxNQUFNUCxLQUFLTixPQUFPLENBQUM7WUFBRSxHQUFHRCxPQUFPO1lBQUVHO1FBQVE7UUFDeEQsT0FBT1c7SUFDWDtBQUNKO0FBQ0F2QiwwQkFBMEIsR0FBR0U7QUFDNUIsSUFBR0MsWUFBWXFCLGFBQWEsRUFBRXRCLG9CQUFvQjtJQUFDQyxZQUFZc0IsTUFBTSxDQUFDQyxlQUFlO0NBQUMsR0FDdkYsc0NBQXNDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYmxvZy1hcHBsaWNhdGlvbi8uL25vZGVfbW9kdWxlcy9tb25nb2RiL2xpYi9vcGVyYXRpb25zL2J1bGtfd3JpdGUuanM/ZTJhZiJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuQnVsa1dyaXRlT3BlcmF0aW9uID0gdm9pZCAwO1xuY29uc3Qgb3BlcmF0aW9uXzEgPSByZXF1aXJlKFwiLi9vcGVyYXRpb25cIik7XG4vKiogQGludGVybmFsICovXG5jbGFzcyBCdWxrV3JpdGVPcGVyYXRpb24gZXh0ZW5kcyBvcGVyYXRpb25fMS5BYnN0cmFjdE9wZXJhdGlvbiB7XG4gICAgY29uc3RydWN0b3IoY29sbGVjdGlvbiwgb3BlcmF0aW9ucywgb3B0aW9ucykge1xuICAgICAgICBzdXBlcihvcHRpb25zKTtcbiAgICAgICAgdGhpcy5vcHRpb25zID0gb3B0aW9ucztcbiAgICAgICAgdGhpcy5jb2xsZWN0aW9uID0gY29sbGVjdGlvbjtcbiAgICAgICAgdGhpcy5vcGVyYXRpb25zID0gb3BlcmF0aW9ucztcbiAgICB9XG4gICAgYXN5bmMgZXhlY3V0ZShzZXJ2ZXIsIHNlc3Npb24pIHtcbiAgICAgICAgY29uc3QgY29sbCA9IHRoaXMuY29sbGVjdGlvbjtcbiAgICAgICAgY29uc3Qgb3BlcmF0aW9ucyA9IHRoaXMub3BlcmF0aW9ucztcbiAgICAgICAgY29uc3Qgb3B0aW9ucyA9IHsgLi4udGhpcy5vcHRpb25zLCAuLi50aGlzLmJzb25PcHRpb25zLCByZWFkUHJlZmVyZW5jZTogdGhpcy5yZWFkUHJlZmVyZW5jZSB9O1xuICAgICAgICAvLyBDcmVhdGUgdGhlIGJ1bGsgb3BlcmF0aW9uXG4gICAgICAgIGNvbnN0IGJ1bGsgPSBvcHRpb25zLm9yZGVyZWQgPT09IGZhbHNlXG4gICAgICAgICAgICA/IGNvbGwuaW5pdGlhbGl6ZVVub3JkZXJlZEJ1bGtPcChvcHRpb25zKVxuICAgICAgICAgICAgOiBjb2xsLmluaXRpYWxpemVPcmRlcmVkQnVsa09wKG9wdGlvbnMpO1xuICAgICAgICAvLyBmb3IgZWFjaCBvcCBnbyB0aHJvdWdoIGFuZCBhZGQgdG8gdGhlIGJ1bGtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBvcGVyYXRpb25zLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBidWxrLnJhdyhvcGVyYXRpb25zW2ldKTtcbiAgICAgICAgfVxuICAgICAgICAvLyBFeGVjdXRlIHRoZSBidWxrXG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IGJ1bGsuZXhlY3V0ZSh7IC4uLm9wdGlvbnMsIHNlc3Npb24gfSk7XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxufVxuZXhwb3J0cy5CdWxrV3JpdGVPcGVyYXRpb24gPSBCdWxrV3JpdGVPcGVyYXRpb247XG4oMCwgb3BlcmF0aW9uXzEuZGVmaW5lQXNwZWN0cykoQnVsa1dyaXRlT3BlcmF0aW9uLCBbb3BlcmF0aW9uXzEuQXNwZWN0LldSSVRFX09QRVJBVElPTl0pO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9YnVsa193cml0ZS5qcy5tYXAiXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJCdWxrV3JpdGVPcGVyYXRpb24iLCJvcGVyYXRpb25fMSIsInJlcXVpcmUiLCJBYnN0cmFjdE9wZXJhdGlvbiIsImNvbnN0cnVjdG9yIiwiY29sbGVjdGlvbiIsIm9wZXJhdGlvbnMiLCJvcHRpb25zIiwiZXhlY3V0ZSIsInNlcnZlciIsInNlc3Npb24iLCJjb2xsIiwiYnNvbk9wdGlvbnMiLCJyZWFkUHJlZmVyZW5jZSIsImJ1bGsiLCJvcmRlcmVkIiwiaW5pdGlhbGl6ZVVub3JkZXJlZEJ1bGtPcCIsImluaXRpYWxpemVPcmRlcmVkQnVsa09wIiwiaSIsImxlbmd0aCIsInJhdyIsInJlc3VsdCIsImRlZmluZUFzcGVjdHMiLCJBc3BlY3QiLCJXUklURV9PUEVSQVRJT04iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongodb/lib/operations/bulk_write.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongodb/lib/operations/collections.js":
/*!************************************************************!*\
  !*** ./node_modules/mongodb/lib/operations/collections.js ***!
  \************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.CollectionsOperation = void 0;\nconst collection_1 = __webpack_require__(/*! ../collection */ \"(ssr)/./node_modules/mongodb/lib/collection.js\");\nconst operation_1 = __webpack_require__(/*! ./operation */ \"(ssr)/./node_modules/mongodb/lib/operations/operation.js\");\n/** @internal */ class CollectionsOperation extends operation_1.AbstractOperation {\n    constructor(db, options){\n        super(options);\n        this.options = options;\n        this.db = db;\n    }\n    async execute(server, session) {\n        // Let's get the collection names\n        const documents = await this.db.listCollections({}, {\n            ...this.options,\n            nameOnly: true,\n            readPreference: this.readPreference,\n            session\n        }).toArray();\n        const collections = [];\n        for (const { name } of documents){\n            if (!name.includes(\"$\")) {\n                // Filter collections removing any illegal ones\n                collections.push(new collection_1.Collection(this.db, name, this.db.s.options));\n            }\n        }\n        // Return the collection objects\n        return collections;\n    }\n}\nexports.CollectionsOperation = CollectionsOperation; //# sourceMappingURL=collections.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbW9uZ29kYi9saWIvb3BlcmF0aW9ucy9jb2xsZWN0aW9ucy5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiQSw4Q0FBNkM7SUFBRUcsT0FBTztBQUFLLENBQUMsRUFBQztBQUM3REQsNEJBQTRCLEdBQUcsS0FBSztBQUNwQyxNQUFNRyxlQUFlQyxtQkFBT0EsQ0FBQyxxRUFBZTtBQUM1QyxNQUFNQyxjQUFjRCxtQkFBT0EsQ0FBQyw2RUFBYTtBQUN6QyxjQUFjLEdBQ2QsTUFBTUYsNkJBQTZCRyxZQUFZQyxpQkFBaUI7SUFDNURDLFlBQVlDLEVBQUUsRUFBRUMsT0FBTyxDQUFFO1FBQ3JCLEtBQUssQ0FBQ0E7UUFDTixJQUFJLENBQUNBLE9BQU8sR0FBR0E7UUFDZixJQUFJLENBQUNELEVBQUUsR0FBR0E7SUFDZDtJQUNBLE1BQU1FLFFBQVFDLE1BQU0sRUFBRUMsT0FBTyxFQUFFO1FBQzNCLGlDQUFpQztRQUNqQyxNQUFNQyxZQUFZLE1BQU0sSUFBSSxDQUFDTCxFQUFFLENBQzFCTSxlQUFlLENBQUMsQ0FBQyxHQUFHO1lBQUUsR0FBRyxJQUFJLENBQUNMLE9BQU87WUFBRU0sVUFBVTtZQUFNQyxnQkFBZ0IsSUFBSSxDQUFDQSxjQUFjO1lBQUVKO1FBQVEsR0FDcEdLLE9BQU87UUFDWixNQUFNQyxjQUFjLEVBQUU7UUFDdEIsS0FBSyxNQUFNLEVBQUVDLElBQUksRUFBRSxJQUFJTixVQUFXO1lBQzlCLElBQUksQ0FBQ00sS0FBS0MsUUFBUSxDQUFDLE1BQU07Z0JBQ3JCLCtDQUErQztnQkFDL0NGLFlBQVlHLElBQUksQ0FBQyxJQUFJbEIsYUFBYW1CLFVBQVUsQ0FBQyxJQUFJLENBQUNkLEVBQUUsRUFBRVcsTUFBTSxJQUFJLENBQUNYLEVBQUUsQ0FBQ2UsQ0FBQyxDQUFDZCxPQUFPO1lBQ2pGO1FBQ0o7UUFDQSxnQ0FBZ0M7UUFDaEMsT0FBT1M7SUFDWDtBQUNKO0FBQ0FsQiw0QkFBNEIsR0FBR0Usc0JBQy9CLHVDQUF1QyIsInNvdXJjZXMiOlsid2VicGFjazovL2Jsb2ctYXBwbGljYXRpb24vLi9ub2RlX21vZHVsZXMvbW9uZ29kYi9saWIvb3BlcmF0aW9ucy9jb2xsZWN0aW9ucy5qcz8xYjdkIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5Db2xsZWN0aW9uc09wZXJhdGlvbiA9IHZvaWQgMDtcbmNvbnN0IGNvbGxlY3Rpb25fMSA9IHJlcXVpcmUoXCIuLi9jb2xsZWN0aW9uXCIpO1xuY29uc3Qgb3BlcmF0aW9uXzEgPSByZXF1aXJlKFwiLi9vcGVyYXRpb25cIik7XG4vKiogQGludGVybmFsICovXG5jbGFzcyBDb2xsZWN0aW9uc09wZXJhdGlvbiBleHRlbmRzIG9wZXJhdGlvbl8xLkFic3RyYWN0T3BlcmF0aW9uIHtcbiAgICBjb25zdHJ1Y3RvcihkYiwgb3B0aW9ucykge1xuICAgICAgICBzdXBlcihvcHRpb25zKTtcbiAgICAgICAgdGhpcy5vcHRpb25zID0gb3B0aW9ucztcbiAgICAgICAgdGhpcy5kYiA9IGRiO1xuICAgIH1cbiAgICBhc3luYyBleGVjdXRlKHNlcnZlciwgc2Vzc2lvbikge1xuICAgICAgICAvLyBMZXQncyBnZXQgdGhlIGNvbGxlY3Rpb24gbmFtZXNcbiAgICAgICAgY29uc3QgZG9jdW1lbnRzID0gYXdhaXQgdGhpcy5kYlxuICAgICAgICAgICAgLmxpc3RDb2xsZWN0aW9ucyh7fSwgeyAuLi50aGlzLm9wdGlvbnMsIG5hbWVPbmx5OiB0cnVlLCByZWFkUHJlZmVyZW5jZTogdGhpcy5yZWFkUHJlZmVyZW5jZSwgc2Vzc2lvbiB9KVxuICAgICAgICAgICAgLnRvQXJyYXkoKTtcbiAgICAgICAgY29uc3QgY29sbGVjdGlvbnMgPSBbXTtcbiAgICAgICAgZm9yIChjb25zdCB7IG5hbWUgfSBvZiBkb2N1bWVudHMpIHtcbiAgICAgICAgICAgIGlmICghbmFtZS5pbmNsdWRlcygnJCcpKSB7XG4gICAgICAgICAgICAgICAgLy8gRmlsdGVyIGNvbGxlY3Rpb25zIHJlbW92aW5nIGFueSBpbGxlZ2FsIG9uZXNcbiAgICAgICAgICAgICAgICBjb2xsZWN0aW9ucy5wdXNoKG5ldyBjb2xsZWN0aW9uXzEuQ29sbGVjdGlvbih0aGlzLmRiLCBuYW1lLCB0aGlzLmRiLnMub3B0aW9ucykpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIC8vIFJldHVybiB0aGUgY29sbGVjdGlvbiBvYmplY3RzXG4gICAgICAgIHJldHVybiBjb2xsZWN0aW9ucztcbiAgICB9XG59XG5leHBvcnRzLkNvbGxlY3Rpb25zT3BlcmF0aW9uID0gQ29sbGVjdGlvbnNPcGVyYXRpb247XG4vLyMgc291cmNlTWFwcGluZ1VSTD1jb2xsZWN0aW9ucy5qcy5tYXAiXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJDb2xsZWN0aW9uc09wZXJhdGlvbiIsImNvbGxlY3Rpb25fMSIsInJlcXVpcmUiLCJvcGVyYXRpb25fMSIsIkFic3RyYWN0T3BlcmF0aW9uIiwiY29uc3RydWN0b3IiLCJkYiIsIm9wdGlvbnMiLCJleGVjdXRlIiwic2VydmVyIiwic2Vzc2lvbiIsImRvY3VtZW50cyIsImxpc3RDb2xsZWN0aW9ucyIsIm5hbWVPbmx5IiwicmVhZFByZWZlcmVuY2UiLCJ0b0FycmF5IiwiY29sbGVjdGlvbnMiLCJuYW1lIiwiaW5jbHVkZXMiLCJwdXNoIiwiQ29sbGVjdGlvbiIsInMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongodb/lib/operations/collections.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongodb/lib/operations/command.js":
/*!********************************************************!*\
  !*** ./node_modules/mongodb/lib/operations/command.js ***!
  \********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.CommandOperation = void 0;\nconst error_1 = __webpack_require__(/*! ../error */ \"(ssr)/./node_modules/mongodb/lib/error.js\");\nconst explain_1 = __webpack_require__(/*! ../explain */ \"(ssr)/./node_modules/mongodb/lib/explain.js\");\nconst read_concern_1 = __webpack_require__(/*! ../read_concern */ \"(ssr)/./node_modules/mongodb/lib/read_concern.js\");\nconst server_selection_1 = __webpack_require__(/*! ../sdam/server_selection */ \"(ssr)/./node_modules/mongodb/lib/sdam/server_selection.js\");\nconst utils_1 = __webpack_require__(/*! ../utils */ \"(ssr)/./node_modules/mongodb/lib/utils.js\");\nconst write_concern_1 = __webpack_require__(/*! ../write_concern */ \"(ssr)/./node_modules/mongodb/lib/write_concern.js\");\nconst operation_1 = __webpack_require__(/*! ./operation */ \"(ssr)/./node_modules/mongodb/lib/operations/operation.js\");\n/** @internal */ class CommandOperation extends operation_1.AbstractOperation {\n    constructor(parent, options){\n        super(options);\n        this.options = options ?? {};\n        // NOTE: this was explicitly added for the add/remove user operations, it's likely\n        //       something we'd want to reconsider. Perhaps those commands can use `Admin`\n        //       as a parent?\n        const dbNameOverride = options?.dbName || options?.authdb;\n        if (dbNameOverride) {\n            this.ns = new utils_1.MongoDBNamespace(dbNameOverride, \"$cmd\");\n        } else {\n            this.ns = parent ? parent.s.namespace.withCollection(\"$cmd\") : new utils_1.MongoDBNamespace(\"admin\", \"$cmd\");\n        }\n        this.readConcern = read_concern_1.ReadConcern.fromOptions(options);\n        this.writeConcern = write_concern_1.WriteConcern.fromOptions(options);\n        if (this.hasAspect(operation_1.Aspect.EXPLAINABLE)) {\n            this.explain = explain_1.Explain.fromOptions(options);\n        } else if (options?.explain != null) {\n            throw new error_1.MongoInvalidArgumentError(`Option \"explain\" is not supported on this command`);\n        }\n    }\n    get canRetryWrite() {\n        if (this.hasAspect(operation_1.Aspect.EXPLAINABLE)) {\n            return this.explain == null;\n        }\n        return true;\n    }\n    async executeCommand(server, session, cmd) {\n        // TODO: consider making this a non-enumerable property\n        this.server = server;\n        const options = {\n            ...this.options,\n            ...this.bsonOptions,\n            readPreference: this.readPreference,\n            session\n        };\n        const serverWireVersion = (0, utils_1.maxWireVersion)(server);\n        const inTransaction = this.session && this.session.inTransaction();\n        if (this.readConcern && (0, utils_1.commandSupportsReadConcern)(cmd) && !inTransaction) {\n            Object.assign(cmd, {\n                readConcern: this.readConcern\n            });\n        }\n        if (this.trySecondaryWrite && serverWireVersion < server_selection_1.MIN_SECONDARY_WRITE_WIRE_VERSION) {\n            options.omitReadPreference = true;\n        }\n        if (this.writeConcern && this.hasAspect(operation_1.Aspect.WRITE_OPERATION) && !inTransaction) {\n            write_concern_1.WriteConcern.apply(cmd, this.writeConcern);\n        }\n        if (options.collation && typeof options.collation === \"object\" && !this.hasAspect(operation_1.Aspect.SKIP_COLLATION)) {\n            Object.assign(cmd, {\n                collation: options.collation\n            });\n        }\n        if (typeof options.maxTimeMS === \"number\") {\n            cmd.maxTimeMS = options.maxTimeMS;\n        }\n        if (this.hasAspect(operation_1.Aspect.EXPLAINABLE) && this.explain) {\n            cmd = (0, utils_1.decorateWithExplain)(cmd, this.explain);\n        }\n        return server.commandAsync(this.ns, cmd, options);\n    }\n}\nexports.CommandOperation = CommandOperation; //# sourceMappingURL=command.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongodb/lib/operations/command.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongodb/lib/operations/common_functions.js":
/*!*****************************************************************!*\
  !*** ./node_modules/mongodb/lib/operations/common_functions.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.prepareDocs = exports.indexInformation = void 0;\nasync function indexInformation(db, name, options) {\n    if (options == null) {\n        options = {};\n    }\n    // If we specified full information\n    const full = options.full == null ? false : options.full;\n    // Get the list of indexes of the specified collection\n    const indexes = await db.collection(name).listIndexes(options).toArray();\n    if (full) return indexes;\n    const info = {};\n    for (const index of indexes){\n        info[index.name] = Object.entries(index.key);\n    }\n    return info;\n}\nexports.indexInformation = indexInformation;\nfunction prepareDocs(coll, docs, options) {\n    const forceServerObjectId = typeof options.forceServerObjectId === \"boolean\" ? options.forceServerObjectId : coll.s.db.options?.forceServerObjectId;\n    // no need to modify the docs if server sets the ObjectId\n    if (forceServerObjectId === true) {\n        return docs;\n    }\n    return docs.map((doc)=>{\n        if (doc._id == null) {\n            doc._id = coll.s.pkFactory.createPk();\n        }\n        return doc;\n    });\n}\nexports.prepareDocs = prepareDocs; //# sourceMappingURL=common_functions.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbW9uZ29kYi9saWIvb3BlcmF0aW9ucy9jb21tb25fZnVuY3Rpb25zLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2JBLDhDQUE2QztJQUFFRyxPQUFPO0FBQUssQ0FBQyxFQUFDO0FBQzdERCxtQkFBbUIsR0FBR0Esd0JBQXdCLEdBQUcsS0FBSztBQUN0RCxlQUFlRyxpQkFBaUJDLEVBQUUsRUFBRUMsSUFBSSxFQUFFQyxPQUFPO0lBQzdDLElBQUlBLFdBQVcsTUFBTTtRQUNqQkEsVUFBVSxDQUFDO0lBQ2Y7SUFDQSxtQ0FBbUM7SUFDbkMsTUFBTUMsT0FBT0QsUUFBUUMsSUFBSSxJQUFJLE9BQU8sUUFBUUQsUUFBUUMsSUFBSTtJQUN4RCxzREFBc0Q7SUFDdEQsTUFBTUMsVUFBVSxNQUFNSixHQUFHSyxVQUFVLENBQUNKLE1BQU1LLFdBQVcsQ0FBQ0osU0FBU0ssT0FBTztJQUN0RSxJQUFJSixNQUNBLE9BQU9DO0lBQ1gsTUFBTUksT0FBTyxDQUFDO0lBQ2QsS0FBSyxNQUFNQyxTQUFTTCxRQUFTO1FBQ3pCSSxJQUFJLENBQUNDLE1BQU1SLElBQUksQ0FBQyxHQUFHUCxPQUFPZ0IsT0FBTyxDQUFDRCxNQUFNRSxHQUFHO0lBQy9DO0lBQ0EsT0FBT0g7QUFDWDtBQUNBWix3QkFBd0IsR0FBR0c7QUFDM0IsU0FBU0QsWUFBWWMsSUFBSSxFQUFFQyxJQUFJLEVBQUVYLE9BQU87SUFDcEMsTUFBTVksc0JBQXNCLE9BQU9aLFFBQVFZLG1CQUFtQixLQUFLLFlBQzdEWixRQUFRWSxtQkFBbUIsR0FDM0JGLEtBQUtHLENBQUMsQ0FBQ2YsRUFBRSxDQUFDRSxPQUFPLEVBQUVZO0lBQ3pCLHlEQUF5RDtJQUN6RCxJQUFJQSx3QkFBd0IsTUFBTTtRQUM5QixPQUFPRDtJQUNYO0lBQ0EsT0FBT0EsS0FBS0csR0FBRyxDQUFDQyxDQUFBQTtRQUNaLElBQUlBLElBQUlDLEdBQUcsSUFBSSxNQUFNO1lBQ2pCRCxJQUFJQyxHQUFHLEdBQUdOLEtBQUtHLENBQUMsQ0FBQ0ksU0FBUyxDQUFDQyxRQUFRO1FBQ3ZDO1FBQ0EsT0FBT0g7SUFDWDtBQUNKO0FBQ0FyQixtQkFBbUIsR0FBR0UsYUFDdEIsNENBQTRDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYmxvZy1hcHBsaWNhdGlvbi8uL25vZGVfbW9kdWxlcy9tb25nb2RiL2xpYi9vcGVyYXRpb25zL2NvbW1vbl9mdW5jdGlvbnMuanM/NDk4NiJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMucHJlcGFyZURvY3MgPSBleHBvcnRzLmluZGV4SW5mb3JtYXRpb24gPSB2b2lkIDA7XG5hc3luYyBmdW5jdGlvbiBpbmRleEluZm9ybWF0aW9uKGRiLCBuYW1lLCBvcHRpb25zKSB7XG4gICAgaWYgKG9wdGlvbnMgPT0gbnVsbCkge1xuICAgICAgICBvcHRpb25zID0ge307XG4gICAgfVxuICAgIC8vIElmIHdlIHNwZWNpZmllZCBmdWxsIGluZm9ybWF0aW9uXG4gICAgY29uc3QgZnVsbCA9IG9wdGlvbnMuZnVsbCA9PSBudWxsID8gZmFsc2UgOiBvcHRpb25zLmZ1bGw7XG4gICAgLy8gR2V0IHRoZSBsaXN0IG9mIGluZGV4ZXMgb2YgdGhlIHNwZWNpZmllZCBjb2xsZWN0aW9uXG4gICAgY29uc3QgaW5kZXhlcyA9IGF3YWl0IGRiLmNvbGxlY3Rpb24obmFtZSkubGlzdEluZGV4ZXMob3B0aW9ucykudG9BcnJheSgpO1xuICAgIGlmIChmdWxsKVxuICAgICAgICByZXR1cm4gaW5kZXhlcztcbiAgICBjb25zdCBpbmZvID0ge307XG4gICAgZm9yIChjb25zdCBpbmRleCBvZiBpbmRleGVzKSB7XG4gICAgICAgIGluZm9baW5kZXgubmFtZV0gPSBPYmplY3QuZW50cmllcyhpbmRleC5rZXkpO1xuICAgIH1cbiAgICByZXR1cm4gaW5mbztcbn1cbmV4cG9ydHMuaW5kZXhJbmZvcm1hdGlvbiA9IGluZGV4SW5mb3JtYXRpb247XG5mdW5jdGlvbiBwcmVwYXJlRG9jcyhjb2xsLCBkb2NzLCBvcHRpb25zKSB7XG4gICAgY29uc3QgZm9yY2VTZXJ2ZXJPYmplY3RJZCA9IHR5cGVvZiBvcHRpb25zLmZvcmNlU2VydmVyT2JqZWN0SWQgPT09ICdib29sZWFuJ1xuICAgICAgICA/IG9wdGlvbnMuZm9yY2VTZXJ2ZXJPYmplY3RJZFxuICAgICAgICA6IGNvbGwucy5kYi5vcHRpb25zPy5mb3JjZVNlcnZlck9iamVjdElkO1xuICAgIC8vIG5vIG5lZWQgdG8gbW9kaWZ5IHRoZSBkb2NzIGlmIHNlcnZlciBzZXRzIHRoZSBPYmplY3RJZFxuICAgIGlmIChmb3JjZVNlcnZlck9iamVjdElkID09PSB0cnVlKSB7XG4gICAgICAgIHJldHVybiBkb2NzO1xuICAgIH1cbiAgICByZXR1cm4gZG9jcy5tYXAoZG9jID0+IHtcbiAgICAgICAgaWYgKGRvYy5faWQgPT0gbnVsbCkge1xuICAgICAgICAgICAgZG9jLl9pZCA9IGNvbGwucy5wa0ZhY3RvcnkuY3JlYXRlUGsoKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZG9jO1xuICAgIH0pO1xufVxuZXhwb3J0cy5wcmVwYXJlRG9jcyA9IHByZXBhcmVEb2NzO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Y29tbW9uX2Z1bmN0aW9ucy5qcy5tYXAiXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJwcmVwYXJlRG9jcyIsImluZGV4SW5mb3JtYXRpb24iLCJkYiIsIm5hbWUiLCJvcHRpb25zIiwiZnVsbCIsImluZGV4ZXMiLCJjb2xsZWN0aW9uIiwibGlzdEluZGV4ZXMiLCJ0b0FycmF5IiwiaW5mbyIsImluZGV4IiwiZW50cmllcyIsImtleSIsImNvbGwiLCJkb2NzIiwiZm9yY2VTZXJ2ZXJPYmplY3RJZCIsInMiLCJtYXAiLCJkb2MiLCJfaWQiLCJwa0ZhY3RvcnkiLCJjcmVhdGVQayJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongodb/lib/operations/common_functions.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongodb/lib/operations/count.js":
/*!******************************************************!*\
  !*** ./node_modules/mongodb/lib/operations/count.js ***!
  \******************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.CountOperation = void 0;\nconst command_1 = __webpack_require__(/*! ./command */ \"(ssr)/./node_modules/mongodb/lib/operations/command.js\");\nconst operation_1 = __webpack_require__(/*! ./operation */ \"(ssr)/./node_modules/mongodb/lib/operations/operation.js\");\n/** @internal */ class CountOperation extends command_1.CommandOperation {\n    constructor(namespace, filter, options){\n        super({\n            s: {\n                namespace: namespace\n            }\n        }, options);\n        this.options = options;\n        this.collectionName = namespace.collection;\n        this.query = filter;\n    }\n    async execute(server, session) {\n        const options = this.options;\n        const cmd = {\n            count: this.collectionName,\n            query: this.query\n        };\n        if (typeof options.limit === \"number\") {\n            cmd.limit = options.limit;\n        }\n        if (typeof options.skip === \"number\") {\n            cmd.skip = options.skip;\n        }\n        if (options.hint != null) {\n            cmd.hint = options.hint;\n        }\n        if (typeof options.maxTimeMS === \"number\") {\n            cmd.maxTimeMS = options.maxTimeMS;\n        }\n        const result = await super.executeCommand(server, session, cmd);\n        return result ? result.n : 0;\n    }\n}\nexports.CountOperation = CountOperation;\n(0, operation_1.defineAspects)(CountOperation, [\n    operation_1.Aspect.READ_OPERATION,\n    operation_1.Aspect.RETRYABLE\n]); //# sourceMappingURL=count.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbW9uZ29kYi9saWIvb3BlcmF0aW9ucy9jb3VudC5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiQSw4Q0FBNkM7SUFBRUcsT0FBTztBQUFLLENBQUMsRUFBQztBQUM3REQsc0JBQXNCLEdBQUcsS0FBSztBQUM5QixNQUFNRyxZQUFZQyxtQkFBT0EsQ0FBQyx5RUFBVztBQUNyQyxNQUFNQyxjQUFjRCxtQkFBT0EsQ0FBQyw2RUFBYTtBQUN6QyxjQUFjLEdBQ2QsTUFBTUYsdUJBQXVCQyxVQUFVRyxnQkFBZ0I7SUFDbkRDLFlBQVlDLFNBQVMsRUFBRUMsTUFBTSxFQUFFQyxPQUFPLENBQUU7UUFDcEMsS0FBSyxDQUFDO1lBQUVDLEdBQUc7Z0JBQUVILFdBQVdBO1lBQVU7UUFBRSxHQUFHRTtRQUN2QyxJQUFJLENBQUNBLE9BQU8sR0FBR0E7UUFDZixJQUFJLENBQUNFLGNBQWMsR0FBR0osVUFBVUssVUFBVTtRQUMxQyxJQUFJLENBQUNDLEtBQUssR0FBR0w7SUFDakI7SUFDQSxNQUFNTSxRQUFRQyxNQUFNLEVBQUVDLE9BQU8sRUFBRTtRQUMzQixNQUFNUCxVQUFVLElBQUksQ0FBQ0EsT0FBTztRQUM1QixNQUFNUSxNQUFNO1lBQ1JDLE9BQU8sSUFBSSxDQUFDUCxjQUFjO1lBQzFCRSxPQUFPLElBQUksQ0FBQ0EsS0FBSztRQUNyQjtRQUNBLElBQUksT0FBT0osUUFBUVUsS0FBSyxLQUFLLFVBQVU7WUFDbkNGLElBQUlFLEtBQUssR0FBR1YsUUFBUVUsS0FBSztRQUM3QjtRQUNBLElBQUksT0FBT1YsUUFBUVcsSUFBSSxLQUFLLFVBQVU7WUFDbENILElBQUlHLElBQUksR0FBR1gsUUFBUVcsSUFBSTtRQUMzQjtRQUNBLElBQUlYLFFBQVFZLElBQUksSUFBSSxNQUFNO1lBQ3RCSixJQUFJSSxJQUFJLEdBQUdaLFFBQVFZLElBQUk7UUFDM0I7UUFDQSxJQUFJLE9BQU9aLFFBQVFhLFNBQVMsS0FBSyxVQUFVO1lBQ3ZDTCxJQUFJSyxTQUFTLEdBQUdiLFFBQVFhLFNBQVM7UUFDckM7UUFDQSxNQUFNQyxTQUFTLE1BQU0sS0FBSyxDQUFDQyxlQUFlVCxRQUFRQyxTQUFTQztRQUMzRCxPQUFPTSxTQUFTQSxPQUFPRSxDQUFDLEdBQUc7SUFDL0I7QUFDSjtBQUNBMUIsc0JBQXNCLEdBQUdFO0FBQ3hCLElBQUdHLFlBQVlzQixhQUFhLEVBQUV6QixnQkFBZ0I7SUFBQ0csWUFBWXVCLE1BQU0sQ0FBQ0MsY0FBYztJQUFFeEIsWUFBWXVCLE1BQU0sQ0FBQ0UsU0FBUztDQUFDLEdBQ2hILGlDQUFpQyIsInNvdXJjZXMiOlsid2VicGFjazovL2Jsb2ctYXBwbGljYXRpb24vLi9ub2RlX21vZHVsZXMvbW9uZ29kYi9saWIvb3BlcmF0aW9ucy9jb3VudC5qcz83MjJmIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5Db3VudE9wZXJhdGlvbiA9IHZvaWQgMDtcbmNvbnN0IGNvbW1hbmRfMSA9IHJlcXVpcmUoXCIuL2NvbW1hbmRcIik7XG5jb25zdCBvcGVyYXRpb25fMSA9IHJlcXVpcmUoXCIuL29wZXJhdGlvblwiKTtcbi8qKiBAaW50ZXJuYWwgKi9cbmNsYXNzIENvdW50T3BlcmF0aW9uIGV4dGVuZHMgY29tbWFuZF8xLkNvbW1hbmRPcGVyYXRpb24ge1xuICAgIGNvbnN0cnVjdG9yKG5hbWVzcGFjZSwgZmlsdGVyLCBvcHRpb25zKSB7XG4gICAgICAgIHN1cGVyKHsgczogeyBuYW1lc3BhY2U6IG5hbWVzcGFjZSB9IH0sIG9wdGlvbnMpO1xuICAgICAgICB0aGlzLm9wdGlvbnMgPSBvcHRpb25zO1xuICAgICAgICB0aGlzLmNvbGxlY3Rpb25OYW1lID0gbmFtZXNwYWNlLmNvbGxlY3Rpb247XG4gICAgICAgIHRoaXMucXVlcnkgPSBmaWx0ZXI7XG4gICAgfVxuICAgIGFzeW5jIGV4ZWN1dGUoc2VydmVyLCBzZXNzaW9uKSB7XG4gICAgICAgIGNvbnN0IG9wdGlvbnMgPSB0aGlzLm9wdGlvbnM7XG4gICAgICAgIGNvbnN0IGNtZCA9IHtcbiAgICAgICAgICAgIGNvdW50OiB0aGlzLmNvbGxlY3Rpb25OYW1lLFxuICAgICAgICAgICAgcXVlcnk6IHRoaXMucXVlcnlcbiAgICAgICAgfTtcbiAgICAgICAgaWYgKHR5cGVvZiBvcHRpb25zLmxpbWl0ID09PSAnbnVtYmVyJykge1xuICAgICAgICAgICAgY21kLmxpbWl0ID0gb3B0aW9ucy5saW1pdDtcbiAgICAgICAgfVxuICAgICAgICBpZiAodHlwZW9mIG9wdGlvbnMuc2tpcCA9PT0gJ251bWJlcicpIHtcbiAgICAgICAgICAgIGNtZC5za2lwID0gb3B0aW9ucy5za2lwO1xuICAgICAgICB9XG4gICAgICAgIGlmIChvcHRpb25zLmhpbnQgIT0gbnVsbCkge1xuICAgICAgICAgICAgY21kLmhpbnQgPSBvcHRpb25zLmhpbnQ7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHR5cGVvZiBvcHRpb25zLm1heFRpbWVNUyA9PT0gJ251bWJlcicpIHtcbiAgICAgICAgICAgIGNtZC5tYXhUaW1lTVMgPSBvcHRpb25zLm1heFRpbWVNUztcbiAgICAgICAgfVxuICAgICAgICBjb25zdCByZXN1bHQgPSBhd2FpdCBzdXBlci5leGVjdXRlQ29tbWFuZChzZXJ2ZXIsIHNlc3Npb24sIGNtZCk7XG4gICAgICAgIHJldHVybiByZXN1bHQgPyByZXN1bHQubiA6IDA7XG4gICAgfVxufVxuZXhwb3J0cy5Db3VudE9wZXJhdGlvbiA9IENvdW50T3BlcmF0aW9uO1xuKDAsIG9wZXJhdGlvbl8xLmRlZmluZUFzcGVjdHMpKENvdW50T3BlcmF0aW9uLCBbb3BlcmF0aW9uXzEuQXNwZWN0LlJFQURfT1BFUkFUSU9OLCBvcGVyYXRpb25fMS5Bc3BlY3QuUkVUUllBQkxFXSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1jb3VudC5qcy5tYXAiXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJDb3VudE9wZXJhdGlvbiIsImNvbW1hbmRfMSIsInJlcXVpcmUiLCJvcGVyYXRpb25fMSIsIkNvbW1hbmRPcGVyYXRpb24iLCJjb25zdHJ1Y3RvciIsIm5hbWVzcGFjZSIsImZpbHRlciIsIm9wdGlvbnMiLCJzIiwiY29sbGVjdGlvbk5hbWUiLCJjb2xsZWN0aW9uIiwicXVlcnkiLCJleGVjdXRlIiwic2VydmVyIiwic2Vzc2lvbiIsImNtZCIsImNvdW50IiwibGltaXQiLCJza2lwIiwiaGludCIsIm1heFRpbWVNUyIsInJlc3VsdCIsImV4ZWN1dGVDb21tYW5kIiwibiIsImRlZmluZUFzcGVjdHMiLCJBc3BlY3QiLCJSRUFEX09QRVJBVElPTiIsIlJFVFJZQUJMRSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongodb/lib/operations/count.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongodb/lib/operations/count_documents.js":
/*!****************************************************************!*\
  !*** ./node_modules/mongodb/lib/operations/count_documents.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.CountDocumentsOperation = void 0;\nconst aggregate_1 = __webpack_require__(/*! ./aggregate */ \"(ssr)/./node_modules/mongodb/lib/operations/aggregate.js\");\n/** @internal */ class CountDocumentsOperation extends aggregate_1.AggregateOperation {\n    constructor(collection, query, options){\n        const pipeline = [];\n        pipeline.push({\n            $match: query\n        });\n        if (typeof options.skip === \"number\") {\n            pipeline.push({\n                $skip: options.skip\n            });\n        }\n        if (typeof options.limit === \"number\") {\n            pipeline.push({\n                $limit: options.limit\n            });\n        }\n        pipeline.push({\n            $group: {\n                _id: 1,\n                n: {\n                    $sum: 1\n                }\n            }\n        });\n        super(collection.s.namespace, pipeline, options);\n    }\n    async execute(server, session) {\n        const result = await super.execute(server, session);\n        // NOTE: We're avoiding creating a cursor here to reduce the callstack.\n        const response = result;\n        if (response.cursor == null || response.cursor.firstBatch == null) {\n            return 0;\n        }\n        const docs = response.cursor.firstBatch;\n        return docs.length ? docs[0].n : 0;\n    }\n}\nexports.CountDocumentsOperation = CountDocumentsOperation; //# sourceMappingURL=count_documents.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbW9uZ29kYi9saWIvb3BlcmF0aW9ucy9jb3VudF9kb2N1bWVudHMuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYkEsOENBQTZDO0lBQUVHLE9BQU87QUFBSyxDQUFDLEVBQUM7QUFDN0RELCtCQUErQixHQUFHLEtBQUs7QUFDdkMsTUFBTUcsY0FBY0MsbUJBQU9BLENBQUMsNkVBQWE7QUFDekMsY0FBYyxHQUNkLE1BQU1GLGdDQUFnQ0MsWUFBWUUsa0JBQWtCO0lBQ2hFQyxZQUFZQyxVQUFVLEVBQUVDLEtBQUssRUFBRUMsT0FBTyxDQUFFO1FBQ3BDLE1BQU1DLFdBQVcsRUFBRTtRQUNuQkEsU0FBU0MsSUFBSSxDQUFDO1lBQUVDLFFBQVFKO1FBQU07UUFDOUIsSUFBSSxPQUFPQyxRQUFRSSxJQUFJLEtBQUssVUFBVTtZQUNsQ0gsU0FBU0MsSUFBSSxDQUFDO2dCQUFFRyxPQUFPTCxRQUFRSSxJQUFJO1lBQUM7UUFDeEM7UUFDQSxJQUFJLE9BQU9KLFFBQVFNLEtBQUssS0FBSyxVQUFVO1lBQ25DTCxTQUFTQyxJQUFJLENBQUM7Z0JBQUVLLFFBQVFQLFFBQVFNLEtBQUs7WUFBQztRQUMxQztRQUNBTCxTQUFTQyxJQUFJLENBQUM7WUFBRU0sUUFBUTtnQkFBRUMsS0FBSztnQkFBR0MsR0FBRztvQkFBRUMsTUFBTTtnQkFBRTtZQUFFO1FBQUU7UUFDbkQsS0FBSyxDQUFDYixXQUFXYyxDQUFDLENBQUNDLFNBQVMsRUFBRVosVUFBVUQ7SUFDNUM7SUFDQSxNQUFNYyxRQUFRQyxNQUFNLEVBQUVDLE9BQU8sRUFBRTtRQUMzQixNQUFNQyxTQUFTLE1BQU0sS0FBSyxDQUFDSCxRQUFRQyxRQUFRQztRQUMzQyx1RUFBdUU7UUFDdkUsTUFBTUUsV0FBV0Q7UUFDakIsSUFBSUMsU0FBU0MsTUFBTSxJQUFJLFFBQVFELFNBQVNDLE1BQU0sQ0FBQ0MsVUFBVSxJQUFJLE1BQU07WUFDL0QsT0FBTztRQUNYO1FBQ0EsTUFBTUMsT0FBT0gsU0FBU0MsTUFBTSxDQUFDQyxVQUFVO1FBQ3ZDLE9BQU9DLEtBQUtDLE1BQU0sR0FBR0QsSUFBSSxDQUFDLEVBQUUsQ0FBQ1gsQ0FBQyxHQUFHO0lBQ3JDO0FBQ0o7QUFDQW5CLCtCQUErQixHQUFHRSx5QkFDbEMsMkNBQTJDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYmxvZy1hcHBsaWNhdGlvbi8uL25vZGVfbW9kdWxlcy9tb25nb2RiL2xpYi9vcGVyYXRpb25zL2NvdW50X2RvY3VtZW50cy5qcz8wMjU2Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5Db3VudERvY3VtZW50c09wZXJhdGlvbiA9IHZvaWQgMDtcbmNvbnN0IGFnZ3JlZ2F0ZV8xID0gcmVxdWlyZShcIi4vYWdncmVnYXRlXCIpO1xuLyoqIEBpbnRlcm5hbCAqL1xuY2xhc3MgQ291bnREb2N1bWVudHNPcGVyYXRpb24gZXh0ZW5kcyBhZ2dyZWdhdGVfMS5BZ2dyZWdhdGVPcGVyYXRpb24ge1xuICAgIGNvbnN0cnVjdG9yKGNvbGxlY3Rpb24sIHF1ZXJ5LCBvcHRpb25zKSB7XG4gICAgICAgIGNvbnN0IHBpcGVsaW5lID0gW107XG4gICAgICAgIHBpcGVsaW5lLnB1c2goeyAkbWF0Y2g6IHF1ZXJ5IH0pO1xuICAgICAgICBpZiAodHlwZW9mIG9wdGlvbnMuc2tpcCA9PT0gJ251bWJlcicpIHtcbiAgICAgICAgICAgIHBpcGVsaW5lLnB1c2goeyAkc2tpcDogb3B0aW9ucy5za2lwIH0pO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0eXBlb2Ygb3B0aW9ucy5saW1pdCA9PT0gJ251bWJlcicpIHtcbiAgICAgICAgICAgIHBpcGVsaW5lLnB1c2goeyAkbGltaXQ6IG9wdGlvbnMubGltaXQgfSk7XG4gICAgICAgIH1cbiAgICAgICAgcGlwZWxpbmUucHVzaCh7ICRncm91cDogeyBfaWQ6IDEsIG46IHsgJHN1bTogMSB9IH0gfSk7XG4gICAgICAgIHN1cGVyKGNvbGxlY3Rpb24ucy5uYW1lc3BhY2UsIHBpcGVsaW5lLCBvcHRpb25zKTtcbiAgICB9XG4gICAgYXN5bmMgZXhlY3V0ZShzZXJ2ZXIsIHNlc3Npb24pIHtcbiAgICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgc3VwZXIuZXhlY3V0ZShzZXJ2ZXIsIHNlc3Npb24pO1xuICAgICAgICAvLyBOT1RFOiBXZSdyZSBhdm9pZGluZyBjcmVhdGluZyBhIGN1cnNvciBoZXJlIHRvIHJlZHVjZSB0aGUgY2FsbHN0YWNrLlxuICAgICAgICBjb25zdCByZXNwb25zZSA9IHJlc3VsdDtcbiAgICAgICAgaWYgKHJlc3BvbnNlLmN1cnNvciA9PSBudWxsIHx8IHJlc3BvbnNlLmN1cnNvci5maXJzdEJhdGNoID09IG51bGwpIHtcbiAgICAgICAgICAgIHJldHVybiAwO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGRvY3MgPSByZXNwb25zZS5jdXJzb3IuZmlyc3RCYXRjaDtcbiAgICAgICAgcmV0dXJuIGRvY3MubGVuZ3RoID8gZG9jc1swXS5uIDogMDtcbiAgICB9XG59XG5leHBvcnRzLkNvdW50RG9jdW1lbnRzT3BlcmF0aW9uID0gQ291bnREb2N1bWVudHNPcGVyYXRpb247XG4vLyMgc291cmNlTWFwcGluZ1VSTD1jb3VudF9kb2N1bWVudHMuanMubWFwIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiQ291bnREb2N1bWVudHNPcGVyYXRpb24iLCJhZ2dyZWdhdGVfMSIsInJlcXVpcmUiLCJBZ2dyZWdhdGVPcGVyYXRpb24iLCJjb25zdHJ1Y3RvciIsImNvbGxlY3Rpb24iLCJxdWVyeSIsIm9wdGlvbnMiLCJwaXBlbGluZSIsInB1c2giLCIkbWF0Y2giLCJza2lwIiwiJHNraXAiLCJsaW1pdCIsIiRsaW1pdCIsIiRncm91cCIsIl9pZCIsIm4iLCIkc3VtIiwicyIsIm5hbWVzcGFjZSIsImV4ZWN1dGUiLCJzZXJ2ZXIiLCJzZXNzaW9uIiwicmVzdWx0IiwicmVzcG9uc2UiLCJjdXJzb3IiLCJmaXJzdEJhdGNoIiwiZG9jcyIsImxlbmd0aCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongodb/lib/operations/count_documents.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongodb/lib/operations/create_collection.js":
/*!******************************************************************!*\
  !*** ./node_modules/mongodb/lib/operations/create_collection.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.CreateCollectionOperation = void 0;\nconst constants_1 = __webpack_require__(/*! ../cmap/wire_protocol/constants */ \"(ssr)/./node_modules/mongodb/lib/cmap/wire_protocol/constants.js\");\nconst collection_1 = __webpack_require__(/*! ../collection */ \"(ssr)/./node_modules/mongodb/lib/collection.js\");\nconst error_1 = __webpack_require__(/*! ../error */ \"(ssr)/./node_modules/mongodb/lib/error.js\");\nconst command_1 = __webpack_require__(/*! ./command */ \"(ssr)/./node_modules/mongodb/lib/operations/command.js\");\nconst indexes_1 = __webpack_require__(/*! ./indexes */ \"(ssr)/./node_modules/mongodb/lib/operations/indexes.js\");\nconst operation_1 = __webpack_require__(/*! ./operation */ \"(ssr)/./node_modules/mongodb/lib/operations/operation.js\");\nconst ILLEGAL_COMMAND_FIELDS = new Set([\n    \"w\",\n    \"wtimeout\",\n    \"j\",\n    \"fsync\",\n    \"autoIndexId\",\n    \"pkFactory\",\n    \"raw\",\n    \"readPreference\",\n    \"session\",\n    \"readConcern\",\n    \"writeConcern\",\n    \"raw\",\n    \"fieldsAsRaw\",\n    \"useBigInt64\",\n    \"promoteLongs\",\n    \"promoteValues\",\n    \"promoteBuffers\",\n    \"bsonRegExp\",\n    \"serializeFunctions\",\n    \"ignoreUndefined\",\n    \"enableUtf8Validation\"\n]);\n/* @internal */ const INVALID_QE_VERSION = \"Driver support of Queryable Encryption is incompatible with server. Upgrade server to use Queryable Encryption.\";\n/** @internal */ class CreateCollectionOperation extends command_1.CommandOperation {\n    constructor(db, name, options = {}){\n        super(db, options);\n        this.options = options;\n        this.db = db;\n        this.name = name;\n    }\n    async execute(server, session) {\n        const db = this.db;\n        const name = this.name;\n        const options = this.options;\n        const encryptedFields = options.encryptedFields ?? db.client.options.autoEncryption?.encryptedFieldsMap?.[`${db.databaseName}.${name}`];\n        if (encryptedFields) {\n            // Creating a QE collection required min server of 7.0.0\n            // TODO(NODE-5353): Get wire version information from connection.\n            if (!server.loadBalanced && server.description.maxWireVersion < constants_1.MIN_SUPPORTED_QE_WIRE_VERSION) {\n                throw new error_1.MongoCompatibilityError(`${INVALID_QE_VERSION} The minimum server version required is ${constants_1.MIN_SUPPORTED_QE_SERVER_VERSION}`);\n            }\n            // Create auxilliary collections for queryable encryption support.\n            const escCollection = encryptedFields.escCollection ?? `enxcol_.${name}.esc`;\n            const ecocCollection = encryptedFields.ecocCollection ?? `enxcol_.${name}.ecoc`;\n            for (const collectionName of [\n                escCollection,\n                ecocCollection\n            ]){\n                const createOp = new CreateCollectionOperation(db, collectionName, {\n                    clusteredIndex: {\n                        key: {\n                            _id: 1\n                        },\n                        unique: true\n                    }\n                });\n                await createOp.executeWithoutEncryptedFieldsCheck(server, session);\n            }\n            if (!options.encryptedFields) {\n                this.options = {\n                    ...this.options,\n                    encryptedFields\n                };\n            }\n        }\n        const coll = await this.executeWithoutEncryptedFieldsCheck(server, session);\n        if (encryptedFields) {\n            // Create the required index for queryable encryption support.\n            const createIndexOp = new indexes_1.CreateIndexOperation(db, name, {\n                __safeContent__: 1\n            }, {});\n            await createIndexOp.execute(server, session);\n        }\n        return coll;\n    }\n    async executeWithoutEncryptedFieldsCheck(server, session) {\n        const db = this.db;\n        const name = this.name;\n        const options = this.options;\n        const cmd = {\n            create: name\n        };\n        for(const n in options){\n            if (options[n] != null && typeof options[n] !== \"function\" && !ILLEGAL_COMMAND_FIELDS.has(n)) {\n                cmd[n] = options[n];\n            }\n        }\n        // otherwise just execute the command\n        await super.executeCommand(server, session, cmd);\n        return new collection_1.Collection(db, name, options);\n    }\n}\nexports.CreateCollectionOperation = CreateCollectionOperation;\n(0, operation_1.defineAspects)(CreateCollectionOperation, [\n    operation_1.Aspect.WRITE_OPERATION\n]); //# sourceMappingURL=create_collection.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongodb/lib/operations/create_collection.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongodb/lib/operations/delete.js":
/*!*******************************************************!*\
  !*** ./node_modules/mongodb/lib/operations/delete.js ***!
  \*******************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.makeDeleteStatement = exports.DeleteManyOperation = exports.DeleteOneOperation = exports.DeleteOperation = void 0;\nconst error_1 = __webpack_require__(/*! ../error */ \"(ssr)/./node_modules/mongodb/lib/error.js\");\nconst command_1 = __webpack_require__(/*! ./command */ \"(ssr)/./node_modules/mongodb/lib/operations/command.js\");\nconst operation_1 = __webpack_require__(/*! ./operation */ \"(ssr)/./node_modules/mongodb/lib/operations/operation.js\");\n/** @internal */ class DeleteOperation extends command_1.CommandOperation {\n    constructor(ns, statements, options){\n        super(undefined, options);\n        this.options = options;\n        this.ns = ns;\n        this.statements = statements;\n    }\n    get canRetryWrite() {\n        if (super.canRetryWrite === false) {\n            return false;\n        }\n        return this.statements.every((op)=>op.limit != null ? op.limit > 0 : true);\n    }\n    async execute(server, session) {\n        const options = this.options ?? {};\n        const ordered = typeof options.ordered === \"boolean\" ? options.ordered : true;\n        const command = {\n            delete: this.ns.collection,\n            deletes: this.statements,\n            ordered\n        };\n        if (options.let) {\n            command.let = options.let;\n        }\n        // we check for undefined specifically here to allow falsy values\n        // eslint-disable-next-line no-restricted-syntax\n        if (options.comment !== undefined) {\n            command.comment = options.comment;\n        }\n        const unacknowledgedWrite = this.writeConcern && this.writeConcern.w === 0;\n        if (unacknowledgedWrite) {\n            if (this.statements.find((o)=>o.hint)) {\n                // TODO(NODE-3541): fix error for hint with unacknowledged writes\n                throw new error_1.MongoCompatibilityError(`hint is not supported with unacknowledged writes`);\n            }\n        }\n        return super.executeCommand(server, session, command);\n    }\n}\nexports.DeleteOperation = DeleteOperation;\nclass DeleteOneOperation extends DeleteOperation {\n    constructor(collection, filter, options){\n        super(collection.s.namespace, [\n            makeDeleteStatement(filter, {\n                ...options,\n                limit: 1\n            })\n        ], options);\n    }\n    async execute(server, session) {\n        const res = await super.execute(server, session);\n        if (this.explain) return res;\n        if (res.code) throw new error_1.MongoServerError(res);\n        if (res.writeErrors) throw new error_1.MongoServerError(res.writeErrors[0]);\n        return {\n            acknowledged: this.writeConcern?.w !== 0,\n            deletedCount: res.n\n        };\n    }\n}\nexports.DeleteOneOperation = DeleteOneOperation;\nclass DeleteManyOperation extends DeleteOperation {\n    constructor(collection, filter, options){\n        super(collection.s.namespace, [\n            makeDeleteStatement(filter, options)\n        ], options);\n    }\n    async execute(server, session) {\n        const res = await super.execute(server, session);\n        if (this.explain) return res;\n        if (res.code) throw new error_1.MongoServerError(res);\n        if (res.writeErrors) throw new error_1.MongoServerError(res.writeErrors[0]);\n        return {\n            acknowledged: this.writeConcern?.w !== 0,\n            deletedCount: res.n\n        };\n    }\n}\nexports.DeleteManyOperation = DeleteManyOperation;\nfunction makeDeleteStatement(filter, options) {\n    const op = {\n        q: filter,\n        limit: typeof options.limit === \"number\" ? options.limit : 0\n    };\n    if (options.collation) {\n        op.collation = options.collation;\n    }\n    if (options.hint) {\n        op.hint = options.hint;\n    }\n    return op;\n}\nexports.makeDeleteStatement = makeDeleteStatement;\n(0, operation_1.defineAspects)(DeleteOperation, [\n    operation_1.Aspect.RETRYABLE,\n    operation_1.Aspect.WRITE_OPERATION\n]);\n(0, operation_1.defineAspects)(DeleteOneOperation, [\n    operation_1.Aspect.RETRYABLE,\n    operation_1.Aspect.WRITE_OPERATION,\n    operation_1.Aspect.EXPLAINABLE,\n    operation_1.Aspect.SKIP_COLLATION\n]);\n(0, operation_1.defineAspects)(DeleteManyOperation, [\n    operation_1.Aspect.WRITE_OPERATION,\n    operation_1.Aspect.EXPLAINABLE,\n    operation_1.Aspect.SKIP_COLLATION\n]); //# sourceMappingURL=delete.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongodb/lib/operations/delete.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongodb/lib/operations/distinct.js":
/*!*********************************************************!*\
  !*** ./node_modules/mongodb/lib/operations/distinct.js ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.DistinctOperation = void 0;\nconst utils_1 = __webpack_require__(/*! ../utils */ \"(ssr)/./node_modules/mongodb/lib/utils.js\");\nconst command_1 = __webpack_require__(/*! ./command */ \"(ssr)/./node_modules/mongodb/lib/operations/command.js\");\nconst operation_1 = __webpack_require__(/*! ./operation */ \"(ssr)/./node_modules/mongodb/lib/operations/operation.js\");\n/**\n * Return a list of distinct values for the given key across a collection.\n * @internal\n */ class DistinctOperation extends command_1.CommandOperation {\n    /**\n     * Construct a Distinct operation.\n     *\n     * @param collection - Collection instance.\n     * @param key - Field of the document to find distinct values for.\n     * @param query - The query for filtering the set of documents to which we apply the distinct filter.\n     * @param options - Optional settings. See Collection.prototype.distinct for a list of options.\n     */ constructor(collection, key, query, options){\n        super(collection, options);\n        this.options = options ?? {};\n        this.collection = collection;\n        this.key = key;\n        this.query = query;\n    }\n    async execute(server, session) {\n        const coll = this.collection;\n        const key = this.key;\n        const query = this.query;\n        const options = this.options;\n        // Distinct command\n        const cmd = {\n            distinct: coll.collectionName,\n            key: key,\n            query: query\n        };\n        // Add maxTimeMS if defined\n        if (typeof options.maxTimeMS === \"number\") {\n            cmd.maxTimeMS = options.maxTimeMS;\n        }\n        // we check for undefined specifically here to allow falsy values\n        // eslint-disable-next-line no-restricted-syntax\n        if (typeof options.comment !== \"undefined\") {\n            cmd.comment = options.comment;\n        }\n        // Do we have a readConcern specified\n        (0, utils_1.decorateWithReadConcern)(cmd, coll, options);\n        // Have we specified collation\n        (0, utils_1.decorateWithCollation)(cmd, coll, options);\n        const result = await super.executeCommand(server, session, cmd);\n        return this.explain ? result : result.values;\n    }\n}\nexports.DistinctOperation = DistinctOperation;\n(0, operation_1.defineAspects)(DistinctOperation, [\n    operation_1.Aspect.READ_OPERATION,\n    operation_1.Aspect.RETRYABLE,\n    operation_1.Aspect.EXPLAINABLE\n]); //# sourceMappingURL=distinct.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbW9uZ29kYi9saWIvb3BlcmF0aW9ucy9kaXN0aW5jdC5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiQSw4Q0FBNkM7SUFBRUcsT0FBTztBQUFLLENBQUMsRUFBQztBQUM3REQseUJBQXlCLEdBQUcsS0FBSztBQUNqQyxNQUFNRyxVQUFVQyxtQkFBT0EsQ0FBQywyREFBVTtBQUNsQyxNQUFNQyxZQUFZRCxtQkFBT0EsQ0FBQyx5RUFBVztBQUNyQyxNQUFNRSxjQUFjRixtQkFBT0EsQ0FBQyw2RUFBYTtBQUN6Qzs7O0NBR0MsR0FDRCxNQUFNRiwwQkFBMEJHLFVBQVVFLGdCQUFnQjtJQUN0RDs7Ozs7OztLQU9DLEdBQ0RDLFlBQVlDLFVBQVUsRUFBRUMsR0FBRyxFQUFFQyxLQUFLLEVBQUVDLE9BQU8sQ0FBRTtRQUN6QyxLQUFLLENBQUNILFlBQVlHO1FBQ2xCLElBQUksQ0FBQ0EsT0FBTyxHQUFHQSxXQUFXLENBQUM7UUFDM0IsSUFBSSxDQUFDSCxVQUFVLEdBQUdBO1FBQ2xCLElBQUksQ0FBQ0MsR0FBRyxHQUFHQTtRQUNYLElBQUksQ0FBQ0MsS0FBSyxHQUFHQTtJQUNqQjtJQUNBLE1BQU1FLFFBQVFDLE1BQU0sRUFBRUMsT0FBTyxFQUFFO1FBQzNCLE1BQU1DLE9BQU8sSUFBSSxDQUFDUCxVQUFVO1FBQzVCLE1BQU1DLE1BQU0sSUFBSSxDQUFDQSxHQUFHO1FBQ3BCLE1BQU1DLFFBQVEsSUFBSSxDQUFDQSxLQUFLO1FBQ3hCLE1BQU1DLFVBQVUsSUFBSSxDQUFDQSxPQUFPO1FBQzVCLG1CQUFtQjtRQUNuQixNQUFNSyxNQUFNO1lBQ1JDLFVBQVVGLEtBQUtHLGNBQWM7WUFDN0JULEtBQUtBO1lBQ0xDLE9BQU9BO1FBQ1g7UUFDQSwyQkFBMkI7UUFDM0IsSUFBSSxPQUFPQyxRQUFRUSxTQUFTLEtBQUssVUFBVTtZQUN2Q0gsSUFBSUcsU0FBUyxHQUFHUixRQUFRUSxTQUFTO1FBQ3JDO1FBQ0EsaUVBQWlFO1FBQ2pFLGdEQUFnRDtRQUNoRCxJQUFJLE9BQU9SLFFBQVFTLE9BQU8sS0FBSyxhQUFhO1lBQ3hDSixJQUFJSSxPQUFPLEdBQUdULFFBQVFTLE9BQU87UUFDakM7UUFDQSxxQ0FBcUM7UUFDcEMsSUFBR2xCLFFBQVFtQix1QkFBdUIsRUFBRUwsS0FBS0QsTUFBTUo7UUFDaEQsOEJBQThCO1FBQzdCLElBQUdULFFBQVFvQixxQkFBcUIsRUFBRU4sS0FBS0QsTUFBTUo7UUFDOUMsTUFBTVksU0FBUyxNQUFNLEtBQUssQ0FBQ0MsZUFBZVgsUUFBUUMsU0FBU0U7UUFDM0QsT0FBTyxJQUFJLENBQUNTLE9BQU8sR0FBR0YsU0FBU0EsT0FBT0csTUFBTTtJQUNoRDtBQUNKO0FBQ0EzQix5QkFBeUIsR0FBR0U7QUFDM0IsSUFBR0ksWUFBWXNCLGFBQWEsRUFBRTFCLG1CQUFtQjtJQUFDSSxZQUFZdUIsTUFBTSxDQUFDQyxjQUFjO0lBQUV4QixZQUFZdUIsTUFBTSxDQUFDRSxTQUFTO0lBQUV6QixZQUFZdUIsTUFBTSxDQUFDRyxXQUFXO0NBQUMsR0FDbkosb0NBQW9DIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYmxvZy1hcHBsaWNhdGlvbi8uL25vZGVfbW9kdWxlcy9tb25nb2RiL2xpYi9vcGVyYXRpb25zL2Rpc3RpbmN0LmpzP2QxOTgiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLkRpc3RpbmN0T3BlcmF0aW9uID0gdm9pZCAwO1xuY29uc3QgdXRpbHNfMSA9IHJlcXVpcmUoXCIuLi91dGlsc1wiKTtcbmNvbnN0IGNvbW1hbmRfMSA9IHJlcXVpcmUoXCIuL2NvbW1hbmRcIik7XG5jb25zdCBvcGVyYXRpb25fMSA9IHJlcXVpcmUoXCIuL29wZXJhdGlvblwiKTtcbi8qKlxuICogUmV0dXJuIGEgbGlzdCBvZiBkaXN0aW5jdCB2YWx1ZXMgZm9yIHRoZSBnaXZlbiBrZXkgYWNyb3NzIGEgY29sbGVjdGlvbi5cbiAqIEBpbnRlcm5hbFxuICovXG5jbGFzcyBEaXN0aW5jdE9wZXJhdGlvbiBleHRlbmRzIGNvbW1hbmRfMS5Db21tYW5kT3BlcmF0aW9uIHtcbiAgICAvKipcbiAgICAgKiBDb25zdHJ1Y3QgYSBEaXN0aW5jdCBvcGVyYXRpb24uXG4gICAgICpcbiAgICAgKiBAcGFyYW0gY29sbGVjdGlvbiAtIENvbGxlY3Rpb24gaW5zdGFuY2UuXG4gICAgICogQHBhcmFtIGtleSAtIEZpZWxkIG9mIHRoZSBkb2N1bWVudCB0byBmaW5kIGRpc3RpbmN0IHZhbHVlcyBmb3IuXG4gICAgICogQHBhcmFtIHF1ZXJ5IC0gVGhlIHF1ZXJ5IGZvciBmaWx0ZXJpbmcgdGhlIHNldCBvZiBkb2N1bWVudHMgdG8gd2hpY2ggd2UgYXBwbHkgdGhlIGRpc3RpbmN0IGZpbHRlci5cbiAgICAgKiBAcGFyYW0gb3B0aW9ucyAtIE9wdGlvbmFsIHNldHRpbmdzLiBTZWUgQ29sbGVjdGlvbi5wcm90b3R5cGUuZGlzdGluY3QgZm9yIGEgbGlzdCBvZiBvcHRpb25zLlxuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKGNvbGxlY3Rpb24sIGtleSwgcXVlcnksIG9wdGlvbnMpIHtcbiAgICAgICAgc3VwZXIoY29sbGVjdGlvbiwgb3B0aW9ucyk7XG4gICAgICAgIHRoaXMub3B0aW9ucyA9IG9wdGlvbnMgPz8ge307XG4gICAgICAgIHRoaXMuY29sbGVjdGlvbiA9IGNvbGxlY3Rpb247XG4gICAgICAgIHRoaXMua2V5ID0ga2V5O1xuICAgICAgICB0aGlzLnF1ZXJ5ID0gcXVlcnk7XG4gICAgfVxuICAgIGFzeW5jIGV4ZWN1dGUoc2VydmVyLCBzZXNzaW9uKSB7XG4gICAgICAgIGNvbnN0IGNvbGwgPSB0aGlzLmNvbGxlY3Rpb247XG4gICAgICAgIGNvbnN0IGtleSA9IHRoaXMua2V5O1xuICAgICAgICBjb25zdCBxdWVyeSA9IHRoaXMucXVlcnk7XG4gICAgICAgIGNvbnN0IG9wdGlvbnMgPSB0aGlzLm9wdGlvbnM7XG4gICAgICAgIC8vIERpc3RpbmN0IGNvbW1hbmRcbiAgICAgICAgY29uc3QgY21kID0ge1xuICAgICAgICAgICAgZGlzdGluY3Q6IGNvbGwuY29sbGVjdGlvbk5hbWUsXG4gICAgICAgICAgICBrZXk6IGtleSxcbiAgICAgICAgICAgIHF1ZXJ5OiBxdWVyeVxuICAgICAgICB9O1xuICAgICAgICAvLyBBZGQgbWF4VGltZU1TIGlmIGRlZmluZWRcbiAgICAgICAgaWYgKHR5cGVvZiBvcHRpb25zLm1heFRpbWVNUyA9PT0gJ251bWJlcicpIHtcbiAgICAgICAgICAgIGNtZC5tYXhUaW1lTVMgPSBvcHRpb25zLm1heFRpbWVNUztcbiAgICAgICAgfVxuICAgICAgICAvLyB3ZSBjaGVjayBmb3IgdW5kZWZpbmVkIHNwZWNpZmljYWxseSBoZXJlIHRvIGFsbG93IGZhbHN5IHZhbHVlc1xuICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tcmVzdHJpY3RlZC1zeW50YXhcbiAgICAgICAgaWYgKHR5cGVvZiBvcHRpb25zLmNvbW1lbnQgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgICBjbWQuY29tbWVudCA9IG9wdGlvbnMuY29tbWVudDtcbiAgICAgICAgfVxuICAgICAgICAvLyBEbyB3ZSBoYXZlIGEgcmVhZENvbmNlcm4gc3BlY2lmaWVkXG4gICAgICAgICgwLCB1dGlsc18xLmRlY29yYXRlV2l0aFJlYWRDb25jZXJuKShjbWQsIGNvbGwsIG9wdGlvbnMpO1xuICAgICAgICAvLyBIYXZlIHdlIHNwZWNpZmllZCBjb2xsYXRpb25cbiAgICAgICAgKDAsIHV0aWxzXzEuZGVjb3JhdGVXaXRoQ29sbGF0aW9uKShjbWQsIGNvbGwsIG9wdGlvbnMpO1xuICAgICAgICBjb25zdCByZXN1bHQgPSBhd2FpdCBzdXBlci5leGVjdXRlQ29tbWFuZChzZXJ2ZXIsIHNlc3Npb24sIGNtZCk7XG4gICAgICAgIHJldHVybiB0aGlzLmV4cGxhaW4gPyByZXN1bHQgOiByZXN1bHQudmFsdWVzO1xuICAgIH1cbn1cbmV4cG9ydHMuRGlzdGluY3RPcGVyYXRpb24gPSBEaXN0aW5jdE9wZXJhdGlvbjtcbigwLCBvcGVyYXRpb25fMS5kZWZpbmVBc3BlY3RzKShEaXN0aW5jdE9wZXJhdGlvbiwgW29wZXJhdGlvbl8xLkFzcGVjdC5SRUFEX09QRVJBVElPTiwgb3BlcmF0aW9uXzEuQXNwZWN0LlJFVFJZQUJMRSwgb3BlcmF0aW9uXzEuQXNwZWN0LkVYUExBSU5BQkxFXSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1kaXN0aW5jdC5qcy5tYXAiXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJEaXN0aW5jdE9wZXJhdGlvbiIsInV0aWxzXzEiLCJyZXF1aXJlIiwiY29tbWFuZF8xIiwib3BlcmF0aW9uXzEiLCJDb21tYW5kT3BlcmF0aW9uIiwiY29uc3RydWN0b3IiLCJjb2xsZWN0aW9uIiwia2V5IiwicXVlcnkiLCJvcHRpb25zIiwiZXhlY3V0ZSIsInNlcnZlciIsInNlc3Npb24iLCJjb2xsIiwiY21kIiwiZGlzdGluY3QiLCJjb2xsZWN0aW9uTmFtZSIsIm1heFRpbWVNUyIsImNvbW1lbnQiLCJkZWNvcmF0ZVdpdGhSZWFkQ29uY2VybiIsImRlY29yYXRlV2l0aENvbGxhdGlvbiIsInJlc3VsdCIsImV4ZWN1dGVDb21tYW5kIiwiZXhwbGFpbiIsInZhbHVlcyIsImRlZmluZUFzcGVjdHMiLCJBc3BlY3QiLCJSRUFEX09QRVJBVElPTiIsIlJFVFJZQUJMRSIsIkVYUExBSU5BQkxFIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongodb/lib/operations/distinct.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongodb/lib/operations/drop.js":
/*!*****************************************************!*\
  !*** ./node_modules/mongodb/lib/operations/drop.js ***!
  \*****************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.DropDatabaseOperation = exports.DropCollectionOperation = void 0;\nconst error_1 = __webpack_require__(/*! ../error */ \"(ssr)/./node_modules/mongodb/lib/error.js\");\nconst command_1 = __webpack_require__(/*! ./command */ \"(ssr)/./node_modules/mongodb/lib/operations/command.js\");\nconst operation_1 = __webpack_require__(/*! ./operation */ \"(ssr)/./node_modules/mongodb/lib/operations/operation.js\");\n/** @internal */ class DropCollectionOperation extends command_1.CommandOperation {\n    constructor(db, name, options = {}){\n        super(db, options);\n        this.db = db;\n        this.options = options;\n        this.name = name;\n    }\n    async execute(server, session) {\n        const db = this.db;\n        const options = this.options;\n        const name = this.name;\n        const encryptedFieldsMap = db.client.options.autoEncryption?.encryptedFieldsMap;\n        let encryptedFields = options.encryptedFields ?? encryptedFieldsMap?.[`${db.databaseName}.${name}`];\n        if (!encryptedFields && encryptedFieldsMap) {\n            // If the MongoClient was configured with an encryptedFieldsMap,\n            // and no encryptedFields config was available in it or explicitly\n            // passed as an argument, the spec tells us to look one up using\n            // listCollections().\n            const listCollectionsResult = await db.listCollections({\n                name\n            }, {\n                nameOnly: false\n            }).toArray();\n            encryptedFields = listCollectionsResult?.[0]?.options?.encryptedFields;\n        }\n        if (encryptedFields) {\n            const escCollection = encryptedFields.escCollection || `enxcol_.${name}.esc`;\n            const ecocCollection = encryptedFields.ecocCollection || `enxcol_.${name}.ecoc`;\n            for (const collectionName of [\n                escCollection,\n                ecocCollection\n            ]){\n                // Drop auxilliary collections, ignoring potential NamespaceNotFound errors.\n                const dropOp = new DropCollectionOperation(db, collectionName);\n                try {\n                    await dropOp.executeWithoutEncryptedFieldsCheck(server, session);\n                } catch (err) {\n                    if (!(err instanceof error_1.MongoServerError) || err.code !== error_1.MONGODB_ERROR_CODES.NamespaceNotFound) {\n                        throw err;\n                    }\n                }\n            }\n        }\n        return this.executeWithoutEncryptedFieldsCheck(server, session);\n    }\n    async executeWithoutEncryptedFieldsCheck(server, session) {\n        await super.executeCommand(server, session, {\n            drop: this.name\n        });\n        return true;\n    }\n}\nexports.DropCollectionOperation = DropCollectionOperation;\n/** @internal */ class DropDatabaseOperation extends command_1.CommandOperation {\n    constructor(db, options){\n        super(db, options);\n        this.options = options;\n    }\n    async execute(server, session) {\n        await super.executeCommand(server, session, {\n            dropDatabase: 1\n        });\n        return true;\n    }\n}\nexports.DropDatabaseOperation = DropDatabaseOperation;\n(0, operation_1.defineAspects)(DropCollectionOperation, [\n    operation_1.Aspect.WRITE_OPERATION\n]);\n(0, operation_1.defineAspects)(DropDatabaseOperation, [\n    operation_1.Aspect.WRITE_OPERATION\n]); //# sourceMappingURL=drop.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongodb/lib/operations/drop.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongodb/lib/operations/estimated_document_count.js":
/*!*************************************************************************!*\
  !*** ./node_modules/mongodb/lib/operations/estimated_document_count.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.EstimatedDocumentCountOperation = void 0;\nconst command_1 = __webpack_require__(/*! ./command */ \"(ssr)/./node_modules/mongodb/lib/operations/command.js\");\nconst operation_1 = __webpack_require__(/*! ./operation */ \"(ssr)/./node_modules/mongodb/lib/operations/operation.js\");\n/** @internal */ class EstimatedDocumentCountOperation extends command_1.CommandOperation {\n    constructor(collection, options = {}){\n        super(collection, options);\n        this.options = options;\n        this.collectionName = collection.collectionName;\n    }\n    async execute(server, session) {\n        const cmd = {\n            count: this.collectionName\n        };\n        if (typeof this.options.maxTimeMS === \"number\") {\n            cmd.maxTimeMS = this.options.maxTimeMS;\n        }\n        // we check for undefined specifically here to allow falsy values\n        // eslint-disable-next-line no-restricted-syntax\n        if (this.options.comment !== undefined) {\n            cmd.comment = this.options.comment;\n        }\n        const response = await super.executeCommand(server, session, cmd);\n        return response?.n || 0;\n    }\n}\nexports.EstimatedDocumentCountOperation = EstimatedDocumentCountOperation;\n(0, operation_1.defineAspects)(EstimatedDocumentCountOperation, [\n    operation_1.Aspect.READ_OPERATION,\n    operation_1.Aspect.RETRYABLE,\n    operation_1.Aspect.CURSOR_CREATING\n]); //# sourceMappingURL=estimated_document_count.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbW9uZ29kYi9saWIvb3BlcmF0aW9ucy9lc3RpbWF0ZWRfZG9jdW1lbnRfY291bnQuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYkEsOENBQTZDO0lBQUVHLE9BQU87QUFBSyxDQUFDLEVBQUM7QUFDN0RELHVDQUF1QyxHQUFHLEtBQUs7QUFDL0MsTUFBTUcsWUFBWUMsbUJBQU9BLENBQUMseUVBQVc7QUFDckMsTUFBTUMsY0FBY0QsbUJBQU9BLENBQUMsNkVBQWE7QUFDekMsY0FBYyxHQUNkLE1BQU1GLHdDQUF3Q0MsVUFBVUcsZ0JBQWdCO0lBQ3BFQyxZQUFZQyxVQUFVLEVBQUVDLFVBQVUsQ0FBQyxDQUFDLENBQUU7UUFDbEMsS0FBSyxDQUFDRCxZQUFZQztRQUNsQixJQUFJLENBQUNBLE9BQU8sR0FBR0E7UUFDZixJQUFJLENBQUNDLGNBQWMsR0FBR0YsV0FBV0UsY0FBYztJQUNuRDtJQUNBLE1BQU1DLFFBQVFDLE1BQU0sRUFBRUMsT0FBTyxFQUFFO1FBQzNCLE1BQU1DLE1BQU07WUFBRUMsT0FBTyxJQUFJLENBQUNMLGNBQWM7UUFBQztRQUN6QyxJQUFJLE9BQU8sSUFBSSxDQUFDRCxPQUFPLENBQUNPLFNBQVMsS0FBSyxVQUFVO1lBQzVDRixJQUFJRSxTQUFTLEdBQUcsSUFBSSxDQUFDUCxPQUFPLENBQUNPLFNBQVM7UUFDMUM7UUFDQSxpRUFBaUU7UUFDakUsZ0RBQWdEO1FBQ2hELElBQUksSUFBSSxDQUFDUCxPQUFPLENBQUNRLE9BQU8sS0FBS0MsV0FBVztZQUNwQ0osSUFBSUcsT0FBTyxHQUFHLElBQUksQ0FBQ1IsT0FBTyxDQUFDUSxPQUFPO1FBQ3RDO1FBQ0EsTUFBTUUsV0FBVyxNQUFNLEtBQUssQ0FBQ0MsZUFBZVIsUUFBUUMsU0FBU0M7UUFDN0QsT0FBT0ssVUFBVUUsS0FBSztJQUMxQjtBQUNKO0FBQ0FyQix1Q0FBdUMsR0FBR0U7QUFDekMsSUFBR0csWUFBWWlCLGFBQWEsRUFBRXBCLGlDQUFpQztJQUM1REcsWUFBWWtCLE1BQU0sQ0FBQ0MsY0FBYztJQUNqQ25CLFlBQVlrQixNQUFNLENBQUNFLFNBQVM7SUFDNUJwQixZQUFZa0IsTUFBTSxDQUFDRyxlQUFlO0NBQ3JDLEdBQ0Qsb0RBQW9EIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYmxvZy1hcHBsaWNhdGlvbi8uL25vZGVfbW9kdWxlcy9tb25nb2RiL2xpYi9vcGVyYXRpb25zL2VzdGltYXRlZF9kb2N1bWVudF9jb3VudC5qcz84MjMwIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5Fc3RpbWF0ZWREb2N1bWVudENvdW50T3BlcmF0aW9uID0gdm9pZCAwO1xuY29uc3QgY29tbWFuZF8xID0gcmVxdWlyZShcIi4vY29tbWFuZFwiKTtcbmNvbnN0IG9wZXJhdGlvbl8xID0gcmVxdWlyZShcIi4vb3BlcmF0aW9uXCIpO1xuLyoqIEBpbnRlcm5hbCAqL1xuY2xhc3MgRXN0aW1hdGVkRG9jdW1lbnRDb3VudE9wZXJhdGlvbiBleHRlbmRzIGNvbW1hbmRfMS5Db21tYW5kT3BlcmF0aW9uIHtcbiAgICBjb25zdHJ1Y3Rvcihjb2xsZWN0aW9uLCBvcHRpb25zID0ge30pIHtcbiAgICAgICAgc3VwZXIoY29sbGVjdGlvbiwgb3B0aW9ucyk7XG4gICAgICAgIHRoaXMub3B0aW9ucyA9IG9wdGlvbnM7XG4gICAgICAgIHRoaXMuY29sbGVjdGlvbk5hbWUgPSBjb2xsZWN0aW9uLmNvbGxlY3Rpb25OYW1lO1xuICAgIH1cbiAgICBhc3luYyBleGVjdXRlKHNlcnZlciwgc2Vzc2lvbikge1xuICAgICAgICBjb25zdCBjbWQgPSB7IGNvdW50OiB0aGlzLmNvbGxlY3Rpb25OYW1lIH07XG4gICAgICAgIGlmICh0eXBlb2YgdGhpcy5vcHRpb25zLm1heFRpbWVNUyA9PT0gJ251bWJlcicpIHtcbiAgICAgICAgICAgIGNtZC5tYXhUaW1lTVMgPSB0aGlzLm9wdGlvbnMubWF4VGltZU1TO1xuICAgICAgICB9XG4gICAgICAgIC8vIHdlIGNoZWNrIGZvciB1bmRlZmluZWQgc3BlY2lmaWNhbGx5IGhlcmUgdG8gYWxsb3cgZmFsc3kgdmFsdWVzXG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1yZXN0cmljdGVkLXN5bnRheFxuICAgICAgICBpZiAodGhpcy5vcHRpb25zLmNvbW1lbnQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgY21kLmNvbW1lbnQgPSB0aGlzLm9wdGlvbnMuY29tbWVudDtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IHN1cGVyLmV4ZWN1dGVDb21tYW5kKHNlcnZlciwgc2Vzc2lvbiwgY21kKTtcbiAgICAgICAgcmV0dXJuIHJlc3BvbnNlPy5uIHx8IDA7XG4gICAgfVxufVxuZXhwb3J0cy5Fc3RpbWF0ZWREb2N1bWVudENvdW50T3BlcmF0aW9uID0gRXN0aW1hdGVkRG9jdW1lbnRDb3VudE9wZXJhdGlvbjtcbigwLCBvcGVyYXRpb25fMS5kZWZpbmVBc3BlY3RzKShFc3RpbWF0ZWREb2N1bWVudENvdW50T3BlcmF0aW9uLCBbXG4gICAgb3BlcmF0aW9uXzEuQXNwZWN0LlJFQURfT1BFUkFUSU9OLFxuICAgIG9wZXJhdGlvbl8xLkFzcGVjdC5SRVRSWUFCTEUsXG4gICAgb3BlcmF0aW9uXzEuQXNwZWN0LkNVUlNPUl9DUkVBVElOR1xuXSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1lc3RpbWF0ZWRfZG9jdW1lbnRfY291bnQuanMubWFwIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiRXN0aW1hdGVkRG9jdW1lbnRDb3VudE9wZXJhdGlvbiIsImNvbW1hbmRfMSIsInJlcXVpcmUiLCJvcGVyYXRpb25fMSIsIkNvbW1hbmRPcGVyYXRpb24iLCJjb25zdHJ1Y3RvciIsImNvbGxlY3Rpb24iLCJvcHRpb25zIiwiY29sbGVjdGlvbk5hbWUiLCJleGVjdXRlIiwic2VydmVyIiwic2Vzc2lvbiIsImNtZCIsImNvdW50IiwibWF4VGltZU1TIiwiY29tbWVudCIsInVuZGVmaW5lZCIsInJlc3BvbnNlIiwiZXhlY3V0ZUNvbW1hbmQiLCJuIiwiZGVmaW5lQXNwZWN0cyIsIkFzcGVjdCIsIlJFQURfT1BFUkFUSU9OIiwiUkVUUllBQkxFIiwiQ1VSU09SX0NSRUFUSU5HIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongodb/lib/operations/estimated_document_count.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongodb/lib/operations/execute_operation.js":
/*!******************************************************************!*\
  !*** ./node_modules/mongodb/lib/operations/execute_operation.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.executeOperation = void 0;\nconst error_1 = __webpack_require__(/*! ../error */ \"(ssr)/./node_modules/mongodb/lib/error.js\");\nconst read_preference_1 = __webpack_require__(/*! ../read_preference */ \"(ssr)/./node_modules/mongodb/lib/read_preference.js\");\nconst server_selection_1 = __webpack_require__(/*! ../sdam/server_selection */ \"(ssr)/./node_modules/mongodb/lib/sdam/server_selection.js\");\nconst utils_1 = __webpack_require__(/*! ../utils */ \"(ssr)/./node_modules/mongodb/lib/utils.js\");\nconst operation_1 = __webpack_require__(/*! ./operation */ \"(ssr)/./node_modules/mongodb/lib/operations/operation.js\");\nconst MMAPv1_RETRY_WRITES_ERROR_CODE = error_1.MONGODB_ERROR_CODES.IllegalOperation;\nconst MMAPv1_RETRY_WRITES_ERROR_MESSAGE = \"This MongoDB deployment does not support retryable writes. Please add retryWrites=false to your connection string.\";\nfunction executeOperation(client, operation, callback) {\n    return (0, utils_1.maybeCallback)(()=>executeOperationAsync(client, operation), callback);\n}\nexports.executeOperation = executeOperation;\nasync function executeOperationAsync(client, operation) {\n    if (!(operation instanceof operation_1.AbstractOperation)) {\n        // TODO(NODE-3483): Extend MongoRuntimeError\n        throw new error_1.MongoRuntimeError(\"This method requires a valid operation instance\");\n    }\n    if (client.topology == null) {\n        // Auto connect on operation\n        if (client.s.hasBeenClosed) {\n            throw new error_1.MongoNotConnectedError(\"Client must be connected before running operations\");\n        }\n        client.s.options[Symbol.for(\"@@mdb.skipPingOnConnect\")] = true;\n        try {\n            await client.connect();\n        } finally{\n            delete client.s.options[Symbol.for(\"@@mdb.skipPingOnConnect\")];\n        }\n    }\n    const { topology } = client;\n    if (topology == null) {\n        throw new error_1.MongoRuntimeError(\"client.connect did not create a topology but also did not throw\");\n    }\n    // The driver sessions spec mandates that we implicitly create sessions for operations\n    // that are not explicitly provided with a session.\n    let session = operation.session;\n    let owner;\n    if (session == null) {\n        owner = Symbol();\n        session = client.startSession({\n            owner,\n            explicit: false\n        });\n    } else if (session.hasEnded) {\n        throw new error_1.MongoExpiredSessionError(\"Use of expired sessions is not permitted\");\n    } else if (session.snapshotEnabled && !topology.capabilities.supportsSnapshotReads) {\n        throw new error_1.MongoCompatibilityError(\"Snapshot reads require MongoDB 5.0 or later\");\n    } else if (session.client !== client) {\n        throw new error_1.MongoInvalidArgumentError(\"ClientSession must be from the same MongoClient\");\n    }\n    const readPreference = operation.readPreference ?? read_preference_1.ReadPreference.primary;\n    const inTransaction = !!session?.inTransaction();\n    if (inTransaction && !readPreference.equals(read_preference_1.ReadPreference.primary)) {\n        throw new error_1.MongoTransactionError(`Read preference in a transaction must be primary, not: ${readPreference.mode}`);\n    }\n    if (session?.isPinned && session.transaction.isCommitted && !operation.bypassPinningCheck) {\n        session.unpin();\n    }\n    let selector;\n    if (operation.hasAspect(operation_1.Aspect.MUST_SELECT_SAME_SERVER)) {\n        // GetMore and KillCursor operations must always select the same server, but run through\n        // server selection to potentially force monitor checks if the server is\n        // in an unknown state.\n        selector = (0, server_selection_1.sameServerSelector)(operation.server?.description);\n    } else if (operation.trySecondaryWrite) {\n        // If operation should try to write to secondary use the custom server selector\n        // otherwise provide the read preference.\n        selector = (0, server_selection_1.secondaryWritableServerSelector)(topology.commonWireVersion, readPreference);\n    } else {\n        selector = readPreference;\n    }\n    const server = await topology.selectServerAsync(selector, {\n        session\n    });\n    if (session == null) {\n        // No session also means it is not retryable, early exit\n        return operation.execute(server, undefined);\n    }\n    if (!operation.hasAspect(operation_1.Aspect.RETRYABLE)) {\n        // non-retryable operation, early exit\n        try {\n            return await operation.execute(server, session);\n        } finally{\n            if (session?.owner != null && session.owner === owner) {\n                await session.endSession().catch(()=>null);\n            }\n        }\n    }\n    const willRetryRead = topology.s.options.retryReads && !inTransaction && operation.canRetryRead;\n    const willRetryWrite = topology.s.options.retryWrites && !inTransaction && (0, utils_1.supportsRetryableWrites)(server) && operation.canRetryWrite;\n    const hasReadAspect = operation.hasAspect(operation_1.Aspect.READ_OPERATION);\n    const hasWriteAspect = operation.hasAspect(operation_1.Aspect.WRITE_OPERATION);\n    const willRetry = hasReadAspect && willRetryRead || hasWriteAspect && willRetryWrite;\n    if (hasWriteAspect && willRetryWrite) {\n        operation.options.willRetryWrite = true;\n        session.incrementTransactionNumber();\n    }\n    try {\n        return await operation.execute(server, session);\n    } catch (operationError) {\n        if (willRetry && operationError instanceof error_1.MongoError) {\n            return await retryOperation(operation, operationError, {\n                session,\n                topology,\n                selector\n            });\n        }\n        throw operationError;\n    } finally{\n        if (session?.owner != null && session.owner === owner) {\n            await session.endSession().catch(()=>null);\n        }\n    }\n}\nasync function retryOperation(operation, originalError, { session, topology, selector }) {\n    const isWriteOperation = operation.hasAspect(operation_1.Aspect.WRITE_OPERATION);\n    const isReadOperation = operation.hasAspect(operation_1.Aspect.READ_OPERATION);\n    if (isWriteOperation && originalError.code === MMAPv1_RETRY_WRITES_ERROR_CODE) {\n        throw new error_1.MongoServerError({\n            message: MMAPv1_RETRY_WRITES_ERROR_MESSAGE,\n            errmsg: MMAPv1_RETRY_WRITES_ERROR_MESSAGE,\n            originalError\n        });\n    }\n    if (isWriteOperation && !(0, error_1.isRetryableWriteError)(originalError)) {\n        throw originalError;\n    }\n    if (isReadOperation && !(0, error_1.isRetryableReadError)(originalError)) {\n        throw originalError;\n    }\n    if (originalError instanceof error_1.MongoNetworkError && session.isPinned && !session.inTransaction() && operation.hasAspect(operation_1.Aspect.CURSOR_CREATING)) {\n        // If we have a cursor and the initial command fails with a network error,\n        // we can retry it on another connection. So we need to check it back in, clear the\n        // pool for the service id, and retry again.\n        session.unpin({\n            force: true,\n            forceClear: true\n        });\n    }\n    // select a new server, and attempt to retry the operation\n    const server = await topology.selectServerAsync(selector, {\n        session\n    });\n    if (isWriteOperation && !(0, utils_1.supportsRetryableWrites)(server)) {\n        throw new error_1.MongoUnexpectedServerResponseError(\"Selected server does not support retryable writes\");\n    }\n    try {\n        return await operation.execute(server, session);\n    } catch (retryError) {\n        if (retryError instanceof error_1.MongoError && retryError.hasErrorLabel(error_1.MongoErrorLabel.NoWritesPerformed)) {\n            throw originalError;\n        }\n        throw retryError;\n    }\n} //# sourceMappingURL=execute_operation.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongodb/lib/operations/execute_operation.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongodb/lib/operations/find.js":
/*!*****************************************************!*\
  !*** ./node_modules/mongodb/lib/operations/find.js ***!
  \*****************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.FindOperation = void 0;\nconst error_1 = __webpack_require__(/*! ../error */ \"(ssr)/./node_modules/mongodb/lib/error.js\");\nconst read_concern_1 = __webpack_require__(/*! ../read_concern */ \"(ssr)/./node_modules/mongodb/lib/read_concern.js\");\nconst sort_1 = __webpack_require__(/*! ../sort */ \"(ssr)/./node_modules/mongodb/lib/sort.js\");\nconst utils_1 = __webpack_require__(/*! ../utils */ \"(ssr)/./node_modules/mongodb/lib/utils.js\");\nconst command_1 = __webpack_require__(/*! ./command */ \"(ssr)/./node_modules/mongodb/lib/operations/command.js\");\nconst operation_1 = __webpack_require__(/*! ./operation */ \"(ssr)/./node_modules/mongodb/lib/operations/operation.js\");\n/** @internal */ class FindOperation extends command_1.CommandOperation {\n    constructor(collection, ns, filter = {}, options = {}){\n        super(collection, options);\n        this.options = {\n            ...options\n        };\n        delete this.options.writeConcern;\n        this.ns = ns;\n        if (typeof filter !== \"object\" || Array.isArray(filter)) {\n            throw new error_1.MongoInvalidArgumentError(\"Query filter must be a plain object or ObjectId\");\n        }\n        // special case passing in an ObjectId as a filter\n        this.filter = filter != null && filter._bsontype === \"ObjectId\" ? {\n            _id: filter\n        } : filter;\n    }\n    async execute(server, session) {\n        this.server = server;\n        const options = this.options;\n        let findCommand = makeFindCommand(this.ns, this.filter, options);\n        if (this.explain) {\n            findCommand = (0, utils_1.decorateWithExplain)(findCommand, this.explain);\n        }\n        return server.commandAsync(this.ns, findCommand, {\n            ...this.options,\n            ...this.bsonOptions,\n            documentsReturnedIn: \"firstBatch\",\n            session\n        });\n    }\n}\nexports.FindOperation = FindOperation;\nfunction makeFindCommand(ns, filter, options) {\n    const findCommand = {\n        find: ns.collection,\n        filter\n    };\n    if (options.sort) {\n        findCommand.sort = (0, sort_1.formatSort)(options.sort);\n    }\n    if (options.projection) {\n        let projection = options.projection;\n        if (projection && Array.isArray(projection)) {\n            projection = projection.length ? projection.reduce((result, field)=>{\n                result[field] = 1;\n                return result;\n            }, {}) : {\n                _id: 1\n            };\n        }\n        findCommand.projection = projection;\n    }\n    if (options.hint) {\n        findCommand.hint = (0, utils_1.normalizeHintField)(options.hint);\n    }\n    if (typeof options.skip === \"number\") {\n        findCommand.skip = options.skip;\n    }\n    if (typeof options.limit === \"number\") {\n        if (options.limit < 0) {\n            findCommand.limit = -options.limit;\n            findCommand.singleBatch = true;\n        } else {\n            findCommand.limit = options.limit;\n        }\n    }\n    if (typeof options.batchSize === \"number\") {\n        if (options.batchSize < 0) {\n            if (options.limit && options.limit !== 0 && Math.abs(options.batchSize) < Math.abs(options.limit)) {\n                findCommand.limit = -options.batchSize;\n            }\n            findCommand.singleBatch = true;\n        } else {\n            findCommand.batchSize = options.batchSize;\n        }\n    }\n    if (typeof options.singleBatch === \"boolean\") {\n        findCommand.singleBatch = options.singleBatch;\n    }\n    // we check for undefined specifically here to allow falsy values\n    // eslint-disable-next-line no-restricted-syntax\n    if (options.comment !== undefined) {\n        findCommand.comment = options.comment;\n    }\n    if (typeof options.maxTimeMS === \"number\") {\n        findCommand.maxTimeMS = options.maxTimeMS;\n    }\n    const readConcern = read_concern_1.ReadConcern.fromOptions(options);\n    if (readConcern) {\n        findCommand.readConcern = readConcern.toJSON();\n    }\n    if (options.max) {\n        findCommand.max = options.max;\n    }\n    if (options.min) {\n        findCommand.min = options.min;\n    }\n    if (typeof options.returnKey === \"boolean\") {\n        findCommand.returnKey = options.returnKey;\n    }\n    if (typeof options.showRecordId === \"boolean\") {\n        findCommand.showRecordId = options.showRecordId;\n    }\n    if (typeof options.tailable === \"boolean\") {\n        findCommand.tailable = options.tailable;\n    }\n    if (typeof options.oplogReplay === \"boolean\") {\n        findCommand.oplogReplay = options.oplogReplay;\n    }\n    if (typeof options.timeout === \"boolean\") {\n        findCommand.noCursorTimeout = !options.timeout;\n    } else if (typeof options.noCursorTimeout === \"boolean\") {\n        findCommand.noCursorTimeout = options.noCursorTimeout;\n    }\n    if (typeof options.awaitData === \"boolean\") {\n        findCommand.awaitData = options.awaitData;\n    }\n    if (typeof options.allowPartialResults === \"boolean\") {\n        findCommand.allowPartialResults = options.allowPartialResults;\n    }\n    if (options.collation) {\n        findCommand.collation = options.collation;\n    }\n    if (typeof options.allowDiskUse === \"boolean\") {\n        findCommand.allowDiskUse = options.allowDiskUse;\n    }\n    if (options.let) {\n        findCommand.let = options.let;\n    }\n    return findCommand;\n}\n(0, operation_1.defineAspects)(FindOperation, [\n    operation_1.Aspect.READ_OPERATION,\n    operation_1.Aspect.RETRYABLE,\n    operation_1.Aspect.EXPLAINABLE,\n    operation_1.Aspect.CURSOR_CREATING\n]); //# sourceMappingURL=find.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbW9uZ29kYi9saWIvb3BlcmF0aW9ucy9maW5kLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2JBLDhDQUE2QztJQUFFRyxPQUFPO0FBQUssQ0FBQyxFQUFDO0FBQzdERCxxQkFBcUIsR0FBRyxLQUFLO0FBQzdCLE1BQU1HLFVBQVVDLG1CQUFPQSxDQUFDLDJEQUFVO0FBQ2xDLE1BQU1DLGlCQUFpQkQsbUJBQU9BLENBQUMseUVBQWlCO0FBQ2hELE1BQU1FLFNBQVNGLG1CQUFPQSxDQUFDLHlEQUFTO0FBQ2hDLE1BQU1HLFVBQVVILG1CQUFPQSxDQUFDLDJEQUFVO0FBQ2xDLE1BQU1JLFlBQVlKLG1CQUFPQSxDQUFDLHlFQUFXO0FBQ3JDLE1BQU1LLGNBQWNMLG1CQUFPQSxDQUFDLDZFQUFhO0FBQ3pDLGNBQWMsR0FDZCxNQUFNRixzQkFBc0JNLFVBQVVFLGdCQUFnQjtJQUNsREMsWUFBWUMsVUFBVSxFQUFFQyxFQUFFLEVBQUVDLFNBQVMsQ0FBQyxDQUFDLEVBQUVDLFVBQVUsQ0FBQyxDQUFDLENBQUU7UUFDbkQsS0FBSyxDQUFDSCxZQUFZRztRQUNsQixJQUFJLENBQUNBLE9BQU8sR0FBRztZQUFFLEdBQUdBLE9BQU87UUFBQztRQUM1QixPQUFPLElBQUksQ0FBQ0EsT0FBTyxDQUFDQyxZQUFZO1FBQ2hDLElBQUksQ0FBQ0gsRUFBRSxHQUFHQTtRQUNWLElBQUksT0FBT0MsV0FBVyxZQUFZRyxNQUFNQyxPQUFPLENBQUNKLFNBQVM7WUFDckQsTUFBTSxJQUFJWCxRQUFRZ0IseUJBQXlCLENBQUM7UUFDaEQ7UUFDQSxrREFBa0Q7UUFDbEQsSUFBSSxDQUFDTCxNQUFNLEdBQUdBLFVBQVUsUUFBUUEsT0FBT00sU0FBUyxLQUFLLGFBQWE7WUFBRUMsS0FBS1A7UUFBTyxJQUFJQTtJQUN4RjtJQUNBLE1BQU1RLFFBQVFDLE1BQU0sRUFBRUMsT0FBTyxFQUFFO1FBQzNCLElBQUksQ0FBQ0QsTUFBTSxHQUFHQTtRQUNkLE1BQU1SLFVBQVUsSUFBSSxDQUFDQSxPQUFPO1FBQzVCLElBQUlVLGNBQWNDLGdCQUFnQixJQUFJLENBQUNiLEVBQUUsRUFBRSxJQUFJLENBQUNDLE1BQU0sRUFBRUM7UUFDeEQsSUFBSSxJQUFJLENBQUNZLE9BQU8sRUFBRTtZQUNkRixjQUFjLENBQUMsR0FBR2xCLFFBQVFxQixtQkFBbUIsRUFBRUgsYUFBYSxJQUFJLENBQUNFLE9BQU87UUFDNUU7UUFDQSxPQUFPSixPQUFPTSxZQUFZLENBQUMsSUFBSSxDQUFDaEIsRUFBRSxFQUFFWSxhQUFhO1lBQzdDLEdBQUcsSUFBSSxDQUFDVixPQUFPO1lBQ2YsR0FBRyxJQUFJLENBQUNlLFdBQVc7WUFDbkJDLHFCQUFxQjtZQUNyQlA7UUFDSjtJQUNKO0FBQ0o7QUFDQXhCLHFCQUFxQixHQUFHRTtBQUN4QixTQUFTd0IsZ0JBQWdCYixFQUFFLEVBQUVDLE1BQU0sRUFBRUMsT0FBTztJQUN4QyxNQUFNVSxjQUFjO1FBQ2hCTyxNQUFNbkIsR0FBR0QsVUFBVTtRQUNuQkU7SUFDSjtJQUNBLElBQUlDLFFBQVFrQixJQUFJLEVBQUU7UUFDZFIsWUFBWVEsSUFBSSxHQUFHLENBQUMsR0FBRzNCLE9BQU80QixVQUFVLEVBQUVuQixRQUFRa0IsSUFBSTtJQUMxRDtJQUNBLElBQUlsQixRQUFRb0IsVUFBVSxFQUFFO1FBQ3BCLElBQUlBLGFBQWFwQixRQUFRb0IsVUFBVTtRQUNuQyxJQUFJQSxjQUFjbEIsTUFBTUMsT0FBTyxDQUFDaUIsYUFBYTtZQUN6Q0EsYUFBYUEsV0FBV0MsTUFBTSxHQUN4QkQsV0FBV0UsTUFBTSxDQUFDLENBQUNDLFFBQVFDO2dCQUN6QkQsTUFBTSxDQUFDQyxNQUFNLEdBQUc7Z0JBQ2hCLE9BQU9EO1lBQ1gsR0FBRyxDQUFDLEtBQ0Y7Z0JBQUVqQixLQUFLO1lBQUU7UUFDbkI7UUFDQUksWUFBWVUsVUFBVSxHQUFHQTtJQUM3QjtJQUNBLElBQUlwQixRQUFReUIsSUFBSSxFQUFFO1FBQ2RmLFlBQVllLElBQUksR0FBRyxDQUFDLEdBQUdqQyxRQUFRa0Msa0JBQWtCLEVBQUUxQixRQUFReUIsSUFBSTtJQUNuRTtJQUNBLElBQUksT0FBT3pCLFFBQVEyQixJQUFJLEtBQUssVUFBVTtRQUNsQ2pCLFlBQVlpQixJQUFJLEdBQUczQixRQUFRMkIsSUFBSTtJQUNuQztJQUNBLElBQUksT0FBTzNCLFFBQVE0QixLQUFLLEtBQUssVUFBVTtRQUNuQyxJQUFJNUIsUUFBUTRCLEtBQUssR0FBRyxHQUFHO1lBQ25CbEIsWUFBWWtCLEtBQUssR0FBRyxDQUFDNUIsUUFBUTRCLEtBQUs7WUFDbENsQixZQUFZbUIsV0FBVyxHQUFHO1FBQzlCLE9BQ0s7WUFDRG5CLFlBQVlrQixLQUFLLEdBQUc1QixRQUFRNEIsS0FBSztRQUNyQztJQUNKO0lBQ0EsSUFBSSxPQUFPNUIsUUFBUThCLFNBQVMsS0FBSyxVQUFVO1FBQ3ZDLElBQUk5QixRQUFROEIsU0FBUyxHQUFHLEdBQUc7WUFDdkIsSUFBSTlCLFFBQVE0QixLQUFLLElBQ2I1QixRQUFRNEIsS0FBSyxLQUFLLEtBQ2xCRyxLQUFLQyxHQUFHLENBQUNoQyxRQUFROEIsU0FBUyxJQUFJQyxLQUFLQyxHQUFHLENBQUNoQyxRQUFRNEIsS0FBSyxHQUFHO2dCQUN2RGxCLFlBQVlrQixLQUFLLEdBQUcsQ0FBQzVCLFFBQVE4QixTQUFTO1lBQzFDO1lBQ0FwQixZQUFZbUIsV0FBVyxHQUFHO1FBQzlCLE9BQ0s7WUFDRG5CLFlBQVlvQixTQUFTLEdBQUc5QixRQUFROEIsU0FBUztRQUM3QztJQUNKO0lBQ0EsSUFBSSxPQUFPOUIsUUFBUTZCLFdBQVcsS0FBSyxXQUFXO1FBQzFDbkIsWUFBWW1CLFdBQVcsR0FBRzdCLFFBQVE2QixXQUFXO0lBQ2pEO0lBQ0EsaUVBQWlFO0lBQ2pFLGdEQUFnRDtJQUNoRCxJQUFJN0IsUUFBUWlDLE9BQU8sS0FBS0MsV0FBVztRQUMvQnhCLFlBQVl1QixPQUFPLEdBQUdqQyxRQUFRaUMsT0FBTztJQUN6QztJQUNBLElBQUksT0FBT2pDLFFBQVFtQyxTQUFTLEtBQUssVUFBVTtRQUN2Q3pCLFlBQVl5QixTQUFTLEdBQUduQyxRQUFRbUMsU0FBUztJQUM3QztJQUNBLE1BQU1DLGNBQWM5QyxlQUFlK0MsV0FBVyxDQUFDQyxXQUFXLENBQUN0QztJQUMzRCxJQUFJb0MsYUFBYTtRQUNiMUIsWUFBWTBCLFdBQVcsR0FBR0EsWUFBWUcsTUFBTTtJQUNoRDtJQUNBLElBQUl2QyxRQUFRd0MsR0FBRyxFQUFFO1FBQ2I5QixZQUFZOEIsR0FBRyxHQUFHeEMsUUFBUXdDLEdBQUc7SUFDakM7SUFDQSxJQUFJeEMsUUFBUXlDLEdBQUcsRUFBRTtRQUNiL0IsWUFBWStCLEdBQUcsR0FBR3pDLFFBQVF5QyxHQUFHO0lBQ2pDO0lBQ0EsSUFBSSxPQUFPekMsUUFBUTBDLFNBQVMsS0FBSyxXQUFXO1FBQ3hDaEMsWUFBWWdDLFNBQVMsR0FBRzFDLFFBQVEwQyxTQUFTO0lBQzdDO0lBQ0EsSUFBSSxPQUFPMUMsUUFBUTJDLFlBQVksS0FBSyxXQUFXO1FBQzNDakMsWUFBWWlDLFlBQVksR0FBRzNDLFFBQVEyQyxZQUFZO0lBQ25EO0lBQ0EsSUFBSSxPQUFPM0MsUUFBUTRDLFFBQVEsS0FBSyxXQUFXO1FBQ3ZDbEMsWUFBWWtDLFFBQVEsR0FBRzVDLFFBQVE0QyxRQUFRO0lBQzNDO0lBQ0EsSUFBSSxPQUFPNUMsUUFBUTZDLFdBQVcsS0FBSyxXQUFXO1FBQzFDbkMsWUFBWW1DLFdBQVcsR0FBRzdDLFFBQVE2QyxXQUFXO0lBQ2pEO0lBQ0EsSUFBSSxPQUFPN0MsUUFBUThDLE9BQU8sS0FBSyxXQUFXO1FBQ3RDcEMsWUFBWXFDLGVBQWUsR0FBRyxDQUFDL0MsUUFBUThDLE9BQU87SUFDbEQsT0FDSyxJQUFJLE9BQU85QyxRQUFRK0MsZUFBZSxLQUFLLFdBQVc7UUFDbkRyQyxZQUFZcUMsZUFBZSxHQUFHL0MsUUFBUStDLGVBQWU7SUFDekQ7SUFDQSxJQUFJLE9BQU8vQyxRQUFRZ0QsU0FBUyxLQUFLLFdBQVc7UUFDeEN0QyxZQUFZc0MsU0FBUyxHQUFHaEQsUUFBUWdELFNBQVM7SUFDN0M7SUFDQSxJQUFJLE9BQU9oRCxRQUFRaUQsbUJBQW1CLEtBQUssV0FBVztRQUNsRHZDLFlBQVl1QyxtQkFBbUIsR0FBR2pELFFBQVFpRCxtQkFBbUI7SUFDakU7SUFDQSxJQUFJakQsUUFBUWtELFNBQVMsRUFBRTtRQUNuQnhDLFlBQVl3QyxTQUFTLEdBQUdsRCxRQUFRa0QsU0FBUztJQUM3QztJQUNBLElBQUksT0FBT2xELFFBQVFtRCxZQUFZLEtBQUssV0FBVztRQUMzQ3pDLFlBQVl5QyxZQUFZLEdBQUduRCxRQUFRbUQsWUFBWTtJQUNuRDtJQUNBLElBQUluRCxRQUFRb0QsR0FBRyxFQUFFO1FBQ2IxQyxZQUFZMEMsR0FBRyxHQUFHcEQsUUFBUW9ELEdBQUc7SUFDakM7SUFDQSxPQUFPMUM7QUFDWDtBQUNDLElBQUdoQixZQUFZMkQsYUFBYSxFQUFFbEUsZUFBZTtJQUMxQ08sWUFBWTRELE1BQU0sQ0FBQ0MsY0FBYztJQUNqQzdELFlBQVk0RCxNQUFNLENBQUNFLFNBQVM7SUFDNUI5RCxZQUFZNEQsTUFBTSxDQUFDRyxXQUFXO0lBQzlCL0QsWUFBWTRELE1BQU0sQ0FBQ0ksZUFBZTtDQUNyQyxHQUNELGdDQUFnQyIsInNvdXJjZXMiOlsid2VicGFjazovL2Jsb2ctYXBwbGljYXRpb24vLi9ub2RlX21vZHVsZXMvbW9uZ29kYi9saWIvb3BlcmF0aW9ucy9maW5kLmpzP2VjMzQiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLkZpbmRPcGVyYXRpb24gPSB2b2lkIDA7XG5jb25zdCBlcnJvcl8xID0gcmVxdWlyZShcIi4uL2Vycm9yXCIpO1xuY29uc3QgcmVhZF9jb25jZXJuXzEgPSByZXF1aXJlKFwiLi4vcmVhZF9jb25jZXJuXCIpO1xuY29uc3Qgc29ydF8xID0gcmVxdWlyZShcIi4uL3NvcnRcIik7XG5jb25zdCB1dGlsc18xID0gcmVxdWlyZShcIi4uL3V0aWxzXCIpO1xuY29uc3QgY29tbWFuZF8xID0gcmVxdWlyZShcIi4vY29tbWFuZFwiKTtcbmNvbnN0IG9wZXJhdGlvbl8xID0gcmVxdWlyZShcIi4vb3BlcmF0aW9uXCIpO1xuLyoqIEBpbnRlcm5hbCAqL1xuY2xhc3MgRmluZE9wZXJhdGlvbiBleHRlbmRzIGNvbW1hbmRfMS5Db21tYW5kT3BlcmF0aW9uIHtcbiAgICBjb25zdHJ1Y3Rvcihjb2xsZWN0aW9uLCBucywgZmlsdGVyID0ge30sIG9wdGlvbnMgPSB7fSkge1xuICAgICAgICBzdXBlcihjb2xsZWN0aW9uLCBvcHRpb25zKTtcbiAgICAgICAgdGhpcy5vcHRpb25zID0geyAuLi5vcHRpb25zIH07XG4gICAgICAgIGRlbGV0ZSB0aGlzLm9wdGlvbnMud3JpdGVDb25jZXJuO1xuICAgICAgICB0aGlzLm5zID0gbnM7XG4gICAgICAgIGlmICh0eXBlb2YgZmlsdGVyICE9PSAnb2JqZWN0JyB8fCBBcnJheS5pc0FycmF5KGZpbHRlcikpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBlcnJvcl8xLk1vbmdvSW52YWxpZEFyZ3VtZW50RXJyb3IoJ1F1ZXJ5IGZpbHRlciBtdXN0IGJlIGEgcGxhaW4gb2JqZWN0IG9yIE9iamVjdElkJyk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gc3BlY2lhbCBjYXNlIHBhc3NpbmcgaW4gYW4gT2JqZWN0SWQgYXMgYSBmaWx0ZXJcbiAgICAgICAgdGhpcy5maWx0ZXIgPSBmaWx0ZXIgIT0gbnVsbCAmJiBmaWx0ZXIuX2Jzb250eXBlID09PSAnT2JqZWN0SWQnID8geyBfaWQ6IGZpbHRlciB9IDogZmlsdGVyO1xuICAgIH1cbiAgICBhc3luYyBleGVjdXRlKHNlcnZlciwgc2Vzc2lvbikge1xuICAgICAgICB0aGlzLnNlcnZlciA9IHNlcnZlcjtcbiAgICAgICAgY29uc3Qgb3B0aW9ucyA9IHRoaXMub3B0aW9ucztcbiAgICAgICAgbGV0IGZpbmRDb21tYW5kID0gbWFrZUZpbmRDb21tYW5kKHRoaXMubnMsIHRoaXMuZmlsdGVyLCBvcHRpb25zKTtcbiAgICAgICAgaWYgKHRoaXMuZXhwbGFpbikge1xuICAgICAgICAgICAgZmluZENvbW1hbmQgPSAoMCwgdXRpbHNfMS5kZWNvcmF0ZVdpdGhFeHBsYWluKShmaW5kQ29tbWFuZCwgdGhpcy5leHBsYWluKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gc2VydmVyLmNvbW1hbmRBc3luYyh0aGlzLm5zLCBmaW5kQ29tbWFuZCwge1xuICAgICAgICAgICAgLi4udGhpcy5vcHRpb25zLFxuICAgICAgICAgICAgLi4udGhpcy5ic29uT3B0aW9ucyxcbiAgICAgICAgICAgIGRvY3VtZW50c1JldHVybmVkSW46ICdmaXJzdEJhdGNoJyxcbiAgICAgICAgICAgIHNlc3Npb25cbiAgICAgICAgfSk7XG4gICAgfVxufVxuZXhwb3J0cy5GaW5kT3BlcmF0aW9uID0gRmluZE9wZXJhdGlvbjtcbmZ1bmN0aW9uIG1ha2VGaW5kQ29tbWFuZChucywgZmlsdGVyLCBvcHRpb25zKSB7XG4gICAgY29uc3QgZmluZENvbW1hbmQgPSB7XG4gICAgICAgIGZpbmQ6IG5zLmNvbGxlY3Rpb24sXG4gICAgICAgIGZpbHRlclxuICAgIH07XG4gICAgaWYgKG9wdGlvbnMuc29ydCkge1xuICAgICAgICBmaW5kQ29tbWFuZC5zb3J0ID0gKDAsIHNvcnRfMS5mb3JtYXRTb3J0KShvcHRpb25zLnNvcnQpO1xuICAgIH1cbiAgICBpZiAob3B0aW9ucy5wcm9qZWN0aW9uKSB7XG4gICAgICAgIGxldCBwcm9qZWN0aW9uID0gb3B0aW9ucy5wcm9qZWN0aW9uO1xuICAgICAgICBpZiAocHJvamVjdGlvbiAmJiBBcnJheS5pc0FycmF5KHByb2plY3Rpb24pKSB7XG4gICAgICAgICAgICBwcm9qZWN0aW9uID0gcHJvamVjdGlvbi5sZW5ndGhcbiAgICAgICAgICAgICAgICA/IHByb2plY3Rpb24ucmVkdWNlKChyZXN1bHQsIGZpZWxkKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdFtmaWVsZF0gPSAxO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgICAgICAgICAgIH0sIHt9KVxuICAgICAgICAgICAgICAgIDogeyBfaWQ6IDEgfTtcbiAgICAgICAgfVxuICAgICAgICBmaW5kQ29tbWFuZC5wcm9qZWN0aW9uID0gcHJvamVjdGlvbjtcbiAgICB9XG4gICAgaWYgKG9wdGlvbnMuaGludCkge1xuICAgICAgICBmaW5kQ29tbWFuZC5oaW50ID0gKDAsIHV0aWxzXzEubm9ybWFsaXplSGludEZpZWxkKShvcHRpb25zLmhpbnQpO1xuICAgIH1cbiAgICBpZiAodHlwZW9mIG9wdGlvbnMuc2tpcCA9PT0gJ251bWJlcicpIHtcbiAgICAgICAgZmluZENvbW1hbmQuc2tpcCA9IG9wdGlvbnMuc2tpcDtcbiAgICB9XG4gICAgaWYgKHR5cGVvZiBvcHRpb25zLmxpbWl0ID09PSAnbnVtYmVyJykge1xuICAgICAgICBpZiAob3B0aW9ucy5saW1pdCA8IDApIHtcbiAgICAgICAgICAgIGZpbmRDb21tYW5kLmxpbWl0ID0gLW9wdGlvbnMubGltaXQ7XG4gICAgICAgICAgICBmaW5kQ29tbWFuZC5zaW5nbGVCYXRjaCA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBmaW5kQ29tbWFuZC5saW1pdCA9IG9wdGlvbnMubGltaXQ7XG4gICAgICAgIH1cbiAgICB9XG4gICAgaWYgKHR5cGVvZiBvcHRpb25zLmJhdGNoU2l6ZSA9PT0gJ251bWJlcicpIHtcbiAgICAgICAgaWYgKG9wdGlvbnMuYmF0Y2hTaXplIDwgMCkge1xuICAgICAgICAgICAgaWYgKG9wdGlvbnMubGltaXQgJiZcbiAgICAgICAgICAgICAgICBvcHRpb25zLmxpbWl0ICE9PSAwICYmXG4gICAgICAgICAgICAgICAgTWF0aC5hYnMob3B0aW9ucy5iYXRjaFNpemUpIDwgTWF0aC5hYnMob3B0aW9ucy5saW1pdCkpIHtcbiAgICAgICAgICAgICAgICBmaW5kQ29tbWFuZC5saW1pdCA9IC1vcHRpb25zLmJhdGNoU2l6ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGZpbmRDb21tYW5kLnNpbmdsZUJhdGNoID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGZpbmRDb21tYW5kLmJhdGNoU2l6ZSA9IG9wdGlvbnMuYmF0Y2hTaXplO1xuICAgICAgICB9XG4gICAgfVxuICAgIGlmICh0eXBlb2Ygb3B0aW9ucy5zaW5nbGVCYXRjaCA9PT0gJ2Jvb2xlYW4nKSB7XG4gICAgICAgIGZpbmRDb21tYW5kLnNpbmdsZUJhdGNoID0gb3B0aW9ucy5zaW5nbGVCYXRjaDtcbiAgICB9XG4gICAgLy8gd2UgY2hlY2sgZm9yIHVuZGVmaW5lZCBzcGVjaWZpY2FsbHkgaGVyZSB0byBhbGxvdyBmYWxzeSB2YWx1ZXNcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tcmVzdHJpY3RlZC1zeW50YXhcbiAgICBpZiAob3B0aW9ucy5jb21tZW50ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgZmluZENvbW1hbmQuY29tbWVudCA9IG9wdGlvbnMuY29tbWVudDtcbiAgICB9XG4gICAgaWYgKHR5cGVvZiBvcHRpb25zLm1heFRpbWVNUyA9PT0gJ251bWJlcicpIHtcbiAgICAgICAgZmluZENvbW1hbmQubWF4VGltZU1TID0gb3B0aW9ucy5tYXhUaW1lTVM7XG4gICAgfVxuICAgIGNvbnN0IHJlYWRDb25jZXJuID0gcmVhZF9jb25jZXJuXzEuUmVhZENvbmNlcm4uZnJvbU9wdGlvbnMob3B0aW9ucyk7XG4gICAgaWYgKHJlYWRDb25jZXJuKSB7XG4gICAgICAgIGZpbmRDb21tYW5kLnJlYWRDb25jZXJuID0gcmVhZENvbmNlcm4udG9KU09OKCk7XG4gICAgfVxuICAgIGlmIChvcHRpb25zLm1heCkge1xuICAgICAgICBmaW5kQ29tbWFuZC5tYXggPSBvcHRpb25zLm1heDtcbiAgICB9XG4gICAgaWYgKG9wdGlvbnMubWluKSB7XG4gICAgICAgIGZpbmRDb21tYW5kLm1pbiA9IG9wdGlvbnMubWluO1xuICAgIH1cbiAgICBpZiAodHlwZW9mIG9wdGlvbnMucmV0dXJuS2V5ID09PSAnYm9vbGVhbicpIHtcbiAgICAgICAgZmluZENvbW1hbmQucmV0dXJuS2V5ID0gb3B0aW9ucy5yZXR1cm5LZXk7XG4gICAgfVxuICAgIGlmICh0eXBlb2Ygb3B0aW9ucy5zaG93UmVjb3JkSWQgPT09ICdib29sZWFuJykge1xuICAgICAgICBmaW5kQ29tbWFuZC5zaG93UmVjb3JkSWQgPSBvcHRpb25zLnNob3dSZWNvcmRJZDtcbiAgICB9XG4gICAgaWYgKHR5cGVvZiBvcHRpb25zLnRhaWxhYmxlID09PSAnYm9vbGVhbicpIHtcbiAgICAgICAgZmluZENvbW1hbmQudGFpbGFibGUgPSBvcHRpb25zLnRhaWxhYmxlO1xuICAgIH1cbiAgICBpZiAodHlwZW9mIG9wdGlvbnMub3Bsb2dSZXBsYXkgPT09ICdib29sZWFuJykge1xuICAgICAgICBmaW5kQ29tbWFuZC5vcGxvZ1JlcGxheSA9IG9wdGlvbnMub3Bsb2dSZXBsYXk7XG4gICAgfVxuICAgIGlmICh0eXBlb2Ygb3B0aW9ucy50aW1lb3V0ID09PSAnYm9vbGVhbicpIHtcbiAgICAgICAgZmluZENvbW1hbmQubm9DdXJzb3JUaW1lb3V0ID0gIW9wdGlvbnMudGltZW91dDtcbiAgICB9XG4gICAgZWxzZSBpZiAodHlwZW9mIG9wdGlvbnMubm9DdXJzb3JUaW1lb3V0ID09PSAnYm9vbGVhbicpIHtcbiAgICAgICAgZmluZENvbW1hbmQubm9DdXJzb3JUaW1lb3V0ID0gb3B0aW9ucy5ub0N1cnNvclRpbWVvdXQ7XG4gICAgfVxuICAgIGlmICh0eXBlb2Ygb3B0aW9ucy5hd2FpdERhdGEgPT09ICdib29sZWFuJykge1xuICAgICAgICBmaW5kQ29tbWFuZC5hd2FpdERhdGEgPSBvcHRpb25zLmF3YWl0RGF0YTtcbiAgICB9XG4gICAgaWYgKHR5cGVvZiBvcHRpb25zLmFsbG93UGFydGlhbFJlc3VsdHMgPT09ICdib29sZWFuJykge1xuICAgICAgICBmaW5kQ29tbWFuZC5hbGxvd1BhcnRpYWxSZXN1bHRzID0gb3B0aW9ucy5hbGxvd1BhcnRpYWxSZXN1bHRzO1xuICAgIH1cbiAgICBpZiAob3B0aW9ucy5jb2xsYXRpb24pIHtcbiAgICAgICAgZmluZENvbW1hbmQuY29sbGF0aW9uID0gb3B0aW9ucy5jb2xsYXRpb247XG4gICAgfVxuICAgIGlmICh0eXBlb2Ygb3B0aW9ucy5hbGxvd0Rpc2tVc2UgPT09ICdib29sZWFuJykge1xuICAgICAgICBmaW5kQ29tbWFuZC5hbGxvd0Rpc2tVc2UgPSBvcHRpb25zLmFsbG93RGlza1VzZTtcbiAgICB9XG4gICAgaWYgKG9wdGlvbnMubGV0KSB7XG4gICAgICAgIGZpbmRDb21tYW5kLmxldCA9IG9wdGlvbnMubGV0O1xuICAgIH1cbiAgICByZXR1cm4gZmluZENvbW1hbmQ7XG59XG4oMCwgb3BlcmF0aW9uXzEuZGVmaW5lQXNwZWN0cykoRmluZE9wZXJhdGlvbiwgW1xuICAgIG9wZXJhdGlvbl8xLkFzcGVjdC5SRUFEX09QRVJBVElPTixcbiAgICBvcGVyYXRpb25fMS5Bc3BlY3QuUkVUUllBQkxFLFxuICAgIG9wZXJhdGlvbl8xLkFzcGVjdC5FWFBMQUlOQUJMRSxcbiAgICBvcGVyYXRpb25fMS5Bc3BlY3QuQ1VSU09SX0NSRUFUSU5HXG5dKTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWZpbmQuanMubWFwIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiRmluZE9wZXJhdGlvbiIsImVycm9yXzEiLCJyZXF1aXJlIiwicmVhZF9jb25jZXJuXzEiLCJzb3J0XzEiLCJ1dGlsc18xIiwiY29tbWFuZF8xIiwib3BlcmF0aW9uXzEiLCJDb21tYW5kT3BlcmF0aW9uIiwiY29uc3RydWN0b3IiLCJjb2xsZWN0aW9uIiwibnMiLCJmaWx0ZXIiLCJvcHRpb25zIiwid3JpdGVDb25jZXJuIiwiQXJyYXkiLCJpc0FycmF5IiwiTW9uZ29JbnZhbGlkQXJndW1lbnRFcnJvciIsIl9ic29udHlwZSIsIl9pZCIsImV4ZWN1dGUiLCJzZXJ2ZXIiLCJzZXNzaW9uIiwiZmluZENvbW1hbmQiLCJtYWtlRmluZENvbW1hbmQiLCJleHBsYWluIiwiZGVjb3JhdGVXaXRoRXhwbGFpbiIsImNvbW1hbmRBc3luYyIsImJzb25PcHRpb25zIiwiZG9jdW1lbnRzUmV0dXJuZWRJbiIsImZpbmQiLCJzb3J0IiwiZm9ybWF0U29ydCIsInByb2plY3Rpb24iLCJsZW5ndGgiLCJyZWR1Y2UiLCJyZXN1bHQiLCJmaWVsZCIsImhpbnQiLCJub3JtYWxpemVIaW50RmllbGQiLCJza2lwIiwibGltaXQiLCJzaW5nbGVCYXRjaCIsImJhdGNoU2l6ZSIsIk1hdGgiLCJhYnMiLCJjb21tZW50IiwidW5kZWZpbmVkIiwibWF4VGltZU1TIiwicmVhZENvbmNlcm4iLCJSZWFkQ29uY2VybiIsImZyb21PcHRpb25zIiwidG9KU09OIiwibWF4IiwibWluIiwicmV0dXJuS2V5Iiwic2hvd1JlY29yZElkIiwidGFpbGFibGUiLCJvcGxvZ1JlcGxheSIsInRpbWVvdXQiLCJub0N1cnNvclRpbWVvdXQiLCJhd2FpdERhdGEiLCJhbGxvd1BhcnRpYWxSZXN1bHRzIiwiY29sbGF0aW9uIiwiYWxsb3dEaXNrVXNlIiwibGV0IiwiZGVmaW5lQXNwZWN0cyIsIkFzcGVjdCIsIlJFQURfT1BFUkFUSU9OIiwiUkVUUllBQkxFIiwiRVhQTEFJTkFCTEUiLCJDVVJTT1JfQ1JFQVRJTkciXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongodb/lib/operations/find.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongodb/lib/operations/find_and_modify.js":
/*!****************************************************************!*\
  !*** ./node_modules/mongodb/lib/operations/find_and_modify.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.FindOneAndUpdateOperation = exports.FindOneAndReplaceOperation = exports.FindOneAndDeleteOperation = exports.ReturnDocument = void 0;\nconst error_1 = __webpack_require__(/*! ../error */ \"(ssr)/./node_modules/mongodb/lib/error.js\");\nconst read_preference_1 = __webpack_require__(/*! ../read_preference */ \"(ssr)/./node_modules/mongodb/lib/read_preference.js\");\nconst sort_1 = __webpack_require__(/*! ../sort */ \"(ssr)/./node_modules/mongodb/lib/sort.js\");\nconst utils_1 = __webpack_require__(/*! ../utils */ \"(ssr)/./node_modules/mongodb/lib/utils.js\");\nconst command_1 = __webpack_require__(/*! ./command */ \"(ssr)/./node_modules/mongodb/lib/operations/command.js\");\nconst operation_1 = __webpack_require__(/*! ./operation */ \"(ssr)/./node_modules/mongodb/lib/operations/operation.js\");\n/** @public */ exports.ReturnDocument = Object.freeze({\n    BEFORE: \"before\",\n    AFTER: \"after\"\n});\nfunction configureFindAndModifyCmdBaseUpdateOpts(cmdBase, options) {\n    cmdBase.new = options.returnDocument === exports.ReturnDocument.AFTER;\n    cmdBase.upsert = options.upsert === true;\n    if (options.bypassDocumentValidation === true) {\n        cmdBase.bypassDocumentValidation = options.bypassDocumentValidation;\n    }\n    return cmdBase;\n}\n/** @internal */ class FindAndModifyOperation extends command_1.CommandOperation {\n    constructor(collection, query, options){\n        super(collection, options);\n        this.options = options ?? {};\n        this.cmdBase = {\n            remove: false,\n            new: false,\n            upsert: false\n        };\n        options.includeResultMetadata ??= false;\n        const sort = (0, sort_1.formatSort)(options.sort);\n        if (sort) {\n            this.cmdBase.sort = sort;\n        }\n        if (options.projection) {\n            this.cmdBase.fields = options.projection;\n        }\n        if (options.maxTimeMS) {\n            this.cmdBase.maxTimeMS = options.maxTimeMS;\n        }\n        // Decorate the findAndModify command with the write Concern\n        if (options.writeConcern) {\n            this.cmdBase.writeConcern = options.writeConcern;\n        }\n        if (options.let) {\n            this.cmdBase.let = options.let;\n        }\n        // we check for undefined specifically here to allow falsy values\n        // eslint-disable-next-line no-restricted-syntax\n        if (options.comment !== undefined) {\n            this.cmdBase.comment = options.comment;\n        }\n        // force primary read preference\n        this.readPreference = read_preference_1.ReadPreference.primary;\n        this.collection = collection;\n        this.query = query;\n    }\n    async execute(server, session) {\n        const coll = this.collection;\n        const query = this.query;\n        const options = {\n            ...this.options,\n            ...this.bsonOptions\n        };\n        // Create findAndModify command object\n        const cmd = {\n            findAndModify: coll.collectionName,\n            query: query,\n            ...this.cmdBase\n        };\n        // Have we specified collation\n        try {\n            (0, utils_1.decorateWithCollation)(cmd, coll, options);\n        } catch (err) {\n            return err;\n        }\n        if (options.hint) {\n            // TODO: once this method becomes a CommandOperation we will have the server\n            // in place to check.\n            const unacknowledgedWrite = this.writeConcern?.w === 0;\n            if (unacknowledgedWrite || (0, utils_1.maxWireVersion)(server) < 8) {\n                throw new error_1.MongoCompatibilityError(\"The current topology does not support a hint on findAndModify commands\");\n            }\n            cmd.hint = options.hint;\n        }\n        // Execute the command\n        const result = await super.executeCommand(server, session, cmd);\n        return options.includeResultMetadata ? result : result.value ?? null;\n    }\n}\n/** @internal */ class FindOneAndDeleteOperation extends FindAndModifyOperation {\n    constructor(collection, filter, options){\n        // Basic validation\n        if (filter == null || typeof filter !== \"object\") {\n            throw new error_1.MongoInvalidArgumentError('Argument \"filter\" must be an object');\n        }\n        super(collection, filter, options);\n        this.cmdBase.remove = true;\n    }\n}\nexports.FindOneAndDeleteOperation = FindOneAndDeleteOperation;\n/** @internal */ class FindOneAndReplaceOperation extends FindAndModifyOperation {\n    constructor(collection, filter, replacement, options){\n        if (filter == null || typeof filter !== \"object\") {\n            throw new error_1.MongoInvalidArgumentError('Argument \"filter\" must be an object');\n        }\n        if (replacement == null || typeof replacement !== \"object\") {\n            throw new error_1.MongoInvalidArgumentError('Argument \"replacement\" must be an object');\n        }\n        if ((0, utils_1.hasAtomicOperators)(replacement)) {\n            throw new error_1.MongoInvalidArgumentError(\"Replacement document must not contain atomic operators\");\n        }\n        super(collection, filter, options);\n        this.cmdBase.update = replacement;\n        configureFindAndModifyCmdBaseUpdateOpts(this.cmdBase, options);\n    }\n}\nexports.FindOneAndReplaceOperation = FindOneAndReplaceOperation;\n/** @internal */ class FindOneAndUpdateOperation extends FindAndModifyOperation {\n    constructor(collection, filter, update, options){\n        if (filter == null || typeof filter !== \"object\") {\n            throw new error_1.MongoInvalidArgumentError('Argument \"filter\" must be an object');\n        }\n        if (update == null || typeof update !== \"object\") {\n            throw new error_1.MongoInvalidArgumentError('Argument \"update\" must be an object');\n        }\n        if (!(0, utils_1.hasAtomicOperators)(update)) {\n            throw new error_1.MongoInvalidArgumentError(\"Update document requires atomic operators\");\n        }\n        super(collection, filter, options);\n        this.cmdBase.update = update;\n        configureFindAndModifyCmdBaseUpdateOpts(this.cmdBase, options);\n        if (options.arrayFilters) {\n            this.cmdBase.arrayFilters = options.arrayFilters;\n        }\n    }\n}\nexports.FindOneAndUpdateOperation = FindOneAndUpdateOperation;\n(0, operation_1.defineAspects)(FindAndModifyOperation, [\n    operation_1.Aspect.WRITE_OPERATION,\n    operation_1.Aspect.RETRYABLE,\n    operation_1.Aspect.EXPLAINABLE\n]); //# sourceMappingURL=find_and_modify.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongodb/lib/operations/find_and_modify.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongodb/lib/operations/get_more.js":
/*!*********************************************************!*\
  !*** ./node_modules/mongodb/lib/operations/get_more.js ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.GetMoreOperation = void 0;\nconst error_1 = __webpack_require__(/*! ../error */ \"(ssr)/./node_modules/mongodb/lib/error.js\");\nconst utils_1 = __webpack_require__(/*! ../utils */ \"(ssr)/./node_modules/mongodb/lib/utils.js\");\nconst operation_1 = __webpack_require__(/*! ./operation */ \"(ssr)/./node_modules/mongodb/lib/operations/operation.js\");\n/** @internal */ class GetMoreOperation extends operation_1.AbstractOperation {\n    constructor(ns, cursorId, server, options){\n        super(options);\n        this.options = options;\n        this.ns = ns;\n        this.cursorId = cursorId;\n        this.server = server;\n    }\n    /**\n     * Although there is a server already associated with the get more operation, the signature\n     * for execute passes a server so we will just use that one.\n     */ async execute(server, _session) {\n        if (server !== this.server) {\n            throw new error_1.MongoRuntimeError(\"Getmore must run on the same server operation began on\");\n        }\n        if (this.cursorId == null || this.cursorId.isZero()) {\n            throw new error_1.MongoRuntimeError(\"Unable to iterate cursor with no id\");\n        }\n        const collection = this.ns.collection;\n        if (collection == null) {\n            // Cursors should have adopted the namespace returned by MongoDB\n            // which should always defined a collection name (even a pseudo one, ex. db.aggregate())\n            throw new error_1.MongoRuntimeError(\"A collection name must be determined before getMore\");\n        }\n        const getMoreCmd = {\n            getMore: this.cursorId,\n            collection\n        };\n        if (typeof this.options.batchSize === \"number\") {\n            getMoreCmd.batchSize = Math.abs(this.options.batchSize);\n        }\n        if (typeof this.options.maxAwaitTimeMS === \"number\") {\n            getMoreCmd.maxTimeMS = this.options.maxAwaitTimeMS;\n        }\n        // we check for undefined specifically here to allow falsy values\n        // eslint-disable-next-line no-restricted-syntax\n        if (this.options.comment !== undefined && (0, utils_1.maxWireVersion)(server) >= 9) {\n            getMoreCmd.comment = this.options.comment;\n        }\n        const commandOptions = {\n            returnFieldSelector: null,\n            documentsReturnedIn: \"nextBatch\",\n            ...this.options\n        };\n        return server.commandAsync(this.ns, getMoreCmd, commandOptions);\n    }\n}\nexports.GetMoreOperation = GetMoreOperation;\n(0, operation_1.defineAspects)(GetMoreOperation, [\n    operation_1.Aspect.READ_OPERATION,\n    operation_1.Aspect.MUST_SELECT_SAME_SERVER\n]); //# sourceMappingURL=get_more.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbW9uZ29kYi9saWIvb3BlcmF0aW9ucy9nZXRfbW9yZS5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiQSw4Q0FBNkM7SUFBRUcsT0FBTztBQUFLLENBQUMsRUFBQztBQUM3REQsd0JBQXdCLEdBQUcsS0FBSztBQUNoQyxNQUFNRyxVQUFVQyxtQkFBT0EsQ0FBQywyREFBVTtBQUNsQyxNQUFNQyxVQUFVRCxtQkFBT0EsQ0FBQywyREFBVTtBQUNsQyxNQUFNRSxjQUFjRixtQkFBT0EsQ0FBQyw2RUFBYTtBQUN6QyxjQUFjLEdBQ2QsTUFBTUYseUJBQXlCSSxZQUFZQyxpQkFBaUI7SUFDeERDLFlBQVlDLEVBQUUsRUFBRUMsUUFBUSxFQUFFQyxNQUFNLEVBQUVDLE9BQU8sQ0FBRTtRQUN2QyxLQUFLLENBQUNBO1FBQ04sSUFBSSxDQUFDQSxPQUFPLEdBQUdBO1FBQ2YsSUFBSSxDQUFDSCxFQUFFLEdBQUdBO1FBQ1YsSUFBSSxDQUFDQyxRQUFRLEdBQUdBO1FBQ2hCLElBQUksQ0FBQ0MsTUFBTSxHQUFHQTtJQUNsQjtJQUNBOzs7S0FHQyxHQUNELE1BQU1FLFFBQVFGLE1BQU0sRUFBRUcsUUFBUSxFQUFFO1FBQzVCLElBQUlILFdBQVcsSUFBSSxDQUFDQSxNQUFNLEVBQUU7WUFDeEIsTUFBTSxJQUFJUixRQUFRWSxpQkFBaUIsQ0FBQztRQUN4QztRQUNBLElBQUksSUFBSSxDQUFDTCxRQUFRLElBQUksUUFBUSxJQUFJLENBQUNBLFFBQVEsQ0FBQ00sTUFBTSxJQUFJO1lBQ2pELE1BQU0sSUFBSWIsUUFBUVksaUJBQWlCLENBQUM7UUFDeEM7UUFDQSxNQUFNRSxhQUFhLElBQUksQ0FBQ1IsRUFBRSxDQUFDUSxVQUFVO1FBQ3JDLElBQUlBLGNBQWMsTUFBTTtZQUNwQixnRUFBZ0U7WUFDaEUsd0ZBQXdGO1lBQ3hGLE1BQU0sSUFBSWQsUUFBUVksaUJBQWlCLENBQUM7UUFDeEM7UUFDQSxNQUFNRyxhQUFhO1lBQ2ZDLFNBQVMsSUFBSSxDQUFDVCxRQUFRO1lBQ3RCTztRQUNKO1FBQ0EsSUFBSSxPQUFPLElBQUksQ0FBQ0wsT0FBTyxDQUFDUSxTQUFTLEtBQUssVUFBVTtZQUM1Q0YsV0FBV0UsU0FBUyxHQUFHQyxLQUFLQyxHQUFHLENBQUMsSUFBSSxDQUFDVixPQUFPLENBQUNRLFNBQVM7UUFDMUQ7UUFDQSxJQUFJLE9BQU8sSUFBSSxDQUFDUixPQUFPLENBQUNXLGNBQWMsS0FBSyxVQUFVO1lBQ2pETCxXQUFXTSxTQUFTLEdBQUcsSUFBSSxDQUFDWixPQUFPLENBQUNXLGNBQWM7UUFDdEQ7UUFDQSxpRUFBaUU7UUFDakUsZ0RBQWdEO1FBQ2hELElBQUksSUFBSSxDQUFDWCxPQUFPLENBQUNhLE9BQU8sS0FBS0MsYUFBYSxDQUFDLEdBQUdyQixRQUFRc0IsY0FBYyxFQUFFaEIsV0FBVyxHQUFHO1lBQ2hGTyxXQUFXTyxPQUFPLEdBQUcsSUFBSSxDQUFDYixPQUFPLENBQUNhLE9BQU87UUFDN0M7UUFDQSxNQUFNRyxpQkFBaUI7WUFDbkJDLHFCQUFxQjtZQUNyQkMscUJBQXFCO1lBQ3JCLEdBQUcsSUFBSSxDQUFDbEIsT0FBTztRQUNuQjtRQUNBLE9BQU9ELE9BQU9vQixZQUFZLENBQUMsSUFBSSxDQUFDdEIsRUFBRSxFQUFFUyxZQUFZVTtJQUNwRDtBQUNKO0FBQ0E1Qix3QkFBd0IsR0FBR0U7QUFDMUIsSUFBR0ksWUFBWTBCLGFBQWEsRUFBRTlCLGtCQUFrQjtJQUFDSSxZQUFZMkIsTUFBTSxDQUFDQyxjQUFjO0lBQUU1QixZQUFZMkIsTUFBTSxDQUFDRSx1QkFBdUI7Q0FBQyxHQUNoSSxvQ0FBb0MiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9ibG9nLWFwcGxpY2F0aW9uLy4vbm9kZV9tb2R1bGVzL21vbmdvZGIvbGliL29wZXJhdGlvbnMvZ2V0X21vcmUuanM/ZDE5NCJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuR2V0TW9yZU9wZXJhdGlvbiA9IHZvaWQgMDtcbmNvbnN0IGVycm9yXzEgPSByZXF1aXJlKFwiLi4vZXJyb3JcIik7XG5jb25zdCB1dGlsc18xID0gcmVxdWlyZShcIi4uL3V0aWxzXCIpO1xuY29uc3Qgb3BlcmF0aW9uXzEgPSByZXF1aXJlKFwiLi9vcGVyYXRpb25cIik7XG4vKiogQGludGVybmFsICovXG5jbGFzcyBHZXRNb3JlT3BlcmF0aW9uIGV4dGVuZHMgb3BlcmF0aW9uXzEuQWJzdHJhY3RPcGVyYXRpb24ge1xuICAgIGNvbnN0cnVjdG9yKG5zLCBjdXJzb3JJZCwgc2VydmVyLCBvcHRpb25zKSB7XG4gICAgICAgIHN1cGVyKG9wdGlvbnMpO1xuICAgICAgICB0aGlzLm9wdGlvbnMgPSBvcHRpb25zO1xuICAgICAgICB0aGlzLm5zID0gbnM7XG4gICAgICAgIHRoaXMuY3Vyc29ySWQgPSBjdXJzb3JJZDtcbiAgICAgICAgdGhpcy5zZXJ2ZXIgPSBzZXJ2ZXI7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEFsdGhvdWdoIHRoZXJlIGlzIGEgc2VydmVyIGFscmVhZHkgYXNzb2NpYXRlZCB3aXRoIHRoZSBnZXQgbW9yZSBvcGVyYXRpb24sIHRoZSBzaWduYXR1cmVcbiAgICAgKiBmb3IgZXhlY3V0ZSBwYXNzZXMgYSBzZXJ2ZXIgc28gd2Ugd2lsbCBqdXN0IHVzZSB0aGF0IG9uZS5cbiAgICAgKi9cbiAgICBhc3luYyBleGVjdXRlKHNlcnZlciwgX3Nlc3Npb24pIHtcbiAgICAgICAgaWYgKHNlcnZlciAhPT0gdGhpcy5zZXJ2ZXIpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBlcnJvcl8xLk1vbmdvUnVudGltZUVycm9yKCdHZXRtb3JlIG11c3QgcnVuIG9uIHRoZSBzYW1lIHNlcnZlciBvcGVyYXRpb24gYmVnYW4gb24nKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5jdXJzb3JJZCA9PSBudWxsIHx8IHRoaXMuY3Vyc29ySWQuaXNaZXJvKCkpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBlcnJvcl8xLk1vbmdvUnVudGltZUVycm9yKCdVbmFibGUgdG8gaXRlcmF0ZSBjdXJzb3Igd2l0aCBubyBpZCcpO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGNvbGxlY3Rpb24gPSB0aGlzLm5zLmNvbGxlY3Rpb247XG4gICAgICAgIGlmIChjb2xsZWN0aW9uID09IG51bGwpIHtcbiAgICAgICAgICAgIC8vIEN1cnNvcnMgc2hvdWxkIGhhdmUgYWRvcHRlZCB0aGUgbmFtZXNwYWNlIHJldHVybmVkIGJ5IE1vbmdvREJcbiAgICAgICAgICAgIC8vIHdoaWNoIHNob3VsZCBhbHdheXMgZGVmaW5lZCBhIGNvbGxlY3Rpb24gbmFtZSAoZXZlbiBhIHBzZXVkbyBvbmUsIGV4LiBkYi5hZ2dyZWdhdGUoKSlcbiAgICAgICAgICAgIHRocm93IG5ldyBlcnJvcl8xLk1vbmdvUnVudGltZUVycm9yKCdBIGNvbGxlY3Rpb24gbmFtZSBtdXN0IGJlIGRldGVybWluZWQgYmVmb3JlIGdldE1vcmUnKTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBnZXRNb3JlQ21kID0ge1xuICAgICAgICAgICAgZ2V0TW9yZTogdGhpcy5jdXJzb3JJZCxcbiAgICAgICAgICAgIGNvbGxlY3Rpb25cbiAgICAgICAgfTtcbiAgICAgICAgaWYgKHR5cGVvZiB0aGlzLm9wdGlvbnMuYmF0Y2hTaXplID09PSAnbnVtYmVyJykge1xuICAgICAgICAgICAgZ2V0TW9yZUNtZC5iYXRjaFNpemUgPSBNYXRoLmFicyh0aGlzLm9wdGlvbnMuYmF0Y2hTaXplKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodHlwZW9mIHRoaXMub3B0aW9ucy5tYXhBd2FpdFRpbWVNUyA9PT0gJ251bWJlcicpIHtcbiAgICAgICAgICAgIGdldE1vcmVDbWQubWF4VGltZU1TID0gdGhpcy5vcHRpb25zLm1heEF3YWl0VGltZU1TO1xuICAgICAgICB9XG4gICAgICAgIC8vIHdlIGNoZWNrIGZvciB1bmRlZmluZWQgc3BlY2lmaWNhbGx5IGhlcmUgdG8gYWxsb3cgZmFsc3kgdmFsdWVzXG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1yZXN0cmljdGVkLXN5bnRheFxuICAgICAgICBpZiAodGhpcy5vcHRpb25zLmNvbW1lbnQgIT09IHVuZGVmaW5lZCAmJiAoMCwgdXRpbHNfMS5tYXhXaXJlVmVyc2lvbikoc2VydmVyKSA+PSA5KSB7XG4gICAgICAgICAgICBnZXRNb3JlQ21kLmNvbW1lbnQgPSB0aGlzLm9wdGlvbnMuY29tbWVudDtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBjb21tYW5kT3B0aW9ucyA9IHtcbiAgICAgICAgICAgIHJldHVybkZpZWxkU2VsZWN0b3I6IG51bGwsXG4gICAgICAgICAgICBkb2N1bWVudHNSZXR1cm5lZEluOiAnbmV4dEJhdGNoJyxcbiAgICAgICAgICAgIC4uLnRoaXMub3B0aW9uc1xuICAgICAgICB9O1xuICAgICAgICByZXR1cm4gc2VydmVyLmNvbW1hbmRBc3luYyh0aGlzLm5zLCBnZXRNb3JlQ21kLCBjb21tYW5kT3B0aW9ucyk7XG4gICAgfVxufVxuZXhwb3J0cy5HZXRNb3JlT3BlcmF0aW9uID0gR2V0TW9yZU9wZXJhdGlvbjtcbigwLCBvcGVyYXRpb25fMS5kZWZpbmVBc3BlY3RzKShHZXRNb3JlT3BlcmF0aW9uLCBbb3BlcmF0aW9uXzEuQXNwZWN0LlJFQURfT1BFUkFUSU9OLCBvcGVyYXRpb25fMS5Bc3BlY3QuTVVTVF9TRUxFQ1RfU0FNRV9TRVJWRVJdKTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWdldF9tb3JlLmpzLm1hcCJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsIkdldE1vcmVPcGVyYXRpb24iLCJlcnJvcl8xIiwicmVxdWlyZSIsInV0aWxzXzEiLCJvcGVyYXRpb25fMSIsIkFic3RyYWN0T3BlcmF0aW9uIiwiY29uc3RydWN0b3IiLCJucyIsImN1cnNvcklkIiwic2VydmVyIiwib3B0aW9ucyIsImV4ZWN1dGUiLCJfc2Vzc2lvbiIsIk1vbmdvUnVudGltZUVycm9yIiwiaXNaZXJvIiwiY29sbGVjdGlvbiIsImdldE1vcmVDbWQiLCJnZXRNb3JlIiwiYmF0Y2hTaXplIiwiTWF0aCIsImFicyIsIm1heEF3YWl0VGltZU1TIiwibWF4VGltZU1TIiwiY29tbWVudCIsInVuZGVmaW5lZCIsIm1heFdpcmVWZXJzaW9uIiwiY29tbWFuZE9wdGlvbnMiLCJyZXR1cm5GaWVsZFNlbGVjdG9yIiwiZG9jdW1lbnRzUmV0dXJuZWRJbiIsImNvbW1hbmRBc3luYyIsImRlZmluZUFzcGVjdHMiLCJBc3BlY3QiLCJSRUFEX09QRVJBVElPTiIsIk1VU1RfU0VMRUNUX1NBTUVfU0VSVkVSIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongodb/lib/operations/get_more.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongodb/lib/operations/indexes.js":
/*!********************************************************!*\
  !*** ./node_modules/mongodb/lib/operations/indexes.js ***!
  \********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.IndexInformationOperation = exports.IndexExistsOperation = exports.ListIndexesOperation = exports.DropIndexOperation = exports.EnsureIndexOperation = exports.CreateIndexOperation = exports.CreateIndexesOperation = exports.IndexesOperation = void 0;\nconst error_1 = __webpack_require__(/*! ../error */ \"(ssr)/./node_modules/mongodb/lib/error.js\");\nconst read_preference_1 = __webpack_require__(/*! ../read_preference */ \"(ssr)/./node_modules/mongodb/lib/read_preference.js\");\nconst utils_1 = __webpack_require__(/*! ../utils */ \"(ssr)/./node_modules/mongodb/lib/utils.js\");\nconst command_1 = __webpack_require__(/*! ./command */ \"(ssr)/./node_modules/mongodb/lib/operations/command.js\");\nconst common_functions_1 = __webpack_require__(/*! ./common_functions */ \"(ssr)/./node_modules/mongodb/lib/operations/common_functions.js\");\nconst operation_1 = __webpack_require__(/*! ./operation */ \"(ssr)/./node_modules/mongodb/lib/operations/operation.js\");\nconst VALID_INDEX_OPTIONS = new Set([\n    \"background\",\n    \"unique\",\n    \"name\",\n    \"partialFilterExpression\",\n    \"sparse\",\n    \"hidden\",\n    \"expireAfterSeconds\",\n    \"storageEngine\",\n    \"collation\",\n    \"version\",\n    // text indexes\n    \"weights\",\n    \"default_language\",\n    \"language_override\",\n    \"textIndexVersion\",\n    // 2d-sphere indexes\n    \"2dsphereIndexVersion\",\n    // 2d indexes\n    \"bits\",\n    \"min\",\n    \"max\",\n    // geoHaystack Indexes\n    \"bucketSize\",\n    // wildcard indexes\n    \"wildcardProjection\"\n]);\nfunction isIndexDirection(x) {\n    return typeof x === \"number\" || x === \"2d\" || x === \"2dsphere\" || x === \"text\" || x === \"geoHaystack\";\n}\nfunction isSingleIndexTuple(t) {\n    return Array.isArray(t) && t.length === 2 && isIndexDirection(t[1]);\n}\nfunction makeIndexSpec(indexSpec, options) {\n    const key = new Map();\n    const indexSpecs = !Array.isArray(indexSpec) || isSingleIndexTuple(indexSpec) ? [\n        indexSpec\n    ] : indexSpec;\n    // Iterate through array and handle different types\n    for (const spec of indexSpecs){\n        if (typeof spec === \"string\") {\n            key.set(spec, 1);\n        } else if (Array.isArray(spec)) {\n            key.set(spec[0], spec[1] ?? 1);\n        } else if (spec instanceof Map) {\n            for (const [property, value] of spec){\n                key.set(property, value);\n            }\n        } else if ((0, utils_1.isObject)(spec)) {\n            for (const [property, value] of Object.entries(spec)){\n                key.set(property, value);\n            }\n        }\n    }\n    return {\n        ...options,\n        key\n    };\n}\n/** @internal */ class IndexesOperation extends operation_1.AbstractOperation {\n    constructor(collection, options){\n        super(options);\n        this.options = options;\n        this.collection = collection;\n    }\n    async execute(_server, session) {\n        const coll = this.collection;\n        const options = this.options;\n        return (0, common_functions_1.indexInformation)(coll.s.db, coll.collectionName, {\n            full: true,\n            ...options,\n            readPreference: this.readPreference,\n            session\n        });\n    }\n}\nexports.IndexesOperation = IndexesOperation;\n/** @internal */ class CreateIndexesOperation extends command_1.CommandOperation {\n    constructor(parent, collectionName, indexes, options){\n        super(parent, options);\n        this.options = options ?? {};\n        this.collectionName = collectionName;\n        this.indexes = indexes.map((userIndex)=>{\n            // Ensure the key is a Map to preserve index key ordering\n            const key = userIndex.key instanceof Map ? userIndex.key : new Map(Object.entries(userIndex.key));\n            const name = userIndex.name != null ? userIndex.name : Array.from(key).flat().join(\"_\");\n            const validIndexOptions = Object.fromEntries(Object.entries({\n                ...userIndex\n            }).filter(([optionName])=>VALID_INDEX_OPTIONS.has(optionName)));\n            return {\n                ...validIndexOptions,\n                name,\n                key\n            };\n        });\n    }\n    async execute(server, session) {\n        const options = this.options;\n        const indexes = this.indexes;\n        const serverWireVersion = (0, utils_1.maxWireVersion)(server);\n        const cmd = {\n            createIndexes: this.collectionName,\n            indexes\n        };\n        if (options.commitQuorum != null) {\n            if (serverWireVersion < 9) {\n                throw new error_1.MongoCompatibilityError(\"Option `commitQuorum` for `createIndexes` not supported on servers < 4.4\");\n            }\n            cmd.commitQuorum = options.commitQuorum;\n        }\n        // collation is set on each index, it should not be defined at the root\n        this.options.collation = undefined;\n        await super.executeCommand(server, session, cmd);\n        const indexNames = indexes.map((index)=>index.name || \"\");\n        return indexNames;\n    }\n}\nexports.CreateIndexesOperation = CreateIndexesOperation;\n/** @internal */ class CreateIndexOperation extends CreateIndexesOperation {\n    constructor(parent, collectionName, indexSpec, options){\n        super(parent, collectionName, [\n            makeIndexSpec(indexSpec, options)\n        ], options);\n    }\n    async execute(server, session) {\n        const indexNames = await super.execute(server, session);\n        return indexNames[0];\n    }\n}\nexports.CreateIndexOperation = CreateIndexOperation;\n/** @internal */ class EnsureIndexOperation extends CreateIndexOperation {\n    constructor(db, collectionName, indexSpec, options){\n        super(db, collectionName, indexSpec, options);\n        this.readPreference = read_preference_1.ReadPreference.primary;\n        this.db = db;\n        this.collectionName = collectionName;\n    }\n    async execute(server, session) {\n        const indexName = this.indexes[0].name;\n        const indexes = await this.db.collection(this.collectionName).listIndexes({\n            session\n        }).toArray().catch((error)=>{\n            if (error instanceof error_1.MongoError && error.code === error_1.MONGODB_ERROR_CODES.NamespaceNotFound) return [];\n            throw error;\n        });\n        if (indexName && indexes.some((index)=>index.name === indexName)) return indexName;\n        return super.execute(server, session);\n    }\n}\nexports.EnsureIndexOperation = EnsureIndexOperation;\n/** @internal */ class DropIndexOperation extends command_1.CommandOperation {\n    constructor(collection, indexName, options){\n        super(collection, options);\n        this.options = options ?? {};\n        this.collection = collection;\n        this.indexName = indexName;\n    }\n    async execute(server, session) {\n        const cmd = {\n            dropIndexes: this.collection.collectionName,\n            index: this.indexName\n        };\n        return super.executeCommand(server, session, cmd);\n    }\n}\nexports.DropIndexOperation = DropIndexOperation;\n/** @internal */ class ListIndexesOperation extends command_1.CommandOperation {\n    constructor(collection, options){\n        super(collection, options);\n        this.options = {\n            ...options\n        };\n        delete this.options.writeConcern;\n        this.collectionNamespace = collection.s.namespace;\n    }\n    async execute(server, session) {\n        const serverWireVersion = (0, utils_1.maxWireVersion)(server);\n        const cursor = this.options.batchSize ? {\n            batchSize: this.options.batchSize\n        } : {};\n        const command = {\n            listIndexes: this.collectionNamespace.collection,\n            cursor\n        };\n        // we check for undefined specifically here to allow falsy values\n        // eslint-disable-next-line no-restricted-syntax\n        if (serverWireVersion >= 9 && this.options.comment !== undefined) {\n            command.comment = this.options.comment;\n        }\n        return super.executeCommand(server, session, command);\n    }\n}\nexports.ListIndexesOperation = ListIndexesOperation;\n/** @internal */ class IndexExistsOperation extends operation_1.AbstractOperation {\n    constructor(collection, indexes, options){\n        super(options);\n        this.options = options;\n        this.collection = collection;\n        this.indexes = indexes;\n    }\n    async execute(server, session) {\n        const coll = this.collection;\n        const indexes = this.indexes;\n        const info = await (0, common_functions_1.indexInformation)(coll.s.db, coll.collectionName, {\n            ...this.options,\n            readPreference: this.readPreference,\n            session\n        });\n        // Let's check for the index names\n        if (!Array.isArray(indexes)) return info[indexes] != null;\n        // All keys found return true\n        return indexes.every((indexName)=>info[indexName] != null);\n    }\n}\nexports.IndexExistsOperation = IndexExistsOperation;\n/** @internal */ class IndexInformationOperation extends operation_1.AbstractOperation {\n    constructor(db, name, options){\n        super(options);\n        this.options = options ?? {};\n        this.db = db;\n        this.name = name;\n    }\n    async execute(server, session) {\n        const db = this.db;\n        const name = this.name;\n        return (0, common_functions_1.indexInformation)(db, name, {\n            ...this.options,\n            readPreference: this.readPreference,\n            session\n        });\n    }\n}\nexports.IndexInformationOperation = IndexInformationOperation;\n(0, operation_1.defineAspects)(ListIndexesOperation, [\n    operation_1.Aspect.READ_OPERATION,\n    operation_1.Aspect.RETRYABLE,\n    operation_1.Aspect.CURSOR_CREATING\n]);\n(0, operation_1.defineAspects)(CreateIndexesOperation, [\n    operation_1.Aspect.WRITE_OPERATION\n]);\n(0, operation_1.defineAspects)(CreateIndexOperation, [\n    operation_1.Aspect.WRITE_OPERATION\n]);\n(0, operation_1.defineAspects)(EnsureIndexOperation, [\n    operation_1.Aspect.WRITE_OPERATION\n]);\n(0, operation_1.defineAspects)(DropIndexOperation, [\n    operation_1.Aspect.WRITE_OPERATION\n]); //# sourceMappingURL=indexes.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongodb/lib/operations/indexes.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongodb/lib/operations/insert.js":
/*!*******************************************************!*\
  !*** ./node_modules/mongodb/lib/operations/insert.js ***!
  \*******************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.InsertManyOperation = exports.InsertOneOperation = exports.InsertOperation = void 0;\nconst error_1 = __webpack_require__(/*! ../error */ \"(ssr)/./node_modules/mongodb/lib/error.js\");\nconst write_concern_1 = __webpack_require__(/*! ../write_concern */ \"(ssr)/./node_modules/mongodb/lib/write_concern.js\");\nconst bulk_write_1 = __webpack_require__(/*! ./bulk_write */ \"(ssr)/./node_modules/mongodb/lib/operations/bulk_write.js\");\nconst command_1 = __webpack_require__(/*! ./command */ \"(ssr)/./node_modules/mongodb/lib/operations/command.js\");\nconst common_functions_1 = __webpack_require__(/*! ./common_functions */ \"(ssr)/./node_modules/mongodb/lib/operations/common_functions.js\");\nconst operation_1 = __webpack_require__(/*! ./operation */ \"(ssr)/./node_modules/mongodb/lib/operations/operation.js\");\n/** @internal */ class InsertOperation extends command_1.CommandOperation {\n    constructor(ns, documents, options){\n        super(undefined, options);\n        this.options = {\n            ...options,\n            checkKeys: options.checkKeys ?? false\n        };\n        this.ns = ns;\n        this.documents = documents;\n    }\n    async execute(server, session) {\n        const options = this.options ?? {};\n        const ordered = typeof options.ordered === \"boolean\" ? options.ordered : true;\n        const command = {\n            insert: this.ns.collection,\n            documents: this.documents,\n            ordered\n        };\n        if (typeof options.bypassDocumentValidation === \"boolean\") {\n            command.bypassDocumentValidation = options.bypassDocumentValidation;\n        }\n        // we check for undefined specifically here to allow falsy values\n        // eslint-disable-next-line no-restricted-syntax\n        if (options.comment !== undefined) {\n            command.comment = options.comment;\n        }\n        return super.executeCommand(server, session, command);\n    }\n}\nexports.InsertOperation = InsertOperation;\nclass InsertOneOperation extends InsertOperation {\n    constructor(collection, doc, options){\n        super(collection.s.namespace, (0, common_functions_1.prepareDocs)(collection, [\n            doc\n        ], options), options);\n    }\n    async execute(server, session) {\n        const res = await super.execute(server, session);\n        if (res.code) throw new error_1.MongoServerError(res);\n        if (res.writeErrors) {\n            // This should be a WriteError but we can't change it now because of error hierarchy\n            throw new error_1.MongoServerError(res.writeErrors[0]);\n        }\n        return {\n            acknowledged: this.writeConcern?.w !== 0,\n            insertedId: this.documents[0]._id\n        };\n    }\n}\nexports.InsertOneOperation = InsertOneOperation;\n/** @internal */ class InsertManyOperation extends operation_1.AbstractOperation {\n    constructor(collection, docs, options){\n        super(options);\n        if (!Array.isArray(docs)) {\n            throw new error_1.MongoInvalidArgumentError('Argument \"docs\" must be an array of documents');\n        }\n        this.options = options;\n        this.collection = collection;\n        this.docs = docs;\n    }\n    async execute(server, session) {\n        const coll = this.collection;\n        const options = {\n            ...this.options,\n            ...this.bsonOptions,\n            readPreference: this.readPreference\n        };\n        const writeConcern = write_concern_1.WriteConcern.fromOptions(options);\n        const bulkWriteOperation = new bulk_write_1.BulkWriteOperation(coll, (0, common_functions_1.prepareDocs)(coll, this.docs, options).map((document)=>({\n                insertOne: {\n                    document\n                }\n            })), options);\n        try {\n            const res = await bulkWriteOperation.execute(server, session);\n            return {\n                acknowledged: writeConcern?.w !== 0,\n                insertedCount: res.insertedCount,\n                insertedIds: res.insertedIds\n            };\n        } catch (err) {\n            if (err && err.message === \"Operation must be an object with an operation key\") {\n                throw new error_1.MongoInvalidArgumentError(\"Collection.insertMany() cannot be called with an array that has null/undefined values\");\n            }\n            throw err;\n        }\n    }\n}\nexports.InsertManyOperation = InsertManyOperation;\n(0, operation_1.defineAspects)(InsertOperation, [\n    operation_1.Aspect.RETRYABLE,\n    operation_1.Aspect.WRITE_OPERATION\n]);\n(0, operation_1.defineAspects)(InsertOneOperation, [\n    operation_1.Aspect.RETRYABLE,\n    operation_1.Aspect.WRITE_OPERATION\n]);\n(0, operation_1.defineAspects)(InsertManyOperation, [\n    operation_1.Aspect.WRITE_OPERATION\n]); //# sourceMappingURL=insert.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongodb/lib/operations/insert.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongodb/lib/operations/is_capped.js":
/*!**********************************************************!*\
  !*** ./node_modules/mongodb/lib/operations/is_capped.js ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.IsCappedOperation = void 0;\nconst error_1 = __webpack_require__(/*! ../error */ \"(ssr)/./node_modules/mongodb/lib/error.js\");\nconst operation_1 = __webpack_require__(/*! ./operation */ \"(ssr)/./node_modules/mongodb/lib/operations/operation.js\");\n/** @internal */ class IsCappedOperation extends operation_1.AbstractOperation {\n    constructor(collection, options){\n        super(options);\n        this.options = options;\n        this.collection = collection;\n    }\n    async execute(server, session) {\n        const coll = this.collection;\n        const [collection] = await coll.s.db.listCollections({\n            name: coll.collectionName\n        }, {\n            ...this.options,\n            nameOnly: false,\n            readPreference: this.readPreference,\n            session\n        }).toArray();\n        if (collection == null || collection.options == null) {\n            throw new error_1.MongoAPIError(`collection ${coll.namespace} not found`);\n        }\n        return !!collection.options?.capped;\n    }\n}\nexports.IsCappedOperation = IsCappedOperation; //# sourceMappingURL=is_capped.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbW9uZ29kYi9saWIvb3BlcmF0aW9ucy9pc19jYXBwZWQuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYkEsOENBQTZDO0lBQUVHLE9BQU87QUFBSyxDQUFDLEVBQUM7QUFDN0RELHlCQUF5QixHQUFHLEtBQUs7QUFDakMsTUFBTUcsVUFBVUMsbUJBQU9BLENBQUMsMkRBQVU7QUFDbEMsTUFBTUMsY0FBY0QsbUJBQU9BLENBQUMsNkVBQWE7QUFDekMsY0FBYyxHQUNkLE1BQU1GLDBCQUEwQkcsWUFBWUMsaUJBQWlCO0lBQ3pEQyxZQUFZQyxVQUFVLEVBQUVDLE9BQU8sQ0FBRTtRQUM3QixLQUFLLENBQUNBO1FBQ04sSUFBSSxDQUFDQSxPQUFPLEdBQUdBO1FBQ2YsSUFBSSxDQUFDRCxVQUFVLEdBQUdBO0lBQ3RCO0lBQ0EsTUFBTUUsUUFBUUMsTUFBTSxFQUFFQyxPQUFPLEVBQUU7UUFDM0IsTUFBTUMsT0FBTyxJQUFJLENBQUNMLFVBQVU7UUFDNUIsTUFBTSxDQUFDQSxXQUFXLEdBQUcsTUFBTUssS0FBS0MsQ0FBQyxDQUFDQyxFQUFFLENBQy9CQyxlQUFlLENBQUM7WUFBRUMsTUFBTUosS0FBS0ssY0FBYztRQUFDLEdBQUc7WUFBRSxHQUFHLElBQUksQ0FBQ1QsT0FBTztZQUFFVSxVQUFVO1lBQU9DLGdCQUFnQixJQUFJLENBQUNBLGNBQWM7WUFBRVI7UUFBUSxHQUNoSVMsT0FBTztRQUNaLElBQUliLGNBQWMsUUFBUUEsV0FBV0MsT0FBTyxJQUFJLE1BQU07WUFDbEQsTUFBTSxJQUFJTixRQUFRbUIsYUFBYSxDQUFDLENBQUMsV0FBVyxFQUFFVCxLQUFLVSxTQUFTLENBQUMsVUFBVSxDQUFDO1FBQzVFO1FBQ0EsT0FBTyxDQUFDLENBQUNmLFdBQVdDLE9BQU8sRUFBRWU7SUFDakM7QUFDSjtBQUNBeEIseUJBQXlCLEdBQUdFLG1CQUM1QixxQ0FBcUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9ibG9nLWFwcGxpY2F0aW9uLy4vbm9kZV9tb2R1bGVzL21vbmdvZGIvbGliL29wZXJhdGlvbnMvaXNfY2FwcGVkLmpzP2YwNmYiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLklzQ2FwcGVkT3BlcmF0aW9uID0gdm9pZCAwO1xuY29uc3QgZXJyb3JfMSA9IHJlcXVpcmUoXCIuLi9lcnJvclwiKTtcbmNvbnN0IG9wZXJhdGlvbl8xID0gcmVxdWlyZShcIi4vb3BlcmF0aW9uXCIpO1xuLyoqIEBpbnRlcm5hbCAqL1xuY2xhc3MgSXNDYXBwZWRPcGVyYXRpb24gZXh0ZW5kcyBvcGVyYXRpb25fMS5BYnN0cmFjdE9wZXJhdGlvbiB7XG4gICAgY29uc3RydWN0b3IoY29sbGVjdGlvbiwgb3B0aW9ucykge1xuICAgICAgICBzdXBlcihvcHRpb25zKTtcbiAgICAgICAgdGhpcy5vcHRpb25zID0gb3B0aW9ucztcbiAgICAgICAgdGhpcy5jb2xsZWN0aW9uID0gY29sbGVjdGlvbjtcbiAgICB9XG4gICAgYXN5bmMgZXhlY3V0ZShzZXJ2ZXIsIHNlc3Npb24pIHtcbiAgICAgICAgY29uc3QgY29sbCA9IHRoaXMuY29sbGVjdGlvbjtcbiAgICAgICAgY29uc3QgW2NvbGxlY3Rpb25dID0gYXdhaXQgY29sbC5zLmRiXG4gICAgICAgICAgICAubGlzdENvbGxlY3Rpb25zKHsgbmFtZTogY29sbC5jb2xsZWN0aW9uTmFtZSB9LCB7IC4uLnRoaXMub3B0aW9ucywgbmFtZU9ubHk6IGZhbHNlLCByZWFkUHJlZmVyZW5jZTogdGhpcy5yZWFkUHJlZmVyZW5jZSwgc2Vzc2lvbiB9KVxuICAgICAgICAgICAgLnRvQXJyYXkoKTtcbiAgICAgICAgaWYgKGNvbGxlY3Rpb24gPT0gbnVsbCB8fCBjb2xsZWN0aW9uLm9wdGlvbnMgPT0gbnVsbCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IGVycm9yXzEuTW9uZ29BUElFcnJvcihgY29sbGVjdGlvbiAke2NvbGwubmFtZXNwYWNlfSBub3QgZm91bmRgKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gISFjb2xsZWN0aW9uLm9wdGlvbnM/LmNhcHBlZDtcbiAgICB9XG59XG5leHBvcnRzLklzQ2FwcGVkT3BlcmF0aW9uID0gSXNDYXBwZWRPcGVyYXRpb247XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pc19jYXBwZWQuanMubWFwIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiSXNDYXBwZWRPcGVyYXRpb24iLCJlcnJvcl8xIiwicmVxdWlyZSIsIm9wZXJhdGlvbl8xIiwiQWJzdHJhY3RPcGVyYXRpb24iLCJjb25zdHJ1Y3RvciIsImNvbGxlY3Rpb24iLCJvcHRpb25zIiwiZXhlY3V0ZSIsInNlcnZlciIsInNlc3Npb24iLCJjb2xsIiwicyIsImRiIiwibGlzdENvbGxlY3Rpb25zIiwibmFtZSIsImNvbGxlY3Rpb25OYW1lIiwibmFtZU9ubHkiLCJyZWFkUHJlZmVyZW5jZSIsInRvQXJyYXkiLCJNb25nb0FQSUVycm9yIiwibmFtZXNwYWNlIiwiY2FwcGVkIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongodb/lib/operations/is_capped.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongodb/lib/operations/kill_cursors.js":
/*!*************************************************************!*\
  !*** ./node_modules/mongodb/lib/operations/kill_cursors.js ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.KillCursorsOperation = void 0;\nconst error_1 = __webpack_require__(/*! ../error */ \"(ssr)/./node_modules/mongodb/lib/error.js\");\nconst operation_1 = __webpack_require__(/*! ./operation */ \"(ssr)/./node_modules/mongodb/lib/operations/operation.js\");\nclass KillCursorsOperation extends operation_1.AbstractOperation {\n    constructor(cursorId, ns, server, options){\n        super(options);\n        this.ns = ns;\n        this.cursorId = cursorId;\n        this.server = server;\n    }\n    async execute(server, session) {\n        if (server !== this.server) {\n            throw new error_1.MongoRuntimeError(\"Killcursor must run on the same server operation began on\");\n        }\n        const killCursors = this.ns.collection;\n        if (killCursors == null) {\n            // Cursors should have adopted the namespace returned by MongoDB\n            // which should always defined a collection name (even a pseudo one, ex. db.aggregate())\n            throw new error_1.MongoRuntimeError(\"A collection name must be determined before killCursors\");\n        }\n        const killCursorsCommand = {\n            killCursors,\n            cursors: [\n                this.cursorId\n            ]\n        };\n        try {\n            await server.commandAsync(this.ns, killCursorsCommand, {\n                session\n            });\n        } catch  {\n        // The driver should never emit errors from killCursors, this is spec-ed behavior\n        }\n    }\n}\nexports.KillCursorsOperation = KillCursorsOperation;\n(0, operation_1.defineAspects)(KillCursorsOperation, [\n    operation_1.Aspect.MUST_SELECT_SAME_SERVER\n]); //# sourceMappingURL=kill_cursors.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbW9uZ29kYi9saWIvb3BlcmF0aW9ucy9raWxsX2N1cnNvcnMuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYkEsOENBQTZDO0lBQUVHLE9BQU87QUFBSyxDQUFDLEVBQUM7QUFDN0RELDRCQUE0QixHQUFHLEtBQUs7QUFDcEMsTUFBTUcsVUFBVUMsbUJBQU9BLENBQUMsMkRBQVU7QUFDbEMsTUFBTUMsY0FBY0QsbUJBQU9BLENBQUMsNkVBQWE7QUFDekMsTUFBTUYsNkJBQTZCRyxZQUFZQyxpQkFBaUI7SUFDNURDLFlBQVlDLFFBQVEsRUFBRUMsRUFBRSxFQUFFQyxNQUFNLEVBQUVDLE9BQU8sQ0FBRTtRQUN2QyxLQUFLLENBQUNBO1FBQ04sSUFBSSxDQUFDRixFQUFFLEdBQUdBO1FBQ1YsSUFBSSxDQUFDRCxRQUFRLEdBQUdBO1FBQ2hCLElBQUksQ0FBQ0UsTUFBTSxHQUFHQTtJQUNsQjtJQUNBLE1BQU1FLFFBQVFGLE1BQU0sRUFBRUcsT0FBTyxFQUFFO1FBQzNCLElBQUlILFdBQVcsSUFBSSxDQUFDQSxNQUFNLEVBQUU7WUFDeEIsTUFBTSxJQUFJUCxRQUFRVyxpQkFBaUIsQ0FBQztRQUN4QztRQUNBLE1BQU1DLGNBQWMsSUFBSSxDQUFDTixFQUFFLENBQUNPLFVBQVU7UUFDdEMsSUFBSUQsZUFBZSxNQUFNO1lBQ3JCLGdFQUFnRTtZQUNoRSx3RkFBd0Y7WUFDeEYsTUFBTSxJQUFJWixRQUFRVyxpQkFBaUIsQ0FBQztRQUN4QztRQUNBLE1BQU1HLHFCQUFxQjtZQUN2QkY7WUFDQUcsU0FBUztnQkFBQyxJQUFJLENBQUNWLFFBQVE7YUFBQztRQUM1QjtRQUNBLElBQUk7WUFDQSxNQUFNRSxPQUFPUyxZQUFZLENBQUMsSUFBSSxDQUFDVixFQUFFLEVBQUVRLG9CQUFvQjtnQkFBRUo7WUFBUTtRQUNyRSxFQUNBLE9BQU07UUFDRixpRkFBaUY7UUFDckY7SUFDSjtBQUNKO0FBQ0FiLDRCQUE0QixHQUFHRTtBQUM5QixJQUFHRyxZQUFZZSxhQUFhLEVBQUVsQixzQkFBc0I7SUFBQ0csWUFBWWdCLE1BQU0sQ0FBQ0MsdUJBQXVCO0NBQUMsR0FDakcsd0NBQXdDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYmxvZy1hcHBsaWNhdGlvbi8uL25vZGVfbW9kdWxlcy9tb25nb2RiL2xpYi9vcGVyYXRpb25zL2tpbGxfY3Vyc29ycy5qcz84YmM1Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5LaWxsQ3Vyc29yc09wZXJhdGlvbiA9IHZvaWQgMDtcbmNvbnN0IGVycm9yXzEgPSByZXF1aXJlKFwiLi4vZXJyb3JcIik7XG5jb25zdCBvcGVyYXRpb25fMSA9IHJlcXVpcmUoXCIuL29wZXJhdGlvblwiKTtcbmNsYXNzIEtpbGxDdXJzb3JzT3BlcmF0aW9uIGV4dGVuZHMgb3BlcmF0aW9uXzEuQWJzdHJhY3RPcGVyYXRpb24ge1xuICAgIGNvbnN0cnVjdG9yKGN1cnNvcklkLCBucywgc2VydmVyLCBvcHRpb25zKSB7XG4gICAgICAgIHN1cGVyKG9wdGlvbnMpO1xuICAgICAgICB0aGlzLm5zID0gbnM7XG4gICAgICAgIHRoaXMuY3Vyc29ySWQgPSBjdXJzb3JJZDtcbiAgICAgICAgdGhpcy5zZXJ2ZXIgPSBzZXJ2ZXI7XG4gICAgfVxuICAgIGFzeW5jIGV4ZWN1dGUoc2VydmVyLCBzZXNzaW9uKSB7XG4gICAgICAgIGlmIChzZXJ2ZXIgIT09IHRoaXMuc2VydmVyKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgZXJyb3JfMS5Nb25nb1J1bnRpbWVFcnJvcignS2lsbGN1cnNvciBtdXN0IHJ1biBvbiB0aGUgc2FtZSBzZXJ2ZXIgb3BlcmF0aW9uIGJlZ2FuIG9uJyk7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3Qga2lsbEN1cnNvcnMgPSB0aGlzLm5zLmNvbGxlY3Rpb247XG4gICAgICAgIGlmIChraWxsQ3Vyc29ycyA9PSBudWxsKSB7XG4gICAgICAgICAgICAvLyBDdXJzb3JzIHNob3VsZCBoYXZlIGFkb3B0ZWQgdGhlIG5hbWVzcGFjZSByZXR1cm5lZCBieSBNb25nb0RCXG4gICAgICAgICAgICAvLyB3aGljaCBzaG91bGQgYWx3YXlzIGRlZmluZWQgYSBjb2xsZWN0aW9uIG5hbWUgKGV2ZW4gYSBwc2V1ZG8gb25lLCBleC4gZGIuYWdncmVnYXRlKCkpXG4gICAgICAgICAgICB0aHJvdyBuZXcgZXJyb3JfMS5Nb25nb1J1bnRpbWVFcnJvcignQSBjb2xsZWN0aW9uIG5hbWUgbXVzdCBiZSBkZXRlcm1pbmVkIGJlZm9yZSBraWxsQ3Vyc29ycycpO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGtpbGxDdXJzb3JzQ29tbWFuZCA9IHtcbiAgICAgICAgICAgIGtpbGxDdXJzb3JzLFxuICAgICAgICAgICAgY3Vyc29yczogW3RoaXMuY3Vyc29ySWRdXG4gICAgICAgIH07XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBhd2FpdCBzZXJ2ZXIuY29tbWFuZEFzeW5jKHRoaXMubnMsIGtpbGxDdXJzb3JzQ29tbWFuZCwgeyBzZXNzaW9uIH0pO1xuICAgICAgICB9XG4gICAgICAgIGNhdGNoIHtcbiAgICAgICAgICAgIC8vIFRoZSBkcml2ZXIgc2hvdWxkIG5ldmVyIGVtaXQgZXJyb3JzIGZyb20ga2lsbEN1cnNvcnMsIHRoaXMgaXMgc3BlYy1lZCBiZWhhdmlvclxuICAgICAgICB9XG4gICAgfVxufVxuZXhwb3J0cy5LaWxsQ3Vyc29yc09wZXJhdGlvbiA9IEtpbGxDdXJzb3JzT3BlcmF0aW9uO1xuKDAsIG9wZXJhdGlvbl8xLmRlZmluZUFzcGVjdHMpKEtpbGxDdXJzb3JzT3BlcmF0aW9uLCBbb3BlcmF0aW9uXzEuQXNwZWN0Lk1VU1RfU0VMRUNUX1NBTUVfU0VSVkVSXSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1raWxsX2N1cnNvcnMuanMubWFwIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiS2lsbEN1cnNvcnNPcGVyYXRpb24iLCJlcnJvcl8xIiwicmVxdWlyZSIsIm9wZXJhdGlvbl8xIiwiQWJzdHJhY3RPcGVyYXRpb24iLCJjb25zdHJ1Y3RvciIsImN1cnNvcklkIiwibnMiLCJzZXJ2ZXIiLCJvcHRpb25zIiwiZXhlY3V0ZSIsInNlc3Npb24iLCJNb25nb1J1bnRpbWVFcnJvciIsImtpbGxDdXJzb3JzIiwiY29sbGVjdGlvbiIsImtpbGxDdXJzb3JzQ29tbWFuZCIsImN1cnNvcnMiLCJjb21tYW5kQXN5bmMiLCJkZWZpbmVBc3BlY3RzIiwiQXNwZWN0IiwiTVVTVF9TRUxFQ1RfU0FNRV9TRVJWRVIiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongodb/lib/operations/kill_cursors.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongodb/lib/operations/list_collections.js":
/*!*****************************************************************!*\
  !*** ./node_modules/mongodb/lib/operations/list_collections.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.ListCollectionsOperation = void 0;\nconst utils_1 = __webpack_require__(/*! ../utils */ \"(ssr)/./node_modules/mongodb/lib/utils.js\");\nconst command_1 = __webpack_require__(/*! ./command */ \"(ssr)/./node_modules/mongodb/lib/operations/command.js\");\nconst operation_1 = __webpack_require__(/*! ./operation */ \"(ssr)/./node_modules/mongodb/lib/operations/operation.js\");\n/** @internal */ class ListCollectionsOperation extends command_1.CommandOperation {\n    constructor(db, filter, options){\n        super(db, options);\n        this.options = {\n            ...options\n        };\n        delete this.options.writeConcern;\n        this.db = db;\n        this.filter = filter;\n        this.nameOnly = !!this.options.nameOnly;\n        this.authorizedCollections = !!this.options.authorizedCollections;\n        if (typeof this.options.batchSize === \"number\") {\n            this.batchSize = this.options.batchSize;\n        }\n    }\n    async execute(server, session) {\n        return super.executeCommand(server, session, this.generateCommand((0, utils_1.maxWireVersion)(server)));\n    }\n    /* This is here for the purpose of unit testing the final command that gets sent. */ generateCommand(wireVersion) {\n        const command = {\n            listCollections: 1,\n            filter: this.filter,\n            cursor: this.batchSize ? {\n                batchSize: this.batchSize\n            } : {},\n            nameOnly: this.nameOnly,\n            authorizedCollections: this.authorizedCollections\n        };\n        // we check for undefined specifically here to allow falsy values\n        // eslint-disable-next-line no-restricted-syntax\n        if (wireVersion >= 9 && this.options.comment !== undefined) {\n            command.comment = this.options.comment;\n        }\n        return command;\n    }\n}\nexports.ListCollectionsOperation = ListCollectionsOperation;\n(0, operation_1.defineAspects)(ListCollectionsOperation, [\n    operation_1.Aspect.READ_OPERATION,\n    operation_1.Aspect.RETRYABLE,\n    operation_1.Aspect.CURSOR_CREATING\n]); //# sourceMappingURL=list_collections.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbW9uZ29kYi9saWIvb3BlcmF0aW9ucy9saXN0X2NvbGxlY3Rpb25zLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2JBLDhDQUE2QztJQUFFRyxPQUFPO0FBQUssQ0FBQyxFQUFDO0FBQzdERCxnQ0FBZ0MsR0FBRyxLQUFLO0FBQ3hDLE1BQU1HLFVBQVVDLG1CQUFPQSxDQUFDLDJEQUFVO0FBQ2xDLE1BQU1DLFlBQVlELG1CQUFPQSxDQUFDLHlFQUFXO0FBQ3JDLE1BQU1FLGNBQWNGLG1CQUFPQSxDQUFDLDZFQUFhO0FBQ3pDLGNBQWMsR0FDZCxNQUFNRixpQ0FBaUNHLFVBQVVFLGdCQUFnQjtJQUM3REMsWUFBWUMsRUFBRSxFQUFFQyxNQUFNLEVBQUVDLE9BQU8sQ0FBRTtRQUM3QixLQUFLLENBQUNGLElBQUlFO1FBQ1YsSUFBSSxDQUFDQSxPQUFPLEdBQUc7WUFBRSxHQUFHQSxPQUFPO1FBQUM7UUFDNUIsT0FBTyxJQUFJLENBQUNBLE9BQU8sQ0FBQ0MsWUFBWTtRQUNoQyxJQUFJLENBQUNILEVBQUUsR0FBR0E7UUFDVixJQUFJLENBQUNDLE1BQU0sR0FBR0E7UUFDZCxJQUFJLENBQUNHLFFBQVEsR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDRixPQUFPLENBQUNFLFFBQVE7UUFDdkMsSUFBSSxDQUFDQyxxQkFBcUIsR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDSCxPQUFPLENBQUNHLHFCQUFxQjtRQUNqRSxJQUFJLE9BQU8sSUFBSSxDQUFDSCxPQUFPLENBQUNJLFNBQVMsS0FBSyxVQUFVO1lBQzVDLElBQUksQ0FBQ0EsU0FBUyxHQUFHLElBQUksQ0FBQ0osT0FBTyxDQUFDSSxTQUFTO1FBQzNDO0lBQ0o7SUFDQSxNQUFNQyxRQUFRQyxNQUFNLEVBQUVDLE9BQU8sRUFBRTtRQUMzQixPQUFPLEtBQUssQ0FBQ0MsZUFBZUYsUUFBUUMsU0FBUyxJQUFJLENBQUNFLGVBQWUsQ0FBQyxDQUFDLEdBQUdqQixRQUFRa0IsY0FBYyxFQUFFSjtJQUNsRztJQUNBLGtGQUFrRixHQUNsRkcsZ0JBQWdCRSxXQUFXLEVBQUU7UUFDekIsTUFBTUMsVUFBVTtZQUNaQyxpQkFBaUI7WUFDakJkLFFBQVEsSUFBSSxDQUFDQSxNQUFNO1lBQ25CZSxRQUFRLElBQUksQ0FBQ1YsU0FBUyxHQUFHO2dCQUFFQSxXQUFXLElBQUksQ0FBQ0EsU0FBUztZQUFDLElBQUksQ0FBQztZQUMxREYsVUFBVSxJQUFJLENBQUNBLFFBQVE7WUFDdkJDLHVCQUF1QixJQUFJLENBQUNBLHFCQUFxQjtRQUNyRDtRQUNBLGlFQUFpRTtRQUNqRSxnREFBZ0Q7UUFDaEQsSUFBSVEsZUFBZSxLQUFLLElBQUksQ0FBQ1gsT0FBTyxDQUFDZSxPQUFPLEtBQUtDLFdBQVc7WUFDeERKLFFBQVFHLE9BQU8sR0FBRyxJQUFJLENBQUNmLE9BQU8sQ0FBQ2UsT0FBTztRQUMxQztRQUNBLE9BQU9IO0lBQ1g7QUFDSjtBQUNBdkIsZ0NBQWdDLEdBQUdFO0FBQ2xDLElBQUdJLFlBQVlzQixhQUFhLEVBQUUxQiwwQkFBMEI7SUFDckRJLFlBQVl1QixNQUFNLENBQUNDLGNBQWM7SUFDakN4QixZQUFZdUIsTUFBTSxDQUFDRSxTQUFTO0lBQzVCekIsWUFBWXVCLE1BQU0sQ0FBQ0csZUFBZTtDQUNyQyxHQUNELDRDQUE0QyIsInNvdXJjZXMiOlsid2VicGFjazovL2Jsb2ctYXBwbGljYXRpb24vLi9ub2RlX21vZHVsZXMvbW9uZ29kYi9saWIvb3BlcmF0aW9ucy9saXN0X2NvbGxlY3Rpb25zLmpzPzAyMmQiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLkxpc3RDb2xsZWN0aW9uc09wZXJhdGlvbiA9IHZvaWQgMDtcbmNvbnN0IHV0aWxzXzEgPSByZXF1aXJlKFwiLi4vdXRpbHNcIik7XG5jb25zdCBjb21tYW5kXzEgPSByZXF1aXJlKFwiLi9jb21tYW5kXCIpO1xuY29uc3Qgb3BlcmF0aW9uXzEgPSByZXF1aXJlKFwiLi9vcGVyYXRpb25cIik7XG4vKiogQGludGVybmFsICovXG5jbGFzcyBMaXN0Q29sbGVjdGlvbnNPcGVyYXRpb24gZXh0ZW5kcyBjb21tYW5kXzEuQ29tbWFuZE9wZXJhdGlvbiB7XG4gICAgY29uc3RydWN0b3IoZGIsIGZpbHRlciwgb3B0aW9ucykge1xuICAgICAgICBzdXBlcihkYiwgb3B0aW9ucyk7XG4gICAgICAgIHRoaXMub3B0aW9ucyA9IHsgLi4ub3B0aW9ucyB9O1xuICAgICAgICBkZWxldGUgdGhpcy5vcHRpb25zLndyaXRlQ29uY2VybjtcbiAgICAgICAgdGhpcy5kYiA9IGRiO1xuICAgICAgICB0aGlzLmZpbHRlciA9IGZpbHRlcjtcbiAgICAgICAgdGhpcy5uYW1lT25seSA9ICEhdGhpcy5vcHRpb25zLm5hbWVPbmx5O1xuICAgICAgICB0aGlzLmF1dGhvcml6ZWRDb2xsZWN0aW9ucyA9ICEhdGhpcy5vcHRpb25zLmF1dGhvcml6ZWRDb2xsZWN0aW9ucztcbiAgICAgICAgaWYgKHR5cGVvZiB0aGlzLm9wdGlvbnMuYmF0Y2hTaXplID09PSAnbnVtYmVyJykge1xuICAgICAgICAgICAgdGhpcy5iYXRjaFNpemUgPSB0aGlzLm9wdGlvbnMuYmF0Y2hTaXplO1xuICAgICAgICB9XG4gICAgfVxuICAgIGFzeW5jIGV4ZWN1dGUoc2VydmVyLCBzZXNzaW9uKSB7XG4gICAgICAgIHJldHVybiBzdXBlci5leGVjdXRlQ29tbWFuZChzZXJ2ZXIsIHNlc3Npb24sIHRoaXMuZ2VuZXJhdGVDb21tYW5kKCgwLCB1dGlsc18xLm1heFdpcmVWZXJzaW9uKShzZXJ2ZXIpKSk7XG4gICAgfVxuICAgIC8qIFRoaXMgaXMgaGVyZSBmb3IgdGhlIHB1cnBvc2Ugb2YgdW5pdCB0ZXN0aW5nIHRoZSBmaW5hbCBjb21tYW5kIHRoYXQgZ2V0cyBzZW50LiAqL1xuICAgIGdlbmVyYXRlQ29tbWFuZCh3aXJlVmVyc2lvbikge1xuICAgICAgICBjb25zdCBjb21tYW5kID0ge1xuICAgICAgICAgICAgbGlzdENvbGxlY3Rpb25zOiAxLFxuICAgICAgICAgICAgZmlsdGVyOiB0aGlzLmZpbHRlcixcbiAgICAgICAgICAgIGN1cnNvcjogdGhpcy5iYXRjaFNpemUgPyB7IGJhdGNoU2l6ZTogdGhpcy5iYXRjaFNpemUgfSA6IHt9LFxuICAgICAgICAgICAgbmFtZU9ubHk6IHRoaXMubmFtZU9ubHksXG4gICAgICAgICAgICBhdXRob3JpemVkQ29sbGVjdGlvbnM6IHRoaXMuYXV0aG9yaXplZENvbGxlY3Rpb25zXG4gICAgICAgIH07XG4gICAgICAgIC8vIHdlIGNoZWNrIGZvciB1bmRlZmluZWQgc3BlY2lmaWNhbGx5IGhlcmUgdG8gYWxsb3cgZmFsc3kgdmFsdWVzXG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1yZXN0cmljdGVkLXN5bnRheFxuICAgICAgICBpZiAod2lyZVZlcnNpb24gPj0gOSAmJiB0aGlzLm9wdGlvbnMuY29tbWVudCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBjb21tYW5kLmNvbW1lbnQgPSB0aGlzLm9wdGlvbnMuY29tbWVudDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gY29tbWFuZDtcbiAgICB9XG59XG5leHBvcnRzLkxpc3RDb2xsZWN0aW9uc09wZXJhdGlvbiA9IExpc3RDb2xsZWN0aW9uc09wZXJhdGlvbjtcbigwLCBvcGVyYXRpb25fMS5kZWZpbmVBc3BlY3RzKShMaXN0Q29sbGVjdGlvbnNPcGVyYXRpb24sIFtcbiAgICBvcGVyYXRpb25fMS5Bc3BlY3QuUkVBRF9PUEVSQVRJT04sXG4gICAgb3BlcmF0aW9uXzEuQXNwZWN0LlJFVFJZQUJMRSxcbiAgICBvcGVyYXRpb25fMS5Bc3BlY3QuQ1VSU09SX0NSRUFUSU5HXG5dKTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWxpc3RfY29sbGVjdGlvbnMuanMubWFwIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiTGlzdENvbGxlY3Rpb25zT3BlcmF0aW9uIiwidXRpbHNfMSIsInJlcXVpcmUiLCJjb21tYW5kXzEiLCJvcGVyYXRpb25fMSIsIkNvbW1hbmRPcGVyYXRpb24iLCJjb25zdHJ1Y3RvciIsImRiIiwiZmlsdGVyIiwib3B0aW9ucyIsIndyaXRlQ29uY2VybiIsIm5hbWVPbmx5IiwiYXV0aG9yaXplZENvbGxlY3Rpb25zIiwiYmF0Y2hTaXplIiwiZXhlY3V0ZSIsInNlcnZlciIsInNlc3Npb24iLCJleGVjdXRlQ29tbWFuZCIsImdlbmVyYXRlQ29tbWFuZCIsIm1heFdpcmVWZXJzaW9uIiwid2lyZVZlcnNpb24iLCJjb21tYW5kIiwibGlzdENvbGxlY3Rpb25zIiwiY3Vyc29yIiwiY29tbWVudCIsInVuZGVmaW5lZCIsImRlZmluZUFzcGVjdHMiLCJBc3BlY3QiLCJSRUFEX09QRVJBVElPTiIsIlJFVFJZQUJMRSIsIkNVUlNPUl9DUkVBVElORyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongodb/lib/operations/list_collections.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongodb/lib/operations/list_databases.js":
/*!***************************************************************!*\
  !*** ./node_modules/mongodb/lib/operations/list_databases.js ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.ListDatabasesOperation = void 0;\nconst utils_1 = __webpack_require__(/*! ../utils */ \"(ssr)/./node_modules/mongodb/lib/utils.js\");\nconst command_1 = __webpack_require__(/*! ./command */ \"(ssr)/./node_modules/mongodb/lib/operations/command.js\");\nconst operation_1 = __webpack_require__(/*! ./operation */ \"(ssr)/./node_modules/mongodb/lib/operations/operation.js\");\n/** @internal */ class ListDatabasesOperation extends command_1.CommandOperation {\n    constructor(db, options){\n        super(db, options);\n        this.options = options ?? {};\n        this.ns = new utils_1.MongoDBNamespace(\"admin\", \"$cmd\");\n    }\n    async execute(server, session) {\n        const cmd = {\n            listDatabases: 1\n        };\n        if (typeof this.options.nameOnly === \"boolean\") {\n            cmd.nameOnly = this.options.nameOnly;\n        }\n        if (this.options.filter) {\n            cmd.filter = this.options.filter;\n        }\n        if (typeof this.options.authorizedDatabases === \"boolean\") {\n            cmd.authorizedDatabases = this.options.authorizedDatabases;\n        }\n        // we check for undefined specifically here to allow falsy values\n        // eslint-disable-next-line no-restricted-syntax\n        if ((0, utils_1.maxWireVersion)(server) >= 9 && this.options.comment !== undefined) {\n            cmd.comment = this.options.comment;\n        }\n        return super.executeCommand(server, session, cmd);\n    }\n}\nexports.ListDatabasesOperation = ListDatabasesOperation;\n(0, operation_1.defineAspects)(ListDatabasesOperation, [\n    operation_1.Aspect.READ_OPERATION,\n    operation_1.Aspect.RETRYABLE\n]); //# sourceMappingURL=list_databases.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbW9uZ29kYi9saWIvb3BlcmF0aW9ucy9saXN0X2RhdGFiYXNlcy5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiQSw4Q0FBNkM7SUFBRUcsT0FBTztBQUFLLENBQUMsRUFBQztBQUM3REQsOEJBQThCLEdBQUcsS0FBSztBQUN0QyxNQUFNRyxVQUFVQyxtQkFBT0EsQ0FBQywyREFBVTtBQUNsQyxNQUFNQyxZQUFZRCxtQkFBT0EsQ0FBQyx5RUFBVztBQUNyQyxNQUFNRSxjQUFjRixtQkFBT0EsQ0FBQyw2RUFBYTtBQUN6QyxjQUFjLEdBQ2QsTUFBTUYsK0JBQStCRyxVQUFVRSxnQkFBZ0I7SUFDM0RDLFlBQVlDLEVBQUUsRUFBRUMsT0FBTyxDQUFFO1FBQ3JCLEtBQUssQ0FBQ0QsSUFBSUM7UUFDVixJQUFJLENBQUNBLE9BQU8sR0FBR0EsV0FBVyxDQUFDO1FBQzNCLElBQUksQ0FBQ0MsRUFBRSxHQUFHLElBQUlSLFFBQVFTLGdCQUFnQixDQUFDLFNBQVM7SUFDcEQ7SUFDQSxNQUFNQyxRQUFRQyxNQUFNLEVBQUVDLE9BQU8sRUFBRTtRQUMzQixNQUFNQyxNQUFNO1lBQUVDLGVBQWU7UUFBRTtRQUMvQixJQUFJLE9BQU8sSUFBSSxDQUFDUCxPQUFPLENBQUNRLFFBQVEsS0FBSyxXQUFXO1lBQzVDRixJQUFJRSxRQUFRLEdBQUcsSUFBSSxDQUFDUixPQUFPLENBQUNRLFFBQVE7UUFDeEM7UUFDQSxJQUFJLElBQUksQ0FBQ1IsT0FBTyxDQUFDUyxNQUFNLEVBQUU7WUFDckJILElBQUlHLE1BQU0sR0FBRyxJQUFJLENBQUNULE9BQU8sQ0FBQ1MsTUFBTTtRQUNwQztRQUNBLElBQUksT0FBTyxJQUFJLENBQUNULE9BQU8sQ0FBQ1UsbUJBQW1CLEtBQUssV0FBVztZQUN2REosSUFBSUksbUJBQW1CLEdBQUcsSUFBSSxDQUFDVixPQUFPLENBQUNVLG1CQUFtQjtRQUM5RDtRQUNBLGlFQUFpRTtRQUNqRSxnREFBZ0Q7UUFDaEQsSUFBSSxDQUFDLEdBQUdqQixRQUFRa0IsY0FBYyxFQUFFUCxXQUFXLEtBQUssSUFBSSxDQUFDSixPQUFPLENBQUNZLE9BQU8sS0FBS0MsV0FBVztZQUNoRlAsSUFBSU0sT0FBTyxHQUFHLElBQUksQ0FBQ1osT0FBTyxDQUFDWSxPQUFPO1FBQ3RDO1FBQ0EsT0FBTyxLQUFLLENBQUNFLGVBQWVWLFFBQVFDLFNBQVNDO0lBQ2pEO0FBQ0o7QUFDQWhCLDhCQUE4QixHQUFHRTtBQUNoQyxJQUFHSSxZQUFZbUIsYUFBYSxFQUFFdkIsd0JBQXdCO0lBQUNJLFlBQVlvQixNQUFNLENBQUNDLGNBQWM7SUFBRXJCLFlBQVlvQixNQUFNLENBQUNFLFNBQVM7Q0FBQyxHQUN4SCwwQ0FBMEMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9ibG9nLWFwcGxpY2F0aW9uLy4vbm9kZV9tb2R1bGVzL21vbmdvZGIvbGliL29wZXJhdGlvbnMvbGlzdF9kYXRhYmFzZXMuanM/MzBmNyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuTGlzdERhdGFiYXNlc09wZXJhdGlvbiA9IHZvaWQgMDtcbmNvbnN0IHV0aWxzXzEgPSByZXF1aXJlKFwiLi4vdXRpbHNcIik7XG5jb25zdCBjb21tYW5kXzEgPSByZXF1aXJlKFwiLi9jb21tYW5kXCIpO1xuY29uc3Qgb3BlcmF0aW9uXzEgPSByZXF1aXJlKFwiLi9vcGVyYXRpb25cIik7XG4vKiogQGludGVybmFsICovXG5jbGFzcyBMaXN0RGF0YWJhc2VzT3BlcmF0aW9uIGV4dGVuZHMgY29tbWFuZF8xLkNvbW1hbmRPcGVyYXRpb24ge1xuICAgIGNvbnN0cnVjdG9yKGRiLCBvcHRpb25zKSB7XG4gICAgICAgIHN1cGVyKGRiLCBvcHRpb25zKTtcbiAgICAgICAgdGhpcy5vcHRpb25zID0gb3B0aW9ucyA/PyB7fTtcbiAgICAgICAgdGhpcy5ucyA9IG5ldyB1dGlsc18xLk1vbmdvREJOYW1lc3BhY2UoJ2FkbWluJywgJyRjbWQnKTtcbiAgICB9XG4gICAgYXN5bmMgZXhlY3V0ZShzZXJ2ZXIsIHNlc3Npb24pIHtcbiAgICAgICAgY29uc3QgY21kID0geyBsaXN0RGF0YWJhc2VzOiAxIH07XG4gICAgICAgIGlmICh0eXBlb2YgdGhpcy5vcHRpb25zLm5hbWVPbmx5ID09PSAnYm9vbGVhbicpIHtcbiAgICAgICAgICAgIGNtZC5uYW1lT25seSA9IHRoaXMub3B0aW9ucy5uYW1lT25seTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5vcHRpb25zLmZpbHRlcikge1xuICAgICAgICAgICAgY21kLmZpbHRlciA9IHRoaXMub3B0aW9ucy5maWx0ZXI7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHR5cGVvZiB0aGlzLm9wdGlvbnMuYXV0aG9yaXplZERhdGFiYXNlcyA9PT0gJ2Jvb2xlYW4nKSB7XG4gICAgICAgICAgICBjbWQuYXV0aG9yaXplZERhdGFiYXNlcyA9IHRoaXMub3B0aW9ucy5hdXRob3JpemVkRGF0YWJhc2VzO1xuICAgICAgICB9XG4gICAgICAgIC8vIHdlIGNoZWNrIGZvciB1bmRlZmluZWQgc3BlY2lmaWNhbGx5IGhlcmUgdG8gYWxsb3cgZmFsc3kgdmFsdWVzXG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1yZXN0cmljdGVkLXN5bnRheFxuICAgICAgICBpZiAoKDAsIHV0aWxzXzEubWF4V2lyZVZlcnNpb24pKHNlcnZlcikgPj0gOSAmJiB0aGlzLm9wdGlvbnMuY29tbWVudCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBjbWQuY29tbWVudCA9IHRoaXMub3B0aW9ucy5jb21tZW50O1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBzdXBlci5leGVjdXRlQ29tbWFuZChzZXJ2ZXIsIHNlc3Npb24sIGNtZCk7XG4gICAgfVxufVxuZXhwb3J0cy5MaXN0RGF0YWJhc2VzT3BlcmF0aW9uID0gTGlzdERhdGFiYXNlc09wZXJhdGlvbjtcbigwLCBvcGVyYXRpb25fMS5kZWZpbmVBc3BlY3RzKShMaXN0RGF0YWJhc2VzT3BlcmF0aW9uLCBbb3BlcmF0aW9uXzEuQXNwZWN0LlJFQURfT1BFUkFUSU9OLCBvcGVyYXRpb25fMS5Bc3BlY3QuUkVUUllBQkxFXSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1saXN0X2RhdGFiYXNlcy5qcy5tYXAiXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJMaXN0RGF0YWJhc2VzT3BlcmF0aW9uIiwidXRpbHNfMSIsInJlcXVpcmUiLCJjb21tYW5kXzEiLCJvcGVyYXRpb25fMSIsIkNvbW1hbmRPcGVyYXRpb24iLCJjb25zdHJ1Y3RvciIsImRiIiwib3B0aW9ucyIsIm5zIiwiTW9uZ29EQk5hbWVzcGFjZSIsImV4ZWN1dGUiLCJzZXJ2ZXIiLCJzZXNzaW9uIiwiY21kIiwibGlzdERhdGFiYXNlcyIsIm5hbWVPbmx5IiwiZmlsdGVyIiwiYXV0aG9yaXplZERhdGFiYXNlcyIsIm1heFdpcmVWZXJzaW9uIiwiY29tbWVudCIsInVuZGVmaW5lZCIsImV4ZWN1dGVDb21tYW5kIiwiZGVmaW5lQXNwZWN0cyIsIkFzcGVjdCIsIlJFQURfT1BFUkFUSU9OIiwiUkVUUllBQkxFIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongodb/lib/operations/list_databases.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongodb/lib/operations/operation.js":
/*!**********************************************************!*\
  !*** ./node_modules/mongodb/lib/operations/operation.js ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.defineAspects = exports.AbstractOperation = exports.Aspect = void 0;\nconst bson_1 = __webpack_require__(/*! ../bson */ \"(ssr)/./node_modules/mongodb/lib/bson.js\");\nconst read_preference_1 = __webpack_require__(/*! ../read_preference */ \"(ssr)/./node_modules/mongodb/lib/read_preference.js\");\nexports.Aspect = {\n    READ_OPERATION: Symbol(\"READ_OPERATION\"),\n    WRITE_OPERATION: Symbol(\"WRITE_OPERATION\"),\n    RETRYABLE: Symbol(\"RETRYABLE\"),\n    EXPLAINABLE: Symbol(\"EXPLAINABLE\"),\n    SKIP_COLLATION: Symbol(\"SKIP_COLLATION\"),\n    CURSOR_CREATING: Symbol(\"CURSOR_CREATING\"),\n    MUST_SELECT_SAME_SERVER: Symbol(\"MUST_SELECT_SAME_SERVER\")\n};\n/** @internal */ const kSession = Symbol(\"session\");\n/**\n * This class acts as a parent class for any operation and is responsible for setting this.options,\n * as well as setting and getting a session.\n * Additionally, this class implements `hasAspect`, which determines whether an operation has\n * a specific aspect.\n * @internal\n */ class AbstractOperation {\n    constructor(options = {}){\n        this.readPreference = this.hasAspect(exports.Aspect.WRITE_OPERATION) ? read_preference_1.ReadPreference.primary : read_preference_1.ReadPreference.fromOptions(options) ?? read_preference_1.ReadPreference.primary;\n        // Pull the BSON serialize options from the already-resolved options\n        this.bsonOptions = (0, bson_1.resolveBSONOptions)(options);\n        this[kSession] = options.session != null ? options.session : undefined;\n        this.options = options;\n        this.bypassPinningCheck = !!options.bypassPinningCheck;\n        this.trySecondaryWrite = false;\n    }\n    hasAspect(aspect) {\n        const ctor = this.constructor;\n        if (ctor.aspects == null) {\n            return false;\n        }\n        return ctor.aspects.has(aspect);\n    }\n    get session() {\n        return this[kSession];\n    }\n    clearSession() {\n        this[kSession] = undefined;\n    }\n    get canRetryRead() {\n        return true;\n    }\n    get canRetryWrite() {\n        return true;\n    }\n}\nexports.AbstractOperation = AbstractOperation;\nfunction defineAspects(operation, aspects) {\n    if (!Array.isArray(aspects) && !(aspects instanceof Set)) {\n        aspects = [\n            aspects\n        ];\n    }\n    aspects = new Set(aspects);\n    Object.defineProperty(operation, \"aspects\", {\n        value: aspects,\n        writable: false\n    });\n    return aspects;\n}\nexports.defineAspects = defineAspects; //# sourceMappingURL=operation.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbW9uZ29kYi9saWIvb3BlcmF0aW9ucy9vcGVyYXRpb24uanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYkEsOENBQTZDO0lBQUVHLE9BQU87QUFBSyxDQUFDLEVBQUM7QUFDN0RELHFCQUFxQixHQUFHQSx5QkFBeUIsR0FBR0EsY0FBYyxHQUFHLEtBQUs7QUFDMUUsTUFBTUssU0FBU0MsbUJBQU9BLENBQUMseURBQVM7QUFDaEMsTUFBTUMsb0JBQW9CRCxtQkFBT0EsQ0FBQywrRUFBb0I7QUFDdEROLGNBQWMsR0FBRztJQUNiUSxnQkFBZ0JDLE9BQU87SUFDdkJDLGlCQUFpQkQsT0FBTztJQUN4QkUsV0FBV0YsT0FBTztJQUNsQkcsYUFBYUgsT0FBTztJQUNwQkksZ0JBQWdCSixPQUFPO0lBQ3ZCSyxpQkFBaUJMLE9BQU87SUFDeEJNLHlCQUF5Qk4sT0FBTztBQUNwQztBQUNBLGNBQWMsR0FDZCxNQUFNTyxXQUFXUCxPQUFPO0FBQ3hCOzs7Ozs7Q0FNQyxHQUNELE1BQU1OO0lBQ0ZjLFlBQVlDLFVBQVUsQ0FBQyxDQUFDLENBQUU7UUFDdEIsSUFBSSxDQUFDQyxjQUFjLEdBQUcsSUFBSSxDQUFDQyxTQUFTLENBQUNwQixRQUFRSSxNQUFNLENBQUNNLGVBQWUsSUFDN0RILGtCQUFrQmMsY0FBYyxDQUFDQyxPQUFPLEdBQ3hDZixrQkFBa0JjLGNBQWMsQ0FBQ0UsV0FBVyxDQUFDTCxZQUFZWCxrQkFBa0JjLGNBQWMsQ0FBQ0MsT0FBTztRQUN2RyxvRUFBb0U7UUFDcEUsSUFBSSxDQUFDRSxXQUFXLEdBQUcsQ0FBQyxHQUFHbkIsT0FBT29CLGtCQUFrQixFQUFFUDtRQUNsRCxJQUFJLENBQUNGLFNBQVMsR0FBR0UsUUFBUVEsT0FBTyxJQUFJLE9BQU9SLFFBQVFRLE9BQU8sR0FBR0M7UUFDN0QsSUFBSSxDQUFDVCxPQUFPLEdBQUdBO1FBQ2YsSUFBSSxDQUFDVSxrQkFBa0IsR0FBRyxDQUFDLENBQUNWLFFBQVFVLGtCQUFrQjtRQUN0RCxJQUFJLENBQUNDLGlCQUFpQixHQUFHO0lBQzdCO0lBQ0FULFVBQVVVLE1BQU0sRUFBRTtRQUNkLE1BQU1DLE9BQU8sSUFBSSxDQUFDZCxXQUFXO1FBQzdCLElBQUljLEtBQUtDLE9BQU8sSUFBSSxNQUFNO1lBQ3RCLE9BQU87UUFDWDtRQUNBLE9BQU9ELEtBQUtDLE9BQU8sQ0FBQ0MsR0FBRyxDQUFDSDtJQUM1QjtJQUNBLElBQUlKLFVBQVU7UUFDVixPQUFPLElBQUksQ0FBQ1YsU0FBUztJQUN6QjtJQUNBa0IsZUFBZTtRQUNYLElBQUksQ0FBQ2xCLFNBQVMsR0FBR1c7SUFDckI7SUFDQSxJQUFJUSxlQUFlO1FBQ2YsT0FBTztJQUNYO0lBQ0EsSUFBSUMsZ0JBQWdCO1FBQ2hCLE9BQU87SUFDWDtBQUNKO0FBQ0FwQyx5QkFBeUIsR0FBR0c7QUFDNUIsU0FBU0QsY0FBY21DLFNBQVMsRUFBRUwsT0FBTztJQUNyQyxJQUFJLENBQUNNLE1BQU1DLE9BQU8sQ0FBQ1AsWUFBWSxDQUFFQSxDQUFBQSxtQkFBbUJRLEdBQUUsR0FBSTtRQUN0RFIsVUFBVTtZQUFDQTtTQUFRO0lBQ3ZCO0lBQ0FBLFVBQVUsSUFBSVEsSUFBSVI7SUFDbEJsQyxPQUFPQyxjQUFjLENBQUNzQyxXQUFXLFdBQVc7UUFDeENwQyxPQUFPK0I7UUFDUFMsVUFBVTtJQUNkO0lBQ0EsT0FBT1Q7QUFDWDtBQUNBaEMscUJBQXFCLEdBQUdFLGVBQ3hCLHFDQUFxQyIsInNvdXJjZXMiOlsid2VicGFjazovL2Jsb2ctYXBwbGljYXRpb24vLi9ub2RlX21vZHVsZXMvbW9uZ29kYi9saWIvb3BlcmF0aW9ucy9vcGVyYXRpb24uanM/NDdiOSJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuZGVmaW5lQXNwZWN0cyA9IGV4cG9ydHMuQWJzdHJhY3RPcGVyYXRpb24gPSBleHBvcnRzLkFzcGVjdCA9IHZvaWQgMDtcbmNvbnN0IGJzb25fMSA9IHJlcXVpcmUoXCIuLi9ic29uXCIpO1xuY29uc3QgcmVhZF9wcmVmZXJlbmNlXzEgPSByZXF1aXJlKFwiLi4vcmVhZF9wcmVmZXJlbmNlXCIpO1xuZXhwb3J0cy5Bc3BlY3QgPSB7XG4gICAgUkVBRF9PUEVSQVRJT046IFN5bWJvbCgnUkVBRF9PUEVSQVRJT04nKSxcbiAgICBXUklURV9PUEVSQVRJT046IFN5bWJvbCgnV1JJVEVfT1BFUkFUSU9OJyksXG4gICAgUkVUUllBQkxFOiBTeW1ib2woJ1JFVFJZQUJMRScpLFxuICAgIEVYUExBSU5BQkxFOiBTeW1ib2woJ0VYUExBSU5BQkxFJyksXG4gICAgU0tJUF9DT0xMQVRJT046IFN5bWJvbCgnU0tJUF9DT0xMQVRJT04nKSxcbiAgICBDVVJTT1JfQ1JFQVRJTkc6IFN5bWJvbCgnQ1VSU09SX0NSRUFUSU5HJyksXG4gICAgTVVTVF9TRUxFQ1RfU0FNRV9TRVJWRVI6IFN5bWJvbCgnTVVTVF9TRUxFQ1RfU0FNRV9TRVJWRVInKVxufTtcbi8qKiBAaW50ZXJuYWwgKi9cbmNvbnN0IGtTZXNzaW9uID0gU3ltYm9sKCdzZXNzaW9uJyk7XG4vKipcbiAqIFRoaXMgY2xhc3MgYWN0cyBhcyBhIHBhcmVudCBjbGFzcyBmb3IgYW55IG9wZXJhdGlvbiBhbmQgaXMgcmVzcG9uc2libGUgZm9yIHNldHRpbmcgdGhpcy5vcHRpb25zLFxuICogYXMgd2VsbCBhcyBzZXR0aW5nIGFuZCBnZXR0aW5nIGEgc2Vzc2lvbi5cbiAqIEFkZGl0aW9uYWxseSwgdGhpcyBjbGFzcyBpbXBsZW1lbnRzIGBoYXNBc3BlY3RgLCB3aGljaCBkZXRlcm1pbmVzIHdoZXRoZXIgYW4gb3BlcmF0aW9uIGhhc1xuICogYSBzcGVjaWZpYyBhc3BlY3QuXG4gKiBAaW50ZXJuYWxcbiAqL1xuY2xhc3MgQWJzdHJhY3RPcGVyYXRpb24ge1xuICAgIGNvbnN0cnVjdG9yKG9wdGlvbnMgPSB7fSkge1xuICAgICAgICB0aGlzLnJlYWRQcmVmZXJlbmNlID0gdGhpcy5oYXNBc3BlY3QoZXhwb3J0cy5Bc3BlY3QuV1JJVEVfT1BFUkFUSU9OKVxuICAgICAgICAgICAgPyByZWFkX3ByZWZlcmVuY2VfMS5SZWFkUHJlZmVyZW5jZS5wcmltYXJ5XG4gICAgICAgICAgICA6IHJlYWRfcHJlZmVyZW5jZV8xLlJlYWRQcmVmZXJlbmNlLmZyb21PcHRpb25zKG9wdGlvbnMpID8/IHJlYWRfcHJlZmVyZW5jZV8xLlJlYWRQcmVmZXJlbmNlLnByaW1hcnk7XG4gICAgICAgIC8vIFB1bGwgdGhlIEJTT04gc2VyaWFsaXplIG9wdGlvbnMgZnJvbSB0aGUgYWxyZWFkeS1yZXNvbHZlZCBvcHRpb25zXG4gICAgICAgIHRoaXMuYnNvbk9wdGlvbnMgPSAoMCwgYnNvbl8xLnJlc29sdmVCU09OT3B0aW9ucykob3B0aW9ucyk7XG4gICAgICAgIHRoaXNba1Nlc3Npb25dID0gb3B0aW9ucy5zZXNzaW9uICE9IG51bGwgPyBvcHRpb25zLnNlc3Npb24gOiB1bmRlZmluZWQ7XG4gICAgICAgIHRoaXMub3B0aW9ucyA9IG9wdGlvbnM7XG4gICAgICAgIHRoaXMuYnlwYXNzUGlubmluZ0NoZWNrID0gISFvcHRpb25zLmJ5cGFzc1Bpbm5pbmdDaGVjaztcbiAgICAgICAgdGhpcy50cnlTZWNvbmRhcnlXcml0ZSA9IGZhbHNlO1xuICAgIH1cbiAgICBoYXNBc3BlY3QoYXNwZWN0KSB7XG4gICAgICAgIGNvbnN0IGN0b3IgPSB0aGlzLmNvbnN0cnVjdG9yO1xuICAgICAgICBpZiAoY3Rvci5hc3BlY3RzID09IG51bGwpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gY3Rvci5hc3BlY3RzLmhhcyhhc3BlY3QpO1xuICAgIH1cbiAgICBnZXQgc2Vzc2lvbigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXNba1Nlc3Npb25dO1xuICAgIH1cbiAgICBjbGVhclNlc3Npb24oKSB7XG4gICAgICAgIHRoaXNba1Nlc3Npb25dID0gdW5kZWZpbmVkO1xuICAgIH1cbiAgICBnZXQgY2FuUmV0cnlSZWFkKCkge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgZ2V0IGNhblJldHJ5V3JpdGUoKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbn1cbmV4cG9ydHMuQWJzdHJhY3RPcGVyYXRpb24gPSBBYnN0cmFjdE9wZXJhdGlvbjtcbmZ1bmN0aW9uIGRlZmluZUFzcGVjdHMob3BlcmF0aW9uLCBhc3BlY3RzKSB7XG4gICAgaWYgKCFBcnJheS5pc0FycmF5KGFzcGVjdHMpICYmICEoYXNwZWN0cyBpbnN0YW5jZW9mIFNldCkpIHtcbiAgICAgICAgYXNwZWN0cyA9IFthc3BlY3RzXTtcbiAgICB9XG4gICAgYXNwZWN0cyA9IG5ldyBTZXQoYXNwZWN0cyk7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG9wZXJhdGlvbiwgJ2FzcGVjdHMnLCB7XG4gICAgICAgIHZhbHVlOiBhc3BlY3RzLFxuICAgICAgICB3cml0YWJsZTogZmFsc2VcbiAgICB9KTtcbiAgICByZXR1cm4gYXNwZWN0cztcbn1cbmV4cG9ydHMuZGVmaW5lQXNwZWN0cyA9IGRlZmluZUFzcGVjdHM7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1vcGVyYXRpb24uanMubWFwIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiZGVmaW5lQXNwZWN0cyIsIkFic3RyYWN0T3BlcmF0aW9uIiwiQXNwZWN0IiwiYnNvbl8xIiwicmVxdWlyZSIsInJlYWRfcHJlZmVyZW5jZV8xIiwiUkVBRF9PUEVSQVRJT04iLCJTeW1ib2wiLCJXUklURV9PUEVSQVRJT04iLCJSRVRSWUFCTEUiLCJFWFBMQUlOQUJMRSIsIlNLSVBfQ09MTEFUSU9OIiwiQ1VSU09SX0NSRUFUSU5HIiwiTVVTVF9TRUxFQ1RfU0FNRV9TRVJWRVIiLCJrU2Vzc2lvbiIsImNvbnN0cnVjdG9yIiwib3B0aW9ucyIsInJlYWRQcmVmZXJlbmNlIiwiaGFzQXNwZWN0IiwiUmVhZFByZWZlcmVuY2UiLCJwcmltYXJ5IiwiZnJvbU9wdGlvbnMiLCJic29uT3B0aW9ucyIsInJlc29sdmVCU09OT3B0aW9ucyIsInNlc3Npb24iLCJ1bmRlZmluZWQiLCJieXBhc3NQaW5uaW5nQ2hlY2siLCJ0cnlTZWNvbmRhcnlXcml0ZSIsImFzcGVjdCIsImN0b3IiLCJhc3BlY3RzIiwiaGFzIiwiY2xlYXJTZXNzaW9uIiwiY2FuUmV0cnlSZWFkIiwiY2FuUmV0cnlXcml0ZSIsIm9wZXJhdGlvbiIsIkFycmF5IiwiaXNBcnJheSIsIlNldCIsIndyaXRhYmxlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongodb/lib/operations/operation.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongodb/lib/operations/options_operation.js":
/*!******************************************************************!*\
  !*** ./node_modules/mongodb/lib/operations/options_operation.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.OptionsOperation = void 0;\nconst error_1 = __webpack_require__(/*! ../error */ \"(ssr)/./node_modules/mongodb/lib/error.js\");\nconst operation_1 = __webpack_require__(/*! ./operation */ \"(ssr)/./node_modules/mongodb/lib/operations/operation.js\");\n/** @internal */ class OptionsOperation extends operation_1.AbstractOperation {\n    constructor(collection, options){\n        super(options);\n        this.options = options;\n        this.collection = collection;\n    }\n    async execute(server, session) {\n        const coll = this.collection;\n        const [collection] = await coll.s.db.listCollections({\n            name: coll.collectionName\n        }, {\n            ...this.options,\n            nameOnly: false,\n            readPreference: this.readPreference,\n            session\n        }).toArray();\n        if (collection == null || collection.options == null) {\n            throw new error_1.MongoAPIError(`collection ${coll.namespace} not found`);\n        }\n        return collection.options;\n    }\n}\nexports.OptionsOperation = OptionsOperation; //# sourceMappingURL=options_operation.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbW9uZ29kYi9saWIvb3BlcmF0aW9ucy9vcHRpb25zX29wZXJhdGlvbi5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiQSw4Q0FBNkM7SUFBRUcsT0FBTztBQUFLLENBQUMsRUFBQztBQUM3REQsd0JBQXdCLEdBQUcsS0FBSztBQUNoQyxNQUFNRyxVQUFVQyxtQkFBT0EsQ0FBQywyREFBVTtBQUNsQyxNQUFNQyxjQUFjRCxtQkFBT0EsQ0FBQyw2RUFBYTtBQUN6QyxjQUFjLEdBQ2QsTUFBTUYseUJBQXlCRyxZQUFZQyxpQkFBaUI7SUFDeERDLFlBQVlDLFVBQVUsRUFBRUMsT0FBTyxDQUFFO1FBQzdCLEtBQUssQ0FBQ0E7UUFDTixJQUFJLENBQUNBLE9BQU8sR0FBR0E7UUFDZixJQUFJLENBQUNELFVBQVUsR0FBR0E7SUFDdEI7SUFDQSxNQUFNRSxRQUFRQyxNQUFNLEVBQUVDLE9BQU8sRUFBRTtRQUMzQixNQUFNQyxPQUFPLElBQUksQ0FBQ0wsVUFBVTtRQUM1QixNQUFNLENBQUNBLFdBQVcsR0FBRyxNQUFNSyxLQUFLQyxDQUFDLENBQUNDLEVBQUUsQ0FDL0JDLGVBQWUsQ0FBQztZQUFFQyxNQUFNSixLQUFLSyxjQUFjO1FBQUMsR0FBRztZQUFFLEdBQUcsSUFBSSxDQUFDVCxPQUFPO1lBQUVVLFVBQVU7WUFBT0MsZ0JBQWdCLElBQUksQ0FBQ0EsY0FBYztZQUFFUjtRQUFRLEdBQ2hJUyxPQUFPO1FBQ1osSUFBSWIsY0FBYyxRQUFRQSxXQUFXQyxPQUFPLElBQUksTUFBTTtZQUNsRCxNQUFNLElBQUlOLFFBQVFtQixhQUFhLENBQUMsQ0FBQyxXQUFXLEVBQUVULEtBQUtVLFNBQVMsQ0FBQyxVQUFVLENBQUM7UUFDNUU7UUFDQSxPQUFPZixXQUFXQyxPQUFPO0lBQzdCO0FBQ0o7QUFDQVQsd0JBQXdCLEdBQUdFLGtCQUMzQiw2Q0FBNkMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9ibG9nLWFwcGxpY2F0aW9uLy4vbm9kZV9tb2R1bGVzL21vbmdvZGIvbGliL29wZXJhdGlvbnMvb3B0aW9uc19vcGVyYXRpb24uanM/NzJmNiJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuT3B0aW9uc09wZXJhdGlvbiA9IHZvaWQgMDtcbmNvbnN0IGVycm9yXzEgPSByZXF1aXJlKFwiLi4vZXJyb3JcIik7XG5jb25zdCBvcGVyYXRpb25fMSA9IHJlcXVpcmUoXCIuL29wZXJhdGlvblwiKTtcbi8qKiBAaW50ZXJuYWwgKi9cbmNsYXNzIE9wdGlvbnNPcGVyYXRpb24gZXh0ZW5kcyBvcGVyYXRpb25fMS5BYnN0cmFjdE9wZXJhdGlvbiB7XG4gICAgY29uc3RydWN0b3IoY29sbGVjdGlvbiwgb3B0aW9ucykge1xuICAgICAgICBzdXBlcihvcHRpb25zKTtcbiAgICAgICAgdGhpcy5vcHRpb25zID0gb3B0aW9ucztcbiAgICAgICAgdGhpcy5jb2xsZWN0aW9uID0gY29sbGVjdGlvbjtcbiAgICB9XG4gICAgYXN5bmMgZXhlY3V0ZShzZXJ2ZXIsIHNlc3Npb24pIHtcbiAgICAgICAgY29uc3QgY29sbCA9IHRoaXMuY29sbGVjdGlvbjtcbiAgICAgICAgY29uc3QgW2NvbGxlY3Rpb25dID0gYXdhaXQgY29sbC5zLmRiXG4gICAgICAgICAgICAubGlzdENvbGxlY3Rpb25zKHsgbmFtZTogY29sbC5jb2xsZWN0aW9uTmFtZSB9LCB7IC4uLnRoaXMub3B0aW9ucywgbmFtZU9ubHk6IGZhbHNlLCByZWFkUHJlZmVyZW5jZTogdGhpcy5yZWFkUHJlZmVyZW5jZSwgc2Vzc2lvbiB9KVxuICAgICAgICAgICAgLnRvQXJyYXkoKTtcbiAgICAgICAgaWYgKGNvbGxlY3Rpb24gPT0gbnVsbCB8fCBjb2xsZWN0aW9uLm9wdGlvbnMgPT0gbnVsbCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IGVycm9yXzEuTW9uZ29BUElFcnJvcihgY29sbGVjdGlvbiAke2NvbGwubmFtZXNwYWNlfSBub3QgZm91bmRgKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gY29sbGVjdGlvbi5vcHRpb25zO1xuICAgIH1cbn1cbmV4cG9ydHMuT3B0aW9uc09wZXJhdGlvbiA9IE9wdGlvbnNPcGVyYXRpb247XG4vLyMgc291cmNlTWFwcGluZ1VSTD1vcHRpb25zX29wZXJhdGlvbi5qcy5tYXAiXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJPcHRpb25zT3BlcmF0aW9uIiwiZXJyb3JfMSIsInJlcXVpcmUiLCJvcGVyYXRpb25fMSIsIkFic3RyYWN0T3BlcmF0aW9uIiwiY29uc3RydWN0b3IiLCJjb2xsZWN0aW9uIiwib3B0aW9ucyIsImV4ZWN1dGUiLCJzZXJ2ZXIiLCJzZXNzaW9uIiwiY29sbCIsInMiLCJkYiIsImxpc3RDb2xsZWN0aW9ucyIsIm5hbWUiLCJjb2xsZWN0aW9uTmFtZSIsIm5hbWVPbmx5IiwicmVhZFByZWZlcmVuY2UiLCJ0b0FycmF5IiwiTW9uZ29BUElFcnJvciIsIm5hbWVzcGFjZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongodb/lib/operations/options_operation.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongodb/lib/operations/profiling_level.js":
/*!****************************************************************!*\
  !*** ./node_modules/mongodb/lib/operations/profiling_level.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.ProfilingLevelOperation = void 0;\nconst error_1 = __webpack_require__(/*! ../error */ \"(ssr)/./node_modules/mongodb/lib/error.js\");\nconst command_1 = __webpack_require__(/*! ./command */ \"(ssr)/./node_modules/mongodb/lib/operations/command.js\");\n/** @internal */ class ProfilingLevelOperation extends command_1.CommandOperation {\n    constructor(db, options){\n        super(db, options);\n        this.options = options;\n    }\n    async execute(server, session) {\n        const doc = await super.executeCommand(server, session, {\n            profile: -1\n        });\n        if (doc.ok === 1) {\n            const was = doc.was;\n            if (was === 0) return \"off\";\n            if (was === 1) return \"slow_only\";\n            if (was === 2) return \"all\";\n            throw new error_1.MongoUnexpectedServerResponseError(`Illegal profiling level value ${was}`);\n        } else {\n            throw new error_1.MongoUnexpectedServerResponseError(\"Error with profile command\");\n        }\n    }\n}\nexports.ProfilingLevelOperation = ProfilingLevelOperation; //# sourceMappingURL=profiling_level.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbW9uZ29kYi9saWIvb3BlcmF0aW9ucy9wcm9maWxpbmdfbGV2ZWwuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYkEsOENBQTZDO0lBQUVHLE9BQU87QUFBSyxDQUFDLEVBQUM7QUFDN0RELCtCQUErQixHQUFHLEtBQUs7QUFDdkMsTUFBTUcsVUFBVUMsbUJBQU9BLENBQUMsMkRBQVU7QUFDbEMsTUFBTUMsWUFBWUQsbUJBQU9BLENBQUMseUVBQVc7QUFDckMsY0FBYyxHQUNkLE1BQU1GLGdDQUFnQ0csVUFBVUMsZ0JBQWdCO0lBQzVEQyxZQUFZQyxFQUFFLEVBQUVDLE9BQU8sQ0FBRTtRQUNyQixLQUFLLENBQUNELElBQUlDO1FBQ1YsSUFBSSxDQUFDQSxPQUFPLEdBQUdBO0lBQ25CO0lBQ0EsTUFBTUMsUUFBUUMsTUFBTSxFQUFFQyxPQUFPLEVBQUU7UUFDM0IsTUFBTUMsTUFBTSxNQUFNLEtBQUssQ0FBQ0MsZUFBZUgsUUFBUUMsU0FBUztZQUFFRyxTQUFTLENBQUM7UUFBRTtRQUN0RSxJQUFJRixJQUFJRyxFQUFFLEtBQUssR0FBRztZQUNkLE1BQU1DLE1BQU1KLElBQUlJLEdBQUc7WUFDbkIsSUFBSUEsUUFBUSxHQUNSLE9BQU87WUFDWCxJQUFJQSxRQUFRLEdBQ1IsT0FBTztZQUNYLElBQUlBLFFBQVEsR0FDUixPQUFPO1lBQ1gsTUFBTSxJQUFJZCxRQUFRZSxrQ0FBa0MsQ0FBQyxDQUFDLDhCQUE4QixFQUFFRCxJQUFJLENBQUM7UUFDL0YsT0FDSztZQUNELE1BQU0sSUFBSWQsUUFBUWUsa0NBQWtDLENBQUM7UUFDekQ7SUFDSjtBQUNKO0FBQ0FsQiwrQkFBK0IsR0FBR0UseUJBQ2xDLDJDQUEyQyIsInNvdXJjZXMiOlsid2VicGFjazovL2Jsb2ctYXBwbGljYXRpb24vLi9ub2RlX21vZHVsZXMvbW9uZ29kYi9saWIvb3BlcmF0aW9ucy9wcm9maWxpbmdfbGV2ZWwuanM/MmU5ZSJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuUHJvZmlsaW5nTGV2ZWxPcGVyYXRpb24gPSB2b2lkIDA7XG5jb25zdCBlcnJvcl8xID0gcmVxdWlyZShcIi4uL2Vycm9yXCIpO1xuY29uc3QgY29tbWFuZF8xID0gcmVxdWlyZShcIi4vY29tbWFuZFwiKTtcbi8qKiBAaW50ZXJuYWwgKi9cbmNsYXNzIFByb2ZpbGluZ0xldmVsT3BlcmF0aW9uIGV4dGVuZHMgY29tbWFuZF8xLkNvbW1hbmRPcGVyYXRpb24ge1xuICAgIGNvbnN0cnVjdG9yKGRiLCBvcHRpb25zKSB7XG4gICAgICAgIHN1cGVyKGRiLCBvcHRpb25zKTtcbiAgICAgICAgdGhpcy5vcHRpb25zID0gb3B0aW9ucztcbiAgICB9XG4gICAgYXN5bmMgZXhlY3V0ZShzZXJ2ZXIsIHNlc3Npb24pIHtcbiAgICAgICAgY29uc3QgZG9jID0gYXdhaXQgc3VwZXIuZXhlY3V0ZUNvbW1hbmQoc2VydmVyLCBzZXNzaW9uLCB7IHByb2ZpbGU6IC0xIH0pO1xuICAgICAgICBpZiAoZG9jLm9rID09PSAxKSB7XG4gICAgICAgICAgICBjb25zdCB3YXMgPSBkb2Mud2FzO1xuICAgICAgICAgICAgaWYgKHdhcyA9PT0gMClcbiAgICAgICAgICAgICAgICByZXR1cm4gJ29mZic7XG4gICAgICAgICAgICBpZiAod2FzID09PSAxKVxuICAgICAgICAgICAgICAgIHJldHVybiAnc2xvd19vbmx5JztcbiAgICAgICAgICAgIGlmICh3YXMgPT09IDIpXG4gICAgICAgICAgICAgICAgcmV0dXJuICdhbGwnO1xuICAgICAgICAgICAgdGhyb3cgbmV3IGVycm9yXzEuTW9uZ29VbmV4cGVjdGVkU2VydmVyUmVzcG9uc2VFcnJvcihgSWxsZWdhbCBwcm9maWxpbmcgbGV2ZWwgdmFsdWUgJHt3YXN9YCk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgZXJyb3JfMS5Nb25nb1VuZXhwZWN0ZWRTZXJ2ZXJSZXNwb25zZUVycm9yKCdFcnJvciB3aXRoIHByb2ZpbGUgY29tbWFuZCcpO1xuICAgICAgICB9XG4gICAgfVxufVxuZXhwb3J0cy5Qcm9maWxpbmdMZXZlbE9wZXJhdGlvbiA9IFByb2ZpbGluZ0xldmVsT3BlcmF0aW9uO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cHJvZmlsaW5nX2xldmVsLmpzLm1hcCJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsIlByb2ZpbGluZ0xldmVsT3BlcmF0aW9uIiwiZXJyb3JfMSIsInJlcXVpcmUiLCJjb21tYW5kXzEiLCJDb21tYW5kT3BlcmF0aW9uIiwiY29uc3RydWN0b3IiLCJkYiIsIm9wdGlvbnMiLCJleGVjdXRlIiwic2VydmVyIiwic2Vzc2lvbiIsImRvYyIsImV4ZWN1dGVDb21tYW5kIiwicHJvZmlsZSIsIm9rIiwid2FzIiwiTW9uZ29VbmV4cGVjdGVkU2VydmVyUmVzcG9uc2VFcnJvciJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongodb/lib/operations/profiling_level.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongodb/lib/operations/remove_user.js":
/*!************************************************************!*\
  !*** ./node_modules/mongodb/lib/operations/remove_user.js ***!
  \************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.RemoveUserOperation = void 0;\nconst command_1 = __webpack_require__(/*! ./command */ \"(ssr)/./node_modules/mongodb/lib/operations/command.js\");\nconst operation_1 = __webpack_require__(/*! ./operation */ \"(ssr)/./node_modules/mongodb/lib/operations/operation.js\");\n/** @internal */ class RemoveUserOperation extends command_1.CommandOperation {\n    constructor(db, username, options){\n        super(db, options);\n        this.options = options;\n        this.username = username;\n    }\n    async execute(server, session) {\n        await super.executeCommand(server, session, {\n            dropUser: this.username\n        });\n        return true;\n    }\n}\nexports.RemoveUserOperation = RemoveUserOperation;\n(0, operation_1.defineAspects)(RemoveUserOperation, [\n    operation_1.Aspect.WRITE_OPERATION\n]); //# sourceMappingURL=remove_user.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbW9uZ29kYi9saWIvb3BlcmF0aW9ucy9yZW1vdmVfdXNlci5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiQSw4Q0FBNkM7SUFBRUcsT0FBTztBQUFLLENBQUMsRUFBQztBQUM3REQsMkJBQTJCLEdBQUcsS0FBSztBQUNuQyxNQUFNRyxZQUFZQyxtQkFBT0EsQ0FBQyx5RUFBVztBQUNyQyxNQUFNQyxjQUFjRCxtQkFBT0EsQ0FBQyw2RUFBYTtBQUN6QyxjQUFjLEdBQ2QsTUFBTUYsNEJBQTRCQyxVQUFVRyxnQkFBZ0I7SUFDeERDLFlBQVlDLEVBQUUsRUFBRUMsUUFBUSxFQUFFQyxPQUFPLENBQUU7UUFDL0IsS0FBSyxDQUFDRixJQUFJRTtRQUNWLElBQUksQ0FBQ0EsT0FBTyxHQUFHQTtRQUNmLElBQUksQ0FBQ0QsUUFBUSxHQUFHQTtJQUNwQjtJQUNBLE1BQU1FLFFBQVFDLE1BQU0sRUFBRUMsT0FBTyxFQUFFO1FBQzNCLE1BQU0sS0FBSyxDQUFDQyxlQUFlRixRQUFRQyxTQUFTO1lBQUVFLFVBQVUsSUFBSSxDQUFDTixRQUFRO1FBQUM7UUFDdEUsT0FBTztJQUNYO0FBQ0o7QUFDQVQsMkJBQTJCLEdBQUdFO0FBQzdCLElBQUdHLFlBQVlXLGFBQWEsRUFBRWQscUJBQXFCO0lBQUNHLFlBQVlZLE1BQU0sQ0FBQ0MsZUFBZTtDQUFDLEdBQ3hGLHVDQUF1QyIsInNvdXJjZXMiOlsid2VicGFjazovL2Jsb2ctYXBwbGljYXRpb24vLi9ub2RlX21vZHVsZXMvbW9uZ29kYi9saWIvb3BlcmF0aW9ucy9yZW1vdmVfdXNlci5qcz85OGMzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5SZW1vdmVVc2VyT3BlcmF0aW9uID0gdm9pZCAwO1xuY29uc3QgY29tbWFuZF8xID0gcmVxdWlyZShcIi4vY29tbWFuZFwiKTtcbmNvbnN0IG9wZXJhdGlvbl8xID0gcmVxdWlyZShcIi4vb3BlcmF0aW9uXCIpO1xuLyoqIEBpbnRlcm5hbCAqL1xuY2xhc3MgUmVtb3ZlVXNlck9wZXJhdGlvbiBleHRlbmRzIGNvbW1hbmRfMS5Db21tYW5kT3BlcmF0aW9uIHtcbiAgICBjb25zdHJ1Y3RvcihkYiwgdXNlcm5hbWUsIG9wdGlvbnMpIHtcbiAgICAgICAgc3VwZXIoZGIsIG9wdGlvbnMpO1xuICAgICAgICB0aGlzLm9wdGlvbnMgPSBvcHRpb25zO1xuICAgICAgICB0aGlzLnVzZXJuYW1lID0gdXNlcm5hbWU7XG4gICAgfVxuICAgIGFzeW5jIGV4ZWN1dGUoc2VydmVyLCBzZXNzaW9uKSB7XG4gICAgICAgIGF3YWl0IHN1cGVyLmV4ZWN1dGVDb21tYW5kKHNlcnZlciwgc2Vzc2lvbiwgeyBkcm9wVXNlcjogdGhpcy51c2VybmFtZSB9KTtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxufVxuZXhwb3J0cy5SZW1vdmVVc2VyT3BlcmF0aW9uID0gUmVtb3ZlVXNlck9wZXJhdGlvbjtcbigwLCBvcGVyYXRpb25fMS5kZWZpbmVBc3BlY3RzKShSZW1vdmVVc2VyT3BlcmF0aW9uLCBbb3BlcmF0aW9uXzEuQXNwZWN0LldSSVRFX09QRVJBVElPTl0pO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cmVtb3ZlX3VzZXIuanMubWFwIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiUmVtb3ZlVXNlck9wZXJhdGlvbiIsImNvbW1hbmRfMSIsInJlcXVpcmUiLCJvcGVyYXRpb25fMSIsIkNvbW1hbmRPcGVyYXRpb24iLCJjb25zdHJ1Y3RvciIsImRiIiwidXNlcm5hbWUiLCJvcHRpb25zIiwiZXhlY3V0ZSIsInNlcnZlciIsInNlc3Npb24iLCJleGVjdXRlQ29tbWFuZCIsImRyb3BVc2VyIiwiZGVmaW5lQXNwZWN0cyIsIkFzcGVjdCIsIldSSVRFX09QRVJBVElPTiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongodb/lib/operations/remove_user.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongodb/lib/operations/rename.js":
/*!*******************************************************!*\
  !*** ./node_modules/mongodb/lib/operations/rename.js ***!
  \*******************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.RenameOperation = void 0;\nconst collection_1 = __webpack_require__(/*! ../collection */ \"(ssr)/./node_modules/mongodb/lib/collection.js\");\nconst utils_1 = __webpack_require__(/*! ../utils */ \"(ssr)/./node_modules/mongodb/lib/utils.js\");\nconst command_1 = __webpack_require__(/*! ./command */ \"(ssr)/./node_modules/mongodb/lib/operations/command.js\");\nconst operation_1 = __webpack_require__(/*! ./operation */ \"(ssr)/./node_modules/mongodb/lib/operations/operation.js\");\n/** @internal */ class RenameOperation extends command_1.CommandOperation {\n    constructor(collection, newName, options){\n        super(collection, options);\n        this.collection = collection;\n        this.newName = newName;\n        this.options = options;\n        this.ns = new utils_1.MongoDBNamespace(\"admin\", \"$cmd\");\n    }\n    async execute(server, session) {\n        // Build the command\n        const renameCollection = this.collection.namespace;\n        const toCollection = this.collection.s.namespace.withCollection(this.newName).toString();\n        const dropTarget = typeof this.options.dropTarget === \"boolean\" ? this.options.dropTarget : false;\n        const command = {\n            renameCollection: renameCollection,\n            to: toCollection,\n            dropTarget: dropTarget\n        };\n        await super.executeCommand(server, session, command);\n        return new collection_1.Collection(this.collection.s.db, this.newName, this.collection.s.options);\n    }\n}\nexports.RenameOperation = RenameOperation;\n(0, operation_1.defineAspects)(RenameOperation, [\n    operation_1.Aspect.WRITE_OPERATION\n]); //# sourceMappingURL=rename.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbW9uZ29kYi9saWIvb3BlcmF0aW9ucy9yZW5hbWUuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYkEsOENBQTZDO0lBQUVHLE9BQU87QUFBSyxDQUFDLEVBQUM7QUFDN0RELHVCQUF1QixHQUFHLEtBQUs7QUFDL0IsTUFBTUcsZUFBZUMsbUJBQU9BLENBQUMscUVBQWU7QUFDNUMsTUFBTUMsVUFBVUQsbUJBQU9BLENBQUMsMkRBQVU7QUFDbEMsTUFBTUUsWUFBWUYsbUJBQU9BLENBQUMseUVBQVc7QUFDckMsTUFBTUcsY0FBY0gsbUJBQU9BLENBQUMsNkVBQWE7QUFDekMsY0FBYyxHQUNkLE1BQU1GLHdCQUF3QkksVUFBVUUsZ0JBQWdCO0lBQ3BEQyxZQUFZQyxVQUFVLEVBQUVDLE9BQU8sRUFBRUMsT0FBTyxDQUFFO1FBQ3RDLEtBQUssQ0FBQ0YsWUFBWUU7UUFDbEIsSUFBSSxDQUFDRixVQUFVLEdBQUdBO1FBQ2xCLElBQUksQ0FBQ0MsT0FBTyxHQUFHQTtRQUNmLElBQUksQ0FBQ0MsT0FBTyxHQUFHQTtRQUNmLElBQUksQ0FBQ0MsRUFBRSxHQUFHLElBQUlSLFFBQVFTLGdCQUFnQixDQUFDLFNBQVM7SUFDcEQ7SUFDQSxNQUFNQyxRQUFRQyxNQUFNLEVBQUVDLE9BQU8sRUFBRTtRQUMzQixvQkFBb0I7UUFDcEIsTUFBTUMsbUJBQW1CLElBQUksQ0FBQ1IsVUFBVSxDQUFDUyxTQUFTO1FBQ2xELE1BQU1DLGVBQWUsSUFBSSxDQUFDVixVQUFVLENBQUNXLENBQUMsQ0FBQ0YsU0FBUyxDQUFDRyxjQUFjLENBQUMsSUFBSSxDQUFDWCxPQUFPLEVBQUVZLFFBQVE7UUFDdEYsTUFBTUMsYUFBYSxPQUFPLElBQUksQ0FBQ1osT0FBTyxDQUFDWSxVQUFVLEtBQUssWUFBWSxJQUFJLENBQUNaLE9BQU8sQ0FBQ1ksVUFBVSxHQUFHO1FBQzVGLE1BQU1DLFVBQVU7WUFDWlAsa0JBQWtCQTtZQUNsQlEsSUFBSU47WUFDSkksWUFBWUE7UUFDaEI7UUFDQSxNQUFNLEtBQUssQ0FBQ0csZUFBZVgsUUFBUUMsU0FBU1E7UUFDNUMsT0FBTyxJQUFJdEIsYUFBYXlCLFVBQVUsQ0FBQyxJQUFJLENBQUNsQixVQUFVLENBQUNXLENBQUMsQ0FBQ1EsRUFBRSxFQUFFLElBQUksQ0FBQ2xCLE9BQU8sRUFBRSxJQUFJLENBQUNELFVBQVUsQ0FBQ1csQ0FBQyxDQUFDVCxPQUFPO0lBQ3BHO0FBQ0o7QUFDQVosdUJBQXVCLEdBQUdFO0FBQ3pCLElBQUdLLFlBQVl1QixhQUFhLEVBQUU1QixpQkFBaUI7SUFBQ0ssWUFBWXdCLE1BQU0sQ0FBQ0MsZUFBZTtDQUFDLEdBQ3BGLGtDQUFrQyIsInNvdXJjZXMiOlsid2VicGFjazovL2Jsb2ctYXBwbGljYXRpb24vLi9ub2RlX21vZHVsZXMvbW9uZ29kYi9saWIvb3BlcmF0aW9ucy9yZW5hbWUuanM/MDYyOCJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuUmVuYW1lT3BlcmF0aW9uID0gdm9pZCAwO1xuY29uc3QgY29sbGVjdGlvbl8xID0gcmVxdWlyZShcIi4uL2NvbGxlY3Rpb25cIik7XG5jb25zdCB1dGlsc18xID0gcmVxdWlyZShcIi4uL3V0aWxzXCIpO1xuY29uc3QgY29tbWFuZF8xID0gcmVxdWlyZShcIi4vY29tbWFuZFwiKTtcbmNvbnN0IG9wZXJhdGlvbl8xID0gcmVxdWlyZShcIi4vb3BlcmF0aW9uXCIpO1xuLyoqIEBpbnRlcm5hbCAqL1xuY2xhc3MgUmVuYW1lT3BlcmF0aW9uIGV4dGVuZHMgY29tbWFuZF8xLkNvbW1hbmRPcGVyYXRpb24ge1xuICAgIGNvbnN0cnVjdG9yKGNvbGxlY3Rpb24sIG5ld05hbWUsIG9wdGlvbnMpIHtcbiAgICAgICAgc3VwZXIoY29sbGVjdGlvbiwgb3B0aW9ucyk7XG4gICAgICAgIHRoaXMuY29sbGVjdGlvbiA9IGNvbGxlY3Rpb247XG4gICAgICAgIHRoaXMubmV3TmFtZSA9IG5ld05hbWU7XG4gICAgICAgIHRoaXMub3B0aW9ucyA9IG9wdGlvbnM7XG4gICAgICAgIHRoaXMubnMgPSBuZXcgdXRpbHNfMS5Nb25nb0RCTmFtZXNwYWNlKCdhZG1pbicsICckY21kJyk7XG4gICAgfVxuICAgIGFzeW5jIGV4ZWN1dGUoc2VydmVyLCBzZXNzaW9uKSB7XG4gICAgICAgIC8vIEJ1aWxkIHRoZSBjb21tYW5kXG4gICAgICAgIGNvbnN0IHJlbmFtZUNvbGxlY3Rpb24gPSB0aGlzLmNvbGxlY3Rpb24ubmFtZXNwYWNlO1xuICAgICAgICBjb25zdCB0b0NvbGxlY3Rpb24gPSB0aGlzLmNvbGxlY3Rpb24ucy5uYW1lc3BhY2Uud2l0aENvbGxlY3Rpb24odGhpcy5uZXdOYW1lKS50b1N0cmluZygpO1xuICAgICAgICBjb25zdCBkcm9wVGFyZ2V0ID0gdHlwZW9mIHRoaXMub3B0aW9ucy5kcm9wVGFyZ2V0ID09PSAnYm9vbGVhbicgPyB0aGlzLm9wdGlvbnMuZHJvcFRhcmdldCA6IGZhbHNlO1xuICAgICAgICBjb25zdCBjb21tYW5kID0ge1xuICAgICAgICAgICAgcmVuYW1lQ29sbGVjdGlvbjogcmVuYW1lQ29sbGVjdGlvbixcbiAgICAgICAgICAgIHRvOiB0b0NvbGxlY3Rpb24sXG4gICAgICAgICAgICBkcm9wVGFyZ2V0OiBkcm9wVGFyZ2V0XG4gICAgICAgIH07XG4gICAgICAgIGF3YWl0IHN1cGVyLmV4ZWN1dGVDb21tYW5kKHNlcnZlciwgc2Vzc2lvbiwgY29tbWFuZCk7XG4gICAgICAgIHJldHVybiBuZXcgY29sbGVjdGlvbl8xLkNvbGxlY3Rpb24odGhpcy5jb2xsZWN0aW9uLnMuZGIsIHRoaXMubmV3TmFtZSwgdGhpcy5jb2xsZWN0aW9uLnMub3B0aW9ucyk7XG4gICAgfVxufVxuZXhwb3J0cy5SZW5hbWVPcGVyYXRpb24gPSBSZW5hbWVPcGVyYXRpb247XG4oMCwgb3BlcmF0aW9uXzEuZGVmaW5lQXNwZWN0cykoUmVuYW1lT3BlcmF0aW9uLCBbb3BlcmF0aW9uXzEuQXNwZWN0LldSSVRFX09QRVJBVElPTl0pO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cmVuYW1lLmpzLm1hcCJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsIlJlbmFtZU9wZXJhdGlvbiIsImNvbGxlY3Rpb25fMSIsInJlcXVpcmUiLCJ1dGlsc18xIiwiY29tbWFuZF8xIiwib3BlcmF0aW9uXzEiLCJDb21tYW5kT3BlcmF0aW9uIiwiY29uc3RydWN0b3IiLCJjb2xsZWN0aW9uIiwibmV3TmFtZSIsIm9wdGlvbnMiLCJucyIsIk1vbmdvREJOYW1lc3BhY2UiLCJleGVjdXRlIiwic2VydmVyIiwic2Vzc2lvbiIsInJlbmFtZUNvbGxlY3Rpb24iLCJuYW1lc3BhY2UiLCJ0b0NvbGxlY3Rpb24iLCJzIiwid2l0aENvbGxlY3Rpb24iLCJ0b1N0cmluZyIsImRyb3BUYXJnZXQiLCJjb21tYW5kIiwidG8iLCJleGVjdXRlQ29tbWFuZCIsIkNvbGxlY3Rpb24iLCJkYiIsImRlZmluZUFzcGVjdHMiLCJBc3BlY3QiLCJXUklURV9PUEVSQVRJT04iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongodb/lib/operations/rename.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongodb/lib/operations/run_command.js":
/*!************************************************************!*\
  !*** ./node_modules/mongodb/lib/operations/run_command.js ***!
  \************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.RunAdminCommandOperation = exports.RunCommandOperation = void 0;\nconst utils_1 = __webpack_require__(/*! ../utils */ \"(ssr)/./node_modules/mongodb/lib/utils.js\");\nconst operation_1 = __webpack_require__(/*! ./operation */ \"(ssr)/./node_modules/mongodb/lib/operations/operation.js\");\n/** @internal */ class RunCommandOperation extends operation_1.AbstractOperation {\n    constructor(parent, command, options){\n        super(options);\n        this.command = command;\n        this.options = options;\n        this.ns = parent.s.namespace.withCollection(\"$cmd\");\n    }\n    async execute(server, session) {\n        this.server = server;\n        return server.commandAsync(this.ns, this.command, {\n            ...this.options,\n            readPreference: this.readPreference,\n            session\n        });\n    }\n}\nexports.RunCommandOperation = RunCommandOperation;\nclass RunAdminCommandOperation extends operation_1.AbstractOperation {\n    constructor(command, options){\n        super(options);\n        this.command = command;\n        this.options = options;\n        this.ns = new utils_1.MongoDBNamespace(\"admin\", \"$cmd\");\n    }\n    async execute(server, session) {\n        this.server = server;\n        return server.commandAsync(this.ns, this.command, {\n            ...this.options,\n            readPreference: this.readPreference,\n            session\n        });\n    }\n}\nexports.RunAdminCommandOperation = RunAdminCommandOperation; //# sourceMappingURL=run_command.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbW9uZ29kYi9saWIvb3BlcmF0aW9ucy9ydW5fY29tbWFuZC5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiQSw4Q0FBNkM7SUFBRUcsT0FBTztBQUFLLENBQUMsRUFBQztBQUM3REQsZ0NBQWdDLEdBQUdBLDJCQUEyQixHQUFHLEtBQUs7QUFDdEUsTUFBTUksVUFBVUMsbUJBQU9BLENBQUMsMkRBQVU7QUFDbEMsTUFBTUMsY0FBY0QsbUJBQU9BLENBQUMsNkVBQWE7QUFDekMsY0FBYyxHQUNkLE1BQU1GLDRCQUE0QkcsWUFBWUMsaUJBQWlCO0lBQzNEQyxZQUFZQyxNQUFNLEVBQUVDLE9BQU8sRUFBRUMsT0FBTyxDQUFFO1FBQ2xDLEtBQUssQ0FBQ0E7UUFDTixJQUFJLENBQUNELE9BQU8sR0FBR0E7UUFDZixJQUFJLENBQUNDLE9BQU8sR0FBR0E7UUFDZixJQUFJLENBQUNDLEVBQUUsR0FBR0gsT0FBT0ksQ0FBQyxDQUFDQyxTQUFTLENBQUNDLGNBQWMsQ0FBQztJQUNoRDtJQUNBLE1BQU1DLFFBQVFDLE1BQU0sRUFBRUMsT0FBTyxFQUFFO1FBQzNCLElBQUksQ0FBQ0QsTUFBTSxHQUFHQTtRQUNkLE9BQU9BLE9BQU9FLFlBQVksQ0FBQyxJQUFJLENBQUNQLEVBQUUsRUFBRSxJQUFJLENBQUNGLE9BQU8sRUFBRTtZQUM5QyxHQUFHLElBQUksQ0FBQ0MsT0FBTztZQUNmUyxnQkFBZ0IsSUFBSSxDQUFDQSxjQUFjO1lBQ25DRjtRQUNKO0lBQ0o7QUFDSjtBQUNBbEIsMkJBQTJCLEdBQUdHO0FBQzlCLE1BQU1ELGlDQUFpQ0ksWUFBWUMsaUJBQWlCO0lBQ2hFQyxZQUFZRSxPQUFPLEVBQUVDLE9BQU8sQ0FBRTtRQUMxQixLQUFLLENBQUNBO1FBQ04sSUFBSSxDQUFDRCxPQUFPLEdBQUdBO1FBQ2YsSUFBSSxDQUFDQyxPQUFPLEdBQUdBO1FBQ2YsSUFBSSxDQUFDQyxFQUFFLEdBQUcsSUFBSVIsUUFBUWlCLGdCQUFnQixDQUFDLFNBQVM7SUFDcEQ7SUFDQSxNQUFNTCxRQUFRQyxNQUFNLEVBQUVDLE9BQU8sRUFBRTtRQUMzQixJQUFJLENBQUNELE1BQU0sR0FBR0E7UUFDZCxPQUFPQSxPQUFPRSxZQUFZLENBQUMsSUFBSSxDQUFDUCxFQUFFLEVBQUUsSUFBSSxDQUFDRixPQUFPLEVBQUU7WUFDOUMsR0FBRyxJQUFJLENBQUNDLE9BQU87WUFDZlMsZ0JBQWdCLElBQUksQ0FBQ0EsY0FBYztZQUNuQ0Y7UUFDSjtJQUNKO0FBQ0o7QUFDQWxCLGdDQUFnQyxHQUFHRSwwQkFDbkMsdUNBQXVDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYmxvZy1hcHBsaWNhdGlvbi8uL25vZGVfbW9kdWxlcy9tb25nb2RiL2xpYi9vcGVyYXRpb25zL3J1bl9jb21tYW5kLmpzPzZmZjAiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLlJ1bkFkbWluQ29tbWFuZE9wZXJhdGlvbiA9IGV4cG9ydHMuUnVuQ29tbWFuZE9wZXJhdGlvbiA9IHZvaWQgMDtcbmNvbnN0IHV0aWxzXzEgPSByZXF1aXJlKFwiLi4vdXRpbHNcIik7XG5jb25zdCBvcGVyYXRpb25fMSA9IHJlcXVpcmUoXCIuL29wZXJhdGlvblwiKTtcbi8qKiBAaW50ZXJuYWwgKi9cbmNsYXNzIFJ1bkNvbW1hbmRPcGVyYXRpb24gZXh0ZW5kcyBvcGVyYXRpb25fMS5BYnN0cmFjdE9wZXJhdGlvbiB7XG4gICAgY29uc3RydWN0b3IocGFyZW50LCBjb21tYW5kLCBvcHRpb25zKSB7XG4gICAgICAgIHN1cGVyKG9wdGlvbnMpO1xuICAgICAgICB0aGlzLmNvbW1hbmQgPSBjb21tYW5kO1xuICAgICAgICB0aGlzLm9wdGlvbnMgPSBvcHRpb25zO1xuICAgICAgICB0aGlzLm5zID0gcGFyZW50LnMubmFtZXNwYWNlLndpdGhDb2xsZWN0aW9uKCckY21kJyk7XG4gICAgfVxuICAgIGFzeW5jIGV4ZWN1dGUoc2VydmVyLCBzZXNzaW9uKSB7XG4gICAgICAgIHRoaXMuc2VydmVyID0gc2VydmVyO1xuICAgICAgICByZXR1cm4gc2VydmVyLmNvbW1hbmRBc3luYyh0aGlzLm5zLCB0aGlzLmNvbW1hbmQsIHtcbiAgICAgICAgICAgIC4uLnRoaXMub3B0aW9ucyxcbiAgICAgICAgICAgIHJlYWRQcmVmZXJlbmNlOiB0aGlzLnJlYWRQcmVmZXJlbmNlLFxuICAgICAgICAgICAgc2Vzc2lvblxuICAgICAgICB9KTtcbiAgICB9XG59XG5leHBvcnRzLlJ1bkNvbW1hbmRPcGVyYXRpb24gPSBSdW5Db21tYW5kT3BlcmF0aW9uO1xuY2xhc3MgUnVuQWRtaW5Db21tYW5kT3BlcmF0aW9uIGV4dGVuZHMgb3BlcmF0aW9uXzEuQWJzdHJhY3RPcGVyYXRpb24ge1xuICAgIGNvbnN0cnVjdG9yKGNvbW1hbmQsIG9wdGlvbnMpIHtcbiAgICAgICAgc3VwZXIob3B0aW9ucyk7XG4gICAgICAgIHRoaXMuY29tbWFuZCA9IGNvbW1hbmQ7XG4gICAgICAgIHRoaXMub3B0aW9ucyA9IG9wdGlvbnM7XG4gICAgICAgIHRoaXMubnMgPSBuZXcgdXRpbHNfMS5Nb25nb0RCTmFtZXNwYWNlKCdhZG1pbicsICckY21kJyk7XG4gICAgfVxuICAgIGFzeW5jIGV4ZWN1dGUoc2VydmVyLCBzZXNzaW9uKSB7XG4gICAgICAgIHRoaXMuc2VydmVyID0gc2VydmVyO1xuICAgICAgICByZXR1cm4gc2VydmVyLmNvbW1hbmRBc3luYyh0aGlzLm5zLCB0aGlzLmNvbW1hbmQsIHtcbiAgICAgICAgICAgIC4uLnRoaXMub3B0aW9ucyxcbiAgICAgICAgICAgIHJlYWRQcmVmZXJlbmNlOiB0aGlzLnJlYWRQcmVmZXJlbmNlLFxuICAgICAgICAgICAgc2Vzc2lvblxuICAgICAgICB9KTtcbiAgICB9XG59XG5leHBvcnRzLlJ1bkFkbWluQ29tbWFuZE9wZXJhdGlvbiA9IFJ1bkFkbWluQ29tbWFuZE9wZXJhdGlvbjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXJ1bl9jb21tYW5kLmpzLm1hcCJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsIlJ1bkFkbWluQ29tbWFuZE9wZXJhdGlvbiIsIlJ1bkNvbW1hbmRPcGVyYXRpb24iLCJ1dGlsc18xIiwicmVxdWlyZSIsIm9wZXJhdGlvbl8xIiwiQWJzdHJhY3RPcGVyYXRpb24iLCJjb25zdHJ1Y3RvciIsInBhcmVudCIsImNvbW1hbmQiLCJvcHRpb25zIiwibnMiLCJzIiwibmFtZXNwYWNlIiwid2l0aENvbGxlY3Rpb24iLCJleGVjdXRlIiwic2VydmVyIiwic2Vzc2lvbiIsImNvbW1hbmRBc3luYyIsInJlYWRQcmVmZXJlbmNlIiwiTW9uZ29EQk5hbWVzcGFjZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongodb/lib/operations/run_command.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongodb/lib/operations/search_indexes/create.js":
/*!**********************************************************************!*\
  !*** ./node_modules/mongodb/lib/operations/search_indexes/create.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.CreateSearchIndexesOperation = void 0;\nconst operation_1 = __webpack_require__(/*! ../operation */ \"(ssr)/./node_modules/mongodb/lib/operations/operation.js\");\n/** @internal */ class CreateSearchIndexesOperation extends operation_1.AbstractOperation {\n    constructor(collection, descriptions){\n        super();\n        this.collection = collection;\n        this.descriptions = descriptions;\n    }\n    async execute(server, session) {\n        const namespace = this.collection.fullNamespace;\n        const command = {\n            createSearchIndexes: namespace.collection,\n            indexes: this.descriptions\n        };\n        const res = await server.commandAsync(namespace, command, {\n            session\n        });\n        const indexesCreated = res?.indexesCreated ?? [];\n        return indexesCreated.map(({ name })=>name);\n    }\n}\nexports.CreateSearchIndexesOperation = CreateSearchIndexesOperation; //# sourceMappingURL=create.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbW9uZ29kYi9saWIvb3BlcmF0aW9ucy9zZWFyY2hfaW5kZXhlcy9jcmVhdGUuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYkEsOENBQTZDO0lBQUVHLE9BQU87QUFBSyxDQUFDLEVBQUM7QUFDN0RELG9DQUFvQyxHQUFHLEtBQUs7QUFDNUMsTUFBTUcsY0FBY0MsbUJBQU9BLENBQUMsOEVBQWM7QUFDMUMsY0FBYyxHQUNkLE1BQU1GLHFDQUFxQ0MsWUFBWUUsaUJBQWlCO0lBQ3BFQyxZQUFZQyxVQUFVLEVBQUVDLFlBQVksQ0FBRTtRQUNsQyxLQUFLO1FBQ0wsSUFBSSxDQUFDRCxVQUFVLEdBQUdBO1FBQ2xCLElBQUksQ0FBQ0MsWUFBWSxHQUFHQTtJQUN4QjtJQUNBLE1BQU1DLFFBQVFDLE1BQU0sRUFBRUMsT0FBTyxFQUFFO1FBQzNCLE1BQU1DLFlBQVksSUFBSSxDQUFDTCxVQUFVLENBQUNNLGFBQWE7UUFDL0MsTUFBTUMsVUFBVTtZQUNaQyxxQkFBcUJILFVBQVVMLFVBQVU7WUFDekNTLFNBQVMsSUFBSSxDQUFDUixZQUFZO1FBQzlCO1FBQ0EsTUFBTVMsTUFBTSxNQUFNUCxPQUFPUSxZQUFZLENBQUNOLFdBQVdFLFNBQVM7WUFBRUg7UUFBUTtRQUNwRSxNQUFNUSxpQkFBaUJGLEtBQUtFLGtCQUFrQixFQUFFO1FBQ2hELE9BQU9BLGVBQWVDLEdBQUcsQ0FBQyxDQUFDLEVBQUVDLElBQUksRUFBRSxHQUFLQTtJQUM1QztBQUNKO0FBQ0FyQixvQ0FBb0MsR0FBR0UsOEJBQ3ZDLGtDQUFrQyIsInNvdXJjZXMiOlsid2VicGFjazovL2Jsb2ctYXBwbGljYXRpb24vLi9ub2RlX21vZHVsZXMvbW9uZ29kYi9saWIvb3BlcmF0aW9ucy9zZWFyY2hfaW5kZXhlcy9jcmVhdGUuanM/ZGMwMCJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuQ3JlYXRlU2VhcmNoSW5kZXhlc09wZXJhdGlvbiA9IHZvaWQgMDtcbmNvbnN0IG9wZXJhdGlvbl8xID0gcmVxdWlyZShcIi4uL29wZXJhdGlvblwiKTtcbi8qKiBAaW50ZXJuYWwgKi9cbmNsYXNzIENyZWF0ZVNlYXJjaEluZGV4ZXNPcGVyYXRpb24gZXh0ZW5kcyBvcGVyYXRpb25fMS5BYnN0cmFjdE9wZXJhdGlvbiB7XG4gICAgY29uc3RydWN0b3IoY29sbGVjdGlvbiwgZGVzY3JpcHRpb25zKSB7XG4gICAgICAgIHN1cGVyKCk7XG4gICAgICAgIHRoaXMuY29sbGVjdGlvbiA9IGNvbGxlY3Rpb247XG4gICAgICAgIHRoaXMuZGVzY3JpcHRpb25zID0gZGVzY3JpcHRpb25zO1xuICAgIH1cbiAgICBhc3luYyBleGVjdXRlKHNlcnZlciwgc2Vzc2lvbikge1xuICAgICAgICBjb25zdCBuYW1lc3BhY2UgPSB0aGlzLmNvbGxlY3Rpb24uZnVsbE5hbWVzcGFjZTtcbiAgICAgICAgY29uc3QgY29tbWFuZCA9IHtcbiAgICAgICAgICAgIGNyZWF0ZVNlYXJjaEluZGV4ZXM6IG5hbWVzcGFjZS5jb2xsZWN0aW9uLFxuICAgICAgICAgICAgaW5kZXhlczogdGhpcy5kZXNjcmlwdGlvbnNcbiAgICAgICAgfTtcbiAgICAgICAgY29uc3QgcmVzID0gYXdhaXQgc2VydmVyLmNvbW1hbmRBc3luYyhuYW1lc3BhY2UsIGNvbW1hbmQsIHsgc2Vzc2lvbiB9KTtcbiAgICAgICAgY29uc3QgaW5kZXhlc0NyZWF0ZWQgPSByZXM/LmluZGV4ZXNDcmVhdGVkID8/IFtdO1xuICAgICAgICByZXR1cm4gaW5kZXhlc0NyZWF0ZWQubWFwKCh7IG5hbWUgfSkgPT4gbmFtZSk7XG4gICAgfVxufVxuZXhwb3J0cy5DcmVhdGVTZWFyY2hJbmRleGVzT3BlcmF0aW9uID0gQ3JlYXRlU2VhcmNoSW5kZXhlc09wZXJhdGlvbjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWNyZWF0ZS5qcy5tYXAiXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJDcmVhdGVTZWFyY2hJbmRleGVzT3BlcmF0aW9uIiwib3BlcmF0aW9uXzEiLCJyZXF1aXJlIiwiQWJzdHJhY3RPcGVyYXRpb24iLCJjb25zdHJ1Y3RvciIsImNvbGxlY3Rpb24iLCJkZXNjcmlwdGlvbnMiLCJleGVjdXRlIiwic2VydmVyIiwic2Vzc2lvbiIsIm5hbWVzcGFjZSIsImZ1bGxOYW1lc3BhY2UiLCJjb21tYW5kIiwiY3JlYXRlU2VhcmNoSW5kZXhlcyIsImluZGV4ZXMiLCJyZXMiLCJjb21tYW5kQXN5bmMiLCJpbmRleGVzQ3JlYXRlZCIsIm1hcCIsIm5hbWUiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongodb/lib/operations/search_indexes/create.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongodb/lib/operations/search_indexes/drop.js":
/*!********************************************************************!*\
  !*** ./node_modules/mongodb/lib/operations/search_indexes/drop.js ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.DropSearchIndexOperation = void 0;\nconst error_1 = __webpack_require__(/*! ../../error */ \"(ssr)/./node_modules/mongodb/lib/error.js\");\nconst operation_1 = __webpack_require__(/*! ../operation */ \"(ssr)/./node_modules/mongodb/lib/operations/operation.js\");\n/** @internal */ class DropSearchIndexOperation extends operation_1.AbstractOperation {\n    constructor(collection, name){\n        super();\n        this.collection = collection;\n        this.name = name;\n    }\n    async execute(server, session) {\n        const namespace = this.collection.fullNamespace;\n        const command = {\n            dropSearchIndex: namespace.collection\n        };\n        if (typeof this.name === \"string\") {\n            command.name = this.name;\n        }\n        try {\n            await server.commandAsync(namespace, command, {\n                session\n            });\n        } catch (error) {\n            const isNamespaceNotFoundError = error instanceof error_1.MongoServerError && error.code === error_1.MONGODB_ERROR_CODES.NamespaceNotFound;\n            if (!isNamespaceNotFoundError) {\n                throw error;\n            }\n        }\n    }\n}\nexports.DropSearchIndexOperation = DropSearchIndexOperation; //# sourceMappingURL=drop.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbW9uZ29kYi9saWIvb3BlcmF0aW9ucy9zZWFyY2hfaW5kZXhlcy9kcm9wLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2JBLDhDQUE2QztJQUFFRyxPQUFPO0FBQUssQ0FBQyxFQUFDO0FBQzdERCxnQ0FBZ0MsR0FBRyxLQUFLO0FBQ3hDLE1BQU1HLFVBQVVDLG1CQUFPQSxDQUFDLDhEQUFhO0FBQ3JDLE1BQU1DLGNBQWNELG1CQUFPQSxDQUFDLDhFQUFjO0FBQzFDLGNBQWMsR0FDZCxNQUFNRixpQ0FBaUNHLFlBQVlDLGlCQUFpQjtJQUNoRUMsWUFBWUMsVUFBVSxFQUFFQyxJQUFJLENBQUU7UUFDMUIsS0FBSztRQUNMLElBQUksQ0FBQ0QsVUFBVSxHQUFHQTtRQUNsQixJQUFJLENBQUNDLElBQUksR0FBR0E7SUFDaEI7SUFDQSxNQUFNQyxRQUFRQyxNQUFNLEVBQUVDLE9BQU8sRUFBRTtRQUMzQixNQUFNQyxZQUFZLElBQUksQ0FBQ0wsVUFBVSxDQUFDTSxhQUFhO1FBQy9DLE1BQU1DLFVBQVU7WUFDWkMsaUJBQWlCSCxVQUFVTCxVQUFVO1FBQ3pDO1FBQ0EsSUFBSSxPQUFPLElBQUksQ0FBQ0MsSUFBSSxLQUFLLFVBQVU7WUFDL0JNLFFBQVFOLElBQUksR0FBRyxJQUFJLENBQUNBLElBQUk7UUFDNUI7UUFDQSxJQUFJO1lBQ0EsTUFBTUUsT0FBT00sWUFBWSxDQUFDSixXQUFXRSxTQUFTO2dCQUFFSDtZQUFRO1FBQzVELEVBQ0EsT0FBT00sT0FBTztZQUNWLE1BQU1DLDJCQUEyQkQsaUJBQWlCZixRQUFRaUIsZ0JBQWdCLElBQUlGLE1BQU1HLElBQUksS0FBS2xCLFFBQVFtQixtQkFBbUIsQ0FBQ0MsaUJBQWlCO1lBQzFJLElBQUksQ0FBQ0osMEJBQTBCO2dCQUMzQixNQUFNRDtZQUNWO1FBQ0o7SUFDSjtBQUNKO0FBQ0FsQixnQ0FBZ0MsR0FBR0UsMEJBQ25DLGdDQUFnQyIsInNvdXJjZXMiOlsid2VicGFjazovL2Jsb2ctYXBwbGljYXRpb24vLi9ub2RlX21vZHVsZXMvbW9uZ29kYi9saWIvb3BlcmF0aW9ucy9zZWFyY2hfaW5kZXhlcy9kcm9wLmpzP2ViOTEiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLkRyb3BTZWFyY2hJbmRleE9wZXJhdGlvbiA9IHZvaWQgMDtcbmNvbnN0IGVycm9yXzEgPSByZXF1aXJlKFwiLi4vLi4vZXJyb3JcIik7XG5jb25zdCBvcGVyYXRpb25fMSA9IHJlcXVpcmUoXCIuLi9vcGVyYXRpb25cIik7XG4vKiogQGludGVybmFsICovXG5jbGFzcyBEcm9wU2VhcmNoSW5kZXhPcGVyYXRpb24gZXh0ZW5kcyBvcGVyYXRpb25fMS5BYnN0cmFjdE9wZXJhdGlvbiB7XG4gICAgY29uc3RydWN0b3IoY29sbGVjdGlvbiwgbmFtZSkge1xuICAgICAgICBzdXBlcigpO1xuICAgICAgICB0aGlzLmNvbGxlY3Rpb24gPSBjb2xsZWN0aW9uO1xuICAgICAgICB0aGlzLm5hbWUgPSBuYW1lO1xuICAgIH1cbiAgICBhc3luYyBleGVjdXRlKHNlcnZlciwgc2Vzc2lvbikge1xuICAgICAgICBjb25zdCBuYW1lc3BhY2UgPSB0aGlzLmNvbGxlY3Rpb24uZnVsbE5hbWVzcGFjZTtcbiAgICAgICAgY29uc3QgY29tbWFuZCA9IHtcbiAgICAgICAgICAgIGRyb3BTZWFyY2hJbmRleDogbmFtZXNwYWNlLmNvbGxlY3Rpb25cbiAgICAgICAgfTtcbiAgICAgICAgaWYgKHR5cGVvZiB0aGlzLm5hbWUgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICBjb21tYW5kLm5hbWUgPSB0aGlzLm5hbWU7XG4gICAgICAgIH1cbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGF3YWl0IHNlcnZlci5jb21tYW5kQXN5bmMobmFtZXNwYWNlLCBjb21tYW5kLCB7IHNlc3Npb24gfSk7XG4gICAgICAgIH1cbiAgICAgICAgY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICBjb25zdCBpc05hbWVzcGFjZU5vdEZvdW5kRXJyb3IgPSBlcnJvciBpbnN0YW5jZW9mIGVycm9yXzEuTW9uZ29TZXJ2ZXJFcnJvciAmJiBlcnJvci5jb2RlID09PSBlcnJvcl8xLk1PTkdPREJfRVJST1JfQ09ERVMuTmFtZXNwYWNlTm90Rm91bmQ7XG4gICAgICAgICAgICBpZiAoIWlzTmFtZXNwYWNlTm90Rm91bmRFcnJvcikge1xuICAgICAgICAgICAgICAgIHRocm93IGVycm9yO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxufVxuZXhwb3J0cy5Ecm9wU2VhcmNoSW5kZXhPcGVyYXRpb24gPSBEcm9wU2VhcmNoSW5kZXhPcGVyYXRpb247XG4vLyMgc291cmNlTWFwcGluZ1VSTD1kcm9wLmpzLm1hcCJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsIkRyb3BTZWFyY2hJbmRleE9wZXJhdGlvbiIsImVycm9yXzEiLCJyZXF1aXJlIiwib3BlcmF0aW9uXzEiLCJBYnN0cmFjdE9wZXJhdGlvbiIsImNvbnN0cnVjdG9yIiwiY29sbGVjdGlvbiIsIm5hbWUiLCJleGVjdXRlIiwic2VydmVyIiwic2Vzc2lvbiIsIm5hbWVzcGFjZSIsImZ1bGxOYW1lc3BhY2UiLCJjb21tYW5kIiwiZHJvcFNlYXJjaEluZGV4IiwiY29tbWFuZEFzeW5jIiwiZXJyb3IiLCJpc05hbWVzcGFjZU5vdEZvdW5kRXJyb3IiLCJNb25nb1NlcnZlckVycm9yIiwiY29kZSIsIk1PTkdPREJfRVJST1JfQ09ERVMiLCJOYW1lc3BhY2VOb3RGb3VuZCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongodb/lib/operations/search_indexes/drop.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongodb/lib/operations/search_indexes/update.js":
/*!**********************************************************************!*\
  !*** ./node_modules/mongodb/lib/operations/search_indexes/update.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.UpdateSearchIndexOperation = void 0;\nconst operation_1 = __webpack_require__(/*! ../operation */ \"(ssr)/./node_modules/mongodb/lib/operations/operation.js\");\n/** @internal */ class UpdateSearchIndexOperation extends operation_1.AbstractOperation {\n    constructor(collection, name, definition){\n        super();\n        this.collection = collection;\n        this.name = name;\n        this.definition = definition;\n    }\n    async execute(server, session) {\n        const namespace = this.collection.fullNamespace;\n        const command = {\n            updateSearchIndex: namespace.collection,\n            name: this.name,\n            definition: this.definition\n        };\n        await server.commandAsync(namespace, command, {\n            session\n        });\n        return;\n    }\n}\nexports.UpdateSearchIndexOperation = UpdateSearchIndexOperation; //# sourceMappingURL=update.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbW9uZ29kYi9saWIvb3BlcmF0aW9ucy9zZWFyY2hfaW5kZXhlcy91cGRhdGUuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYkEsOENBQTZDO0lBQUVHLE9BQU87QUFBSyxDQUFDLEVBQUM7QUFDN0RELGtDQUFrQyxHQUFHLEtBQUs7QUFDMUMsTUFBTUcsY0FBY0MsbUJBQU9BLENBQUMsOEVBQWM7QUFDMUMsY0FBYyxHQUNkLE1BQU1GLG1DQUFtQ0MsWUFBWUUsaUJBQWlCO0lBQ2xFQyxZQUFZQyxVQUFVLEVBQUVDLElBQUksRUFBRUMsVUFBVSxDQUFFO1FBQ3RDLEtBQUs7UUFDTCxJQUFJLENBQUNGLFVBQVUsR0FBR0E7UUFDbEIsSUFBSSxDQUFDQyxJQUFJLEdBQUdBO1FBQ1osSUFBSSxDQUFDQyxVQUFVLEdBQUdBO0lBQ3RCO0lBQ0EsTUFBTUMsUUFBUUMsTUFBTSxFQUFFQyxPQUFPLEVBQUU7UUFDM0IsTUFBTUMsWUFBWSxJQUFJLENBQUNOLFVBQVUsQ0FBQ08sYUFBYTtRQUMvQyxNQUFNQyxVQUFVO1lBQ1pDLG1CQUFtQkgsVUFBVU4sVUFBVTtZQUN2Q0MsTUFBTSxJQUFJLENBQUNBLElBQUk7WUFDZkMsWUFBWSxJQUFJLENBQUNBLFVBQVU7UUFDL0I7UUFDQSxNQUFNRSxPQUFPTSxZQUFZLENBQUNKLFdBQVdFLFNBQVM7WUFBRUg7UUFBUTtRQUN4RDtJQUNKO0FBQ0o7QUFDQVosa0NBQWtDLEdBQUdFLDRCQUNyQyxrQ0FBa0MiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9ibG9nLWFwcGxpY2F0aW9uLy4vbm9kZV9tb2R1bGVzL21vbmdvZGIvbGliL29wZXJhdGlvbnMvc2VhcmNoX2luZGV4ZXMvdXBkYXRlLmpzP2YzNjEiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLlVwZGF0ZVNlYXJjaEluZGV4T3BlcmF0aW9uID0gdm9pZCAwO1xuY29uc3Qgb3BlcmF0aW9uXzEgPSByZXF1aXJlKFwiLi4vb3BlcmF0aW9uXCIpO1xuLyoqIEBpbnRlcm5hbCAqL1xuY2xhc3MgVXBkYXRlU2VhcmNoSW5kZXhPcGVyYXRpb24gZXh0ZW5kcyBvcGVyYXRpb25fMS5BYnN0cmFjdE9wZXJhdGlvbiB7XG4gICAgY29uc3RydWN0b3IoY29sbGVjdGlvbiwgbmFtZSwgZGVmaW5pdGlvbikge1xuICAgICAgICBzdXBlcigpO1xuICAgICAgICB0aGlzLmNvbGxlY3Rpb24gPSBjb2xsZWN0aW9uO1xuICAgICAgICB0aGlzLm5hbWUgPSBuYW1lO1xuICAgICAgICB0aGlzLmRlZmluaXRpb24gPSBkZWZpbml0aW9uO1xuICAgIH1cbiAgICBhc3luYyBleGVjdXRlKHNlcnZlciwgc2Vzc2lvbikge1xuICAgICAgICBjb25zdCBuYW1lc3BhY2UgPSB0aGlzLmNvbGxlY3Rpb24uZnVsbE5hbWVzcGFjZTtcbiAgICAgICAgY29uc3QgY29tbWFuZCA9IHtcbiAgICAgICAgICAgIHVwZGF0ZVNlYXJjaEluZGV4OiBuYW1lc3BhY2UuY29sbGVjdGlvbixcbiAgICAgICAgICAgIG5hbWU6IHRoaXMubmFtZSxcbiAgICAgICAgICAgIGRlZmluaXRpb246IHRoaXMuZGVmaW5pdGlvblxuICAgICAgICB9O1xuICAgICAgICBhd2FpdCBzZXJ2ZXIuY29tbWFuZEFzeW5jKG5hbWVzcGFjZSwgY29tbWFuZCwgeyBzZXNzaW9uIH0pO1xuICAgICAgICByZXR1cm47XG4gICAgfVxufVxuZXhwb3J0cy5VcGRhdGVTZWFyY2hJbmRleE9wZXJhdGlvbiA9IFVwZGF0ZVNlYXJjaEluZGV4T3BlcmF0aW9uO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dXBkYXRlLmpzLm1hcCJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsIlVwZGF0ZVNlYXJjaEluZGV4T3BlcmF0aW9uIiwib3BlcmF0aW9uXzEiLCJyZXF1aXJlIiwiQWJzdHJhY3RPcGVyYXRpb24iLCJjb25zdHJ1Y3RvciIsImNvbGxlY3Rpb24iLCJuYW1lIiwiZGVmaW5pdGlvbiIsImV4ZWN1dGUiLCJzZXJ2ZXIiLCJzZXNzaW9uIiwibmFtZXNwYWNlIiwiZnVsbE5hbWVzcGFjZSIsImNvbW1hbmQiLCJ1cGRhdGVTZWFyY2hJbmRleCIsImNvbW1hbmRBc3luYyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongodb/lib/operations/search_indexes/update.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongodb/lib/operations/set_profiling_level.js":
/*!********************************************************************!*\
  !*** ./node_modules/mongodb/lib/operations/set_profiling_level.js ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.SetProfilingLevelOperation = exports.ProfilingLevel = void 0;\nconst error_1 = __webpack_require__(/*! ../error */ \"(ssr)/./node_modules/mongodb/lib/error.js\");\nconst utils_1 = __webpack_require__(/*! ../utils */ \"(ssr)/./node_modules/mongodb/lib/utils.js\");\nconst command_1 = __webpack_require__(/*! ./command */ \"(ssr)/./node_modules/mongodb/lib/operations/command.js\");\nconst levelValues = new Set([\n    \"off\",\n    \"slow_only\",\n    \"all\"\n]);\n/** @public */ exports.ProfilingLevel = Object.freeze({\n    off: \"off\",\n    slowOnly: \"slow_only\",\n    all: \"all\"\n});\n/** @internal */ class SetProfilingLevelOperation extends command_1.CommandOperation {\n    constructor(db, level, options){\n        super(db, options);\n        this.options = options;\n        switch(level){\n            case exports.ProfilingLevel.off:\n                this.profile = 0;\n                break;\n            case exports.ProfilingLevel.slowOnly:\n                this.profile = 1;\n                break;\n            case exports.ProfilingLevel.all:\n                this.profile = 2;\n                break;\n            default:\n                this.profile = 0;\n                break;\n        }\n        this.level = level;\n    }\n    async execute(server, session) {\n        const level = this.level;\n        if (!levelValues.has(level)) {\n            throw new error_1.MongoInvalidArgumentError(`Profiling level must be one of \"${(0, utils_1.enumToString)(exports.ProfilingLevel)}\"`);\n        }\n        // TODO(NODE-3483): Determine error to put here\n        await super.executeCommand(server, session, {\n            profile: this.profile\n        });\n        return level;\n    }\n}\nexports.SetProfilingLevelOperation = SetProfilingLevelOperation; //# sourceMappingURL=set_profiling_level.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbW9uZ29kYi9saWIvb3BlcmF0aW9ucy9zZXRfcHJvZmlsaW5nX2xldmVsLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2JBLDhDQUE2QztJQUFFRyxPQUFPO0FBQUssQ0FBQyxFQUFDO0FBQzdERCxrQ0FBa0MsR0FBR0Esc0JBQXNCLEdBQUcsS0FBSztBQUNuRSxNQUFNSSxVQUFVQyxtQkFBT0EsQ0FBQywyREFBVTtBQUNsQyxNQUFNQyxVQUFVRCxtQkFBT0EsQ0FBQywyREFBVTtBQUNsQyxNQUFNRSxZQUFZRixtQkFBT0EsQ0FBQyx5RUFBVztBQUNyQyxNQUFNRyxjQUFjLElBQUlDLElBQUk7SUFBQztJQUFPO0lBQWE7Q0FBTTtBQUN2RCxZQUFZLEdBQ1pULHNCQUFzQixHQUFHRixPQUFPWSxNQUFNLENBQUM7SUFDbkNDLEtBQUs7SUFDTEMsVUFBVTtJQUNWQyxLQUFLO0FBQ1Q7QUFDQSxjQUFjLEdBQ2QsTUFBTVgsbUNBQW1DSyxVQUFVTyxnQkFBZ0I7SUFDL0RDLFlBQVlDLEVBQUUsRUFBRUMsS0FBSyxFQUFFQyxPQUFPLENBQUU7UUFDNUIsS0FBSyxDQUFDRixJQUFJRTtRQUNWLElBQUksQ0FBQ0EsT0FBTyxHQUFHQTtRQUNmLE9BQVFEO1lBQ0osS0FBS2pCLFFBQVFHLGNBQWMsQ0FBQ1EsR0FBRztnQkFDM0IsSUFBSSxDQUFDUSxPQUFPLEdBQUc7Z0JBQ2Y7WUFDSixLQUFLbkIsUUFBUUcsY0FBYyxDQUFDUyxRQUFRO2dCQUNoQyxJQUFJLENBQUNPLE9BQU8sR0FBRztnQkFDZjtZQUNKLEtBQUtuQixRQUFRRyxjQUFjLENBQUNVLEdBQUc7Z0JBQzNCLElBQUksQ0FBQ00sT0FBTyxHQUFHO2dCQUNmO1lBQ0o7Z0JBQ0ksSUFBSSxDQUFDQSxPQUFPLEdBQUc7Z0JBQ2Y7UUFDUjtRQUNBLElBQUksQ0FBQ0YsS0FBSyxHQUFHQTtJQUNqQjtJQUNBLE1BQU1HLFFBQVFDLE1BQU0sRUFBRUMsT0FBTyxFQUFFO1FBQzNCLE1BQU1MLFFBQVEsSUFBSSxDQUFDQSxLQUFLO1FBQ3hCLElBQUksQ0FBQ1QsWUFBWWUsR0FBRyxDQUFDTixRQUFRO1lBQ3pCLE1BQU0sSUFBSWIsUUFBUW9CLHlCQUF5QixDQUFDLENBQUMsZ0NBQWdDLEVBQUUsQ0FBQyxHQUFHbEIsUUFBUW1CLFlBQVksRUFBRXpCLFFBQVFHLGNBQWMsRUFBRSxDQUFDLENBQUM7UUFDdkk7UUFDQSwrQ0FBK0M7UUFDL0MsTUFBTSxLQUFLLENBQUN1QixlQUFlTCxRQUFRQyxTQUFTO1lBQUVILFNBQVMsSUFBSSxDQUFDQSxPQUFPO1FBQUM7UUFDcEUsT0FBT0Y7SUFDWDtBQUNKO0FBQ0FqQixrQ0FBa0MsR0FBR0UsNEJBQ3JDLCtDQUErQyIsInNvdXJjZXMiOlsid2VicGFjazovL2Jsb2ctYXBwbGljYXRpb24vLi9ub2RlX21vZHVsZXMvbW9uZ29kYi9saWIvb3BlcmF0aW9ucy9zZXRfcHJvZmlsaW5nX2xldmVsLmpzP2FkY2YiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLlNldFByb2ZpbGluZ0xldmVsT3BlcmF0aW9uID0gZXhwb3J0cy5Qcm9maWxpbmdMZXZlbCA9IHZvaWQgMDtcbmNvbnN0IGVycm9yXzEgPSByZXF1aXJlKFwiLi4vZXJyb3JcIik7XG5jb25zdCB1dGlsc18xID0gcmVxdWlyZShcIi4uL3V0aWxzXCIpO1xuY29uc3QgY29tbWFuZF8xID0gcmVxdWlyZShcIi4vY29tbWFuZFwiKTtcbmNvbnN0IGxldmVsVmFsdWVzID0gbmV3IFNldChbJ29mZicsICdzbG93X29ubHknLCAnYWxsJ10pO1xuLyoqIEBwdWJsaWMgKi9cbmV4cG9ydHMuUHJvZmlsaW5nTGV2ZWwgPSBPYmplY3QuZnJlZXplKHtcbiAgICBvZmY6ICdvZmYnLFxuICAgIHNsb3dPbmx5OiAnc2xvd19vbmx5JyxcbiAgICBhbGw6ICdhbGwnXG59KTtcbi8qKiBAaW50ZXJuYWwgKi9cbmNsYXNzIFNldFByb2ZpbGluZ0xldmVsT3BlcmF0aW9uIGV4dGVuZHMgY29tbWFuZF8xLkNvbW1hbmRPcGVyYXRpb24ge1xuICAgIGNvbnN0cnVjdG9yKGRiLCBsZXZlbCwgb3B0aW9ucykge1xuICAgICAgICBzdXBlcihkYiwgb3B0aW9ucyk7XG4gICAgICAgIHRoaXMub3B0aW9ucyA9IG9wdGlvbnM7XG4gICAgICAgIHN3aXRjaCAobGV2ZWwpIHtcbiAgICAgICAgICAgIGNhc2UgZXhwb3J0cy5Qcm9maWxpbmdMZXZlbC5vZmY6XG4gICAgICAgICAgICAgICAgdGhpcy5wcm9maWxlID0gMDtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgZXhwb3J0cy5Qcm9maWxpbmdMZXZlbC5zbG93T25seTpcbiAgICAgICAgICAgICAgICB0aGlzLnByb2ZpbGUgPSAxO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBleHBvcnRzLlByb2ZpbGluZ0xldmVsLmFsbDpcbiAgICAgICAgICAgICAgICB0aGlzLnByb2ZpbGUgPSAyO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICB0aGlzLnByb2ZpbGUgPSAwO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMubGV2ZWwgPSBsZXZlbDtcbiAgICB9XG4gICAgYXN5bmMgZXhlY3V0ZShzZXJ2ZXIsIHNlc3Npb24pIHtcbiAgICAgICAgY29uc3QgbGV2ZWwgPSB0aGlzLmxldmVsO1xuICAgICAgICBpZiAoIWxldmVsVmFsdWVzLmhhcyhsZXZlbCkpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBlcnJvcl8xLk1vbmdvSW52YWxpZEFyZ3VtZW50RXJyb3IoYFByb2ZpbGluZyBsZXZlbCBtdXN0IGJlIG9uZSBvZiBcIiR7KDAsIHV0aWxzXzEuZW51bVRvU3RyaW5nKShleHBvcnRzLlByb2ZpbGluZ0xldmVsKX1cImApO1xuICAgICAgICB9XG4gICAgICAgIC8vIFRPRE8oTk9ERS0zNDgzKTogRGV0ZXJtaW5lIGVycm9yIHRvIHB1dCBoZXJlXG4gICAgICAgIGF3YWl0IHN1cGVyLmV4ZWN1dGVDb21tYW5kKHNlcnZlciwgc2Vzc2lvbiwgeyBwcm9maWxlOiB0aGlzLnByb2ZpbGUgfSk7XG4gICAgICAgIHJldHVybiBsZXZlbDtcbiAgICB9XG59XG5leHBvcnRzLlNldFByb2ZpbGluZ0xldmVsT3BlcmF0aW9uID0gU2V0UHJvZmlsaW5nTGV2ZWxPcGVyYXRpb247XG4vLyMgc291cmNlTWFwcGluZ1VSTD1zZXRfcHJvZmlsaW5nX2xldmVsLmpzLm1hcCJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsIlNldFByb2ZpbGluZ0xldmVsT3BlcmF0aW9uIiwiUHJvZmlsaW5nTGV2ZWwiLCJlcnJvcl8xIiwicmVxdWlyZSIsInV0aWxzXzEiLCJjb21tYW5kXzEiLCJsZXZlbFZhbHVlcyIsIlNldCIsImZyZWV6ZSIsIm9mZiIsInNsb3dPbmx5IiwiYWxsIiwiQ29tbWFuZE9wZXJhdGlvbiIsImNvbnN0cnVjdG9yIiwiZGIiLCJsZXZlbCIsIm9wdGlvbnMiLCJwcm9maWxlIiwiZXhlY3V0ZSIsInNlcnZlciIsInNlc3Npb24iLCJoYXMiLCJNb25nb0ludmFsaWRBcmd1bWVudEVycm9yIiwiZW51bVRvU3RyaW5nIiwiZXhlY3V0ZUNvbW1hbmQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongodb/lib/operations/set_profiling_level.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongodb/lib/operations/stats.js":
/*!******************************************************!*\
  !*** ./node_modules/mongodb/lib/operations/stats.js ***!
  \******************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.DbStatsOperation = void 0;\nconst command_1 = __webpack_require__(/*! ./command */ \"(ssr)/./node_modules/mongodb/lib/operations/command.js\");\nconst operation_1 = __webpack_require__(/*! ./operation */ \"(ssr)/./node_modules/mongodb/lib/operations/operation.js\");\n/** @internal */ class DbStatsOperation extends command_1.CommandOperation {\n    constructor(db, options){\n        super(db, options);\n        this.options = options;\n    }\n    async execute(server, session) {\n        const command = {\n            dbStats: true\n        };\n        if (this.options.scale != null) {\n            command.scale = this.options.scale;\n        }\n        return super.executeCommand(server, session, command);\n    }\n}\nexports.DbStatsOperation = DbStatsOperation;\n(0, operation_1.defineAspects)(DbStatsOperation, [\n    operation_1.Aspect.READ_OPERATION\n]); //# sourceMappingURL=stats.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbW9uZ29kYi9saWIvb3BlcmF0aW9ucy9zdGF0cy5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiQSw4Q0FBNkM7SUFBRUcsT0FBTztBQUFLLENBQUMsRUFBQztBQUM3REQsd0JBQXdCLEdBQUcsS0FBSztBQUNoQyxNQUFNRyxZQUFZQyxtQkFBT0EsQ0FBQyx5RUFBVztBQUNyQyxNQUFNQyxjQUFjRCxtQkFBT0EsQ0FBQyw2RUFBYTtBQUN6QyxjQUFjLEdBQ2QsTUFBTUYseUJBQXlCQyxVQUFVRyxnQkFBZ0I7SUFDckRDLFlBQVlDLEVBQUUsRUFBRUMsT0FBTyxDQUFFO1FBQ3JCLEtBQUssQ0FBQ0QsSUFBSUM7UUFDVixJQUFJLENBQUNBLE9BQU8sR0FBR0E7SUFDbkI7SUFDQSxNQUFNQyxRQUFRQyxNQUFNLEVBQUVDLE9BQU8sRUFBRTtRQUMzQixNQUFNQyxVQUFVO1lBQUVDLFNBQVM7UUFBSztRQUNoQyxJQUFJLElBQUksQ0FBQ0wsT0FBTyxDQUFDTSxLQUFLLElBQUksTUFBTTtZQUM1QkYsUUFBUUUsS0FBSyxHQUFHLElBQUksQ0FBQ04sT0FBTyxDQUFDTSxLQUFLO1FBQ3RDO1FBQ0EsT0FBTyxLQUFLLENBQUNDLGVBQWVMLFFBQVFDLFNBQVNDO0lBQ2pEO0FBQ0o7QUFDQWIsd0JBQXdCLEdBQUdFO0FBQzFCLElBQUdHLFlBQVlZLGFBQWEsRUFBRWYsa0JBQWtCO0lBQUNHLFlBQVlhLE1BQU0sQ0FBQ0MsY0FBYztDQUFDLEdBQ3BGLGlDQUFpQyIsInNvdXJjZXMiOlsid2VicGFjazovL2Jsb2ctYXBwbGljYXRpb24vLi9ub2RlX21vZHVsZXMvbW9uZ29kYi9saWIvb3BlcmF0aW9ucy9zdGF0cy5qcz80NDAxIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5EYlN0YXRzT3BlcmF0aW9uID0gdm9pZCAwO1xuY29uc3QgY29tbWFuZF8xID0gcmVxdWlyZShcIi4vY29tbWFuZFwiKTtcbmNvbnN0IG9wZXJhdGlvbl8xID0gcmVxdWlyZShcIi4vb3BlcmF0aW9uXCIpO1xuLyoqIEBpbnRlcm5hbCAqL1xuY2xhc3MgRGJTdGF0c09wZXJhdGlvbiBleHRlbmRzIGNvbW1hbmRfMS5Db21tYW5kT3BlcmF0aW9uIHtcbiAgICBjb25zdHJ1Y3RvcihkYiwgb3B0aW9ucykge1xuICAgICAgICBzdXBlcihkYiwgb3B0aW9ucyk7XG4gICAgICAgIHRoaXMub3B0aW9ucyA9IG9wdGlvbnM7XG4gICAgfVxuICAgIGFzeW5jIGV4ZWN1dGUoc2VydmVyLCBzZXNzaW9uKSB7XG4gICAgICAgIGNvbnN0IGNvbW1hbmQgPSB7IGRiU3RhdHM6IHRydWUgfTtcbiAgICAgICAgaWYgKHRoaXMub3B0aW9ucy5zY2FsZSAhPSBudWxsKSB7XG4gICAgICAgICAgICBjb21tYW5kLnNjYWxlID0gdGhpcy5vcHRpb25zLnNjYWxlO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBzdXBlci5leGVjdXRlQ29tbWFuZChzZXJ2ZXIsIHNlc3Npb24sIGNvbW1hbmQpO1xuICAgIH1cbn1cbmV4cG9ydHMuRGJTdGF0c09wZXJhdGlvbiA9IERiU3RhdHNPcGVyYXRpb247XG4oMCwgb3BlcmF0aW9uXzEuZGVmaW5lQXNwZWN0cykoRGJTdGF0c09wZXJhdGlvbiwgW29wZXJhdGlvbl8xLkFzcGVjdC5SRUFEX09QRVJBVElPTl0pO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9c3RhdHMuanMubWFwIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiRGJTdGF0c09wZXJhdGlvbiIsImNvbW1hbmRfMSIsInJlcXVpcmUiLCJvcGVyYXRpb25fMSIsIkNvbW1hbmRPcGVyYXRpb24iLCJjb25zdHJ1Y3RvciIsImRiIiwib3B0aW9ucyIsImV4ZWN1dGUiLCJzZXJ2ZXIiLCJzZXNzaW9uIiwiY29tbWFuZCIsImRiU3RhdHMiLCJzY2FsZSIsImV4ZWN1dGVDb21tYW5kIiwiZGVmaW5lQXNwZWN0cyIsIkFzcGVjdCIsIlJFQURfT1BFUkFUSU9OIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongodb/lib/operations/stats.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongodb/lib/operations/update.js":
/*!*******************************************************!*\
  !*** ./node_modules/mongodb/lib/operations/update.js ***!
  \*******************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.makeUpdateStatement = exports.ReplaceOneOperation = exports.UpdateManyOperation = exports.UpdateOneOperation = exports.UpdateOperation = void 0;\nconst error_1 = __webpack_require__(/*! ../error */ \"(ssr)/./node_modules/mongodb/lib/error.js\");\nconst utils_1 = __webpack_require__(/*! ../utils */ \"(ssr)/./node_modules/mongodb/lib/utils.js\");\nconst command_1 = __webpack_require__(/*! ./command */ \"(ssr)/./node_modules/mongodb/lib/operations/command.js\");\nconst operation_1 = __webpack_require__(/*! ./operation */ \"(ssr)/./node_modules/mongodb/lib/operations/operation.js\");\n/**\n * @internal\n * UpdateOperation is used in bulk write, while UpdateOneOperation and UpdateManyOperation are only used in the collections API\n */ class UpdateOperation extends command_1.CommandOperation {\n    constructor(ns, statements, options){\n        super(undefined, options);\n        this.options = options;\n        this.ns = ns;\n        this.statements = statements;\n    }\n    get canRetryWrite() {\n        if (super.canRetryWrite === false) {\n            return false;\n        }\n        return this.statements.every((op)=>op.multi == null || op.multi === false);\n    }\n    async execute(server, session) {\n        const options = this.options ?? {};\n        const ordered = typeof options.ordered === \"boolean\" ? options.ordered : true;\n        const command = {\n            update: this.ns.collection,\n            updates: this.statements,\n            ordered\n        };\n        if (typeof options.bypassDocumentValidation === \"boolean\") {\n            command.bypassDocumentValidation = options.bypassDocumentValidation;\n        }\n        if (options.let) {\n            command.let = options.let;\n        }\n        // we check for undefined specifically here to allow falsy values\n        // eslint-disable-next-line no-restricted-syntax\n        if (options.comment !== undefined) {\n            command.comment = options.comment;\n        }\n        const unacknowledgedWrite = this.writeConcern && this.writeConcern.w === 0;\n        if (unacknowledgedWrite) {\n            if (this.statements.find((o)=>o.hint)) {\n                // TODO(NODE-3541): fix error for hint with unacknowledged writes\n                throw new error_1.MongoCompatibilityError(`hint is not supported with unacknowledged writes`);\n            }\n        }\n        return super.executeCommand(server, session, command);\n    }\n}\nexports.UpdateOperation = UpdateOperation;\n/** @internal */ class UpdateOneOperation extends UpdateOperation {\n    constructor(collection, filter, update, options){\n        super(collection.s.namespace, [\n            makeUpdateStatement(filter, update, {\n                ...options,\n                multi: false\n            })\n        ], options);\n        if (!(0, utils_1.hasAtomicOperators)(update)) {\n            throw new error_1.MongoInvalidArgumentError(\"Update document requires atomic operators\");\n        }\n    }\n    async execute(server, session) {\n        const res = await super.execute(server, session);\n        if (this.explain != null) return res;\n        if (res.code) throw new error_1.MongoServerError(res);\n        if (res.writeErrors) throw new error_1.MongoServerError(res.writeErrors[0]);\n        return {\n            acknowledged: this.writeConcern?.w !== 0,\n            modifiedCount: res.nModified ?? res.n,\n            upsertedId: Array.isArray(res.upserted) && res.upserted.length > 0 ? res.upserted[0]._id : null,\n            upsertedCount: Array.isArray(res.upserted) && res.upserted.length ? res.upserted.length : 0,\n            matchedCount: Array.isArray(res.upserted) && res.upserted.length > 0 ? 0 : res.n\n        };\n    }\n}\nexports.UpdateOneOperation = UpdateOneOperation;\n/** @internal */ class UpdateManyOperation extends UpdateOperation {\n    constructor(collection, filter, update, options){\n        super(collection.s.namespace, [\n            makeUpdateStatement(filter, update, {\n                ...options,\n                multi: true\n            })\n        ], options);\n        if (!(0, utils_1.hasAtomicOperators)(update)) {\n            throw new error_1.MongoInvalidArgumentError(\"Update document requires atomic operators\");\n        }\n    }\n    async execute(server, session) {\n        const res = await super.execute(server, session);\n        if (this.explain != null) return res;\n        if (res.code) throw new error_1.MongoServerError(res);\n        if (res.writeErrors) throw new error_1.MongoServerError(res.writeErrors[0]);\n        return {\n            acknowledged: this.writeConcern?.w !== 0,\n            modifiedCount: res.nModified ?? res.n,\n            upsertedId: Array.isArray(res.upserted) && res.upserted.length > 0 ? res.upserted[0]._id : null,\n            upsertedCount: Array.isArray(res.upserted) && res.upserted.length ? res.upserted.length : 0,\n            matchedCount: Array.isArray(res.upserted) && res.upserted.length > 0 ? 0 : res.n\n        };\n    }\n}\nexports.UpdateManyOperation = UpdateManyOperation;\n/** @internal */ class ReplaceOneOperation extends UpdateOperation {\n    constructor(collection, filter, replacement, options){\n        super(collection.s.namespace, [\n            makeUpdateStatement(filter, replacement, {\n                ...options,\n                multi: false\n            })\n        ], options);\n        if ((0, utils_1.hasAtomicOperators)(replacement)) {\n            throw new error_1.MongoInvalidArgumentError(\"Replacement document must not contain atomic operators\");\n        }\n    }\n    async execute(server, session) {\n        const res = await super.execute(server, session);\n        if (this.explain != null) return res;\n        if (res.code) throw new error_1.MongoServerError(res);\n        if (res.writeErrors) throw new error_1.MongoServerError(res.writeErrors[0]);\n        return {\n            acknowledged: this.writeConcern?.w !== 0,\n            modifiedCount: res.nModified ?? res.n,\n            upsertedId: Array.isArray(res.upserted) && res.upserted.length > 0 ? res.upserted[0]._id : null,\n            upsertedCount: Array.isArray(res.upserted) && res.upserted.length ? res.upserted.length : 0,\n            matchedCount: Array.isArray(res.upserted) && res.upserted.length > 0 ? 0 : res.n\n        };\n    }\n}\nexports.ReplaceOneOperation = ReplaceOneOperation;\nfunction makeUpdateStatement(filter, update, options) {\n    if (filter == null || typeof filter !== \"object\") {\n        throw new error_1.MongoInvalidArgumentError(\"Selector must be a valid JavaScript object\");\n    }\n    if (update == null || typeof update !== \"object\") {\n        throw new error_1.MongoInvalidArgumentError(\"Document must be a valid JavaScript object\");\n    }\n    const op = {\n        q: filter,\n        u: update\n    };\n    if (typeof options.upsert === \"boolean\") {\n        op.upsert = options.upsert;\n    }\n    if (options.multi) {\n        op.multi = options.multi;\n    }\n    if (options.hint) {\n        op.hint = options.hint;\n    }\n    if (options.arrayFilters) {\n        op.arrayFilters = options.arrayFilters;\n    }\n    if (options.collation) {\n        op.collation = options.collation;\n    }\n    return op;\n}\nexports.makeUpdateStatement = makeUpdateStatement;\n(0, operation_1.defineAspects)(UpdateOperation, [\n    operation_1.Aspect.RETRYABLE,\n    operation_1.Aspect.WRITE_OPERATION,\n    operation_1.Aspect.SKIP_COLLATION\n]);\n(0, operation_1.defineAspects)(UpdateOneOperation, [\n    operation_1.Aspect.RETRYABLE,\n    operation_1.Aspect.WRITE_OPERATION,\n    operation_1.Aspect.EXPLAINABLE,\n    operation_1.Aspect.SKIP_COLLATION\n]);\n(0, operation_1.defineAspects)(UpdateManyOperation, [\n    operation_1.Aspect.WRITE_OPERATION,\n    operation_1.Aspect.EXPLAINABLE,\n    operation_1.Aspect.SKIP_COLLATION\n]);\n(0, operation_1.defineAspects)(ReplaceOneOperation, [\n    operation_1.Aspect.RETRYABLE,\n    operation_1.Aspect.WRITE_OPERATION,\n    operation_1.Aspect.SKIP_COLLATION\n]); //# sourceMappingURL=update.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongodb/lib/operations/update.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongodb/lib/operations/validate_collection.js":
/*!********************************************************************!*\
  !*** ./node_modules/mongodb/lib/operations/validate_collection.js ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.ValidateCollectionOperation = void 0;\nconst error_1 = __webpack_require__(/*! ../error */ \"(ssr)/./node_modules/mongodb/lib/error.js\");\nconst command_1 = __webpack_require__(/*! ./command */ \"(ssr)/./node_modules/mongodb/lib/operations/command.js\");\n/** @internal */ class ValidateCollectionOperation extends command_1.CommandOperation {\n    constructor(admin, collectionName, options){\n        // Decorate command with extra options\n        const command = {\n            validate: collectionName\n        };\n        const keys = Object.keys(options);\n        for(let i = 0; i < keys.length; i++){\n            if (Object.prototype.hasOwnProperty.call(options, keys[i]) && keys[i] !== \"session\") {\n                command[keys[i]] = options[keys[i]];\n            }\n        }\n        super(admin.s.db, options);\n        this.options = options;\n        this.command = command;\n        this.collectionName = collectionName;\n    }\n    async execute(server, session) {\n        const collectionName = this.collectionName;\n        const doc = await super.executeCommand(server, session, this.command);\n        if (doc.result != null && typeof doc.result !== \"string\") throw new error_1.MongoUnexpectedServerResponseError(\"Error with validation data\");\n        if (doc.result != null && doc.result.match(/exception|corrupt/) != null) throw new error_1.MongoUnexpectedServerResponseError(`Invalid collection ${collectionName}`);\n        if (doc.valid != null && !doc.valid) throw new error_1.MongoUnexpectedServerResponseError(`Invalid collection ${collectionName}`);\n        return doc;\n    }\n}\nexports.ValidateCollectionOperation = ValidateCollectionOperation; //# sourceMappingURL=validate_collection.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbW9uZ29kYi9saWIvb3BlcmF0aW9ucy92YWxpZGF0ZV9jb2xsZWN0aW9uLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2JBLDhDQUE2QztJQUFFRyxPQUFPO0FBQUssQ0FBQyxFQUFDO0FBQzdERCxtQ0FBbUMsR0FBRyxLQUFLO0FBQzNDLE1BQU1HLFVBQVVDLG1CQUFPQSxDQUFDLDJEQUFVO0FBQ2xDLE1BQU1DLFlBQVlELG1CQUFPQSxDQUFDLHlFQUFXO0FBQ3JDLGNBQWMsR0FDZCxNQUFNRixvQ0FBb0NHLFVBQVVDLGdCQUFnQjtJQUNoRUMsWUFBWUMsS0FBSyxFQUFFQyxjQUFjLEVBQUVDLE9BQU8sQ0FBRTtRQUN4QyxzQ0FBc0M7UUFDdEMsTUFBTUMsVUFBVTtZQUFFQyxVQUFVSDtRQUFlO1FBQzNDLE1BQU1JLE9BQU9mLE9BQU9lLElBQUksQ0FBQ0g7UUFDekIsSUFBSyxJQUFJSSxJQUFJLEdBQUdBLElBQUlELEtBQUtFLE1BQU0sRUFBRUQsSUFBSztZQUNsQyxJQUFJaEIsT0FBT2tCLFNBQVMsQ0FBQ0MsY0FBYyxDQUFDQyxJQUFJLENBQUNSLFNBQVNHLElBQUksQ0FBQ0MsRUFBRSxLQUFLRCxJQUFJLENBQUNDLEVBQUUsS0FBSyxXQUFXO2dCQUNqRkgsT0FBTyxDQUFDRSxJQUFJLENBQUNDLEVBQUUsQ0FBQyxHQUFHSixPQUFPLENBQUNHLElBQUksQ0FBQ0MsRUFBRSxDQUFDO1lBQ3ZDO1FBQ0o7UUFDQSxLQUFLLENBQUNOLE1BQU1XLENBQUMsQ0FBQ0MsRUFBRSxFQUFFVjtRQUNsQixJQUFJLENBQUNBLE9BQU8sR0FBR0E7UUFDZixJQUFJLENBQUNDLE9BQU8sR0FBR0E7UUFDZixJQUFJLENBQUNGLGNBQWMsR0FBR0E7SUFDMUI7SUFDQSxNQUFNWSxRQUFRQyxNQUFNLEVBQUVDLE9BQU8sRUFBRTtRQUMzQixNQUFNZCxpQkFBaUIsSUFBSSxDQUFDQSxjQUFjO1FBQzFDLE1BQU1lLE1BQU0sTUFBTSxLQUFLLENBQUNDLGVBQWVILFFBQVFDLFNBQVMsSUFBSSxDQUFDWixPQUFPO1FBQ3BFLElBQUlhLElBQUlFLE1BQU0sSUFBSSxRQUFRLE9BQU9GLElBQUlFLE1BQU0sS0FBSyxVQUM1QyxNQUFNLElBQUl2QixRQUFRd0Isa0NBQWtDLENBQUM7UUFDekQsSUFBSUgsSUFBSUUsTUFBTSxJQUFJLFFBQVFGLElBQUlFLE1BQU0sQ0FBQ0UsS0FBSyxDQUFDLHdCQUF3QixNQUMvRCxNQUFNLElBQUl6QixRQUFRd0Isa0NBQWtDLENBQUMsQ0FBQyxtQkFBbUIsRUFBRWxCLGVBQWUsQ0FBQztRQUMvRixJQUFJZSxJQUFJSyxLQUFLLElBQUksUUFBUSxDQUFDTCxJQUFJSyxLQUFLLEVBQy9CLE1BQU0sSUFBSTFCLFFBQVF3QixrQ0FBa0MsQ0FBQyxDQUFDLG1CQUFtQixFQUFFbEIsZUFBZSxDQUFDO1FBQy9GLE9BQU9lO0lBQ1g7QUFDSjtBQUNBeEIsbUNBQW1DLEdBQUdFLDZCQUN0QywrQ0FBK0MiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9ibG9nLWFwcGxpY2F0aW9uLy4vbm9kZV9tb2R1bGVzL21vbmdvZGIvbGliL29wZXJhdGlvbnMvdmFsaWRhdGVfY29sbGVjdGlvbi5qcz9iYTk4Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5WYWxpZGF0ZUNvbGxlY3Rpb25PcGVyYXRpb24gPSB2b2lkIDA7XG5jb25zdCBlcnJvcl8xID0gcmVxdWlyZShcIi4uL2Vycm9yXCIpO1xuY29uc3QgY29tbWFuZF8xID0gcmVxdWlyZShcIi4vY29tbWFuZFwiKTtcbi8qKiBAaW50ZXJuYWwgKi9cbmNsYXNzIFZhbGlkYXRlQ29sbGVjdGlvbk9wZXJhdGlvbiBleHRlbmRzIGNvbW1hbmRfMS5Db21tYW5kT3BlcmF0aW9uIHtcbiAgICBjb25zdHJ1Y3RvcihhZG1pbiwgY29sbGVjdGlvbk5hbWUsIG9wdGlvbnMpIHtcbiAgICAgICAgLy8gRGVjb3JhdGUgY29tbWFuZCB3aXRoIGV4dHJhIG9wdGlvbnNcbiAgICAgICAgY29uc3QgY29tbWFuZCA9IHsgdmFsaWRhdGU6IGNvbGxlY3Rpb25OYW1lIH07XG4gICAgICAgIGNvbnN0IGtleXMgPSBPYmplY3Qua2V5cyhvcHRpb25zKTtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBrZXlzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9wdGlvbnMsIGtleXNbaV0pICYmIGtleXNbaV0gIT09ICdzZXNzaW9uJykge1xuICAgICAgICAgICAgICAgIGNvbW1hbmRba2V5c1tpXV0gPSBvcHRpb25zW2tleXNbaV1dO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHN1cGVyKGFkbWluLnMuZGIsIG9wdGlvbnMpO1xuICAgICAgICB0aGlzLm9wdGlvbnMgPSBvcHRpb25zO1xuICAgICAgICB0aGlzLmNvbW1hbmQgPSBjb21tYW5kO1xuICAgICAgICB0aGlzLmNvbGxlY3Rpb25OYW1lID0gY29sbGVjdGlvbk5hbWU7XG4gICAgfVxuICAgIGFzeW5jIGV4ZWN1dGUoc2VydmVyLCBzZXNzaW9uKSB7XG4gICAgICAgIGNvbnN0IGNvbGxlY3Rpb25OYW1lID0gdGhpcy5jb2xsZWN0aW9uTmFtZTtcbiAgICAgICAgY29uc3QgZG9jID0gYXdhaXQgc3VwZXIuZXhlY3V0ZUNvbW1hbmQoc2VydmVyLCBzZXNzaW9uLCB0aGlzLmNvbW1hbmQpO1xuICAgICAgICBpZiAoZG9jLnJlc3VsdCAhPSBudWxsICYmIHR5cGVvZiBkb2MucmVzdWx0ICE9PSAnc3RyaW5nJylcbiAgICAgICAgICAgIHRocm93IG5ldyBlcnJvcl8xLk1vbmdvVW5leHBlY3RlZFNlcnZlclJlc3BvbnNlRXJyb3IoJ0Vycm9yIHdpdGggdmFsaWRhdGlvbiBkYXRhJyk7XG4gICAgICAgIGlmIChkb2MucmVzdWx0ICE9IG51bGwgJiYgZG9jLnJlc3VsdC5tYXRjaCgvZXhjZXB0aW9ufGNvcnJ1cHQvKSAhPSBudWxsKVxuICAgICAgICAgICAgdGhyb3cgbmV3IGVycm9yXzEuTW9uZ29VbmV4cGVjdGVkU2VydmVyUmVzcG9uc2VFcnJvcihgSW52YWxpZCBjb2xsZWN0aW9uICR7Y29sbGVjdGlvbk5hbWV9YCk7XG4gICAgICAgIGlmIChkb2MudmFsaWQgIT0gbnVsbCAmJiAhZG9jLnZhbGlkKVxuICAgICAgICAgICAgdGhyb3cgbmV3IGVycm9yXzEuTW9uZ29VbmV4cGVjdGVkU2VydmVyUmVzcG9uc2VFcnJvcihgSW52YWxpZCBjb2xsZWN0aW9uICR7Y29sbGVjdGlvbk5hbWV9YCk7XG4gICAgICAgIHJldHVybiBkb2M7XG4gICAgfVxufVxuZXhwb3J0cy5WYWxpZGF0ZUNvbGxlY3Rpb25PcGVyYXRpb24gPSBWYWxpZGF0ZUNvbGxlY3Rpb25PcGVyYXRpb247XG4vLyMgc291cmNlTWFwcGluZ1VSTD12YWxpZGF0ZV9jb2xsZWN0aW9uLmpzLm1hcCJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsIlZhbGlkYXRlQ29sbGVjdGlvbk9wZXJhdGlvbiIsImVycm9yXzEiLCJyZXF1aXJlIiwiY29tbWFuZF8xIiwiQ29tbWFuZE9wZXJhdGlvbiIsImNvbnN0cnVjdG9yIiwiYWRtaW4iLCJjb2xsZWN0aW9uTmFtZSIsIm9wdGlvbnMiLCJjb21tYW5kIiwidmFsaWRhdGUiLCJrZXlzIiwiaSIsImxlbmd0aCIsInByb3RvdHlwZSIsImhhc093blByb3BlcnR5IiwiY2FsbCIsInMiLCJkYiIsImV4ZWN1dGUiLCJzZXJ2ZXIiLCJzZXNzaW9uIiwiZG9jIiwiZXhlY3V0ZUNvbW1hbmQiLCJyZXN1bHQiLCJNb25nb1VuZXhwZWN0ZWRTZXJ2ZXJSZXNwb25zZUVycm9yIiwibWF0Y2giLCJ2YWxpZCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongodb/lib/operations/validate_collection.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongodb/lib/read_concern.js":
/*!**************************************************!*\
  !*** ./node_modules/mongodb/lib/read_concern.js ***!
  \**************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.ReadConcern = exports.ReadConcernLevel = void 0;\n/** @public */ exports.ReadConcernLevel = Object.freeze({\n    local: \"local\",\n    majority: \"majority\",\n    linearizable: \"linearizable\",\n    available: \"available\",\n    snapshot: \"snapshot\"\n});\n/**\n * The MongoDB ReadConcern, which allows for control of the consistency and isolation properties\n * of the data read from replica sets and replica set shards.\n * @public\n *\n * @see https://www.mongodb.com/docs/manual/reference/read-concern/index.html\n */ class ReadConcern {\n    /** Constructs a ReadConcern from the read concern level.*/ constructor(level){\n        /**\n         * A spec test exists that allows level to be any string.\n         * \"invalid readConcern with out stage\"\n         * @see ./test/spec/crud/v2/aggregate-out-readConcern.json\n         * @see https://github.com/mongodb/specifications/blob/master/source/read-write-concern/read-write-concern.rst#unknown-levels-and-additional-options-for-string-based-readconcerns\n         */ this.level = exports.ReadConcernLevel[level] ?? level;\n    }\n    /**\n     * Construct a ReadConcern given an options object.\n     *\n     * @param options - The options object from which to extract the write concern.\n     */ static fromOptions(options) {\n        if (options == null) {\n            return;\n        }\n        if (options.readConcern) {\n            const { readConcern } = options;\n            if (readConcern instanceof ReadConcern) {\n                return readConcern;\n            } else if (typeof readConcern === \"string\") {\n                return new ReadConcern(readConcern);\n            } else if (\"level\" in readConcern && readConcern.level) {\n                return new ReadConcern(readConcern.level);\n            }\n        }\n        if (options.level) {\n            return new ReadConcern(options.level);\n        }\n        return;\n    }\n    static get MAJORITY() {\n        return exports.ReadConcernLevel.majority;\n    }\n    static get AVAILABLE() {\n        return exports.ReadConcernLevel.available;\n    }\n    static get LINEARIZABLE() {\n        return exports.ReadConcernLevel.linearizable;\n    }\n    static get SNAPSHOT() {\n        return exports.ReadConcernLevel.snapshot;\n    }\n    toJSON() {\n        return {\n            level: this.level\n        };\n    }\n}\nexports.ReadConcern = ReadConcern; //# sourceMappingURL=read_concern.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbW9uZ29kYi9saWIvcmVhZF9jb25jZXJuLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2JBLDhDQUE2QztJQUFFRyxPQUFPO0FBQUssQ0FBQyxFQUFDO0FBQzdERCxtQkFBbUIsR0FBR0Esd0JBQXdCLEdBQUcsS0FBSztBQUN0RCxZQUFZLEdBQ1pBLHdCQUF3QixHQUFHRixPQUFPTSxNQUFNLENBQUM7SUFDckNDLE9BQU87SUFDUEMsVUFBVTtJQUNWQyxjQUFjO0lBQ2RDLFdBQVc7SUFDWEMsVUFBVTtBQUNkO0FBQ0E7Ozs7OztDQU1DLEdBQ0QsTUFBTVA7SUFDRix5REFBeUQsR0FDekRRLFlBQVlDLEtBQUssQ0FBRTtRQUNmOzs7OztTQUtDLEdBQ0QsSUFBSSxDQUFDQSxLQUFLLEdBQUdYLFFBQVFHLGdCQUFnQixDQUFDUSxNQUFNLElBQUlBO0lBQ3BEO0lBQ0E7Ozs7S0FJQyxHQUNELE9BQU9DLFlBQVlDLE9BQU8sRUFBRTtRQUN4QixJQUFJQSxXQUFXLE1BQU07WUFDakI7UUFDSjtRQUNBLElBQUlBLFFBQVFDLFdBQVcsRUFBRTtZQUNyQixNQUFNLEVBQUVBLFdBQVcsRUFBRSxHQUFHRDtZQUN4QixJQUFJQyx1QkFBdUJaLGFBQWE7Z0JBQ3BDLE9BQU9ZO1lBQ1gsT0FDSyxJQUFJLE9BQU9BLGdCQUFnQixVQUFVO2dCQUN0QyxPQUFPLElBQUlaLFlBQVlZO1lBQzNCLE9BQ0ssSUFBSSxXQUFXQSxlQUFlQSxZQUFZSCxLQUFLLEVBQUU7Z0JBQ2xELE9BQU8sSUFBSVQsWUFBWVksWUFBWUgsS0FBSztZQUM1QztRQUNKO1FBQ0EsSUFBSUUsUUFBUUYsS0FBSyxFQUFFO1lBQ2YsT0FBTyxJQUFJVCxZQUFZVyxRQUFRRixLQUFLO1FBQ3hDO1FBQ0E7SUFDSjtJQUNBLFdBQVdJLFdBQVc7UUFDbEIsT0FBT2YsUUFBUUcsZ0JBQWdCLENBQUNHLFFBQVE7SUFDNUM7SUFDQSxXQUFXVSxZQUFZO1FBQ25CLE9BQU9oQixRQUFRRyxnQkFBZ0IsQ0FBQ0ssU0FBUztJQUM3QztJQUNBLFdBQVdTLGVBQWU7UUFDdEIsT0FBT2pCLFFBQVFHLGdCQUFnQixDQUFDSSxZQUFZO0lBQ2hEO0lBQ0EsV0FBV1csV0FBVztRQUNsQixPQUFPbEIsUUFBUUcsZ0JBQWdCLENBQUNNLFFBQVE7SUFDNUM7SUFDQVUsU0FBUztRQUNMLE9BQU87WUFBRVIsT0FBTyxJQUFJLENBQUNBLEtBQUs7UUFBQztJQUMvQjtBQUNKO0FBQ0FYLG1CQUFtQixHQUFHRSxhQUN0Qix3Q0FBd0MiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9ibG9nLWFwcGxpY2F0aW9uLy4vbm9kZV9tb2R1bGVzL21vbmdvZGIvbGliL3JlYWRfY29uY2Vybi5qcz85NWNiIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5SZWFkQ29uY2VybiA9IGV4cG9ydHMuUmVhZENvbmNlcm5MZXZlbCA9IHZvaWQgMDtcbi8qKiBAcHVibGljICovXG5leHBvcnRzLlJlYWRDb25jZXJuTGV2ZWwgPSBPYmplY3QuZnJlZXplKHtcbiAgICBsb2NhbDogJ2xvY2FsJyxcbiAgICBtYWpvcml0eTogJ21ham9yaXR5JyxcbiAgICBsaW5lYXJpemFibGU6ICdsaW5lYXJpemFibGUnLFxuICAgIGF2YWlsYWJsZTogJ2F2YWlsYWJsZScsXG4gICAgc25hcHNob3Q6ICdzbmFwc2hvdCdcbn0pO1xuLyoqXG4gKiBUaGUgTW9uZ29EQiBSZWFkQ29uY2Vybiwgd2hpY2ggYWxsb3dzIGZvciBjb250cm9sIG9mIHRoZSBjb25zaXN0ZW5jeSBhbmQgaXNvbGF0aW9uIHByb3BlcnRpZXNcbiAqIG9mIHRoZSBkYXRhIHJlYWQgZnJvbSByZXBsaWNhIHNldHMgYW5kIHJlcGxpY2Egc2V0IHNoYXJkcy5cbiAqIEBwdWJsaWNcbiAqXG4gKiBAc2VlIGh0dHBzOi8vd3d3Lm1vbmdvZGIuY29tL2RvY3MvbWFudWFsL3JlZmVyZW5jZS9yZWFkLWNvbmNlcm4vaW5kZXguaHRtbFxuICovXG5jbGFzcyBSZWFkQ29uY2VybiB7XG4gICAgLyoqIENvbnN0cnVjdHMgYSBSZWFkQ29uY2VybiBmcm9tIHRoZSByZWFkIGNvbmNlcm4gbGV2ZWwuKi9cbiAgICBjb25zdHJ1Y3RvcihsZXZlbCkge1xuICAgICAgICAvKipcbiAgICAgICAgICogQSBzcGVjIHRlc3QgZXhpc3RzIHRoYXQgYWxsb3dzIGxldmVsIHRvIGJlIGFueSBzdHJpbmcuXG4gICAgICAgICAqIFwiaW52YWxpZCByZWFkQ29uY2VybiB3aXRoIG91dCBzdGFnZVwiXG4gICAgICAgICAqIEBzZWUgLi90ZXN0L3NwZWMvY3J1ZC92Mi9hZ2dyZWdhdGUtb3V0LXJlYWRDb25jZXJuLmpzb25cbiAgICAgICAgICogQHNlZSBodHRwczovL2dpdGh1Yi5jb20vbW9uZ29kYi9zcGVjaWZpY2F0aW9ucy9ibG9iL21hc3Rlci9zb3VyY2UvcmVhZC13cml0ZS1jb25jZXJuL3JlYWQtd3JpdGUtY29uY2Vybi5yc3QjdW5rbm93bi1sZXZlbHMtYW5kLWFkZGl0aW9uYWwtb3B0aW9ucy1mb3Itc3RyaW5nLWJhc2VkLXJlYWRjb25jZXJuc1xuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5sZXZlbCA9IGV4cG9ydHMuUmVhZENvbmNlcm5MZXZlbFtsZXZlbF0gPz8gbGV2ZWw7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIENvbnN0cnVjdCBhIFJlYWRDb25jZXJuIGdpdmVuIGFuIG9wdGlvbnMgb2JqZWN0LlxuICAgICAqXG4gICAgICogQHBhcmFtIG9wdGlvbnMgLSBUaGUgb3B0aW9ucyBvYmplY3QgZnJvbSB3aGljaCB0byBleHRyYWN0IHRoZSB3cml0ZSBjb25jZXJuLlxuICAgICAqL1xuICAgIHN0YXRpYyBmcm9tT3B0aW9ucyhvcHRpb25zKSB7XG4gICAgICAgIGlmIChvcHRpb25zID09IG51bGwpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBpZiAob3B0aW9ucy5yZWFkQ29uY2Vybikge1xuICAgICAgICAgICAgY29uc3QgeyByZWFkQ29uY2VybiB9ID0gb3B0aW9ucztcbiAgICAgICAgICAgIGlmIChyZWFkQ29uY2VybiBpbnN0YW5jZW9mIFJlYWRDb25jZXJuKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHJlYWRDb25jZXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAodHlwZW9mIHJlYWRDb25jZXJuID09PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgICAgIHJldHVybiBuZXcgUmVhZENvbmNlcm4ocmVhZENvbmNlcm4pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAoJ2xldmVsJyBpbiByZWFkQ29uY2VybiAmJiByZWFkQ29uY2Vybi5sZXZlbCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBuZXcgUmVhZENvbmNlcm4ocmVhZENvbmNlcm4ubGV2ZWwpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmIChvcHRpb25zLmxldmVsKSB7XG4gICAgICAgICAgICByZXR1cm4gbmV3IFJlYWRDb25jZXJuKG9wdGlvbnMubGV2ZWwpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgc3RhdGljIGdldCBNQUpPUklUWSgpIHtcbiAgICAgICAgcmV0dXJuIGV4cG9ydHMuUmVhZENvbmNlcm5MZXZlbC5tYWpvcml0eTtcbiAgICB9XG4gICAgc3RhdGljIGdldCBBVkFJTEFCTEUoKSB7XG4gICAgICAgIHJldHVybiBleHBvcnRzLlJlYWRDb25jZXJuTGV2ZWwuYXZhaWxhYmxlO1xuICAgIH1cbiAgICBzdGF0aWMgZ2V0IExJTkVBUklaQUJMRSgpIHtcbiAgICAgICAgcmV0dXJuIGV4cG9ydHMuUmVhZENvbmNlcm5MZXZlbC5saW5lYXJpemFibGU7XG4gICAgfVxuICAgIHN0YXRpYyBnZXQgU05BUFNIT1QoKSB7XG4gICAgICAgIHJldHVybiBleHBvcnRzLlJlYWRDb25jZXJuTGV2ZWwuc25hcHNob3Q7XG4gICAgfVxuICAgIHRvSlNPTigpIHtcbiAgICAgICAgcmV0dXJuIHsgbGV2ZWw6IHRoaXMubGV2ZWwgfTtcbiAgICB9XG59XG5leHBvcnRzLlJlYWRDb25jZXJuID0gUmVhZENvbmNlcm47XG4vLyMgc291cmNlTWFwcGluZ1VSTD1yZWFkX2NvbmNlcm4uanMubWFwIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiUmVhZENvbmNlcm4iLCJSZWFkQ29uY2VybkxldmVsIiwiZnJlZXplIiwibG9jYWwiLCJtYWpvcml0eSIsImxpbmVhcml6YWJsZSIsImF2YWlsYWJsZSIsInNuYXBzaG90IiwiY29uc3RydWN0b3IiLCJsZXZlbCIsImZyb21PcHRpb25zIiwib3B0aW9ucyIsInJlYWRDb25jZXJuIiwiTUFKT1JJVFkiLCJBVkFJTEFCTEUiLCJMSU5FQVJJWkFCTEUiLCJTTkFQU0hPVCIsInRvSlNPTiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongodb/lib/read_concern.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongodb/lib/read_preference.js":
/*!*****************************************************!*\
  !*** ./node_modules/mongodb/lib/read_preference.js ***!
  \*****************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.ReadPreference = exports.ReadPreferenceMode = void 0;\nconst error_1 = __webpack_require__(/*! ./error */ \"(ssr)/./node_modules/mongodb/lib/error.js\");\n/** @public */ exports.ReadPreferenceMode = Object.freeze({\n    primary: \"primary\",\n    primaryPreferred: \"primaryPreferred\",\n    secondary: \"secondary\",\n    secondaryPreferred: \"secondaryPreferred\",\n    nearest: \"nearest\"\n});\n/**\n * The **ReadPreference** class is a class that represents a MongoDB ReadPreference and is\n * used to construct connections.\n * @public\n *\n * @see https://www.mongodb.com/docs/manual/core/read-preference/\n */ class ReadPreference {\n    /**\n     * @param mode - A string describing the read preference mode (primary|primaryPreferred|secondary|secondaryPreferred|nearest)\n     * @param tags - A tag set used to target reads to members with the specified tag(s). tagSet is not available if using read preference mode primary.\n     * @param options - Additional read preference options\n     */ constructor(mode, tags, options){\n        if (!ReadPreference.isValid(mode)) {\n            throw new error_1.MongoInvalidArgumentError(`Invalid read preference mode ${JSON.stringify(mode)}`);\n        }\n        if (options == null && typeof tags === \"object\" && !Array.isArray(tags)) {\n            options = tags;\n            tags = undefined;\n        } else if (tags && !Array.isArray(tags)) {\n            throw new error_1.MongoInvalidArgumentError(\"ReadPreference tags must be an array\");\n        }\n        this.mode = mode;\n        this.tags = tags;\n        this.hedge = options?.hedge;\n        this.maxStalenessSeconds = undefined;\n        this.minWireVersion = undefined;\n        options = options ?? {};\n        if (options.maxStalenessSeconds != null) {\n            if (options.maxStalenessSeconds <= 0) {\n                throw new error_1.MongoInvalidArgumentError(\"maxStalenessSeconds must be a positive integer\");\n            }\n            this.maxStalenessSeconds = options.maxStalenessSeconds;\n            // NOTE: The minimum required wire version is 5 for this read preference. If the existing\n            //       topology has a lower value then a MongoError will be thrown during server selection.\n            this.minWireVersion = 5;\n        }\n        if (this.mode === ReadPreference.PRIMARY) {\n            if (this.tags && Array.isArray(this.tags) && this.tags.length > 0) {\n                throw new error_1.MongoInvalidArgumentError(\"Primary read preference cannot be combined with tags\");\n            }\n            if (this.maxStalenessSeconds) {\n                throw new error_1.MongoInvalidArgumentError(\"Primary read preference cannot be combined with maxStalenessSeconds\");\n            }\n            if (this.hedge) {\n                throw new error_1.MongoInvalidArgumentError(\"Primary read preference cannot be combined with hedge\");\n            }\n        }\n    }\n    // Support the deprecated `preference` property introduced in the porcelain layer\n    get preference() {\n        return this.mode;\n    }\n    static fromString(mode) {\n        return new ReadPreference(mode);\n    }\n    /**\n     * Construct a ReadPreference given an options object.\n     *\n     * @param options - The options object from which to extract the read preference.\n     */ static fromOptions(options) {\n        if (!options) return;\n        const readPreference = options.readPreference ?? options.session?.transaction.options.readPreference;\n        const readPreferenceTags = options.readPreferenceTags;\n        if (readPreference == null) {\n            return;\n        }\n        if (typeof readPreference === \"string\") {\n            return new ReadPreference(readPreference, readPreferenceTags, {\n                maxStalenessSeconds: options.maxStalenessSeconds,\n                hedge: options.hedge\n            });\n        } else if (!(readPreference instanceof ReadPreference) && typeof readPreference === \"object\") {\n            const mode = readPreference.mode || readPreference.preference;\n            if (mode && typeof mode === \"string\") {\n                return new ReadPreference(mode, readPreference.tags ?? readPreferenceTags, {\n                    maxStalenessSeconds: readPreference.maxStalenessSeconds,\n                    hedge: options.hedge\n                });\n            }\n        }\n        if (readPreferenceTags) {\n            readPreference.tags = readPreferenceTags;\n        }\n        return readPreference;\n    }\n    /**\n     * Replaces options.readPreference with a ReadPreference instance\n     */ static translate(options) {\n        if (options.readPreference == null) return options;\n        const r = options.readPreference;\n        if (typeof r === \"string\") {\n            options.readPreference = new ReadPreference(r);\n        } else if (r && !(r instanceof ReadPreference) && typeof r === \"object\") {\n            const mode = r.mode || r.preference;\n            if (mode && typeof mode === \"string\") {\n                options.readPreference = new ReadPreference(mode, r.tags, {\n                    maxStalenessSeconds: r.maxStalenessSeconds\n                });\n            }\n        } else if (!(r instanceof ReadPreference)) {\n            throw new error_1.MongoInvalidArgumentError(`Invalid read preference: ${r}`);\n        }\n        return options;\n    }\n    /**\n     * Validate if a mode is legal\n     *\n     * @param mode - The string representing the read preference mode.\n     */ static isValid(mode) {\n        const VALID_MODES = new Set([\n            ReadPreference.PRIMARY,\n            ReadPreference.PRIMARY_PREFERRED,\n            ReadPreference.SECONDARY,\n            ReadPreference.SECONDARY_PREFERRED,\n            ReadPreference.NEAREST,\n            null\n        ]);\n        return VALID_MODES.has(mode);\n    }\n    /**\n     * Validate if a mode is legal\n     *\n     * @param mode - The string representing the read preference mode.\n     */ isValid(mode) {\n        return ReadPreference.isValid(typeof mode === \"string\" ? mode : this.mode);\n    }\n    /**\n     * Indicates that this readPreference needs the \"SecondaryOk\" bit when sent over the wire\n     * @see https://www.mongodb.com/docs/manual/reference/mongodb-wire-protocol/#op-query\n     */ secondaryOk() {\n        const NEEDS_SECONDARYOK = new Set([\n            ReadPreference.PRIMARY_PREFERRED,\n            ReadPreference.SECONDARY,\n            ReadPreference.SECONDARY_PREFERRED,\n            ReadPreference.NEAREST\n        ]);\n        return NEEDS_SECONDARYOK.has(this.mode);\n    }\n    /**\n     * Check if the two ReadPreferences are equivalent\n     *\n     * @param readPreference - The read preference with which to check equality\n     */ equals(readPreference) {\n        return readPreference.mode === this.mode;\n    }\n    /** Return JSON representation */ toJSON() {\n        const readPreference = {\n            mode: this.mode\n        };\n        if (Array.isArray(this.tags)) readPreference.tags = this.tags;\n        if (this.maxStalenessSeconds) readPreference.maxStalenessSeconds = this.maxStalenessSeconds;\n        if (this.hedge) readPreference.hedge = this.hedge;\n        return readPreference;\n    }\n}\nReadPreference.PRIMARY = exports.ReadPreferenceMode.primary;\nReadPreference.PRIMARY_PREFERRED = exports.ReadPreferenceMode.primaryPreferred;\nReadPreference.SECONDARY = exports.ReadPreferenceMode.secondary;\nReadPreference.SECONDARY_PREFERRED = exports.ReadPreferenceMode.secondaryPreferred;\nReadPreference.NEAREST = exports.ReadPreferenceMode.nearest;\nReadPreference.primary = new ReadPreference(exports.ReadPreferenceMode.primary);\nReadPreference.primaryPreferred = new ReadPreference(exports.ReadPreferenceMode.primaryPreferred);\nReadPreference.secondary = new ReadPreference(exports.ReadPreferenceMode.secondary);\nReadPreference.secondaryPreferred = new ReadPreference(exports.ReadPreferenceMode.secondaryPreferred);\nReadPreference.nearest = new ReadPreference(exports.ReadPreferenceMode.nearest);\nexports.ReadPreference = ReadPreference; //# sourceMappingURL=read_preference.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbW9uZ29kYi9saWIvcmVhZF9wcmVmZXJlbmNlLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2JBLDhDQUE2QztJQUFFRyxPQUFPO0FBQUssQ0FBQyxFQUFDO0FBQzdERCxzQkFBc0IsR0FBR0EsMEJBQTBCLEdBQUcsS0FBSztBQUMzRCxNQUFNSSxVQUFVQyxtQkFBT0EsQ0FBQywwREFBUztBQUNqQyxZQUFZLEdBQ1pMLDBCQUEwQixHQUFHRixPQUFPUSxNQUFNLENBQUM7SUFDdkNDLFNBQVM7SUFDVEMsa0JBQWtCO0lBQ2xCQyxXQUFXO0lBQ1hDLG9CQUFvQjtJQUNwQkMsU0FBUztBQUNiO0FBQ0E7Ozs7OztDQU1DLEdBQ0QsTUFBTVQ7SUFDRjs7OztLQUlDLEdBQ0RVLFlBQVlDLElBQUksRUFBRUMsSUFBSSxFQUFFQyxPQUFPLENBQUU7UUFDN0IsSUFBSSxDQUFDYixlQUFlYyxPQUFPLENBQUNILE9BQU87WUFDL0IsTUFBTSxJQUFJVCxRQUFRYSx5QkFBeUIsQ0FBQyxDQUFDLDZCQUE2QixFQUFFQyxLQUFLQyxTQUFTLENBQUNOLE1BQU0sQ0FBQztRQUN0RztRQUNBLElBQUlFLFdBQVcsUUFBUSxPQUFPRCxTQUFTLFlBQVksQ0FBQ00sTUFBTUMsT0FBTyxDQUFDUCxPQUFPO1lBQ3JFQyxVQUFVRDtZQUNWQSxPQUFPUTtRQUNYLE9BQ0ssSUFBSVIsUUFBUSxDQUFDTSxNQUFNQyxPQUFPLENBQUNQLE9BQU87WUFDbkMsTUFBTSxJQUFJVixRQUFRYSx5QkFBeUIsQ0FBQztRQUNoRDtRQUNBLElBQUksQ0FBQ0osSUFBSSxHQUFHQTtRQUNaLElBQUksQ0FBQ0MsSUFBSSxHQUFHQTtRQUNaLElBQUksQ0FBQ1MsS0FBSyxHQUFHUixTQUFTUTtRQUN0QixJQUFJLENBQUNDLG1CQUFtQixHQUFHRjtRQUMzQixJQUFJLENBQUNHLGNBQWMsR0FBR0g7UUFDdEJQLFVBQVVBLFdBQVcsQ0FBQztRQUN0QixJQUFJQSxRQUFRUyxtQkFBbUIsSUFBSSxNQUFNO1lBQ3JDLElBQUlULFFBQVFTLG1CQUFtQixJQUFJLEdBQUc7Z0JBQ2xDLE1BQU0sSUFBSXBCLFFBQVFhLHlCQUF5QixDQUFDO1lBQ2hEO1lBQ0EsSUFBSSxDQUFDTyxtQkFBbUIsR0FBR1QsUUFBUVMsbUJBQW1CO1lBQ3RELHlGQUF5RjtZQUN6Riw2RkFBNkY7WUFDN0YsSUFBSSxDQUFDQyxjQUFjLEdBQUc7UUFDMUI7UUFDQSxJQUFJLElBQUksQ0FBQ1osSUFBSSxLQUFLWCxlQUFld0IsT0FBTyxFQUFFO1lBQ3RDLElBQUksSUFBSSxDQUFDWixJQUFJLElBQUlNLE1BQU1DLE9BQU8sQ0FBQyxJQUFJLENBQUNQLElBQUksS0FBSyxJQUFJLENBQUNBLElBQUksQ0FBQ2EsTUFBTSxHQUFHLEdBQUc7Z0JBQy9ELE1BQU0sSUFBSXZCLFFBQVFhLHlCQUF5QixDQUFDO1lBQ2hEO1lBQ0EsSUFBSSxJQUFJLENBQUNPLG1CQUFtQixFQUFFO2dCQUMxQixNQUFNLElBQUlwQixRQUFRYSx5QkFBeUIsQ0FBQztZQUNoRDtZQUNBLElBQUksSUFBSSxDQUFDTSxLQUFLLEVBQUU7Z0JBQ1osTUFBTSxJQUFJbkIsUUFBUWEseUJBQXlCLENBQUM7WUFDaEQ7UUFDSjtJQUNKO0lBQ0EsaUZBQWlGO0lBQ2pGLElBQUlXLGFBQWE7UUFDYixPQUFPLElBQUksQ0FBQ2YsSUFBSTtJQUNwQjtJQUNBLE9BQU9nQixXQUFXaEIsSUFBSSxFQUFFO1FBQ3BCLE9BQU8sSUFBSVgsZUFBZVc7SUFDOUI7SUFDQTs7OztLQUlDLEdBQ0QsT0FBT2lCLFlBQVlmLE9BQU8sRUFBRTtRQUN4QixJQUFJLENBQUNBLFNBQ0Q7UUFDSixNQUFNZ0IsaUJBQWlCaEIsUUFBUWdCLGNBQWMsSUFBSWhCLFFBQVFpQixPQUFPLEVBQUVDLFlBQVlsQixRQUFRZ0I7UUFDdEYsTUFBTUcscUJBQXFCbkIsUUFBUW1CLGtCQUFrQjtRQUNyRCxJQUFJSCxrQkFBa0IsTUFBTTtZQUN4QjtRQUNKO1FBQ0EsSUFBSSxPQUFPQSxtQkFBbUIsVUFBVTtZQUNwQyxPQUFPLElBQUk3QixlQUFlNkIsZ0JBQWdCRyxvQkFBb0I7Z0JBQzFEVixxQkFBcUJULFFBQVFTLG1CQUFtQjtnQkFDaERELE9BQU9SLFFBQVFRLEtBQUs7WUFDeEI7UUFDSixPQUNLLElBQUksQ0FBRVEsQ0FBQUEsMEJBQTBCN0IsY0FBYSxLQUFNLE9BQU82QixtQkFBbUIsVUFBVTtZQUN4RixNQUFNbEIsT0FBT2tCLGVBQWVsQixJQUFJLElBQUlrQixlQUFlSCxVQUFVO1lBQzdELElBQUlmLFFBQVEsT0FBT0EsU0FBUyxVQUFVO2dCQUNsQyxPQUFPLElBQUlYLGVBQWVXLE1BQU1rQixlQUFlakIsSUFBSSxJQUFJb0Isb0JBQW9CO29CQUN2RVYscUJBQXFCTyxlQUFlUCxtQkFBbUI7b0JBQ3ZERCxPQUFPUixRQUFRUSxLQUFLO2dCQUN4QjtZQUNKO1FBQ0o7UUFDQSxJQUFJVyxvQkFBb0I7WUFDcEJILGVBQWVqQixJQUFJLEdBQUdvQjtRQUMxQjtRQUNBLE9BQU9IO0lBQ1g7SUFDQTs7S0FFQyxHQUNELE9BQU9JLFVBQVVwQixPQUFPLEVBQUU7UUFDdEIsSUFBSUEsUUFBUWdCLGNBQWMsSUFBSSxNQUMxQixPQUFPaEI7UUFDWCxNQUFNcUIsSUFBSXJCLFFBQVFnQixjQUFjO1FBQ2hDLElBQUksT0FBT0ssTUFBTSxVQUFVO1lBQ3ZCckIsUUFBUWdCLGNBQWMsR0FBRyxJQUFJN0IsZUFBZWtDO1FBQ2hELE9BQ0ssSUFBSUEsS0FBSyxDQUFFQSxDQUFBQSxhQUFhbEMsY0FBYSxLQUFNLE9BQU9rQyxNQUFNLFVBQVU7WUFDbkUsTUFBTXZCLE9BQU91QixFQUFFdkIsSUFBSSxJQUFJdUIsRUFBRVIsVUFBVTtZQUNuQyxJQUFJZixRQUFRLE9BQU9BLFNBQVMsVUFBVTtnQkFDbENFLFFBQVFnQixjQUFjLEdBQUcsSUFBSTdCLGVBQWVXLE1BQU11QixFQUFFdEIsSUFBSSxFQUFFO29CQUN0RFUscUJBQXFCWSxFQUFFWixtQkFBbUI7Z0JBQzlDO1lBQ0o7UUFDSixPQUNLLElBQUksQ0FBRVksQ0FBQUEsYUFBYWxDLGNBQWEsR0FBSTtZQUNyQyxNQUFNLElBQUlFLFFBQVFhLHlCQUF5QixDQUFDLENBQUMseUJBQXlCLEVBQUVtQixFQUFFLENBQUM7UUFDL0U7UUFDQSxPQUFPckI7SUFDWDtJQUNBOzs7O0tBSUMsR0FDRCxPQUFPQyxRQUFRSCxJQUFJLEVBQUU7UUFDakIsTUFBTXdCLGNBQWMsSUFBSUMsSUFBSTtZQUN4QnBDLGVBQWV3QixPQUFPO1lBQ3RCeEIsZUFBZXFDLGlCQUFpQjtZQUNoQ3JDLGVBQWVzQyxTQUFTO1lBQ3hCdEMsZUFBZXVDLG1CQUFtQjtZQUNsQ3ZDLGVBQWV3QyxPQUFPO1lBQ3RCO1NBQ0g7UUFDRCxPQUFPTCxZQUFZTSxHQUFHLENBQUM5QjtJQUMzQjtJQUNBOzs7O0tBSUMsR0FDREcsUUFBUUgsSUFBSSxFQUFFO1FBQ1YsT0FBT1gsZUFBZWMsT0FBTyxDQUFDLE9BQU9ILFNBQVMsV0FBV0EsT0FBTyxJQUFJLENBQUNBLElBQUk7SUFDN0U7SUFDQTs7O0tBR0MsR0FDRCtCLGNBQWM7UUFDVixNQUFNQyxvQkFBb0IsSUFBSVAsSUFBSTtZQUM5QnBDLGVBQWVxQyxpQkFBaUI7WUFDaENyQyxlQUFlc0MsU0FBUztZQUN4QnRDLGVBQWV1QyxtQkFBbUI7WUFDbEN2QyxlQUFld0MsT0FBTztTQUN6QjtRQUNELE9BQU9HLGtCQUFrQkYsR0FBRyxDQUFDLElBQUksQ0FBQzlCLElBQUk7SUFDMUM7SUFDQTs7OztLQUlDLEdBQ0RpQyxPQUFPZixjQUFjLEVBQUU7UUFDbkIsT0FBT0EsZUFBZWxCLElBQUksS0FBSyxJQUFJLENBQUNBLElBQUk7SUFDNUM7SUFDQSwrQkFBK0IsR0FDL0JrQyxTQUFTO1FBQ0wsTUFBTWhCLGlCQUFpQjtZQUFFbEIsTUFBTSxJQUFJLENBQUNBLElBQUk7UUFBQztRQUN6QyxJQUFJTyxNQUFNQyxPQUFPLENBQUMsSUFBSSxDQUFDUCxJQUFJLEdBQ3ZCaUIsZUFBZWpCLElBQUksR0FBRyxJQUFJLENBQUNBLElBQUk7UUFDbkMsSUFBSSxJQUFJLENBQUNVLG1CQUFtQixFQUN4Qk8sZUFBZVAsbUJBQW1CLEdBQUcsSUFBSSxDQUFDQSxtQkFBbUI7UUFDakUsSUFBSSxJQUFJLENBQUNELEtBQUssRUFDVlEsZUFBZVIsS0FBSyxHQUFHLElBQUksQ0FBQ0EsS0FBSztRQUNyQyxPQUFPUTtJQUNYO0FBQ0o7QUFDQTdCLGVBQWV3QixPQUFPLEdBQUcxQixRQUFRRyxrQkFBa0IsQ0FBQ0ksT0FBTztBQUMzREwsZUFBZXFDLGlCQUFpQixHQUFHdkMsUUFBUUcsa0JBQWtCLENBQUNLLGdCQUFnQjtBQUM5RU4sZUFBZXNDLFNBQVMsR0FBR3hDLFFBQVFHLGtCQUFrQixDQUFDTSxTQUFTO0FBQy9EUCxlQUFldUMsbUJBQW1CLEdBQUd6QyxRQUFRRyxrQkFBa0IsQ0FBQ08sa0JBQWtCO0FBQ2xGUixlQUFld0MsT0FBTyxHQUFHMUMsUUFBUUcsa0JBQWtCLENBQUNRLE9BQU87QUFDM0RULGVBQWVLLE9BQU8sR0FBRyxJQUFJTCxlQUFlRixRQUFRRyxrQkFBa0IsQ0FBQ0ksT0FBTztBQUM5RUwsZUFBZU0sZ0JBQWdCLEdBQUcsSUFBSU4sZUFBZUYsUUFBUUcsa0JBQWtCLENBQUNLLGdCQUFnQjtBQUNoR04sZUFBZU8sU0FBUyxHQUFHLElBQUlQLGVBQWVGLFFBQVFHLGtCQUFrQixDQUFDTSxTQUFTO0FBQ2xGUCxlQUFlUSxrQkFBa0IsR0FBRyxJQUFJUixlQUFlRixRQUFRRyxrQkFBa0IsQ0FBQ08sa0JBQWtCO0FBQ3BHUixlQUFlUyxPQUFPLEdBQUcsSUFBSVQsZUFBZUYsUUFBUUcsa0JBQWtCLENBQUNRLE9BQU87QUFDOUVYLHNCQUFzQixHQUFHRSxnQkFDekIsMkNBQTJDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYmxvZy1hcHBsaWNhdGlvbi8uL25vZGVfbW9kdWxlcy9tb25nb2RiL2xpYi9yZWFkX3ByZWZlcmVuY2UuanM/MmI1MCJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuUmVhZFByZWZlcmVuY2UgPSBleHBvcnRzLlJlYWRQcmVmZXJlbmNlTW9kZSA9IHZvaWQgMDtcbmNvbnN0IGVycm9yXzEgPSByZXF1aXJlKFwiLi9lcnJvclwiKTtcbi8qKiBAcHVibGljICovXG5leHBvcnRzLlJlYWRQcmVmZXJlbmNlTW9kZSA9IE9iamVjdC5mcmVlemUoe1xuICAgIHByaW1hcnk6ICdwcmltYXJ5JyxcbiAgICBwcmltYXJ5UHJlZmVycmVkOiAncHJpbWFyeVByZWZlcnJlZCcsXG4gICAgc2Vjb25kYXJ5OiAnc2Vjb25kYXJ5JyxcbiAgICBzZWNvbmRhcnlQcmVmZXJyZWQ6ICdzZWNvbmRhcnlQcmVmZXJyZWQnLFxuICAgIG5lYXJlc3Q6ICduZWFyZXN0J1xufSk7XG4vKipcbiAqIFRoZSAqKlJlYWRQcmVmZXJlbmNlKiogY2xhc3MgaXMgYSBjbGFzcyB0aGF0IHJlcHJlc2VudHMgYSBNb25nb0RCIFJlYWRQcmVmZXJlbmNlIGFuZCBpc1xuICogdXNlZCB0byBjb25zdHJ1Y3QgY29ubmVjdGlvbnMuXG4gKiBAcHVibGljXG4gKlxuICogQHNlZSBodHRwczovL3d3dy5tb25nb2RiLmNvbS9kb2NzL21hbnVhbC9jb3JlL3JlYWQtcHJlZmVyZW5jZS9cbiAqL1xuY2xhc3MgUmVhZFByZWZlcmVuY2Uge1xuICAgIC8qKlxuICAgICAqIEBwYXJhbSBtb2RlIC0gQSBzdHJpbmcgZGVzY3JpYmluZyB0aGUgcmVhZCBwcmVmZXJlbmNlIG1vZGUgKHByaW1hcnl8cHJpbWFyeVByZWZlcnJlZHxzZWNvbmRhcnl8c2Vjb25kYXJ5UHJlZmVycmVkfG5lYXJlc3QpXG4gICAgICogQHBhcmFtIHRhZ3MgLSBBIHRhZyBzZXQgdXNlZCB0byB0YXJnZXQgcmVhZHMgdG8gbWVtYmVycyB3aXRoIHRoZSBzcGVjaWZpZWQgdGFnKHMpLiB0YWdTZXQgaXMgbm90IGF2YWlsYWJsZSBpZiB1c2luZyByZWFkIHByZWZlcmVuY2UgbW9kZSBwcmltYXJ5LlxuICAgICAqIEBwYXJhbSBvcHRpb25zIC0gQWRkaXRpb25hbCByZWFkIHByZWZlcmVuY2Ugb3B0aW9uc1xuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKG1vZGUsIHRhZ3MsIG9wdGlvbnMpIHtcbiAgICAgICAgaWYgKCFSZWFkUHJlZmVyZW5jZS5pc1ZhbGlkKG1vZGUpKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgZXJyb3JfMS5Nb25nb0ludmFsaWRBcmd1bWVudEVycm9yKGBJbnZhbGlkIHJlYWQgcHJlZmVyZW5jZSBtb2RlICR7SlNPTi5zdHJpbmdpZnkobW9kZSl9YCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG9wdGlvbnMgPT0gbnVsbCAmJiB0eXBlb2YgdGFncyA9PT0gJ29iamVjdCcgJiYgIUFycmF5LmlzQXJyYXkodGFncykpIHtcbiAgICAgICAgICAgIG9wdGlvbnMgPSB0YWdzO1xuICAgICAgICAgICAgdGFncyA9IHVuZGVmaW5lZDtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmICh0YWdzICYmICFBcnJheS5pc0FycmF5KHRhZ3MpKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgZXJyb3JfMS5Nb25nb0ludmFsaWRBcmd1bWVudEVycm9yKCdSZWFkUHJlZmVyZW5jZSB0YWdzIG11c3QgYmUgYW4gYXJyYXknKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLm1vZGUgPSBtb2RlO1xuICAgICAgICB0aGlzLnRhZ3MgPSB0YWdzO1xuICAgICAgICB0aGlzLmhlZGdlID0gb3B0aW9ucz8uaGVkZ2U7XG4gICAgICAgIHRoaXMubWF4U3RhbGVuZXNzU2Vjb25kcyA9IHVuZGVmaW5lZDtcbiAgICAgICAgdGhpcy5taW5XaXJlVmVyc2lvbiA9IHVuZGVmaW5lZDtcbiAgICAgICAgb3B0aW9ucyA9IG9wdGlvbnMgPz8ge307XG4gICAgICAgIGlmIChvcHRpb25zLm1heFN0YWxlbmVzc1NlY29uZHMgIT0gbnVsbCkge1xuICAgICAgICAgICAgaWYgKG9wdGlvbnMubWF4U3RhbGVuZXNzU2Vjb25kcyA8PSAwKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IGVycm9yXzEuTW9uZ29JbnZhbGlkQXJndW1lbnRFcnJvcignbWF4U3RhbGVuZXNzU2Vjb25kcyBtdXN0IGJlIGEgcG9zaXRpdmUgaW50ZWdlcicpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5tYXhTdGFsZW5lc3NTZWNvbmRzID0gb3B0aW9ucy5tYXhTdGFsZW5lc3NTZWNvbmRzO1xuICAgICAgICAgICAgLy8gTk9URTogVGhlIG1pbmltdW0gcmVxdWlyZWQgd2lyZSB2ZXJzaW9uIGlzIDUgZm9yIHRoaXMgcmVhZCBwcmVmZXJlbmNlLiBJZiB0aGUgZXhpc3RpbmdcbiAgICAgICAgICAgIC8vICAgICAgIHRvcG9sb2d5IGhhcyBhIGxvd2VyIHZhbHVlIHRoZW4gYSBNb25nb0Vycm9yIHdpbGwgYmUgdGhyb3duIGR1cmluZyBzZXJ2ZXIgc2VsZWN0aW9uLlxuICAgICAgICAgICAgdGhpcy5taW5XaXJlVmVyc2lvbiA9IDU7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMubW9kZSA9PT0gUmVhZFByZWZlcmVuY2UuUFJJTUFSWSkge1xuICAgICAgICAgICAgaWYgKHRoaXMudGFncyAmJiBBcnJheS5pc0FycmF5KHRoaXMudGFncykgJiYgdGhpcy50YWdzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgZXJyb3JfMS5Nb25nb0ludmFsaWRBcmd1bWVudEVycm9yKCdQcmltYXJ5IHJlYWQgcHJlZmVyZW5jZSBjYW5ub3QgYmUgY29tYmluZWQgd2l0aCB0YWdzJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAodGhpcy5tYXhTdGFsZW5lc3NTZWNvbmRzKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IGVycm9yXzEuTW9uZ29JbnZhbGlkQXJndW1lbnRFcnJvcignUHJpbWFyeSByZWFkIHByZWZlcmVuY2UgY2Fubm90IGJlIGNvbWJpbmVkIHdpdGggbWF4U3RhbGVuZXNzU2Vjb25kcycpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHRoaXMuaGVkZ2UpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgZXJyb3JfMS5Nb25nb0ludmFsaWRBcmd1bWVudEVycm9yKCdQcmltYXJ5IHJlYWQgcHJlZmVyZW5jZSBjYW5ub3QgYmUgY29tYmluZWQgd2l0aCBoZWRnZScpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIC8vIFN1cHBvcnQgdGhlIGRlcHJlY2F0ZWQgYHByZWZlcmVuY2VgIHByb3BlcnR5IGludHJvZHVjZWQgaW4gdGhlIHBvcmNlbGFpbiBsYXllclxuICAgIGdldCBwcmVmZXJlbmNlKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5tb2RlO1xuICAgIH1cbiAgICBzdGF0aWMgZnJvbVN0cmluZyhtb2RlKSB7XG4gICAgICAgIHJldHVybiBuZXcgUmVhZFByZWZlcmVuY2UobW9kZSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIENvbnN0cnVjdCBhIFJlYWRQcmVmZXJlbmNlIGdpdmVuIGFuIG9wdGlvbnMgb2JqZWN0LlxuICAgICAqXG4gICAgICogQHBhcmFtIG9wdGlvbnMgLSBUaGUgb3B0aW9ucyBvYmplY3QgZnJvbSB3aGljaCB0byBleHRyYWN0IHRoZSByZWFkIHByZWZlcmVuY2UuXG4gICAgICovXG4gICAgc3RhdGljIGZyb21PcHRpb25zKG9wdGlvbnMpIHtcbiAgICAgICAgaWYgKCFvcHRpb25zKVxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICBjb25zdCByZWFkUHJlZmVyZW5jZSA9IG9wdGlvbnMucmVhZFByZWZlcmVuY2UgPz8gb3B0aW9ucy5zZXNzaW9uPy50cmFuc2FjdGlvbi5vcHRpb25zLnJlYWRQcmVmZXJlbmNlO1xuICAgICAgICBjb25zdCByZWFkUHJlZmVyZW5jZVRhZ3MgPSBvcHRpb25zLnJlYWRQcmVmZXJlbmNlVGFncztcbiAgICAgICAgaWYgKHJlYWRQcmVmZXJlbmNlID09IG51bGwpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBpZiAodHlwZW9mIHJlYWRQcmVmZXJlbmNlID09PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgcmV0dXJuIG5ldyBSZWFkUHJlZmVyZW5jZShyZWFkUHJlZmVyZW5jZSwgcmVhZFByZWZlcmVuY2VUYWdzLCB7XG4gICAgICAgICAgICAgICAgbWF4U3RhbGVuZXNzU2Vjb25kczogb3B0aW9ucy5tYXhTdGFsZW5lc3NTZWNvbmRzLFxuICAgICAgICAgICAgICAgIGhlZGdlOiBvcHRpb25zLmhlZGdlXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmICghKHJlYWRQcmVmZXJlbmNlIGluc3RhbmNlb2YgUmVhZFByZWZlcmVuY2UpICYmIHR5cGVvZiByZWFkUHJlZmVyZW5jZSA9PT0gJ29iamVjdCcpIHtcbiAgICAgICAgICAgIGNvbnN0IG1vZGUgPSByZWFkUHJlZmVyZW5jZS5tb2RlIHx8IHJlYWRQcmVmZXJlbmNlLnByZWZlcmVuY2U7XG4gICAgICAgICAgICBpZiAobW9kZSAmJiB0eXBlb2YgbW9kZSA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbmV3IFJlYWRQcmVmZXJlbmNlKG1vZGUsIHJlYWRQcmVmZXJlbmNlLnRhZ3MgPz8gcmVhZFByZWZlcmVuY2VUYWdzLCB7XG4gICAgICAgICAgICAgICAgICAgIG1heFN0YWxlbmVzc1NlY29uZHM6IHJlYWRQcmVmZXJlbmNlLm1heFN0YWxlbmVzc1NlY29uZHMsXG4gICAgICAgICAgICAgICAgICAgIGhlZGdlOiBvcHRpb25zLmhlZGdlXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHJlYWRQcmVmZXJlbmNlVGFncykge1xuICAgICAgICAgICAgcmVhZFByZWZlcmVuY2UudGFncyA9IHJlYWRQcmVmZXJlbmNlVGFncztcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmVhZFByZWZlcmVuY2U7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFJlcGxhY2VzIG9wdGlvbnMucmVhZFByZWZlcmVuY2Ugd2l0aCBhIFJlYWRQcmVmZXJlbmNlIGluc3RhbmNlXG4gICAgICovXG4gICAgc3RhdGljIHRyYW5zbGF0ZShvcHRpb25zKSB7XG4gICAgICAgIGlmIChvcHRpb25zLnJlYWRQcmVmZXJlbmNlID09IG51bGwpXG4gICAgICAgICAgICByZXR1cm4gb3B0aW9ucztcbiAgICAgICAgY29uc3QgciA9IG9wdGlvbnMucmVhZFByZWZlcmVuY2U7XG4gICAgICAgIGlmICh0eXBlb2YgciA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgIG9wdGlvbnMucmVhZFByZWZlcmVuY2UgPSBuZXcgUmVhZFByZWZlcmVuY2Uocik7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAociAmJiAhKHIgaW5zdGFuY2VvZiBSZWFkUHJlZmVyZW5jZSkgJiYgdHlwZW9mIHIgPT09ICdvYmplY3QnKSB7XG4gICAgICAgICAgICBjb25zdCBtb2RlID0gci5tb2RlIHx8IHIucHJlZmVyZW5jZTtcbiAgICAgICAgICAgIGlmIChtb2RlICYmIHR5cGVvZiBtb2RlID09PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgICAgIG9wdGlvbnMucmVhZFByZWZlcmVuY2UgPSBuZXcgUmVhZFByZWZlcmVuY2UobW9kZSwgci50YWdzLCB7XG4gICAgICAgICAgICAgICAgICAgIG1heFN0YWxlbmVzc1NlY29uZHM6IHIubWF4U3RhbGVuZXNzU2Vjb25kc1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKCEociBpbnN0YW5jZW9mIFJlYWRQcmVmZXJlbmNlKSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IGVycm9yXzEuTW9uZ29JbnZhbGlkQXJndW1lbnRFcnJvcihgSW52YWxpZCByZWFkIHByZWZlcmVuY2U6ICR7cn1gKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gb3B0aW9ucztcbiAgICB9XG4gICAgLyoqXG4gICAgICogVmFsaWRhdGUgaWYgYSBtb2RlIGlzIGxlZ2FsXG4gICAgICpcbiAgICAgKiBAcGFyYW0gbW9kZSAtIFRoZSBzdHJpbmcgcmVwcmVzZW50aW5nIHRoZSByZWFkIHByZWZlcmVuY2UgbW9kZS5cbiAgICAgKi9cbiAgICBzdGF0aWMgaXNWYWxpZChtb2RlKSB7XG4gICAgICAgIGNvbnN0IFZBTElEX01PREVTID0gbmV3IFNldChbXG4gICAgICAgICAgICBSZWFkUHJlZmVyZW5jZS5QUklNQVJZLFxuICAgICAgICAgICAgUmVhZFByZWZlcmVuY2UuUFJJTUFSWV9QUkVGRVJSRUQsXG4gICAgICAgICAgICBSZWFkUHJlZmVyZW5jZS5TRUNPTkRBUlksXG4gICAgICAgICAgICBSZWFkUHJlZmVyZW5jZS5TRUNPTkRBUllfUFJFRkVSUkVELFxuICAgICAgICAgICAgUmVhZFByZWZlcmVuY2UuTkVBUkVTVCxcbiAgICAgICAgICAgIG51bGxcbiAgICAgICAgXSk7XG4gICAgICAgIHJldHVybiBWQUxJRF9NT0RFUy5oYXMobW9kZSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFZhbGlkYXRlIGlmIGEgbW9kZSBpcyBsZWdhbFxuICAgICAqXG4gICAgICogQHBhcmFtIG1vZGUgLSBUaGUgc3RyaW5nIHJlcHJlc2VudGluZyB0aGUgcmVhZCBwcmVmZXJlbmNlIG1vZGUuXG4gICAgICovXG4gICAgaXNWYWxpZChtb2RlKSB7XG4gICAgICAgIHJldHVybiBSZWFkUHJlZmVyZW5jZS5pc1ZhbGlkKHR5cGVvZiBtb2RlID09PSAnc3RyaW5nJyA/IG1vZGUgOiB0aGlzLm1vZGUpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBJbmRpY2F0ZXMgdGhhdCB0aGlzIHJlYWRQcmVmZXJlbmNlIG5lZWRzIHRoZSBcIlNlY29uZGFyeU9rXCIgYml0IHdoZW4gc2VudCBvdmVyIHRoZSB3aXJlXG4gICAgICogQHNlZSBodHRwczovL3d3dy5tb25nb2RiLmNvbS9kb2NzL21hbnVhbC9yZWZlcmVuY2UvbW9uZ29kYi13aXJlLXByb3RvY29sLyNvcC1xdWVyeVxuICAgICAqL1xuICAgIHNlY29uZGFyeU9rKCkge1xuICAgICAgICBjb25zdCBORUVEU19TRUNPTkRBUllPSyA9IG5ldyBTZXQoW1xuICAgICAgICAgICAgUmVhZFByZWZlcmVuY2UuUFJJTUFSWV9QUkVGRVJSRUQsXG4gICAgICAgICAgICBSZWFkUHJlZmVyZW5jZS5TRUNPTkRBUlksXG4gICAgICAgICAgICBSZWFkUHJlZmVyZW5jZS5TRUNPTkRBUllfUFJFRkVSUkVELFxuICAgICAgICAgICAgUmVhZFByZWZlcmVuY2UuTkVBUkVTVFxuICAgICAgICBdKTtcbiAgICAgICAgcmV0dXJuIE5FRURTX1NFQ09OREFSWU9LLmhhcyh0aGlzLm1vZGUpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBDaGVjayBpZiB0aGUgdHdvIFJlYWRQcmVmZXJlbmNlcyBhcmUgZXF1aXZhbGVudFxuICAgICAqXG4gICAgICogQHBhcmFtIHJlYWRQcmVmZXJlbmNlIC0gVGhlIHJlYWQgcHJlZmVyZW5jZSB3aXRoIHdoaWNoIHRvIGNoZWNrIGVxdWFsaXR5XG4gICAgICovXG4gICAgZXF1YWxzKHJlYWRQcmVmZXJlbmNlKSB7XG4gICAgICAgIHJldHVybiByZWFkUHJlZmVyZW5jZS5tb2RlID09PSB0aGlzLm1vZGU7XG4gICAgfVxuICAgIC8qKiBSZXR1cm4gSlNPTiByZXByZXNlbnRhdGlvbiAqL1xuICAgIHRvSlNPTigpIHtcbiAgICAgICAgY29uc3QgcmVhZFByZWZlcmVuY2UgPSB7IG1vZGU6IHRoaXMubW9kZSB9O1xuICAgICAgICBpZiAoQXJyYXkuaXNBcnJheSh0aGlzLnRhZ3MpKVxuICAgICAgICAgICAgcmVhZFByZWZlcmVuY2UudGFncyA9IHRoaXMudGFncztcbiAgICAgICAgaWYgKHRoaXMubWF4U3RhbGVuZXNzU2Vjb25kcylcbiAgICAgICAgICAgIHJlYWRQcmVmZXJlbmNlLm1heFN0YWxlbmVzc1NlY29uZHMgPSB0aGlzLm1heFN0YWxlbmVzc1NlY29uZHM7XG4gICAgICAgIGlmICh0aGlzLmhlZGdlKVxuICAgICAgICAgICAgcmVhZFByZWZlcmVuY2UuaGVkZ2UgPSB0aGlzLmhlZGdlO1xuICAgICAgICByZXR1cm4gcmVhZFByZWZlcmVuY2U7XG4gICAgfVxufVxuUmVhZFByZWZlcmVuY2UuUFJJTUFSWSA9IGV4cG9ydHMuUmVhZFByZWZlcmVuY2VNb2RlLnByaW1hcnk7XG5SZWFkUHJlZmVyZW5jZS5QUklNQVJZX1BSRUZFUlJFRCA9IGV4cG9ydHMuUmVhZFByZWZlcmVuY2VNb2RlLnByaW1hcnlQcmVmZXJyZWQ7XG5SZWFkUHJlZmVyZW5jZS5TRUNPTkRBUlkgPSBleHBvcnRzLlJlYWRQcmVmZXJlbmNlTW9kZS5zZWNvbmRhcnk7XG5SZWFkUHJlZmVyZW5jZS5TRUNPTkRBUllfUFJFRkVSUkVEID0gZXhwb3J0cy5SZWFkUHJlZmVyZW5jZU1vZGUuc2Vjb25kYXJ5UHJlZmVycmVkO1xuUmVhZFByZWZlcmVuY2UuTkVBUkVTVCA9IGV4cG9ydHMuUmVhZFByZWZlcmVuY2VNb2RlLm5lYXJlc3Q7XG5SZWFkUHJlZmVyZW5jZS5wcmltYXJ5ID0gbmV3IFJlYWRQcmVmZXJlbmNlKGV4cG9ydHMuUmVhZFByZWZlcmVuY2VNb2RlLnByaW1hcnkpO1xuUmVhZFByZWZlcmVuY2UucHJpbWFyeVByZWZlcnJlZCA9IG5ldyBSZWFkUHJlZmVyZW5jZShleHBvcnRzLlJlYWRQcmVmZXJlbmNlTW9kZS5wcmltYXJ5UHJlZmVycmVkKTtcblJlYWRQcmVmZXJlbmNlLnNlY29uZGFyeSA9IG5ldyBSZWFkUHJlZmVyZW5jZShleHBvcnRzLlJlYWRQcmVmZXJlbmNlTW9kZS5zZWNvbmRhcnkpO1xuUmVhZFByZWZlcmVuY2Uuc2Vjb25kYXJ5UHJlZmVycmVkID0gbmV3IFJlYWRQcmVmZXJlbmNlKGV4cG9ydHMuUmVhZFByZWZlcmVuY2VNb2RlLnNlY29uZGFyeVByZWZlcnJlZCk7XG5SZWFkUHJlZmVyZW5jZS5uZWFyZXN0ID0gbmV3IFJlYWRQcmVmZXJlbmNlKGV4cG9ydHMuUmVhZFByZWZlcmVuY2VNb2RlLm5lYXJlc3QpO1xuZXhwb3J0cy5SZWFkUHJlZmVyZW5jZSA9IFJlYWRQcmVmZXJlbmNlO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cmVhZF9wcmVmZXJlbmNlLmpzLm1hcCJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsIlJlYWRQcmVmZXJlbmNlIiwiUmVhZFByZWZlcmVuY2VNb2RlIiwiZXJyb3JfMSIsInJlcXVpcmUiLCJmcmVlemUiLCJwcmltYXJ5IiwicHJpbWFyeVByZWZlcnJlZCIsInNlY29uZGFyeSIsInNlY29uZGFyeVByZWZlcnJlZCIsIm5lYXJlc3QiLCJjb25zdHJ1Y3RvciIsIm1vZGUiLCJ0YWdzIiwib3B0aW9ucyIsImlzVmFsaWQiLCJNb25nb0ludmFsaWRBcmd1bWVudEVycm9yIiwiSlNPTiIsInN0cmluZ2lmeSIsIkFycmF5IiwiaXNBcnJheSIsInVuZGVmaW5lZCIsImhlZGdlIiwibWF4U3RhbGVuZXNzU2Vjb25kcyIsIm1pbldpcmVWZXJzaW9uIiwiUFJJTUFSWSIsImxlbmd0aCIsInByZWZlcmVuY2UiLCJmcm9tU3RyaW5nIiwiZnJvbU9wdGlvbnMiLCJyZWFkUHJlZmVyZW5jZSIsInNlc3Npb24iLCJ0cmFuc2FjdGlvbiIsInJlYWRQcmVmZXJlbmNlVGFncyIsInRyYW5zbGF0ZSIsInIiLCJWQUxJRF9NT0RFUyIsIlNldCIsIlBSSU1BUllfUFJFRkVSUkVEIiwiU0VDT05EQVJZIiwiU0VDT05EQVJZX1BSRUZFUlJFRCIsIk5FQVJFU1QiLCJoYXMiLCJzZWNvbmRhcnlPayIsIk5FRURTX1NFQ09OREFSWU9LIiwiZXF1YWxzIiwidG9KU09OIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongodb/lib/read_preference.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongodb/lib/sdam/common.js":
/*!*************************************************!*\
  !*** ./node_modules/mongodb/lib/sdam/common.js ***!
  \*************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports._advanceClusterTime = exports.drainTimerQueue = exports.ServerType = exports.TopologyType = exports.STATE_CONNECTED = exports.STATE_CONNECTING = exports.STATE_CLOSED = exports.STATE_CLOSING = void 0;\nconst timers_1 = __webpack_require__(/*! timers */ \"timers\");\n// shared state names\nexports.STATE_CLOSING = \"closing\";\nexports.STATE_CLOSED = \"closed\";\nexports.STATE_CONNECTING = \"connecting\";\nexports.STATE_CONNECTED = \"connected\";\n/**\n * An enumeration of topology types we know about\n * @public\n */ exports.TopologyType = Object.freeze({\n    Single: \"Single\",\n    ReplicaSetNoPrimary: \"ReplicaSetNoPrimary\",\n    ReplicaSetWithPrimary: \"ReplicaSetWithPrimary\",\n    Sharded: \"Sharded\",\n    Unknown: \"Unknown\",\n    LoadBalanced: \"LoadBalanced\"\n});\n/**\n * An enumeration of server types we know about\n * @public\n */ exports.ServerType = Object.freeze({\n    Standalone: \"Standalone\",\n    Mongos: \"Mongos\",\n    PossiblePrimary: \"PossiblePrimary\",\n    RSPrimary: \"RSPrimary\",\n    RSSecondary: \"RSSecondary\",\n    RSArbiter: \"RSArbiter\",\n    RSOther: \"RSOther\",\n    RSGhost: \"RSGhost\",\n    Unknown: \"Unknown\",\n    LoadBalancer: \"LoadBalancer\"\n});\n/** @internal */ function drainTimerQueue(queue) {\n    queue.forEach(timers_1.clearTimeout);\n    queue.clear();\n}\nexports.drainTimerQueue = drainTimerQueue;\n/** Shared function to determine clusterTime for a given topology or session */ function _advanceClusterTime(entity, $clusterTime) {\n    if (entity.clusterTime == null) {\n        entity.clusterTime = $clusterTime;\n    } else {\n        if ($clusterTime.clusterTime.greaterThan(entity.clusterTime.clusterTime)) {\n            entity.clusterTime = $clusterTime;\n        }\n    }\n}\nexports._advanceClusterTime = _advanceClusterTime; //# sourceMappingURL=common.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbW9uZ29kYi9saWIvc2RhbS9jb21tb24uanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYkEsOENBQTZDO0lBQUVHLE9BQU87QUFBSyxDQUFDLEVBQUM7QUFDN0RELDJCQUEyQixHQUFHQSx1QkFBdUIsR0FBR0Esa0JBQWtCLEdBQUdBLG9CQUFvQixHQUFHQSx1QkFBdUIsR0FBR0Esd0JBQXdCLEdBQUdBLG9CQUFvQixHQUFHQSxxQkFBcUIsR0FBRyxLQUFLO0FBQzdNLE1BQU1VLFdBQVdDLG1CQUFPQSxDQUFDLHNCQUFRO0FBQ2pDLHFCQUFxQjtBQUNyQlgscUJBQXFCLEdBQUc7QUFDeEJBLG9CQUFvQixHQUFHO0FBQ3ZCQSx3QkFBd0IsR0FBRztBQUMzQkEsdUJBQXVCLEdBQUc7QUFDMUI7OztDQUdDLEdBQ0RBLG9CQUFvQixHQUFHRixPQUFPYyxNQUFNLENBQUM7SUFDakNDLFFBQVE7SUFDUkMscUJBQXFCO0lBQ3JCQyx1QkFBdUI7SUFDdkJDLFNBQVM7SUFDVEMsU0FBUztJQUNUQyxjQUFjO0FBQ2xCO0FBQ0E7OztDQUdDLEdBQ0RsQixrQkFBa0IsR0FBR0YsT0FBT2MsTUFBTSxDQUFDO0lBQy9CTyxZQUFZO0lBQ1pDLFFBQVE7SUFDUkMsaUJBQWlCO0lBQ2pCQyxXQUFXO0lBQ1hDLGFBQWE7SUFDYkMsV0FBVztJQUNYQyxTQUFTO0lBQ1RDLFNBQVM7SUFDVFQsU0FBUztJQUNUVSxjQUFjO0FBQ2xCO0FBQ0EsY0FBYyxHQUNkLFNBQVN4QixnQkFBZ0J5QixLQUFLO0lBQzFCQSxNQUFNQyxPQUFPLENBQUNuQixTQUFTb0IsWUFBWTtJQUNuQ0YsTUFBTUcsS0FBSztBQUNmO0FBQ0EvQix1QkFBdUIsR0FBR0c7QUFDMUIsNkVBQTZFLEdBQzdFLFNBQVNELG9CQUFvQjhCLE1BQU0sRUFBRUMsWUFBWTtJQUM3QyxJQUFJRCxPQUFPRSxXQUFXLElBQUksTUFBTTtRQUM1QkYsT0FBT0UsV0FBVyxHQUFHRDtJQUN6QixPQUNLO1FBQ0QsSUFBSUEsYUFBYUMsV0FBVyxDQUFDQyxXQUFXLENBQUNILE9BQU9FLFdBQVcsQ0FBQ0EsV0FBVyxHQUFHO1lBQ3RFRixPQUFPRSxXQUFXLEdBQUdEO1FBQ3pCO0lBQ0o7QUFDSjtBQUNBakMsMkJBQTJCLEdBQUdFLHFCQUM5QixrQ0FBa0MiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9ibG9nLWFwcGxpY2F0aW9uLy4vbm9kZV9tb2R1bGVzL21vbmdvZGIvbGliL3NkYW0vY29tbW9uLmpzP2ZhNzMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLl9hZHZhbmNlQ2x1c3RlclRpbWUgPSBleHBvcnRzLmRyYWluVGltZXJRdWV1ZSA9IGV4cG9ydHMuU2VydmVyVHlwZSA9IGV4cG9ydHMuVG9wb2xvZ3lUeXBlID0gZXhwb3J0cy5TVEFURV9DT05ORUNURUQgPSBleHBvcnRzLlNUQVRFX0NPTk5FQ1RJTkcgPSBleHBvcnRzLlNUQVRFX0NMT1NFRCA9IGV4cG9ydHMuU1RBVEVfQ0xPU0lORyA9IHZvaWQgMDtcbmNvbnN0IHRpbWVyc18xID0gcmVxdWlyZShcInRpbWVyc1wiKTtcbi8vIHNoYXJlZCBzdGF0ZSBuYW1lc1xuZXhwb3J0cy5TVEFURV9DTE9TSU5HID0gJ2Nsb3NpbmcnO1xuZXhwb3J0cy5TVEFURV9DTE9TRUQgPSAnY2xvc2VkJztcbmV4cG9ydHMuU1RBVEVfQ09OTkVDVElORyA9ICdjb25uZWN0aW5nJztcbmV4cG9ydHMuU1RBVEVfQ09OTkVDVEVEID0gJ2Nvbm5lY3RlZCc7XG4vKipcbiAqIEFuIGVudW1lcmF0aW9uIG9mIHRvcG9sb2d5IHR5cGVzIHdlIGtub3cgYWJvdXRcbiAqIEBwdWJsaWNcbiAqL1xuZXhwb3J0cy5Ub3BvbG9neVR5cGUgPSBPYmplY3QuZnJlZXplKHtcbiAgICBTaW5nbGU6ICdTaW5nbGUnLFxuICAgIFJlcGxpY2FTZXROb1ByaW1hcnk6ICdSZXBsaWNhU2V0Tm9QcmltYXJ5JyxcbiAgICBSZXBsaWNhU2V0V2l0aFByaW1hcnk6ICdSZXBsaWNhU2V0V2l0aFByaW1hcnknLFxuICAgIFNoYXJkZWQ6ICdTaGFyZGVkJyxcbiAgICBVbmtub3duOiAnVW5rbm93bicsXG4gICAgTG9hZEJhbGFuY2VkOiAnTG9hZEJhbGFuY2VkJ1xufSk7XG4vKipcbiAqIEFuIGVudW1lcmF0aW9uIG9mIHNlcnZlciB0eXBlcyB3ZSBrbm93IGFib3V0XG4gKiBAcHVibGljXG4gKi9cbmV4cG9ydHMuU2VydmVyVHlwZSA9IE9iamVjdC5mcmVlemUoe1xuICAgIFN0YW5kYWxvbmU6ICdTdGFuZGFsb25lJyxcbiAgICBNb25nb3M6ICdNb25nb3MnLFxuICAgIFBvc3NpYmxlUHJpbWFyeTogJ1Bvc3NpYmxlUHJpbWFyeScsXG4gICAgUlNQcmltYXJ5OiAnUlNQcmltYXJ5JyxcbiAgICBSU1NlY29uZGFyeTogJ1JTU2Vjb25kYXJ5JyxcbiAgICBSU0FyYml0ZXI6ICdSU0FyYml0ZXInLFxuICAgIFJTT3RoZXI6ICdSU090aGVyJyxcbiAgICBSU0dob3N0OiAnUlNHaG9zdCcsXG4gICAgVW5rbm93bjogJ1Vua25vd24nLFxuICAgIExvYWRCYWxhbmNlcjogJ0xvYWRCYWxhbmNlcidcbn0pO1xuLyoqIEBpbnRlcm5hbCAqL1xuZnVuY3Rpb24gZHJhaW5UaW1lclF1ZXVlKHF1ZXVlKSB7XG4gICAgcXVldWUuZm9yRWFjaCh0aW1lcnNfMS5jbGVhclRpbWVvdXQpO1xuICAgIHF1ZXVlLmNsZWFyKCk7XG59XG5leHBvcnRzLmRyYWluVGltZXJRdWV1ZSA9IGRyYWluVGltZXJRdWV1ZTtcbi8qKiBTaGFyZWQgZnVuY3Rpb24gdG8gZGV0ZXJtaW5lIGNsdXN0ZXJUaW1lIGZvciBhIGdpdmVuIHRvcG9sb2d5IG9yIHNlc3Npb24gKi9cbmZ1bmN0aW9uIF9hZHZhbmNlQ2x1c3RlclRpbWUoZW50aXR5LCAkY2x1c3RlclRpbWUpIHtcbiAgICBpZiAoZW50aXR5LmNsdXN0ZXJUaW1lID09IG51bGwpIHtcbiAgICAgICAgZW50aXR5LmNsdXN0ZXJUaW1lID0gJGNsdXN0ZXJUaW1lO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgaWYgKCRjbHVzdGVyVGltZS5jbHVzdGVyVGltZS5ncmVhdGVyVGhhbihlbnRpdHkuY2x1c3RlclRpbWUuY2x1c3RlclRpbWUpKSB7XG4gICAgICAgICAgICBlbnRpdHkuY2x1c3RlclRpbWUgPSAkY2x1c3RlclRpbWU7XG4gICAgICAgIH1cbiAgICB9XG59XG5leHBvcnRzLl9hZHZhbmNlQ2x1c3RlclRpbWUgPSBfYWR2YW5jZUNsdXN0ZXJUaW1lO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Y29tbW9uLmpzLm1hcCJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsIl9hZHZhbmNlQ2x1c3RlclRpbWUiLCJkcmFpblRpbWVyUXVldWUiLCJTZXJ2ZXJUeXBlIiwiVG9wb2xvZ3lUeXBlIiwiU1RBVEVfQ09OTkVDVEVEIiwiU1RBVEVfQ09OTkVDVElORyIsIlNUQVRFX0NMT1NFRCIsIlNUQVRFX0NMT1NJTkciLCJ0aW1lcnNfMSIsInJlcXVpcmUiLCJmcmVlemUiLCJTaW5nbGUiLCJSZXBsaWNhU2V0Tm9QcmltYXJ5IiwiUmVwbGljYVNldFdpdGhQcmltYXJ5IiwiU2hhcmRlZCIsIlVua25vd24iLCJMb2FkQmFsYW5jZWQiLCJTdGFuZGFsb25lIiwiTW9uZ29zIiwiUG9zc2libGVQcmltYXJ5IiwiUlNQcmltYXJ5IiwiUlNTZWNvbmRhcnkiLCJSU0FyYml0ZXIiLCJSU090aGVyIiwiUlNHaG9zdCIsIkxvYWRCYWxhbmNlciIsInF1ZXVlIiwiZm9yRWFjaCIsImNsZWFyVGltZW91dCIsImNsZWFyIiwiZW50aXR5IiwiJGNsdXN0ZXJUaW1lIiwiY2x1c3RlclRpbWUiLCJncmVhdGVyVGhhbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongodb/lib/sdam/common.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongodb/lib/sdam/events.js":
/*!*************************************************!*\
  !*** ./node_modules/mongodb/lib/sdam/events.js ***!
  \*************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.ServerHeartbeatFailedEvent = exports.ServerHeartbeatSucceededEvent = exports.ServerHeartbeatStartedEvent = exports.TopologyClosedEvent = exports.TopologyOpeningEvent = exports.TopologyDescriptionChangedEvent = exports.ServerClosedEvent = exports.ServerOpeningEvent = exports.ServerDescriptionChangedEvent = void 0;\n/**\n * Emitted when server description changes, but does NOT include changes to the RTT.\n * @public\n * @category Event\n */ class ServerDescriptionChangedEvent {\n    /** @internal */ constructor(topologyId, address, previousDescription, newDescription){\n        this.topologyId = topologyId;\n        this.address = address;\n        this.previousDescription = previousDescription;\n        this.newDescription = newDescription;\n    }\n}\nexports.ServerDescriptionChangedEvent = ServerDescriptionChangedEvent;\n/**\n * Emitted when server is initialized.\n * @public\n * @category Event\n */ class ServerOpeningEvent {\n    /** @internal */ constructor(topologyId, address){\n        this.topologyId = topologyId;\n        this.address = address;\n    }\n}\nexports.ServerOpeningEvent = ServerOpeningEvent;\n/**\n * Emitted when server is closed.\n * @public\n * @category Event\n */ class ServerClosedEvent {\n    /** @internal */ constructor(topologyId, address){\n        this.topologyId = topologyId;\n        this.address = address;\n    }\n}\nexports.ServerClosedEvent = ServerClosedEvent;\n/**\n * Emitted when topology description changes.\n * @public\n * @category Event\n */ class TopologyDescriptionChangedEvent {\n    /** @internal */ constructor(topologyId, previousDescription, newDescription){\n        this.topologyId = topologyId;\n        this.previousDescription = previousDescription;\n        this.newDescription = newDescription;\n    }\n}\nexports.TopologyDescriptionChangedEvent = TopologyDescriptionChangedEvent;\n/**\n * Emitted when topology is initialized.\n * @public\n * @category Event\n */ class TopologyOpeningEvent {\n    /** @internal */ constructor(topologyId){\n        this.topologyId = topologyId;\n    }\n}\nexports.TopologyOpeningEvent = TopologyOpeningEvent;\n/**\n * Emitted when topology is closed.\n * @public\n * @category Event\n */ class TopologyClosedEvent {\n    /** @internal */ constructor(topologyId){\n        this.topologyId = topologyId;\n    }\n}\nexports.TopologyClosedEvent = TopologyClosedEvent;\n/**\n * Emitted when the server monitor’s hello command is started - immediately before\n * the hello command is serialized into raw BSON and written to the socket.\n *\n * @public\n * @category Event\n */ class ServerHeartbeatStartedEvent {\n    /** @internal */ constructor(connectionId, awaited){\n        this.connectionId = connectionId;\n        this.awaited = awaited;\n    }\n}\nexports.ServerHeartbeatStartedEvent = ServerHeartbeatStartedEvent;\n/**\n * Emitted when the server monitor’s hello succeeds.\n * @public\n * @category Event\n */ class ServerHeartbeatSucceededEvent {\n    /** @internal */ constructor(connectionId, duration, reply, awaited){\n        this.connectionId = connectionId;\n        this.duration = duration;\n        this.reply = reply ?? {};\n        this.awaited = awaited;\n    }\n}\nexports.ServerHeartbeatSucceededEvent = ServerHeartbeatSucceededEvent;\n/**\n * Emitted when the server monitor’s hello fails, either with an “ok: 0” or a socket exception.\n * @public\n * @category Event\n */ class ServerHeartbeatFailedEvent {\n    /** @internal */ constructor(connectionId, duration, failure, awaited){\n        this.connectionId = connectionId;\n        this.duration = duration;\n        this.failure = failure;\n        this.awaited = awaited;\n    }\n}\nexports.ServerHeartbeatFailedEvent = ServerHeartbeatFailedEvent; //# sourceMappingURL=events.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongodb/lib/sdam/events.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongodb/lib/sdam/monitor.js":
/*!**************************************************!*\
  !*** ./node_modules/mongodb/lib/sdam/monitor.js ***!
  \**************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.MonitorInterval = exports.RTTPinger = exports.Monitor = exports.ServerMonitoringMode = void 0;\nconst timers_1 = __webpack_require__(/*! timers */ \"timers\");\nconst bson_1 = __webpack_require__(/*! ../bson */ \"(ssr)/./node_modules/mongodb/lib/bson.js\");\nconst connect_1 = __webpack_require__(/*! ../cmap/connect */ \"(ssr)/./node_modules/mongodb/lib/cmap/connect.js\");\nconst connection_1 = __webpack_require__(/*! ../cmap/connection */ \"(ssr)/./node_modules/mongodb/lib/cmap/connection.js\");\nconst client_metadata_1 = __webpack_require__(/*! ../cmap/handshake/client_metadata */ \"(ssr)/./node_modules/mongodb/lib/cmap/handshake/client_metadata.js\");\nconst constants_1 = __webpack_require__(/*! ../constants */ \"(ssr)/./node_modules/mongodb/lib/constants.js\");\nconst error_1 = __webpack_require__(/*! ../error */ \"(ssr)/./node_modules/mongodb/lib/error.js\");\nconst mongo_types_1 = __webpack_require__(/*! ../mongo_types */ \"(ssr)/./node_modules/mongodb/lib/mongo_types.js\");\nconst utils_1 = __webpack_require__(/*! ../utils */ \"(ssr)/./node_modules/mongodb/lib/utils.js\");\nconst common_1 = __webpack_require__(/*! ./common */ \"(ssr)/./node_modules/mongodb/lib/sdam/common.js\");\nconst events_1 = __webpack_require__(/*! ./events */ \"(ssr)/./node_modules/mongodb/lib/sdam/events.js\");\nconst server_1 = __webpack_require__(/*! ./server */ \"(ssr)/./node_modules/mongodb/lib/sdam/server.js\");\n/** @internal */ const kServer = Symbol(\"server\");\n/** @internal */ const kMonitorId = Symbol(\"monitorId\");\n/** @internal */ const kConnection = Symbol(\"connection\");\n/** @internal */ const kCancellationToken = Symbol(\"cancellationToken\");\n/** @internal */ const kRoundTripTime = Symbol(\"roundTripTime\");\nconst STATE_IDLE = \"idle\";\nconst STATE_MONITORING = \"monitoring\";\nconst stateTransition = (0, utils_1.makeStateMachine)({\n    [common_1.STATE_CLOSING]: [\n        common_1.STATE_CLOSING,\n        STATE_IDLE,\n        common_1.STATE_CLOSED\n    ],\n    [common_1.STATE_CLOSED]: [\n        common_1.STATE_CLOSED,\n        STATE_MONITORING\n    ],\n    [STATE_IDLE]: [\n        STATE_IDLE,\n        STATE_MONITORING,\n        common_1.STATE_CLOSING\n    ],\n    [STATE_MONITORING]: [\n        STATE_MONITORING,\n        STATE_IDLE,\n        common_1.STATE_CLOSING\n    ]\n});\nconst INVALID_REQUEST_CHECK_STATES = new Set([\n    common_1.STATE_CLOSING,\n    common_1.STATE_CLOSED,\n    STATE_MONITORING\n]);\nfunction isInCloseState(monitor) {\n    return monitor.s.state === common_1.STATE_CLOSED || monitor.s.state === common_1.STATE_CLOSING;\n}\n/** @public */ exports.ServerMonitoringMode = Object.freeze({\n    auto: \"auto\",\n    poll: \"poll\",\n    stream: \"stream\"\n});\n/** @internal */ class Monitor extends mongo_types_1.TypedEventEmitter {\n    get connection() {\n        return this[kConnection];\n    }\n    constructor(server, options){\n        super();\n        this[kServer] = server;\n        this[kConnection] = undefined;\n        this[kCancellationToken] = new mongo_types_1.CancellationToken();\n        this[kCancellationToken].setMaxListeners(Infinity);\n        this[kMonitorId] = undefined;\n        this.s = {\n            state: common_1.STATE_CLOSED\n        };\n        this.address = server.description.address;\n        this.options = Object.freeze({\n            connectTimeoutMS: options.connectTimeoutMS ?? 10000,\n            heartbeatFrequencyMS: options.heartbeatFrequencyMS ?? 10000,\n            minHeartbeatFrequencyMS: options.minHeartbeatFrequencyMS ?? 500,\n            serverMonitoringMode: options.serverMonitoringMode\n        });\n        this.isRunningInFaasEnv = (0, client_metadata_1.getFAASEnv)() != null;\n        const cancellationToken = this[kCancellationToken];\n        // TODO: refactor this to pull it directly from the pool, requires new ConnectionPool integration\n        const connectOptions = Object.assign({\n            id: \"<monitor>\",\n            generation: server.pool.generation,\n            connectionType: connection_1.Connection,\n            cancellationToken,\n            hostAddress: server.description.hostAddress\n        }, options, // force BSON serialization options\n        {\n            raw: false,\n            useBigInt64: false,\n            promoteLongs: true,\n            promoteValues: true,\n            promoteBuffers: true\n        });\n        // ensure no authentication is used for monitoring\n        delete connectOptions.credentials;\n        if (connectOptions.autoEncrypter) {\n            delete connectOptions.autoEncrypter;\n        }\n        this.connectOptions = Object.freeze(connectOptions);\n    }\n    connect() {\n        if (this.s.state !== common_1.STATE_CLOSED) {\n            return;\n        }\n        // start\n        const heartbeatFrequencyMS = this.options.heartbeatFrequencyMS;\n        const minHeartbeatFrequencyMS = this.options.minHeartbeatFrequencyMS;\n        this[kMonitorId] = new MonitorInterval(monitorServer(this), {\n            heartbeatFrequencyMS: heartbeatFrequencyMS,\n            minHeartbeatFrequencyMS: minHeartbeatFrequencyMS,\n            immediate: true\n        });\n    }\n    requestCheck() {\n        if (INVALID_REQUEST_CHECK_STATES.has(this.s.state)) {\n            return;\n        }\n        this[kMonitorId]?.wake();\n    }\n    reset() {\n        const topologyVersion = this[kServer].description.topologyVersion;\n        if (isInCloseState(this) || topologyVersion == null) {\n            return;\n        }\n        stateTransition(this, common_1.STATE_CLOSING);\n        resetMonitorState(this);\n        // restart monitor\n        stateTransition(this, STATE_IDLE);\n        // restart monitoring\n        const heartbeatFrequencyMS = this.options.heartbeatFrequencyMS;\n        const minHeartbeatFrequencyMS = this.options.minHeartbeatFrequencyMS;\n        this[kMonitorId] = new MonitorInterval(monitorServer(this), {\n            heartbeatFrequencyMS: heartbeatFrequencyMS,\n            minHeartbeatFrequencyMS: minHeartbeatFrequencyMS\n        });\n    }\n    close() {\n        if (isInCloseState(this)) {\n            return;\n        }\n        stateTransition(this, common_1.STATE_CLOSING);\n        resetMonitorState(this);\n        // close monitor\n        this.emit(\"close\");\n        stateTransition(this, common_1.STATE_CLOSED);\n    }\n}\nexports.Monitor = Monitor;\nfunction resetMonitorState(monitor) {\n    monitor[kMonitorId]?.stop();\n    monitor[kMonitorId] = undefined;\n    monitor.rttPinger?.close();\n    monitor.rttPinger = undefined;\n    monitor[kCancellationToken].emit(\"cancel\");\n    monitor[kConnection]?.destroy({\n        force: true\n    });\n    monitor[kConnection] = undefined;\n}\nfunction useStreamingProtocol(monitor, topologyVersion) {\n    // If we have no topology version we always poll no matter\n    // what the user provided, since the server does not support\n    // the streaming protocol.\n    if (topologyVersion == null) return false;\n    const serverMonitoringMode = monitor.options.serverMonitoringMode;\n    if (serverMonitoringMode === exports.ServerMonitoringMode.poll) return false;\n    if (serverMonitoringMode === exports.ServerMonitoringMode.stream) return true;\n    // If we are in auto mode, we need to figure out if we're in a FaaS\n    // environment or not and choose the appropriate mode.\n    if (monitor.isRunningInFaasEnv) return false;\n    return true;\n}\nfunction checkServer(monitor, callback) {\n    let start = (0, utils_1.now)();\n    const topologyVersion = monitor[kServer].description.topologyVersion;\n    const isAwaitable = useStreamingProtocol(monitor, topologyVersion);\n    monitor.emit(server_1.Server.SERVER_HEARTBEAT_STARTED, new events_1.ServerHeartbeatStartedEvent(monitor.address, isAwaitable));\n    function failureHandler(err, awaited) {\n        monitor[kConnection]?.destroy({\n            force: true\n        });\n        monitor[kConnection] = undefined;\n        monitor.emit(server_1.Server.SERVER_HEARTBEAT_FAILED, new events_1.ServerHeartbeatFailedEvent(monitor.address, (0, utils_1.calculateDurationInMs)(start), err, awaited));\n        const error = !(err instanceof error_1.MongoError) ? new error_1.MongoError(error_1.MongoError.buildErrorMessage(err), {\n            cause: err\n        }) : err;\n        error.addErrorLabel(error_1.MongoErrorLabel.ResetPool);\n        if (error instanceof error_1.MongoNetworkTimeoutError) {\n            error.addErrorLabel(error_1.MongoErrorLabel.InterruptInUseConnections);\n        }\n        monitor.emit(\"resetServer\", error);\n        callback(err);\n    }\n    const connection = monitor[kConnection];\n    if (connection && !connection.closed) {\n        const { serverApi, helloOk } = connection;\n        const connectTimeoutMS = monitor.options.connectTimeoutMS;\n        const maxAwaitTimeMS = monitor.options.heartbeatFrequencyMS;\n        const cmd = {\n            [serverApi?.version || helloOk ? \"hello\" : constants_1.LEGACY_HELLO_COMMAND]: 1,\n            ...isAwaitable && topologyVersion ? {\n                maxAwaitTimeMS,\n                topologyVersion: makeTopologyVersion(topologyVersion)\n            } : {}\n        };\n        const options = isAwaitable ? {\n            socketTimeoutMS: connectTimeoutMS ? connectTimeoutMS + maxAwaitTimeMS : 0,\n            exhaustAllowed: true\n        } : {\n            socketTimeoutMS: connectTimeoutMS\n        };\n        if (isAwaitable && monitor.rttPinger == null) {\n            monitor.rttPinger = new RTTPinger(monitor[kCancellationToken], Object.assign({\n                heartbeatFrequencyMS: monitor.options.heartbeatFrequencyMS\n            }, monitor.connectOptions));\n        }\n        connection.command((0, utils_1.ns)(\"admin.$cmd\"), cmd, options, (err, hello)=>{\n            if (err) {\n                return failureHandler(err, isAwaitable);\n            }\n            if (!(\"isWritablePrimary\" in hello)) {\n                // Provide hello-style response document.\n                hello.isWritablePrimary = hello[constants_1.LEGACY_HELLO_COMMAND];\n            }\n            const duration = isAwaitable && monitor.rttPinger ? monitor.rttPinger.roundTripTime : (0, utils_1.calculateDurationInMs)(start);\n            monitor.emit(server_1.Server.SERVER_HEARTBEAT_SUCCEEDED, new events_1.ServerHeartbeatSucceededEvent(monitor.address, duration, hello, isAwaitable));\n            // If we are using the streaming protocol then we immediately issue another 'started'\n            // event, otherwise the \"check\" is complete and return to the main monitor loop.\n            if (isAwaitable) {\n                monitor.emit(server_1.Server.SERVER_HEARTBEAT_STARTED, new events_1.ServerHeartbeatStartedEvent(monitor.address, true));\n                start = (0, utils_1.now)();\n            } else {\n                monitor.rttPinger?.close();\n                monitor.rttPinger = undefined;\n                callback(undefined, hello);\n            }\n        });\n        return;\n    }\n    // connecting does an implicit `hello`\n    (0, connect_1.connect)(monitor.connectOptions, (err, conn)=>{\n        if (err) {\n            monitor[kConnection] = undefined;\n            failureHandler(err, false);\n            return;\n        }\n        if (conn) {\n            // Tell the connection that we are using the streaming protocol so that the\n            // connection's message stream will only read the last hello on the buffer.\n            conn.isMonitoringConnection = true;\n            if (isInCloseState(monitor)) {\n                conn.destroy({\n                    force: true\n                });\n                return;\n            }\n            monitor[kConnection] = conn;\n            monitor.emit(server_1.Server.SERVER_HEARTBEAT_SUCCEEDED, new events_1.ServerHeartbeatSucceededEvent(monitor.address, (0, utils_1.calculateDurationInMs)(start), conn.hello, useStreamingProtocol(monitor, conn.hello?.topologyVersion)));\n            callback(undefined, conn.hello);\n        }\n    });\n}\nfunction monitorServer(monitor) {\n    return (callback)=>{\n        if (monitor.s.state === STATE_MONITORING) {\n            process.nextTick(callback);\n            return;\n        }\n        stateTransition(monitor, STATE_MONITORING);\n        function done() {\n            if (!isInCloseState(monitor)) {\n                stateTransition(monitor, STATE_IDLE);\n            }\n            callback();\n        }\n        checkServer(monitor, (err, hello)=>{\n            if (err) {\n                // otherwise an error occurred on initial discovery, also bail\n                if (monitor[kServer].description.type === common_1.ServerType.Unknown) {\n                    return done();\n                }\n            }\n            // if the check indicates streaming is supported, immediately reschedule monitoring\n            if (useStreamingProtocol(monitor, hello?.topologyVersion)) {\n                (0, timers_1.setTimeout)(()=>{\n                    if (!isInCloseState(monitor)) {\n                        monitor[kMonitorId]?.wake();\n                    }\n                }, 0);\n            }\n            done();\n        });\n    };\n}\nfunction makeTopologyVersion(tv) {\n    return {\n        processId: tv.processId,\n        // tests mock counter as just number, but in a real situation counter should always be a Long\n        // TODO(NODE-2674): Preserve int64 sent from MongoDB\n        counter: bson_1.Long.isLong(tv.counter) ? tv.counter : bson_1.Long.fromNumber(tv.counter)\n    };\n}\n/** @internal */ class RTTPinger {\n    constructor(cancellationToken, options){\n        this.connection = undefined;\n        this[kCancellationToken] = cancellationToken;\n        this[kRoundTripTime] = 0;\n        this.closed = false;\n        const heartbeatFrequencyMS = options.heartbeatFrequencyMS;\n        this[kMonitorId] = (0, timers_1.setTimeout)(()=>measureRoundTripTime(this, options), heartbeatFrequencyMS);\n    }\n    get roundTripTime() {\n        return this[kRoundTripTime];\n    }\n    close() {\n        this.closed = true;\n        (0, timers_1.clearTimeout)(this[kMonitorId]);\n        this.connection?.destroy({\n            force: true\n        });\n        this.connection = undefined;\n    }\n}\nexports.RTTPinger = RTTPinger;\nfunction measureRoundTripTime(rttPinger, options) {\n    const start = (0, utils_1.now)();\n    options.cancellationToken = rttPinger[kCancellationToken];\n    const heartbeatFrequencyMS = options.heartbeatFrequencyMS;\n    if (rttPinger.closed) {\n        return;\n    }\n    function measureAndReschedule(conn) {\n        if (rttPinger.closed) {\n            conn?.destroy({\n                force: true\n            });\n            return;\n        }\n        if (rttPinger.connection == null) {\n            rttPinger.connection = conn;\n        }\n        rttPinger[kRoundTripTime] = (0, utils_1.calculateDurationInMs)(start);\n        rttPinger[kMonitorId] = (0, timers_1.setTimeout)(()=>measureRoundTripTime(rttPinger, options), heartbeatFrequencyMS);\n    }\n    const connection = rttPinger.connection;\n    if (connection == null) {\n        (0, connect_1.connect)(options, (err, conn)=>{\n            if (err) {\n                rttPinger.connection = undefined;\n                rttPinger[kRoundTripTime] = 0;\n                return;\n            }\n            measureAndReschedule(conn);\n        });\n        return;\n    }\n    const commandName = connection.serverApi?.version || connection.helloOk ? \"hello\" : constants_1.LEGACY_HELLO_COMMAND;\n    connection.commandAsync((0, utils_1.ns)(\"admin.$cmd\"), {\n        [commandName]: 1\n    }, undefined).then(()=>measureAndReschedule(), ()=>{\n        rttPinger.connection?.destroy({\n            force: true\n        });\n        rttPinger.connection = undefined;\n        rttPinger[kRoundTripTime] = 0;\n        return;\n    });\n}\n/**\n * @internal\n */ class MonitorInterval {\n    constructor(fn, options = {}){\n        this.isExpeditedCallToFnScheduled = false;\n        this.stopped = false;\n        this.isExecutionInProgress = false;\n        this.hasExecutedOnce = false;\n        this._executeAndReschedule = ()=>{\n            if (this.stopped) return;\n            if (this.timerId) {\n                (0, timers_1.clearTimeout)(this.timerId);\n            }\n            this.isExpeditedCallToFnScheduled = false;\n            this.isExecutionInProgress = true;\n            this.fn(()=>{\n                this.lastExecutionEnded = (0, utils_1.now)();\n                this.isExecutionInProgress = false;\n                this._reschedule(this.heartbeatFrequencyMS);\n            });\n        };\n        this.fn = fn;\n        this.lastExecutionEnded = -Infinity;\n        this.heartbeatFrequencyMS = options.heartbeatFrequencyMS ?? 1000;\n        this.minHeartbeatFrequencyMS = options.minHeartbeatFrequencyMS ?? 500;\n        if (options.immediate) {\n            this._executeAndReschedule();\n        } else {\n            this._reschedule(undefined);\n        }\n    }\n    wake() {\n        const currentTime = (0, utils_1.now)();\n        const timeSinceLastCall = currentTime - this.lastExecutionEnded;\n        // TODO(NODE-4674): Add error handling and logging to the monitor\n        if (timeSinceLastCall < 0) {\n            return this._executeAndReschedule();\n        }\n        if (this.isExecutionInProgress) {\n            return;\n        }\n        // debounce multiple calls to wake within the `minInterval`\n        if (this.isExpeditedCallToFnScheduled) {\n            return;\n        }\n        // reschedule a call as soon as possible, ensuring the call never happens\n        // faster than the `minInterval`\n        if (timeSinceLastCall < this.minHeartbeatFrequencyMS) {\n            this.isExpeditedCallToFnScheduled = true;\n            this._reschedule(this.minHeartbeatFrequencyMS - timeSinceLastCall);\n            return;\n        }\n        this._executeAndReschedule();\n    }\n    stop() {\n        this.stopped = true;\n        if (this.timerId) {\n            (0, timers_1.clearTimeout)(this.timerId);\n            this.timerId = undefined;\n        }\n        this.lastExecutionEnded = -Infinity;\n        this.isExpeditedCallToFnScheduled = false;\n    }\n    toString() {\n        return JSON.stringify(this);\n    }\n    toJSON() {\n        const currentTime = (0, utils_1.now)();\n        const timeSinceLastCall = currentTime - this.lastExecutionEnded;\n        return {\n            timerId: this.timerId != null ? \"set\" : \"cleared\",\n            lastCallTime: this.lastExecutionEnded,\n            isExpeditedCheckScheduled: this.isExpeditedCallToFnScheduled,\n            stopped: this.stopped,\n            heartbeatFrequencyMS: this.heartbeatFrequencyMS,\n            minHeartbeatFrequencyMS: this.minHeartbeatFrequencyMS,\n            currentTime,\n            timeSinceLastCall\n        };\n    }\n    _reschedule(ms) {\n        if (this.stopped) return;\n        if (this.timerId) {\n            (0, timers_1.clearTimeout)(this.timerId);\n        }\n        this.timerId = (0, timers_1.setTimeout)(this._executeAndReschedule, ms || this.heartbeatFrequencyMS);\n    }\n}\nexports.MonitorInterval = MonitorInterval; //# sourceMappingURL=monitor.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongodb/lib/sdam/monitor.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongodb/lib/sdam/server.js":
/*!*************************************************!*\
  !*** ./node_modules/mongodb/lib/sdam/server.js ***!
  \*************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.Server = void 0;\nconst util_1 = __webpack_require__(/*! util */ \"util\");\nconst connection_1 = __webpack_require__(/*! ../cmap/connection */ \"(ssr)/./node_modules/mongodb/lib/cmap/connection.js\");\nconst connection_pool_1 = __webpack_require__(/*! ../cmap/connection_pool */ \"(ssr)/./node_modules/mongodb/lib/cmap/connection_pool.js\");\nconst errors_1 = __webpack_require__(/*! ../cmap/errors */ \"(ssr)/./node_modules/mongodb/lib/cmap/errors.js\");\nconst constants_1 = __webpack_require__(/*! ../constants */ \"(ssr)/./node_modules/mongodb/lib/constants.js\");\nconst error_1 = __webpack_require__(/*! ../error */ \"(ssr)/./node_modules/mongodb/lib/error.js\");\nconst mongo_types_1 = __webpack_require__(/*! ../mongo_types */ \"(ssr)/./node_modules/mongodb/lib/mongo_types.js\");\nconst transactions_1 = __webpack_require__(/*! ../transactions */ \"(ssr)/./node_modules/mongodb/lib/transactions.js\");\nconst utils_1 = __webpack_require__(/*! ../utils */ \"(ssr)/./node_modules/mongodb/lib/utils.js\");\nconst common_1 = __webpack_require__(/*! ./common */ \"(ssr)/./node_modules/mongodb/lib/sdam/common.js\");\nconst monitor_1 = __webpack_require__(/*! ./monitor */ \"(ssr)/./node_modules/mongodb/lib/sdam/monitor.js\");\nconst server_description_1 = __webpack_require__(/*! ./server_description */ \"(ssr)/./node_modules/mongodb/lib/sdam/server_description.js\");\nconst stateTransition = (0, utils_1.makeStateMachine)({\n    [common_1.STATE_CLOSED]: [\n        common_1.STATE_CLOSED,\n        common_1.STATE_CONNECTING\n    ],\n    [common_1.STATE_CONNECTING]: [\n        common_1.STATE_CONNECTING,\n        common_1.STATE_CLOSING,\n        common_1.STATE_CONNECTED,\n        common_1.STATE_CLOSED\n    ],\n    [common_1.STATE_CONNECTED]: [\n        common_1.STATE_CONNECTED,\n        common_1.STATE_CLOSING,\n        common_1.STATE_CLOSED\n    ],\n    [common_1.STATE_CLOSING]: [\n        common_1.STATE_CLOSING,\n        common_1.STATE_CLOSED\n    ]\n});\n/** @internal */ class Server extends mongo_types_1.TypedEventEmitter {\n    /**\n     * Create a server\n     */ constructor(topology, description, options){\n        super();\n        this.commandAsync = (0, util_1.promisify)((ns, cmd, options, // callback type defines Document result because result is never nullish when it succeeds, otherwise promise rejects\n        callback)=>this.command(ns, cmd, options, callback));\n        this.serverApi = options.serverApi;\n        const poolOptions = {\n            hostAddress: description.hostAddress,\n            ...options\n        };\n        this.topology = topology;\n        this.pool = new connection_pool_1.ConnectionPool(this, poolOptions);\n        this.s = {\n            description,\n            options,\n            state: common_1.STATE_CLOSED,\n            operationCount: 0\n        };\n        for (const event of [\n            ...constants_1.CMAP_EVENTS,\n            ...constants_1.APM_EVENTS\n        ]){\n            this.pool.on(event, (e)=>this.emit(event, e));\n        }\n        this.pool.on(connection_1.Connection.CLUSTER_TIME_RECEIVED, (clusterTime)=>{\n            this.clusterTime = clusterTime;\n        });\n        if (this.loadBalanced) {\n            this.monitor = null;\n            // monitoring is disabled in load balancing mode\n            return;\n        }\n        // create the monitor\n        this.monitor = new monitor_1.Monitor(this, this.s.options);\n        for (const event of constants_1.HEARTBEAT_EVENTS){\n            this.monitor.on(event, (e)=>this.emit(event, e));\n        }\n        this.monitor.on(\"resetServer\", (error)=>markServerUnknown(this, error));\n        this.monitor.on(Server.SERVER_HEARTBEAT_SUCCEEDED, (event)=>{\n            this.emit(Server.DESCRIPTION_RECEIVED, new server_description_1.ServerDescription(this.description.hostAddress, event.reply, {\n                roundTripTime: calculateRoundTripTime(this.description.roundTripTime, event.duration)\n            }));\n            if (this.s.state === common_1.STATE_CONNECTING) {\n                stateTransition(this, common_1.STATE_CONNECTED);\n                this.emit(Server.CONNECT, this);\n            }\n        });\n    }\n    get clusterTime() {\n        return this.topology.clusterTime;\n    }\n    set clusterTime(clusterTime) {\n        this.topology.clusterTime = clusterTime;\n    }\n    get description() {\n        return this.s.description;\n    }\n    get name() {\n        return this.s.description.address;\n    }\n    get autoEncrypter() {\n        if (this.s.options && this.s.options.autoEncrypter) {\n            return this.s.options.autoEncrypter;\n        }\n        return;\n    }\n    get loadBalanced() {\n        return this.topology.description.type === common_1.TopologyType.LoadBalanced;\n    }\n    /**\n     * Initiate server connect\n     */ connect() {\n        if (this.s.state !== common_1.STATE_CLOSED) {\n            return;\n        }\n        stateTransition(this, common_1.STATE_CONNECTING);\n        // If in load balancer mode we automatically set the server to\n        // a load balancer. It never transitions out of this state and\n        // has no monitor.\n        if (!this.loadBalanced) {\n            this.monitor?.connect();\n        } else {\n            stateTransition(this, common_1.STATE_CONNECTED);\n            this.emit(Server.CONNECT, this);\n        }\n    }\n    /** Destroy the server connection */ destroy(options, callback) {\n        if (typeof options === \"function\") {\n            callback = options;\n            options = {\n                force: false\n            };\n        }\n        options = Object.assign({}, {\n            force: false\n        }, options);\n        if (this.s.state === common_1.STATE_CLOSED) {\n            if (typeof callback === \"function\") {\n                callback();\n            }\n            return;\n        }\n        stateTransition(this, common_1.STATE_CLOSING);\n        if (!this.loadBalanced) {\n            this.monitor?.close();\n        }\n        this.pool.close(options, (err)=>{\n            stateTransition(this, common_1.STATE_CLOSED);\n            this.emit(\"closed\");\n            if (typeof callback === \"function\") {\n                callback(err);\n            }\n        });\n    }\n    /**\n     * Immediately schedule monitoring of this server. If there already an attempt being made\n     * this will be a no-op.\n     */ requestCheck() {\n        if (!this.loadBalanced) {\n            this.monitor?.requestCheck();\n        }\n    }\n    /**\n     * Execute a command\n     * @internal\n     */ command(ns, cmd, options, callback) {\n        if (callback == null) {\n            throw new error_1.MongoInvalidArgumentError(\"Callback must be provided\");\n        }\n        if (ns.db == null || typeof ns === \"string\") {\n            throw new error_1.MongoInvalidArgumentError(\"Namespace must not be a string\");\n        }\n        if (this.s.state === common_1.STATE_CLOSING || this.s.state === common_1.STATE_CLOSED) {\n            callback(new error_1.MongoServerClosedError());\n            return;\n        }\n        // Clone the options\n        const finalOptions = Object.assign({}, options, {\n            wireProtocolCommand: false\n        });\n        // There are cases where we need to flag the read preference not to get sent in\n        // the command, such as pre-5.0 servers attempting to perform an aggregate write\n        // with a non-primary read preference. In this case the effective read preference\n        // (primary) is not the same as the provided and must be removed completely.\n        if (finalOptions.omitReadPreference) {\n            delete finalOptions.readPreference;\n        }\n        const session = finalOptions.session;\n        const conn = session?.pinnedConnection;\n        // NOTE: This is a hack! We can't retrieve the connections used for executing an operation\n        //       (and prevent them from being checked back in) at the point of operation execution.\n        //       This should be considered as part of the work for NODE-2882\n        // NOTE:\n        //       When incrementing operation count, it's important that we increment it before we\n        //       attempt to check out a connection from the pool.  This ensures that operations that\n        //       are waiting for a connection are included in the operation count.  Load balanced\n        //       mode will only ever have a single server, so the operation count doesn't matter.\n        //       Incrementing the operation count above the logic to handle load balanced mode would\n        //       require special logic to decrement it again, or would double increment (the load\n        //       balanced code makes a recursive call).  Instead, we increment the count after this\n        //       check.\n        if (this.loadBalanced && session && conn == null && isPinnableCommand(cmd, session)) {\n            this.pool.checkOut((err, checkedOut)=>{\n                if (err || checkedOut == null) {\n                    if (callback) return callback(err);\n                    return;\n                }\n                session.pin(checkedOut);\n                this.command(ns, cmd, finalOptions, callback);\n            });\n            return;\n        }\n        this.incrementOperationCount();\n        this.pool.withConnection(conn, (err, conn, cb)=>{\n            if (err || !conn) {\n                this.decrementOperationCount();\n                if (!err) {\n                    return cb(new error_1.MongoRuntimeError(\"Failed to create connection without error\"));\n                }\n                if (!(err instanceof errors_1.PoolClearedError)) {\n                    this.handleError(err);\n                }\n                return cb(err);\n            }\n            conn.command(ns, cmd, finalOptions, makeOperationHandler(this, conn, cmd, finalOptions, (error, response)=>{\n                this.decrementOperationCount();\n                cb(error, response);\n            }));\n        }, callback);\n    }\n    /**\n     * Handle SDAM error\n     * @internal\n     */ handleError(error, connection) {\n        if (!(error instanceof error_1.MongoError)) {\n            return;\n        }\n        const isStaleError = error.connectionGeneration && error.connectionGeneration < this.pool.generation;\n        if (isStaleError) {\n            return;\n        }\n        const isNetworkNonTimeoutError = error instanceof error_1.MongoNetworkError && !(error instanceof error_1.MongoNetworkTimeoutError);\n        const isNetworkTimeoutBeforeHandshakeError = (0, error_1.isNetworkErrorBeforeHandshake)(error);\n        const isAuthHandshakeError = error.hasErrorLabel(error_1.MongoErrorLabel.HandshakeError);\n        if (isNetworkNonTimeoutError || isNetworkTimeoutBeforeHandshakeError || isAuthHandshakeError) {\n            // In load balanced mode we never mark the server as unknown and always\n            // clear for the specific service id.\n            if (!this.loadBalanced) {\n                error.addErrorLabel(error_1.MongoErrorLabel.ResetPool);\n                markServerUnknown(this, error);\n            } else if (connection) {\n                this.pool.clear({\n                    serviceId: connection.serviceId\n                });\n            }\n        } else {\n            if ((0, error_1.isSDAMUnrecoverableError)(error)) {\n                if (shouldHandleStateChangeError(this, error)) {\n                    const shouldClearPool = (0, utils_1.maxWireVersion)(this) <= 7 || (0, error_1.isNodeShuttingDownError)(error);\n                    if (this.loadBalanced && connection && shouldClearPool) {\n                        this.pool.clear({\n                            serviceId: connection.serviceId\n                        });\n                    }\n                    if (!this.loadBalanced) {\n                        if (shouldClearPool) {\n                            error.addErrorLabel(error_1.MongoErrorLabel.ResetPool);\n                        }\n                        markServerUnknown(this, error);\n                        process.nextTick(()=>this.requestCheck());\n                    }\n                }\n            }\n        }\n    }\n    /**\n     * Decrement the operation count, returning the new count.\n     */ decrementOperationCount() {\n        return this.s.operationCount -= 1;\n    }\n    /**\n     * Increment the operation count, returning the new count.\n     */ incrementOperationCount() {\n        return this.s.operationCount += 1;\n    }\n}\n/** @event */ Server.SERVER_HEARTBEAT_STARTED = constants_1.SERVER_HEARTBEAT_STARTED;\n/** @event */ Server.SERVER_HEARTBEAT_SUCCEEDED = constants_1.SERVER_HEARTBEAT_SUCCEEDED;\n/** @event */ Server.SERVER_HEARTBEAT_FAILED = constants_1.SERVER_HEARTBEAT_FAILED;\n/** @event */ Server.CONNECT = constants_1.CONNECT;\n/** @event */ Server.DESCRIPTION_RECEIVED = constants_1.DESCRIPTION_RECEIVED;\n/** @event */ Server.CLOSED = constants_1.CLOSED;\n/** @event */ Server.ENDED = constants_1.ENDED;\nexports.Server = Server;\nfunction calculateRoundTripTime(oldRtt, duration) {\n    if (oldRtt === -1) {\n        return duration;\n    }\n    const alpha = 0.2;\n    return alpha * duration + (1 - alpha) * oldRtt;\n}\nfunction markServerUnknown(server, error) {\n    // Load balancer servers can never be marked unknown.\n    if (server.loadBalanced) {\n        return;\n    }\n    if (error instanceof error_1.MongoNetworkError && !(error instanceof error_1.MongoNetworkTimeoutError)) {\n        server.monitor?.reset();\n    }\n    server.emit(Server.DESCRIPTION_RECEIVED, new server_description_1.ServerDescription(server.description.hostAddress, undefined, {\n        error\n    }));\n}\nfunction isPinnableCommand(cmd, session) {\n    if (session) {\n        return session.inTransaction() || \"aggregate\" in cmd || \"find\" in cmd || \"getMore\" in cmd || \"listCollections\" in cmd || \"listIndexes\" in cmd;\n    }\n    return false;\n}\nfunction connectionIsStale(pool, connection) {\n    if (connection.serviceId) {\n        return connection.generation !== pool.serviceGenerations.get(connection.serviceId.toHexString());\n    }\n    return connection.generation !== pool.generation;\n}\nfunction shouldHandleStateChangeError(server, err) {\n    const etv = err.topologyVersion;\n    const stv = server.description.topologyVersion;\n    return (0, server_description_1.compareTopologyVersion)(stv, etv) < 0;\n}\nfunction inActiveTransaction(session, cmd) {\n    return session && session.inTransaction() && !(0, transactions_1.isTransactionCommand)(cmd);\n}\n/** this checks the retryWrites option passed down from the client options, it\n * does not check if the server supports retryable writes */ function isRetryableWritesEnabled(topology) {\n    return topology.s.options.retryWrites !== false;\n}\nfunction makeOperationHandler(server, connection, cmd, options, callback) {\n    const session = options?.session;\n    return function handleOperationResult(error, result) {\n        // We should not swallow an error if it is present.\n        if (error == null && result != null) {\n            return callback(undefined, result);\n        }\n        if (options != null && \"noResponse\" in options && options.noResponse === true) {\n            return callback(undefined, null);\n        }\n        if (!error) {\n            return callback(new error_1.MongoUnexpectedServerResponseError(\"Empty response with no error\"));\n        }\n        if (!(error instanceof error_1.MongoError)) {\n            // Node.js or some other error we have not special handling for\n            return callback(error);\n        }\n        if (connectionIsStale(server.pool, connection)) {\n            return callback(error);\n        }\n        if (error instanceof error_1.MongoNetworkError) {\n            if (session && !session.hasEnded && session.serverSession) {\n                session.serverSession.isDirty = true;\n            }\n            // inActiveTransaction check handles commit and abort.\n            if (inActiveTransaction(session, cmd) && !error.hasErrorLabel(error_1.MongoErrorLabel.TransientTransactionError)) {\n                error.addErrorLabel(error_1.MongoErrorLabel.TransientTransactionError);\n            }\n            if ((isRetryableWritesEnabled(server.topology) || (0, transactions_1.isTransactionCommand)(cmd)) && (0, utils_1.supportsRetryableWrites)(server) && !inActiveTransaction(session, cmd)) {\n                error.addErrorLabel(error_1.MongoErrorLabel.RetryableWriteError);\n            }\n        } else {\n            if ((isRetryableWritesEnabled(server.topology) || (0, transactions_1.isTransactionCommand)(cmd)) && (0, error_1.needsRetryableWriteLabel)(error, (0, utils_1.maxWireVersion)(server)) && !inActiveTransaction(session, cmd)) {\n                error.addErrorLabel(error_1.MongoErrorLabel.RetryableWriteError);\n            }\n        }\n        if (session && session.isPinned && error.hasErrorLabel(error_1.MongoErrorLabel.TransientTransactionError)) {\n            session.unpin({\n                force: true\n            });\n        }\n        server.handleError(error, connection);\n        return callback(error);\n    };\n} //# sourceMappingURL=server.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbW9uZ29kYi9saWIvc2RhbS9zZXJ2ZXIuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYkEsOENBQTZDO0lBQUVHLE9BQU87QUFBSyxDQUFDLEVBQUM7QUFDN0RELGNBQWMsR0FBRyxLQUFLO0FBQ3RCLE1BQU1HLFNBQVNDLG1CQUFPQSxDQUFDLGtCQUFNO0FBQzdCLE1BQU1DLGVBQWVELG1CQUFPQSxDQUFDLCtFQUFvQjtBQUNqRCxNQUFNRSxvQkFBb0JGLG1CQUFPQSxDQUFDLHlGQUF5QjtBQUMzRCxNQUFNRyxXQUFXSCxtQkFBT0EsQ0FBQyx1RUFBZ0I7QUFDekMsTUFBTUksY0FBY0osbUJBQU9BLENBQUMsbUVBQWM7QUFDMUMsTUFBTUssVUFBVUwsbUJBQU9BLENBQUMsMkRBQVU7QUFDbEMsTUFBTU0sZ0JBQWdCTixtQkFBT0EsQ0FBQyx1RUFBZ0I7QUFDOUMsTUFBTU8saUJBQWlCUCxtQkFBT0EsQ0FBQyx5RUFBaUI7QUFDaEQsTUFBTVEsVUFBVVIsbUJBQU9BLENBQUMsMkRBQVU7QUFDbEMsTUFBTVMsV0FBV1QsbUJBQU9BLENBQUMsaUVBQVU7QUFDbkMsTUFBTVUsWUFBWVYsbUJBQU9BLENBQUMsbUVBQVc7QUFDckMsTUFBTVcsdUJBQXVCWCxtQkFBT0EsQ0FBQyx5RkFBc0I7QUFDM0QsTUFBTVksa0JBQWtCLENBQUMsR0FBR0osUUFBUUssZ0JBQWdCLEVBQUU7SUFDbEQsQ0FBQ0osU0FBU0ssWUFBWSxDQUFDLEVBQUU7UUFBQ0wsU0FBU0ssWUFBWTtRQUFFTCxTQUFTTSxnQkFBZ0I7S0FBQztJQUMzRSxDQUFDTixTQUFTTSxnQkFBZ0IsQ0FBQyxFQUFFO1FBQUNOLFNBQVNNLGdCQUFnQjtRQUFFTixTQUFTTyxhQUFhO1FBQUVQLFNBQVNRLGVBQWU7UUFBRVIsU0FBU0ssWUFBWTtLQUFDO0lBQ2pJLENBQUNMLFNBQVNRLGVBQWUsQ0FBQyxFQUFFO1FBQUNSLFNBQVNRLGVBQWU7UUFBRVIsU0FBU08sYUFBYTtRQUFFUCxTQUFTSyxZQUFZO0tBQUM7SUFDckcsQ0FBQ0wsU0FBU08sYUFBYSxDQUFDLEVBQUU7UUFBQ1AsU0FBU08sYUFBYTtRQUFFUCxTQUFTSyxZQUFZO0tBQUM7QUFDN0U7QUFDQSxjQUFjLEdBQ2QsTUFBTWhCLGVBQWVRLGNBQWNZLGlCQUFpQjtJQUNoRDs7S0FFQyxHQUNEQyxZQUFZQyxRQUFRLEVBQUVDLFdBQVcsRUFBRUMsT0FBTyxDQUFFO1FBQ3hDLEtBQUs7UUFDTCxJQUFJLENBQUNDLFlBQVksR0FBRyxDQUFDLEdBQUd4QixPQUFPeUIsU0FBUyxFQUFFLENBQUNDLElBQUlDLEtBQUtKLFNBQ3BELG9IQUFvSDtRQUNwSEssV0FBYSxJQUFJLENBQUNDLE9BQU8sQ0FBQ0gsSUFBSUMsS0FBS0osU0FBU0s7UUFDNUMsSUFBSSxDQUFDRSxTQUFTLEdBQUdQLFFBQVFPLFNBQVM7UUFDbEMsTUFBTUMsY0FBYztZQUFFQyxhQUFhVixZQUFZVSxXQUFXO1lBQUUsR0FBR1QsT0FBTztRQUFDO1FBQ3ZFLElBQUksQ0FBQ0YsUUFBUSxHQUFHQTtRQUNoQixJQUFJLENBQUNZLElBQUksR0FBRyxJQUFJOUIsa0JBQWtCK0IsY0FBYyxDQUFDLElBQUksRUFBRUg7UUFDdkQsSUFBSSxDQUFDSSxDQUFDLEdBQUc7WUFDTGI7WUFDQUM7WUFDQWEsT0FBTzFCLFNBQVNLLFlBQVk7WUFDNUJzQixnQkFBZ0I7UUFDcEI7UUFDQSxLQUFLLE1BQU1DLFNBQVM7ZUFBSWpDLFlBQVlrQyxXQUFXO2VBQUtsQyxZQUFZbUMsVUFBVTtTQUFDLENBQUU7WUFDekUsSUFBSSxDQUFDUCxJQUFJLENBQUNRLEVBQUUsQ0FBQ0gsT0FBTyxDQUFDSSxJQUFNLElBQUksQ0FBQ0MsSUFBSSxDQUFDTCxPQUFPSTtRQUNoRDtRQUNBLElBQUksQ0FBQ1QsSUFBSSxDQUFDUSxFQUFFLENBQUN2QyxhQUFhMEMsVUFBVSxDQUFDQyxxQkFBcUIsRUFBRSxDQUFDQztZQUN6RCxJQUFJLENBQUNBLFdBQVcsR0FBR0E7UUFDdkI7UUFDQSxJQUFJLElBQUksQ0FBQ0MsWUFBWSxFQUFFO1lBQ25CLElBQUksQ0FBQ0MsT0FBTyxHQUFHO1lBQ2YsZ0RBQWdEO1lBQ2hEO1FBQ0o7UUFDQSxxQkFBcUI7UUFDckIsSUFBSSxDQUFDQSxPQUFPLEdBQUcsSUFBSXJDLFVBQVVzQyxPQUFPLENBQUMsSUFBSSxFQUFFLElBQUksQ0FBQ2QsQ0FBQyxDQUFDWixPQUFPO1FBQ3pELEtBQUssTUFBTWUsU0FBU2pDLFlBQVk2QyxnQkFBZ0IsQ0FBRTtZQUM5QyxJQUFJLENBQUNGLE9BQU8sQ0FBQ1AsRUFBRSxDQUFDSCxPQUFPLENBQUNJLElBQU0sSUFBSSxDQUFDQyxJQUFJLENBQUNMLE9BQU9JO1FBQ25EO1FBQ0EsSUFBSSxDQUFDTSxPQUFPLENBQUNQLEVBQUUsQ0FBQyxlQUFlLENBQUNVLFFBQVVDLGtCQUFrQixJQUFJLEVBQUVEO1FBQ2xFLElBQUksQ0FBQ0gsT0FBTyxDQUFDUCxFQUFFLENBQUMxQyxPQUFPc0QsMEJBQTBCLEVBQUUsQ0FBQ2Y7WUFDaEQsSUFBSSxDQUFDSyxJQUFJLENBQUM1QyxPQUFPdUQsb0JBQW9CLEVBQUUsSUFBSTFDLHFCQUFxQjJDLGlCQUFpQixDQUFDLElBQUksQ0FBQ2pDLFdBQVcsQ0FBQ1UsV0FBVyxFQUFFTSxNQUFNa0IsS0FBSyxFQUFFO2dCQUN6SEMsZUFBZUMsdUJBQXVCLElBQUksQ0FBQ3BDLFdBQVcsQ0FBQ21DLGFBQWEsRUFBRW5CLE1BQU1xQixRQUFRO1lBQ3hGO1lBQ0EsSUFBSSxJQUFJLENBQUN4QixDQUFDLENBQUNDLEtBQUssS0FBSzFCLFNBQVNNLGdCQUFnQixFQUFFO2dCQUM1Q0gsZ0JBQWdCLElBQUksRUFBRUgsU0FBU1EsZUFBZTtnQkFDOUMsSUFBSSxDQUFDeUIsSUFBSSxDQUFDNUMsT0FBTzZELE9BQU8sRUFBRSxJQUFJO1lBQ2xDO1FBQ0o7SUFDSjtJQUNBLElBQUlkLGNBQWM7UUFDZCxPQUFPLElBQUksQ0FBQ3pCLFFBQVEsQ0FBQ3lCLFdBQVc7SUFDcEM7SUFDQSxJQUFJQSxZQUFZQSxXQUFXLEVBQUU7UUFDekIsSUFBSSxDQUFDekIsUUFBUSxDQUFDeUIsV0FBVyxHQUFHQTtJQUNoQztJQUNBLElBQUl4QixjQUFjO1FBQ2QsT0FBTyxJQUFJLENBQUNhLENBQUMsQ0FBQ2IsV0FBVztJQUM3QjtJQUNBLElBQUl1QyxPQUFPO1FBQ1AsT0FBTyxJQUFJLENBQUMxQixDQUFDLENBQUNiLFdBQVcsQ0FBQ3dDLE9BQU87SUFDckM7SUFDQSxJQUFJQyxnQkFBZ0I7UUFDaEIsSUFBSSxJQUFJLENBQUM1QixDQUFDLENBQUNaLE9BQU8sSUFBSSxJQUFJLENBQUNZLENBQUMsQ0FBQ1osT0FBTyxDQUFDd0MsYUFBYSxFQUFFO1lBQ2hELE9BQU8sSUFBSSxDQUFDNUIsQ0FBQyxDQUFDWixPQUFPLENBQUN3QyxhQUFhO1FBQ3ZDO1FBQ0E7SUFDSjtJQUNBLElBQUloQixlQUFlO1FBQ2YsT0FBTyxJQUFJLENBQUMxQixRQUFRLENBQUNDLFdBQVcsQ0FBQzBDLElBQUksS0FBS3RELFNBQVN1RCxZQUFZLENBQUNDLFlBQVk7SUFDaEY7SUFDQTs7S0FFQyxHQUNEQyxVQUFVO1FBQ04sSUFBSSxJQUFJLENBQUNoQyxDQUFDLENBQUNDLEtBQUssS0FBSzFCLFNBQVNLLFlBQVksRUFBRTtZQUN4QztRQUNKO1FBQ0FGLGdCQUFnQixJQUFJLEVBQUVILFNBQVNNLGdCQUFnQjtRQUMvQyw4REFBOEQ7UUFDOUQsOERBQThEO1FBQzlELGtCQUFrQjtRQUNsQixJQUFJLENBQUMsSUFBSSxDQUFDK0IsWUFBWSxFQUFFO1lBQ3BCLElBQUksQ0FBQ0MsT0FBTyxFQUFFbUI7UUFDbEIsT0FDSztZQUNEdEQsZ0JBQWdCLElBQUksRUFBRUgsU0FBU1EsZUFBZTtZQUM5QyxJQUFJLENBQUN5QixJQUFJLENBQUM1QyxPQUFPNkQsT0FBTyxFQUFFLElBQUk7UUFDbEM7SUFDSjtJQUNBLGtDQUFrQyxHQUNsQ1EsUUFBUTdDLE9BQU8sRUFBRUssUUFBUSxFQUFFO1FBQ3ZCLElBQUksT0FBT0wsWUFBWSxZQUFZO1lBQy9CSyxXQUFXTDtZQUNYQSxVQUFVO2dCQUFFOEMsT0FBTztZQUFNO1FBQzdCO1FBQ0E5QyxVQUFVNUIsT0FBTzJFLE1BQU0sQ0FBQyxDQUFDLEdBQUc7WUFBRUQsT0FBTztRQUFNLEdBQUc5QztRQUM5QyxJQUFJLElBQUksQ0FBQ1ksQ0FBQyxDQUFDQyxLQUFLLEtBQUsxQixTQUFTSyxZQUFZLEVBQUU7WUFDeEMsSUFBSSxPQUFPYSxhQUFhLFlBQVk7Z0JBQ2hDQTtZQUNKO1lBQ0E7UUFDSjtRQUNBZixnQkFBZ0IsSUFBSSxFQUFFSCxTQUFTTyxhQUFhO1FBQzVDLElBQUksQ0FBQyxJQUFJLENBQUM4QixZQUFZLEVBQUU7WUFDcEIsSUFBSSxDQUFDQyxPQUFPLEVBQUV1QjtRQUNsQjtRQUNBLElBQUksQ0FBQ3RDLElBQUksQ0FBQ3NDLEtBQUssQ0FBQ2hELFNBQVNpRCxDQUFBQTtZQUNyQjNELGdCQUFnQixJQUFJLEVBQUVILFNBQVNLLFlBQVk7WUFDM0MsSUFBSSxDQUFDNEIsSUFBSSxDQUFDO1lBQ1YsSUFBSSxPQUFPZixhQUFhLFlBQVk7Z0JBQ2hDQSxTQUFTNEM7WUFDYjtRQUNKO0lBQ0o7SUFDQTs7O0tBR0MsR0FDREMsZUFBZTtRQUNYLElBQUksQ0FBQyxJQUFJLENBQUMxQixZQUFZLEVBQUU7WUFDcEIsSUFBSSxDQUFDQyxPQUFPLEVBQUV5QjtRQUNsQjtJQUNKO0lBQ0E7OztLQUdDLEdBQ0Q1QyxRQUFRSCxFQUFFLEVBQUVDLEdBQUcsRUFBRUosT0FBTyxFQUFFSyxRQUFRLEVBQUU7UUFDaEMsSUFBSUEsWUFBWSxNQUFNO1lBQ2xCLE1BQU0sSUFBSXRCLFFBQVFvRSx5QkFBeUIsQ0FBQztRQUNoRDtRQUNBLElBQUloRCxHQUFHaUQsRUFBRSxJQUFJLFFBQVEsT0FBT2pELE9BQU8sVUFBVTtZQUN6QyxNQUFNLElBQUlwQixRQUFRb0UseUJBQXlCLENBQUM7UUFDaEQ7UUFDQSxJQUFJLElBQUksQ0FBQ3ZDLENBQUMsQ0FBQ0MsS0FBSyxLQUFLMUIsU0FBU08sYUFBYSxJQUFJLElBQUksQ0FBQ2tCLENBQUMsQ0FBQ0MsS0FBSyxLQUFLMUIsU0FBU0ssWUFBWSxFQUFFO1lBQ25GYSxTQUFTLElBQUl0QixRQUFRc0Usc0JBQXNCO1lBQzNDO1FBQ0o7UUFDQSxvQkFBb0I7UUFDcEIsTUFBTUMsZUFBZWxGLE9BQU8yRSxNQUFNLENBQUMsQ0FBQyxHQUFHL0MsU0FBUztZQUFFdUQscUJBQXFCO1FBQU07UUFDN0UsK0VBQStFO1FBQy9FLGdGQUFnRjtRQUNoRixpRkFBaUY7UUFDakYsNEVBQTRFO1FBQzVFLElBQUlELGFBQWFFLGtCQUFrQixFQUFFO1lBQ2pDLE9BQU9GLGFBQWFHLGNBQWM7UUFDdEM7UUFDQSxNQUFNQyxVQUFVSixhQUFhSSxPQUFPO1FBQ3BDLE1BQU1DLE9BQU9ELFNBQVNFO1FBQ3RCLDBGQUEwRjtRQUMxRiwyRkFBMkY7UUFDM0Ysb0VBQW9FO1FBQ3BFLFFBQVE7UUFDUix5RkFBeUY7UUFDekYsNEZBQTRGO1FBQzVGLHlGQUF5RjtRQUN6Rix5RkFBeUY7UUFDekYsNEZBQTRGO1FBQzVGLHlGQUF5RjtRQUN6RiwyRkFBMkY7UUFDM0YsZUFBZTtRQUNmLElBQUksSUFBSSxDQUFDcEMsWUFBWSxJQUFJa0MsV0FBV0MsUUFBUSxRQUFRRSxrQkFBa0J6RCxLQUFLc0QsVUFBVTtZQUNqRixJQUFJLENBQUNoRCxJQUFJLENBQUNvRCxRQUFRLENBQUMsQ0FBQ2IsS0FBS2M7Z0JBQ3JCLElBQUlkLE9BQU9jLGNBQWMsTUFBTTtvQkFDM0IsSUFBSTFELFVBQ0EsT0FBT0EsU0FBUzRDO29CQUNwQjtnQkFDSjtnQkFDQVMsUUFBUU0sR0FBRyxDQUFDRDtnQkFDWixJQUFJLENBQUN6RCxPQUFPLENBQUNILElBQUlDLEtBQUtrRCxjQUFjakQ7WUFDeEM7WUFDQTtRQUNKO1FBQ0EsSUFBSSxDQUFDNEQsdUJBQXVCO1FBQzVCLElBQUksQ0FBQ3ZELElBQUksQ0FBQ3dELGNBQWMsQ0FBQ1AsTUFBTSxDQUFDVixLQUFLVSxNQUFNUTtZQUN2QyxJQUFJbEIsT0FBTyxDQUFDVSxNQUFNO2dCQUNkLElBQUksQ0FBQ1MsdUJBQXVCO2dCQUM1QixJQUFJLENBQUNuQixLQUFLO29CQUNOLE9BQU9rQixHQUFHLElBQUlwRixRQUFRc0YsaUJBQWlCLENBQUM7Z0JBQzVDO2dCQUNBLElBQUksQ0FBRXBCLENBQUFBLGVBQWVwRSxTQUFTeUYsZ0JBQWdCLEdBQUc7b0JBQzdDLElBQUksQ0FBQ0MsV0FBVyxDQUFDdEI7Z0JBQ3JCO2dCQUNBLE9BQU9rQixHQUFHbEI7WUFDZDtZQUNBVSxLQUFLckQsT0FBTyxDQUFDSCxJQUFJQyxLQUFLa0QsY0FBY2tCLHFCQUFxQixJQUFJLEVBQUViLE1BQU12RCxLQUFLa0QsY0FBYyxDQUFDMUIsT0FBTzZDO2dCQUM1RixJQUFJLENBQUNMLHVCQUF1QjtnQkFDNUJELEdBQUd2QyxPQUFPNkM7WUFDZDtRQUNKLEdBQUdwRTtJQUNQO0lBQ0E7OztLQUdDLEdBQ0RrRSxZQUFZM0MsS0FBSyxFQUFFOEMsVUFBVSxFQUFFO1FBQzNCLElBQUksQ0FBRTlDLENBQUFBLGlCQUFpQjdDLFFBQVE0RixVQUFVLEdBQUc7WUFDeEM7UUFDSjtRQUNBLE1BQU1DLGVBQWVoRCxNQUFNaUQsb0JBQW9CLElBQUlqRCxNQUFNaUQsb0JBQW9CLEdBQUcsSUFBSSxDQUFDbkUsSUFBSSxDQUFDb0UsVUFBVTtRQUNwRyxJQUFJRixjQUFjO1lBQ2Q7UUFDSjtRQUNBLE1BQU1HLDJCQUEyQm5ELGlCQUFpQjdDLFFBQVFpRyxpQkFBaUIsSUFBSSxDQUFFcEQsQ0FBQUEsaUJBQWlCN0MsUUFBUWtHLHdCQUF3QjtRQUNsSSxNQUFNQyx1Q0FBdUMsQ0FBQyxHQUFHbkcsUUFBUW9HLDZCQUE2QixFQUFFdkQ7UUFDeEYsTUFBTXdELHVCQUF1QnhELE1BQU15RCxhQUFhLENBQUN0RyxRQUFRdUcsZUFBZSxDQUFDQyxjQUFjO1FBQ3ZGLElBQUlSLDRCQUE0Qkcsd0NBQXdDRSxzQkFBc0I7WUFDMUYsdUVBQXVFO1lBQ3ZFLHFDQUFxQztZQUNyQyxJQUFJLENBQUMsSUFBSSxDQUFDNUQsWUFBWSxFQUFFO2dCQUNwQkksTUFBTTRELGFBQWEsQ0FBQ3pHLFFBQVF1RyxlQUFlLENBQUNHLFNBQVM7Z0JBQ3JENUQsa0JBQWtCLElBQUksRUFBRUQ7WUFDNUIsT0FDSyxJQUFJOEMsWUFBWTtnQkFDakIsSUFBSSxDQUFDaEUsSUFBSSxDQUFDZ0YsS0FBSyxDQUFDO29CQUFFQyxXQUFXakIsV0FBV2lCLFNBQVM7Z0JBQUM7WUFDdEQ7UUFDSixPQUNLO1lBQ0QsSUFBSSxDQUFDLEdBQUc1RyxRQUFRNkcsd0JBQXdCLEVBQUVoRSxRQUFRO2dCQUM5QyxJQUFJaUUsNkJBQTZCLElBQUksRUFBRWpFLFFBQVE7b0JBQzNDLE1BQU1rRSxrQkFBa0IsQ0FBQyxHQUFHNUcsUUFBUTZHLGNBQWMsRUFBRSxJQUFJLEtBQUssS0FBSyxDQUFDLEdBQUdoSCxRQUFRaUgsdUJBQXVCLEVBQUVwRTtvQkFDdkcsSUFBSSxJQUFJLENBQUNKLFlBQVksSUFBSWtELGNBQWNvQixpQkFBaUI7d0JBQ3BELElBQUksQ0FBQ3BGLElBQUksQ0FBQ2dGLEtBQUssQ0FBQzs0QkFBRUMsV0FBV2pCLFdBQVdpQixTQUFTO3dCQUFDO29CQUN0RDtvQkFDQSxJQUFJLENBQUMsSUFBSSxDQUFDbkUsWUFBWSxFQUFFO3dCQUNwQixJQUFJc0UsaUJBQWlCOzRCQUNqQmxFLE1BQU00RCxhQUFhLENBQUN6RyxRQUFRdUcsZUFBZSxDQUFDRyxTQUFTO3dCQUN6RDt3QkFDQTVELGtCQUFrQixJQUFJLEVBQUVEO3dCQUN4QnFFLFFBQVFDLFFBQVEsQ0FBQyxJQUFNLElBQUksQ0FBQ2hELFlBQVk7b0JBQzVDO2dCQUNKO1lBQ0o7UUFDSjtJQUNKO0lBQ0E7O0tBRUMsR0FDRGtCLDBCQUEwQjtRQUN0QixPQUFRLElBQUksQ0FBQ3hELENBQUMsQ0FBQ0UsY0FBYyxJQUFJO0lBQ3JDO0lBQ0E7O0tBRUMsR0FDRG1ELDBCQUEwQjtRQUN0QixPQUFRLElBQUksQ0FBQ3JELENBQUMsQ0FBQ0UsY0FBYyxJQUFJO0lBQ3JDO0FBQ0o7QUFDQSxXQUFXLEdBQ1h0QyxPQUFPMkgsd0JBQXdCLEdBQUdySCxZQUFZcUgsd0JBQXdCO0FBQ3RFLFdBQVcsR0FDWDNILE9BQU9zRCwwQkFBMEIsR0FBR2hELFlBQVlnRCwwQkFBMEI7QUFDMUUsV0FBVyxHQUNYdEQsT0FBTzRILHVCQUF1QixHQUFHdEgsWUFBWXNILHVCQUF1QjtBQUNwRSxXQUFXLEdBQ1g1SCxPQUFPNkQsT0FBTyxHQUFHdkQsWUFBWXVELE9BQU87QUFDcEMsV0FBVyxHQUNYN0QsT0FBT3VELG9CQUFvQixHQUFHakQsWUFBWWlELG9CQUFvQjtBQUM5RCxXQUFXLEdBQ1h2RCxPQUFPNkgsTUFBTSxHQUFHdkgsWUFBWXVILE1BQU07QUFDbEMsV0FBVyxHQUNYN0gsT0FBTzhILEtBQUssR0FBR3hILFlBQVl3SCxLQUFLO0FBQ2hDaEksY0FBYyxHQUFHRTtBQUNqQixTQUFTMkQsdUJBQXVCb0UsTUFBTSxFQUFFbkUsUUFBUTtJQUM1QyxJQUFJbUUsV0FBVyxDQUFDLEdBQUc7UUFDZixPQUFPbkU7SUFDWDtJQUNBLE1BQU1vRSxRQUFRO0lBQ2QsT0FBT0EsUUFBUXBFLFdBQVcsQ0FBQyxJQUFJb0UsS0FBSSxJQUFLRDtBQUM1QztBQUNBLFNBQVMxRSxrQkFBa0I0RSxNQUFNLEVBQUU3RSxLQUFLO0lBQ3BDLHFEQUFxRDtJQUNyRCxJQUFJNkUsT0FBT2pGLFlBQVksRUFBRTtRQUNyQjtJQUNKO0lBQ0EsSUFBSUksaUJBQWlCN0MsUUFBUWlHLGlCQUFpQixJQUFJLENBQUVwRCxDQUFBQSxpQkFBaUI3QyxRQUFRa0csd0JBQXdCLEdBQUc7UUFDcEd3QixPQUFPaEYsT0FBTyxFQUFFaUY7SUFDcEI7SUFDQUQsT0FBT3JGLElBQUksQ0FBQzVDLE9BQU91RCxvQkFBb0IsRUFBRSxJQUFJMUMscUJBQXFCMkMsaUJBQWlCLENBQUN5RSxPQUFPMUcsV0FBVyxDQUFDVSxXQUFXLEVBQUVrRyxXQUFXO1FBQUUvRTtJQUFNO0FBQzNJO0FBQ0EsU0FBU2lDLGtCQUFrQnpELEdBQUcsRUFBRXNELE9BQU87SUFDbkMsSUFBSUEsU0FBUztRQUNULE9BQVFBLFFBQVFrRCxhQUFhLE1BQ3pCLGVBQWV4RyxPQUNmLFVBQVVBLE9BQ1YsYUFBYUEsT0FDYixxQkFBcUJBLE9BQ3JCLGlCQUFpQkE7SUFDekI7SUFDQSxPQUFPO0FBQ1g7QUFDQSxTQUFTeUcsa0JBQWtCbkcsSUFBSSxFQUFFZ0UsVUFBVTtJQUN2QyxJQUFJQSxXQUFXaUIsU0FBUyxFQUFFO1FBQ3RCLE9BQVFqQixXQUFXSSxVQUFVLEtBQUtwRSxLQUFLb0csa0JBQWtCLENBQUNDLEdBQUcsQ0FBQ3JDLFdBQVdpQixTQUFTLENBQUNxQixXQUFXO0lBQ2xHO0lBQ0EsT0FBT3RDLFdBQVdJLFVBQVUsS0FBS3BFLEtBQUtvRSxVQUFVO0FBQ3BEO0FBQ0EsU0FBU2UsNkJBQTZCWSxNQUFNLEVBQUV4RCxHQUFHO0lBQzdDLE1BQU1nRSxNQUFNaEUsSUFBSWlFLGVBQWU7SUFDL0IsTUFBTUMsTUFBTVYsT0FBTzFHLFdBQVcsQ0FBQ21ILGVBQWU7SUFDOUMsT0FBTyxDQUFDLEdBQUc3SCxxQkFBcUIrSCxzQkFBc0IsRUFBRUQsS0FBS0YsT0FBTztBQUN4RTtBQUNBLFNBQVNJLG9CQUFvQjNELE9BQU8sRUFBRXRELEdBQUc7SUFDckMsT0FBT3NELFdBQVdBLFFBQVFrRCxhQUFhLE1BQU0sQ0FBQyxDQUFDLEdBQUczSCxlQUFlcUksb0JBQW9CLEVBQUVsSDtBQUMzRjtBQUNBOzBEQUMwRCxHQUMxRCxTQUFTbUgseUJBQXlCekgsUUFBUTtJQUN0QyxPQUFPQSxTQUFTYyxDQUFDLENBQUNaLE9BQU8sQ0FBQ3dILFdBQVcsS0FBSztBQUM5QztBQUNBLFNBQVNoRCxxQkFBcUJpQyxNQUFNLEVBQUUvQixVQUFVLEVBQUV0RSxHQUFHLEVBQUVKLE9BQU8sRUFBRUssUUFBUTtJQUNwRSxNQUFNcUQsVUFBVTFELFNBQVMwRDtJQUN6QixPQUFPLFNBQVMrRCxzQkFBc0I3RixLQUFLLEVBQUU4RixNQUFNO1FBQy9DLG1EQUFtRDtRQUNuRCxJQUFJOUYsU0FBUyxRQUFROEYsVUFBVSxNQUFNO1lBQ2pDLE9BQU9ySCxTQUFTc0csV0FBV2U7UUFDL0I7UUFDQSxJQUFJMUgsV0FBVyxRQUFRLGdCQUFnQkEsV0FBV0EsUUFBUTJILFVBQVUsS0FBSyxNQUFNO1lBQzNFLE9BQU90SCxTQUFTc0csV0FBVztRQUMvQjtRQUNBLElBQUksQ0FBQy9FLE9BQU87WUFDUixPQUFPdkIsU0FBUyxJQUFJdEIsUUFBUTZJLGtDQUFrQyxDQUFDO1FBQ25FO1FBQ0EsSUFBSSxDQUFFaEcsQ0FBQUEsaUJBQWlCN0MsUUFBUTRGLFVBQVUsR0FBRztZQUN4QywrREFBK0Q7WUFDL0QsT0FBT3RFLFNBQVN1QjtRQUNwQjtRQUNBLElBQUlpRixrQkFBa0JKLE9BQU8vRixJQUFJLEVBQUVnRSxhQUFhO1lBQzVDLE9BQU9yRSxTQUFTdUI7UUFDcEI7UUFDQSxJQUFJQSxpQkFBaUI3QyxRQUFRaUcsaUJBQWlCLEVBQUU7WUFDNUMsSUFBSXRCLFdBQVcsQ0FBQ0EsUUFBUW1FLFFBQVEsSUFBSW5FLFFBQVFvRSxhQUFhLEVBQUU7Z0JBQ3ZEcEUsUUFBUW9FLGFBQWEsQ0FBQ0MsT0FBTyxHQUFHO1lBQ3BDO1lBQ0Esc0RBQXNEO1lBQ3RELElBQUlWLG9CQUFvQjNELFNBQVN0RCxRQUM3QixDQUFDd0IsTUFBTXlELGFBQWEsQ0FBQ3RHLFFBQVF1RyxlQUFlLENBQUMwQyx5QkFBeUIsR0FBRztnQkFDekVwRyxNQUFNNEQsYUFBYSxDQUFDekcsUUFBUXVHLGVBQWUsQ0FBQzBDLHlCQUF5QjtZQUN6RTtZQUNBLElBQUksQ0FBQ1QseUJBQXlCZCxPQUFPM0csUUFBUSxLQUFLLENBQUMsR0FBR2IsZUFBZXFJLG9CQUFvQixFQUFFbEgsSUFBRyxLQUMxRixDQUFDLEdBQUdsQixRQUFRK0ksdUJBQXVCLEVBQUV4QixXQUNyQyxDQUFDWSxvQkFBb0IzRCxTQUFTdEQsTUFBTTtnQkFDcEN3QixNQUFNNEQsYUFBYSxDQUFDekcsUUFBUXVHLGVBQWUsQ0FBQzRDLG1CQUFtQjtZQUNuRTtRQUNKLE9BQ0s7WUFDRCxJQUFJLENBQUNYLHlCQUF5QmQsT0FBTzNHLFFBQVEsS0FBSyxDQUFDLEdBQUdiLGVBQWVxSSxvQkFBb0IsRUFBRWxILElBQUcsS0FDMUYsQ0FBQyxHQUFHckIsUUFBUW9KLHdCQUF3QixFQUFFdkcsT0FBTyxDQUFDLEdBQUcxQyxRQUFRNkcsY0FBYyxFQUFFVSxZQUN6RSxDQUFDWSxvQkFBb0IzRCxTQUFTdEQsTUFBTTtnQkFDcEN3QixNQUFNNEQsYUFBYSxDQUFDekcsUUFBUXVHLGVBQWUsQ0FBQzRDLG1CQUFtQjtZQUNuRTtRQUNKO1FBQ0EsSUFBSXhFLFdBQ0FBLFFBQVEwRSxRQUFRLElBQ2hCeEcsTUFBTXlELGFBQWEsQ0FBQ3RHLFFBQVF1RyxlQUFlLENBQUMwQyx5QkFBeUIsR0FBRztZQUN4RXRFLFFBQVEyRSxLQUFLLENBQUM7Z0JBQUV2RixPQUFPO1lBQUs7UUFDaEM7UUFDQTJELE9BQU9sQyxXQUFXLENBQUMzQyxPQUFPOEM7UUFDMUIsT0FBT3JFLFNBQVN1QjtJQUNwQjtBQUNKLEVBQ0Esa0NBQWtDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYmxvZy1hcHBsaWNhdGlvbi8uL25vZGVfbW9kdWxlcy9tb25nb2RiL2xpYi9zZGFtL3NlcnZlci5qcz8yNTAwIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5TZXJ2ZXIgPSB2b2lkIDA7XG5jb25zdCB1dGlsXzEgPSByZXF1aXJlKFwidXRpbFwiKTtcbmNvbnN0IGNvbm5lY3Rpb25fMSA9IHJlcXVpcmUoXCIuLi9jbWFwL2Nvbm5lY3Rpb25cIik7XG5jb25zdCBjb25uZWN0aW9uX3Bvb2xfMSA9IHJlcXVpcmUoXCIuLi9jbWFwL2Nvbm5lY3Rpb25fcG9vbFwiKTtcbmNvbnN0IGVycm9yc18xID0gcmVxdWlyZShcIi4uL2NtYXAvZXJyb3JzXCIpO1xuY29uc3QgY29uc3RhbnRzXzEgPSByZXF1aXJlKFwiLi4vY29uc3RhbnRzXCIpO1xuY29uc3QgZXJyb3JfMSA9IHJlcXVpcmUoXCIuLi9lcnJvclwiKTtcbmNvbnN0IG1vbmdvX3R5cGVzXzEgPSByZXF1aXJlKFwiLi4vbW9uZ29fdHlwZXNcIik7XG5jb25zdCB0cmFuc2FjdGlvbnNfMSA9IHJlcXVpcmUoXCIuLi90cmFuc2FjdGlvbnNcIik7XG5jb25zdCB1dGlsc18xID0gcmVxdWlyZShcIi4uL3V0aWxzXCIpO1xuY29uc3QgY29tbW9uXzEgPSByZXF1aXJlKFwiLi9jb21tb25cIik7XG5jb25zdCBtb25pdG9yXzEgPSByZXF1aXJlKFwiLi9tb25pdG9yXCIpO1xuY29uc3Qgc2VydmVyX2Rlc2NyaXB0aW9uXzEgPSByZXF1aXJlKFwiLi9zZXJ2ZXJfZGVzY3JpcHRpb25cIik7XG5jb25zdCBzdGF0ZVRyYW5zaXRpb24gPSAoMCwgdXRpbHNfMS5tYWtlU3RhdGVNYWNoaW5lKSh7XG4gICAgW2NvbW1vbl8xLlNUQVRFX0NMT1NFRF06IFtjb21tb25fMS5TVEFURV9DTE9TRUQsIGNvbW1vbl8xLlNUQVRFX0NPTk5FQ1RJTkddLFxuICAgIFtjb21tb25fMS5TVEFURV9DT05ORUNUSU5HXTogW2NvbW1vbl8xLlNUQVRFX0NPTk5FQ1RJTkcsIGNvbW1vbl8xLlNUQVRFX0NMT1NJTkcsIGNvbW1vbl8xLlNUQVRFX0NPTk5FQ1RFRCwgY29tbW9uXzEuU1RBVEVfQ0xPU0VEXSxcbiAgICBbY29tbW9uXzEuU1RBVEVfQ09OTkVDVEVEXTogW2NvbW1vbl8xLlNUQVRFX0NPTk5FQ1RFRCwgY29tbW9uXzEuU1RBVEVfQ0xPU0lORywgY29tbW9uXzEuU1RBVEVfQ0xPU0VEXSxcbiAgICBbY29tbW9uXzEuU1RBVEVfQ0xPU0lOR106IFtjb21tb25fMS5TVEFURV9DTE9TSU5HLCBjb21tb25fMS5TVEFURV9DTE9TRURdXG59KTtcbi8qKiBAaW50ZXJuYWwgKi9cbmNsYXNzIFNlcnZlciBleHRlbmRzIG1vbmdvX3R5cGVzXzEuVHlwZWRFdmVudEVtaXR0ZXIge1xuICAgIC8qKlxuICAgICAqIENyZWF0ZSBhIHNlcnZlclxuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKHRvcG9sb2d5LCBkZXNjcmlwdGlvbiwgb3B0aW9ucykge1xuICAgICAgICBzdXBlcigpO1xuICAgICAgICB0aGlzLmNvbW1hbmRBc3luYyA9ICgwLCB1dGlsXzEucHJvbWlzaWZ5KSgobnMsIGNtZCwgb3B0aW9ucywgXG4gICAgICAgIC8vIGNhbGxiYWNrIHR5cGUgZGVmaW5lcyBEb2N1bWVudCByZXN1bHQgYmVjYXVzZSByZXN1bHQgaXMgbmV2ZXIgbnVsbGlzaCB3aGVuIGl0IHN1Y2NlZWRzLCBvdGhlcndpc2UgcHJvbWlzZSByZWplY3RzXG4gICAgICAgIGNhbGxiYWNrKSA9PiB0aGlzLmNvbW1hbmQobnMsIGNtZCwgb3B0aW9ucywgY2FsbGJhY2spKTtcbiAgICAgICAgdGhpcy5zZXJ2ZXJBcGkgPSBvcHRpb25zLnNlcnZlckFwaTtcbiAgICAgICAgY29uc3QgcG9vbE9wdGlvbnMgPSB7IGhvc3RBZGRyZXNzOiBkZXNjcmlwdGlvbi5ob3N0QWRkcmVzcywgLi4ub3B0aW9ucyB9O1xuICAgICAgICB0aGlzLnRvcG9sb2d5ID0gdG9wb2xvZ3k7XG4gICAgICAgIHRoaXMucG9vbCA9IG5ldyBjb25uZWN0aW9uX3Bvb2xfMS5Db25uZWN0aW9uUG9vbCh0aGlzLCBwb29sT3B0aW9ucyk7XG4gICAgICAgIHRoaXMucyA9IHtcbiAgICAgICAgICAgIGRlc2NyaXB0aW9uLFxuICAgICAgICAgICAgb3B0aW9ucyxcbiAgICAgICAgICAgIHN0YXRlOiBjb21tb25fMS5TVEFURV9DTE9TRUQsXG4gICAgICAgICAgICBvcGVyYXRpb25Db3VudDogMFxuICAgICAgICB9O1xuICAgICAgICBmb3IgKGNvbnN0IGV2ZW50IG9mIFsuLi5jb25zdGFudHNfMS5DTUFQX0VWRU5UUywgLi4uY29uc3RhbnRzXzEuQVBNX0VWRU5UU10pIHtcbiAgICAgICAgICAgIHRoaXMucG9vbC5vbihldmVudCwgKGUpID0+IHRoaXMuZW1pdChldmVudCwgZSkpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMucG9vbC5vbihjb25uZWN0aW9uXzEuQ29ubmVjdGlvbi5DTFVTVEVSX1RJTUVfUkVDRUlWRUQsIChjbHVzdGVyVGltZSkgPT4ge1xuICAgICAgICAgICAgdGhpcy5jbHVzdGVyVGltZSA9IGNsdXN0ZXJUaW1lO1xuICAgICAgICB9KTtcbiAgICAgICAgaWYgKHRoaXMubG9hZEJhbGFuY2VkKSB7XG4gICAgICAgICAgICB0aGlzLm1vbml0b3IgPSBudWxsO1xuICAgICAgICAgICAgLy8gbW9uaXRvcmluZyBpcyBkaXNhYmxlZCBpbiBsb2FkIGJhbGFuY2luZyBtb2RlXG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgLy8gY3JlYXRlIHRoZSBtb25pdG9yXG4gICAgICAgIHRoaXMubW9uaXRvciA9IG5ldyBtb25pdG9yXzEuTW9uaXRvcih0aGlzLCB0aGlzLnMub3B0aW9ucyk7XG4gICAgICAgIGZvciAoY29uc3QgZXZlbnQgb2YgY29uc3RhbnRzXzEuSEVBUlRCRUFUX0VWRU5UUykge1xuICAgICAgICAgICAgdGhpcy5tb25pdG9yLm9uKGV2ZW50LCAoZSkgPT4gdGhpcy5lbWl0KGV2ZW50LCBlKSk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5tb25pdG9yLm9uKCdyZXNldFNlcnZlcicsIChlcnJvcikgPT4gbWFya1NlcnZlclVua25vd24odGhpcywgZXJyb3IpKTtcbiAgICAgICAgdGhpcy5tb25pdG9yLm9uKFNlcnZlci5TRVJWRVJfSEVBUlRCRUFUX1NVQ0NFRURFRCwgKGV2ZW50KSA9PiB7XG4gICAgICAgICAgICB0aGlzLmVtaXQoU2VydmVyLkRFU0NSSVBUSU9OX1JFQ0VJVkVELCBuZXcgc2VydmVyX2Rlc2NyaXB0aW9uXzEuU2VydmVyRGVzY3JpcHRpb24odGhpcy5kZXNjcmlwdGlvbi5ob3N0QWRkcmVzcywgZXZlbnQucmVwbHksIHtcbiAgICAgICAgICAgICAgICByb3VuZFRyaXBUaW1lOiBjYWxjdWxhdGVSb3VuZFRyaXBUaW1lKHRoaXMuZGVzY3JpcHRpb24ucm91bmRUcmlwVGltZSwgZXZlbnQuZHVyYXRpb24pXG4gICAgICAgICAgICB9KSk7XG4gICAgICAgICAgICBpZiAodGhpcy5zLnN0YXRlID09PSBjb21tb25fMS5TVEFURV9DT05ORUNUSU5HKSB7XG4gICAgICAgICAgICAgICAgc3RhdGVUcmFuc2l0aW9uKHRoaXMsIGNvbW1vbl8xLlNUQVRFX0NPTk5FQ1RFRCk7XG4gICAgICAgICAgICAgICAgdGhpcy5lbWl0KFNlcnZlci5DT05ORUNULCB0aGlzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfVxuICAgIGdldCBjbHVzdGVyVGltZSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMudG9wb2xvZ3kuY2x1c3RlclRpbWU7XG4gICAgfVxuICAgIHNldCBjbHVzdGVyVGltZShjbHVzdGVyVGltZSkge1xuICAgICAgICB0aGlzLnRvcG9sb2d5LmNsdXN0ZXJUaW1lID0gY2x1c3RlclRpbWU7XG4gICAgfVxuICAgIGdldCBkZXNjcmlwdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucy5kZXNjcmlwdGlvbjtcbiAgICB9XG4gICAgZ2V0IG5hbWUoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnMuZGVzY3JpcHRpb24uYWRkcmVzcztcbiAgICB9XG4gICAgZ2V0IGF1dG9FbmNyeXB0ZXIoKSB7XG4gICAgICAgIGlmICh0aGlzLnMub3B0aW9ucyAmJiB0aGlzLnMub3B0aW9ucy5hdXRvRW5jcnlwdGVyKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5zLm9wdGlvbnMuYXV0b0VuY3J5cHRlcjtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIGdldCBsb2FkQmFsYW5jZWQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnRvcG9sb2d5LmRlc2NyaXB0aW9uLnR5cGUgPT09IGNvbW1vbl8xLlRvcG9sb2d5VHlwZS5Mb2FkQmFsYW5jZWQ7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEluaXRpYXRlIHNlcnZlciBjb25uZWN0XG4gICAgICovXG4gICAgY29ubmVjdCgpIHtcbiAgICAgICAgaWYgKHRoaXMucy5zdGF0ZSAhPT0gY29tbW9uXzEuU1RBVEVfQ0xPU0VEKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgc3RhdGVUcmFuc2l0aW9uKHRoaXMsIGNvbW1vbl8xLlNUQVRFX0NPTk5FQ1RJTkcpO1xuICAgICAgICAvLyBJZiBpbiBsb2FkIGJhbGFuY2VyIG1vZGUgd2UgYXV0b21hdGljYWxseSBzZXQgdGhlIHNlcnZlciB0b1xuICAgICAgICAvLyBhIGxvYWQgYmFsYW5jZXIuIEl0IG5ldmVyIHRyYW5zaXRpb25zIG91dCBvZiB0aGlzIHN0YXRlIGFuZFxuICAgICAgICAvLyBoYXMgbm8gbW9uaXRvci5cbiAgICAgICAgaWYgKCF0aGlzLmxvYWRCYWxhbmNlZCkge1xuICAgICAgICAgICAgdGhpcy5tb25pdG9yPy5jb25uZWN0KCk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBzdGF0ZVRyYW5zaXRpb24odGhpcywgY29tbW9uXzEuU1RBVEVfQ09OTkVDVEVEKTtcbiAgICAgICAgICAgIHRoaXMuZW1pdChTZXJ2ZXIuQ09OTkVDVCwgdGhpcyk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgLyoqIERlc3Ryb3kgdGhlIHNlcnZlciBjb25uZWN0aW9uICovXG4gICAgZGVzdHJveShvcHRpb25zLCBjYWxsYmFjaykge1xuICAgICAgICBpZiAodHlwZW9mIG9wdGlvbnMgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgIGNhbGxiYWNrID0gb3B0aW9ucztcbiAgICAgICAgICAgIG9wdGlvbnMgPSB7IGZvcmNlOiBmYWxzZSB9O1xuICAgICAgICB9XG4gICAgICAgIG9wdGlvbnMgPSBPYmplY3QuYXNzaWduKHt9LCB7IGZvcmNlOiBmYWxzZSB9LCBvcHRpb25zKTtcbiAgICAgICAgaWYgKHRoaXMucy5zdGF0ZSA9PT0gY29tbW9uXzEuU1RBVEVfQ0xPU0VEKSB7XG4gICAgICAgICAgICBpZiAodHlwZW9mIGNhbGxiYWNrID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICAgICAgY2FsbGJhY2soKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBzdGF0ZVRyYW5zaXRpb24odGhpcywgY29tbW9uXzEuU1RBVEVfQ0xPU0lORyk7XG4gICAgICAgIGlmICghdGhpcy5sb2FkQmFsYW5jZWQpIHtcbiAgICAgICAgICAgIHRoaXMubW9uaXRvcj8uY2xvc2UoKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnBvb2wuY2xvc2Uob3B0aW9ucywgZXJyID0+IHtcbiAgICAgICAgICAgIHN0YXRlVHJhbnNpdGlvbih0aGlzLCBjb21tb25fMS5TVEFURV9DTE9TRUQpO1xuICAgICAgICAgICAgdGhpcy5lbWl0KCdjbG9zZWQnKTtcbiAgICAgICAgICAgIGlmICh0eXBlb2YgY2FsbGJhY2sgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgICAgICBjYWxsYmFjayhlcnIpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogSW1tZWRpYXRlbHkgc2NoZWR1bGUgbW9uaXRvcmluZyBvZiB0aGlzIHNlcnZlci4gSWYgdGhlcmUgYWxyZWFkeSBhbiBhdHRlbXB0IGJlaW5nIG1hZGVcbiAgICAgKiB0aGlzIHdpbGwgYmUgYSBuby1vcC5cbiAgICAgKi9cbiAgICByZXF1ZXN0Q2hlY2soKSB7XG4gICAgICAgIGlmICghdGhpcy5sb2FkQmFsYW5jZWQpIHtcbiAgICAgICAgICAgIHRoaXMubW9uaXRvcj8ucmVxdWVzdENoZWNrKCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgLyoqXG4gICAgICogRXhlY3V0ZSBhIGNvbW1hbmRcbiAgICAgKiBAaW50ZXJuYWxcbiAgICAgKi9cbiAgICBjb21tYW5kKG5zLCBjbWQsIG9wdGlvbnMsIGNhbGxiYWNrKSB7XG4gICAgICAgIGlmIChjYWxsYmFjayA9PSBudWxsKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgZXJyb3JfMS5Nb25nb0ludmFsaWRBcmd1bWVudEVycm9yKCdDYWxsYmFjayBtdXN0IGJlIHByb3ZpZGVkJyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG5zLmRiID09IG51bGwgfHwgdHlwZW9mIG5zID09PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgdGhyb3cgbmV3IGVycm9yXzEuTW9uZ29JbnZhbGlkQXJndW1lbnRFcnJvcignTmFtZXNwYWNlIG11c3Qgbm90IGJlIGEgc3RyaW5nJyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMucy5zdGF0ZSA9PT0gY29tbW9uXzEuU1RBVEVfQ0xPU0lORyB8fCB0aGlzLnMuc3RhdGUgPT09IGNvbW1vbl8xLlNUQVRFX0NMT1NFRCkge1xuICAgICAgICAgICAgY2FsbGJhY2sobmV3IGVycm9yXzEuTW9uZ29TZXJ2ZXJDbG9zZWRFcnJvcigpKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICAvLyBDbG9uZSB0aGUgb3B0aW9uc1xuICAgICAgICBjb25zdCBmaW5hbE9wdGlvbnMgPSBPYmplY3QuYXNzaWduKHt9LCBvcHRpb25zLCB7IHdpcmVQcm90b2NvbENvbW1hbmQ6IGZhbHNlIH0pO1xuICAgICAgICAvLyBUaGVyZSBhcmUgY2FzZXMgd2hlcmUgd2UgbmVlZCB0byBmbGFnIHRoZSByZWFkIHByZWZlcmVuY2Ugbm90IHRvIGdldCBzZW50IGluXG4gICAgICAgIC8vIHRoZSBjb21tYW5kLCBzdWNoIGFzIHByZS01LjAgc2VydmVycyBhdHRlbXB0aW5nIHRvIHBlcmZvcm0gYW4gYWdncmVnYXRlIHdyaXRlXG4gICAgICAgIC8vIHdpdGggYSBub24tcHJpbWFyeSByZWFkIHByZWZlcmVuY2UuIEluIHRoaXMgY2FzZSB0aGUgZWZmZWN0aXZlIHJlYWQgcHJlZmVyZW5jZVxuICAgICAgICAvLyAocHJpbWFyeSkgaXMgbm90IHRoZSBzYW1lIGFzIHRoZSBwcm92aWRlZCBhbmQgbXVzdCBiZSByZW1vdmVkIGNvbXBsZXRlbHkuXG4gICAgICAgIGlmIChmaW5hbE9wdGlvbnMub21pdFJlYWRQcmVmZXJlbmNlKSB7XG4gICAgICAgICAgICBkZWxldGUgZmluYWxPcHRpb25zLnJlYWRQcmVmZXJlbmNlO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHNlc3Npb24gPSBmaW5hbE9wdGlvbnMuc2Vzc2lvbjtcbiAgICAgICAgY29uc3QgY29ubiA9IHNlc3Npb24/LnBpbm5lZENvbm5lY3Rpb247XG4gICAgICAgIC8vIE5PVEU6IFRoaXMgaXMgYSBoYWNrISBXZSBjYW4ndCByZXRyaWV2ZSB0aGUgY29ubmVjdGlvbnMgdXNlZCBmb3IgZXhlY3V0aW5nIGFuIG9wZXJhdGlvblxuICAgICAgICAvLyAgICAgICAoYW5kIHByZXZlbnQgdGhlbSBmcm9tIGJlaW5nIGNoZWNrZWQgYmFjayBpbikgYXQgdGhlIHBvaW50IG9mIG9wZXJhdGlvbiBleGVjdXRpb24uXG4gICAgICAgIC8vICAgICAgIFRoaXMgc2hvdWxkIGJlIGNvbnNpZGVyZWQgYXMgcGFydCBvZiB0aGUgd29yayBmb3IgTk9ERS0yODgyXG4gICAgICAgIC8vIE5PVEU6XG4gICAgICAgIC8vICAgICAgIFdoZW4gaW5jcmVtZW50aW5nIG9wZXJhdGlvbiBjb3VudCwgaXQncyBpbXBvcnRhbnQgdGhhdCB3ZSBpbmNyZW1lbnQgaXQgYmVmb3JlIHdlXG4gICAgICAgIC8vICAgICAgIGF0dGVtcHQgdG8gY2hlY2sgb3V0IGEgY29ubmVjdGlvbiBmcm9tIHRoZSBwb29sLiAgVGhpcyBlbnN1cmVzIHRoYXQgb3BlcmF0aW9ucyB0aGF0XG4gICAgICAgIC8vICAgICAgIGFyZSB3YWl0aW5nIGZvciBhIGNvbm5lY3Rpb24gYXJlIGluY2x1ZGVkIGluIHRoZSBvcGVyYXRpb24gY291bnQuICBMb2FkIGJhbGFuY2VkXG4gICAgICAgIC8vICAgICAgIG1vZGUgd2lsbCBvbmx5IGV2ZXIgaGF2ZSBhIHNpbmdsZSBzZXJ2ZXIsIHNvIHRoZSBvcGVyYXRpb24gY291bnQgZG9lc24ndCBtYXR0ZXIuXG4gICAgICAgIC8vICAgICAgIEluY3JlbWVudGluZyB0aGUgb3BlcmF0aW9uIGNvdW50IGFib3ZlIHRoZSBsb2dpYyB0byBoYW5kbGUgbG9hZCBiYWxhbmNlZCBtb2RlIHdvdWxkXG4gICAgICAgIC8vICAgICAgIHJlcXVpcmUgc3BlY2lhbCBsb2dpYyB0byBkZWNyZW1lbnQgaXQgYWdhaW4sIG9yIHdvdWxkIGRvdWJsZSBpbmNyZW1lbnQgKHRoZSBsb2FkXG4gICAgICAgIC8vICAgICAgIGJhbGFuY2VkIGNvZGUgbWFrZXMgYSByZWN1cnNpdmUgY2FsbCkuICBJbnN0ZWFkLCB3ZSBpbmNyZW1lbnQgdGhlIGNvdW50IGFmdGVyIHRoaXNcbiAgICAgICAgLy8gICAgICAgY2hlY2suXG4gICAgICAgIGlmICh0aGlzLmxvYWRCYWxhbmNlZCAmJiBzZXNzaW9uICYmIGNvbm4gPT0gbnVsbCAmJiBpc1Bpbm5hYmxlQ29tbWFuZChjbWQsIHNlc3Npb24pKSB7XG4gICAgICAgICAgICB0aGlzLnBvb2wuY2hlY2tPdXQoKGVyciwgY2hlY2tlZE91dCkgPT4ge1xuICAgICAgICAgICAgICAgIGlmIChlcnIgfHwgY2hlY2tlZE91dCA9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChjYWxsYmFjaylcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBjYWxsYmFjayhlcnIpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHNlc3Npb24ucGluKGNoZWNrZWRPdXQpO1xuICAgICAgICAgICAgICAgIHRoaXMuY29tbWFuZChucywgY21kLCBmaW5hbE9wdGlvbnMsIGNhbGxiYWNrKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuaW5jcmVtZW50T3BlcmF0aW9uQ291bnQoKTtcbiAgICAgICAgdGhpcy5wb29sLndpdGhDb25uZWN0aW9uKGNvbm4sIChlcnIsIGNvbm4sIGNiKSA9PiB7XG4gICAgICAgICAgICBpZiAoZXJyIHx8ICFjb25uKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5kZWNyZW1lbnRPcGVyYXRpb25Db3VudCgpO1xuICAgICAgICAgICAgICAgIGlmICghZXJyKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBjYihuZXcgZXJyb3JfMS5Nb25nb1J1bnRpbWVFcnJvcignRmFpbGVkIHRvIGNyZWF0ZSBjb25uZWN0aW9uIHdpdGhvdXQgZXJyb3InKSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmICghKGVyciBpbnN0YW5jZW9mIGVycm9yc18xLlBvb2xDbGVhcmVkRXJyb3IpKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuaGFuZGxlRXJyb3IoZXJyKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIGNiKGVycik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25uLmNvbW1hbmQobnMsIGNtZCwgZmluYWxPcHRpb25zLCBtYWtlT3BlcmF0aW9uSGFuZGxlcih0aGlzLCBjb25uLCBjbWQsIGZpbmFsT3B0aW9ucywgKGVycm9yLCByZXNwb25zZSkgPT4ge1xuICAgICAgICAgICAgICAgIHRoaXMuZGVjcmVtZW50T3BlcmF0aW9uQ291bnQoKTtcbiAgICAgICAgICAgICAgICBjYihlcnJvciwgcmVzcG9uc2UpO1xuICAgICAgICAgICAgfSkpO1xuICAgICAgICB9LCBjYWxsYmFjayk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEhhbmRsZSBTREFNIGVycm9yXG4gICAgICogQGludGVybmFsXG4gICAgICovXG4gICAgaGFuZGxlRXJyb3IoZXJyb3IsIGNvbm5lY3Rpb24pIHtcbiAgICAgICAgaWYgKCEoZXJyb3IgaW5zdGFuY2VvZiBlcnJvcl8xLk1vbmdvRXJyb3IpKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgaXNTdGFsZUVycm9yID0gZXJyb3IuY29ubmVjdGlvbkdlbmVyYXRpb24gJiYgZXJyb3IuY29ubmVjdGlvbkdlbmVyYXRpb24gPCB0aGlzLnBvb2wuZ2VuZXJhdGlvbjtcbiAgICAgICAgaWYgKGlzU3RhbGVFcnJvcikge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGlzTmV0d29ya05vblRpbWVvdXRFcnJvciA9IGVycm9yIGluc3RhbmNlb2YgZXJyb3JfMS5Nb25nb05ldHdvcmtFcnJvciAmJiAhKGVycm9yIGluc3RhbmNlb2YgZXJyb3JfMS5Nb25nb05ldHdvcmtUaW1lb3V0RXJyb3IpO1xuICAgICAgICBjb25zdCBpc05ldHdvcmtUaW1lb3V0QmVmb3JlSGFuZHNoYWtlRXJyb3IgPSAoMCwgZXJyb3JfMS5pc05ldHdvcmtFcnJvckJlZm9yZUhhbmRzaGFrZSkoZXJyb3IpO1xuICAgICAgICBjb25zdCBpc0F1dGhIYW5kc2hha2VFcnJvciA9IGVycm9yLmhhc0Vycm9yTGFiZWwoZXJyb3JfMS5Nb25nb0Vycm9yTGFiZWwuSGFuZHNoYWtlRXJyb3IpO1xuICAgICAgICBpZiAoaXNOZXR3b3JrTm9uVGltZW91dEVycm9yIHx8IGlzTmV0d29ya1RpbWVvdXRCZWZvcmVIYW5kc2hha2VFcnJvciB8fCBpc0F1dGhIYW5kc2hha2VFcnJvcikge1xuICAgICAgICAgICAgLy8gSW4gbG9hZCBiYWxhbmNlZCBtb2RlIHdlIG5ldmVyIG1hcmsgdGhlIHNlcnZlciBhcyB1bmtub3duIGFuZCBhbHdheXNcbiAgICAgICAgICAgIC8vIGNsZWFyIGZvciB0aGUgc3BlY2lmaWMgc2VydmljZSBpZC5cbiAgICAgICAgICAgIGlmICghdGhpcy5sb2FkQmFsYW5jZWQpIHtcbiAgICAgICAgICAgICAgICBlcnJvci5hZGRFcnJvckxhYmVsKGVycm9yXzEuTW9uZ29FcnJvckxhYmVsLlJlc2V0UG9vbCk7XG4gICAgICAgICAgICAgICAgbWFya1NlcnZlclVua25vd24odGhpcywgZXJyb3IpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAoY29ubmVjdGlvbikge1xuICAgICAgICAgICAgICAgIHRoaXMucG9vbC5jbGVhcih7IHNlcnZpY2VJZDogY29ubmVjdGlvbi5zZXJ2aWNlSWQgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBpZiAoKDAsIGVycm9yXzEuaXNTREFNVW5yZWNvdmVyYWJsZUVycm9yKShlcnJvcikpIHtcbiAgICAgICAgICAgICAgICBpZiAoc2hvdWxkSGFuZGxlU3RhdGVDaGFuZ2VFcnJvcih0aGlzLCBlcnJvcikpIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3Qgc2hvdWxkQ2xlYXJQb29sID0gKDAsIHV0aWxzXzEubWF4V2lyZVZlcnNpb24pKHRoaXMpIDw9IDcgfHwgKDAsIGVycm9yXzEuaXNOb2RlU2h1dHRpbmdEb3duRXJyb3IpKGVycm9yKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMubG9hZEJhbGFuY2VkICYmIGNvbm5lY3Rpb24gJiYgc2hvdWxkQ2xlYXJQb29sKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnBvb2wuY2xlYXIoeyBzZXJ2aWNlSWQ6IGNvbm5lY3Rpb24uc2VydmljZUlkIH0pO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGlmICghdGhpcy5sb2FkQmFsYW5jZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChzaG91bGRDbGVhclBvb2wpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlcnJvci5hZGRFcnJvckxhYmVsKGVycm9yXzEuTW9uZ29FcnJvckxhYmVsLlJlc2V0UG9vbCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBtYXJrU2VydmVyVW5rbm93bih0aGlzLCBlcnJvcik7XG4gICAgICAgICAgICAgICAgICAgICAgICBwcm9jZXNzLm5leHRUaWNrKCgpID0+IHRoaXMucmVxdWVzdENoZWNrKCkpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIC8qKlxuICAgICAqIERlY3JlbWVudCB0aGUgb3BlcmF0aW9uIGNvdW50LCByZXR1cm5pbmcgdGhlIG5ldyBjb3VudC5cbiAgICAgKi9cbiAgICBkZWNyZW1lbnRPcGVyYXRpb25Db3VudCgpIHtcbiAgICAgICAgcmV0dXJuICh0aGlzLnMub3BlcmF0aW9uQ291bnQgLT0gMSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEluY3JlbWVudCB0aGUgb3BlcmF0aW9uIGNvdW50LCByZXR1cm5pbmcgdGhlIG5ldyBjb3VudC5cbiAgICAgKi9cbiAgICBpbmNyZW1lbnRPcGVyYXRpb25Db3VudCgpIHtcbiAgICAgICAgcmV0dXJuICh0aGlzLnMub3BlcmF0aW9uQ291bnQgKz0gMSk7XG4gICAgfVxufVxuLyoqIEBldmVudCAqL1xuU2VydmVyLlNFUlZFUl9IRUFSVEJFQVRfU1RBUlRFRCA9IGNvbnN0YW50c18xLlNFUlZFUl9IRUFSVEJFQVRfU1RBUlRFRDtcbi8qKiBAZXZlbnQgKi9cblNlcnZlci5TRVJWRVJfSEVBUlRCRUFUX1NVQ0NFRURFRCA9IGNvbnN0YW50c18xLlNFUlZFUl9IRUFSVEJFQVRfU1VDQ0VFREVEO1xuLyoqIEBldmVudCAqL1xuU2VydmVyLlNFUlZFUl9IRUFSVEJFQVRfRkFJTEVEID0gY29uc3RhbnRzXzEuU0VSVkVSX0hFQVJUQkVBVF9GQUlMRUQ7XG4vKiogQGV2ZW50ICovXG5TZXJ2ZXIuQ09OTkVDVCA9IGNvbnN0YW50c18xLkNPTk5FQ1Q7XG4vKiogQGV2ZW50ICovXG5TZXJ2ZXIuREVTQ1JJUFRJT05fUkVDRUlWRUQgPSBjb25zdGFudHNfMS5ERVNDUklQVElPTl9SRUNFSVZFRDtcbi8qKiBAZXZlbnQgKi9cblNlcnZlci5DTE9TRUQgPSBjb25zdGFudHNfMS5DTE9TRUQ7XG4vKiogQGV2ZW50ICovXG5TZXJ2ZXIuRU5ERUQgPSBjb25zdGFudHNfMS5FTkRFRDtcbmV4cG9ydHMuU2VydmVyID0gU2VydmVyO1xuZnVuY3Rpb24gY2FsY3VsYXRlUm91bmRUcmlwVGltZShvbGRSdHQsIGR1cmF0aW9uKSB7XG4gICAgaWYgKG9sZFJ0dCA9PT0gLTEpIHtcbiAgICAgICAgcmV0dXJuIGR1cmF0aW9uO1xuICAgIH1cbiAgICBjb25zdCBhbHBoYSA9IDAuMjtcbiAgICByZXR1cm4gYWxwaGEgKiBkdXJhdGlvbiArICgxIC0gYWxwaGEpICogb2xkUnR0O1xufVxuZnVuY3Rpb24gbWFya1NlcnZlclVua25vd24oc2VydmVyLCBlcnJvcikge1xuICAgIC8vIExvYWQgYmFsYW5jZXIgc2VydmVycyBjYW4gbmV2ZXIgYmUgbWFya2VkIHVua25vd24uXG4gICAgaWYgKHNlcnZlci5sb2FkQmFsYW5jZWQpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBpZiAoZXJyb3IgaW5zdGFuY2VvZiBlcnJvcl8xLk1vbmdvTmV0d29ya0Vycm9yICYmICEoZXJyb3IgaW5zdGFuY2VvZiBlcnJvcl8xLk1vbmdvTmV0d29ya1RpbWVvdXRFcnJvcikpIHtcbiAgICAgICAgc2VydmVyLm1vbml0b3I/LnJlc2V0KCk7XG4gICAgfVxuICAgIHNlcnZlci5lbWl0KFNlcnZlci5ERVNDUklQVElPTl9SRUNFSVZFRCwgbmV3IHNlcnZlcl9kZXNjcmlwdGlvbl8xLlNlcnZlckRlc2NyaXB0aW9uKHNlcnZlci5kZXNjcmlwdGlvbi5ob3N0QWRkcmVzcywgdW5kZWZpbmVkLCB7IGVycm9yIH0pKTtcbn1cbmZ1bmN0aW9uIGlzUGlubmFibGVDb21tYW5kKGNtZCwgc2Vzc2lvbikge1xuICAgIGlmIChzZXNzaW9uKSB7XG4gICAgICAgIHJldHVybiAoc2Vzc2lvbi5pblRyYW5zYWN0aW9uKCkgfHxcbiAgICAgICAgICAgICdhZ2dyZWdhdGUnIGluIGNtZCB8fFxuICAgICAgICAgICAgJ2ZpbmQnIGluIGNtZCB8fFxuICAgICAgICAgICAgJ2dldE1vcmUnIGluIGNtZCB8fFxuICAgICAgICAgICAgJ2xpc3RDb2xsZWN0aW9ucycgaW4gY21kIHx8XG4gICAgICAgICAgICAnbGlzdEluZGV4ZXMnIGluIGNtZCk7XG4gICAgfVxuICAgIHJldHVybiBmYWxzZTtcbn1cbmZ1bmN0aW9uIGNvbm5lY3Rpb25Jc1N0YWxlKHBvb2wsIGNvbm5lY3Rpb24pIHtcbiAgICBpZiAoY29ubmVjdGlvbi5zZXJ2aWNlSWQpIHtcbiAgICAgICAgcmV0dXJuIChjb25uZWN0aW9uLmdlbmVyYXRpb24gIT09IHBvb2wuc2VydmljZUdlbmVyYXRpb25zLmdldChjb25uZWN0aW9uLnNlcnZpY2VJZC50b0hleFN0cmluZygpKSk7XG4gICAgfVxuICAgIHJldHVybiBjb25uZWN0aW9uLmdlbmVyYXRpb24gIT09IHBvb2wuZ2VuZXJhdGlvbjtcbn1cbmZ1bmN0aW9uIHNob3VsZEhhbmRsZVN0YXRlQ2hhbmdlRXJyb3Ioc2VydmVyLCBlcnIpIHtcbiAgICBjb25zdCBldHYgPSBlcnIudG9wb2xvZ3lWZXJzaW9uO1xuICAgIGNvbnN0IHN0diA9IHNlcnZlci5kZXNjcmlwdGlvbi50b3BvbG9neVZlcnNpb247XG4gICAgcmV0dXJuICgwLCBzZXJ2ZXJfZGVzY3JpcHRpb25fMS5jb21wYXJlVG9wb2xvZ3lWZXJzaW9uKShzdHYsIGV0dikgPCAwO1xufVxuZnVuY3Rpb24gaW5BY3RpdmVUcmFuc2FjdGlvbihzZXNzaW9uLCBjbWQpIHtcbiAgICByZXR1cm4gc2Vzc2lvbiAmJiBzZXNzaW9uLmluVHJhbnNhY3Rpb24oKSAmJiAhKDAsIHRyYW5zYWN0aW9uc18xLmlzVHJhbnNhY3Rpb25Db21tYW5kKShjbWQpO1xufVxuLyoqIHRoaXMgY2hlY2tzIHRoZSByZXRyeVdyaXRlcyBvcHRpb24gcGFzc2VkIGRvd24gZnJvbSB0aGUgY2xpZW50IG9wdGlvbnMsIGl0XG4gKiBkb2VzIG5vdCBjaGVjayBpZiB0aGUgc2VydmVyIHN1cHBvcnRzIHJldHJ5YWJsZSB3cml0ZXMgKi9cbmZ1bmN0aW9uIGlzUmV0cnlhYmxlV3JpdGVzRW5hYmxlZCh0b3BvbG9neSkge1xuICAgIHJldHVybiB0b3BvbG9neS5zLm9wdGlvbnMucmV0cnlXcml0ZXMgIT09IGZhbHNlO1xufVxuZnVuY3Rpb24gbWFrZU9wZXJhdGlvbkhhbmRsZXIoc2VydmVyLCBjb25uZWN0aW9uLCBjbWQsIG9wdGlvbnMsIGNhbGxiYWNrKSB7XG4gICAgY29uc3Qgc2Vzc2lvbiA9IG9wdGlvbnM/LnNlc3Npb247XG4gICAgcmV0dXJuIGZ1bmN0aW9uIGhhbmRsZU9wZXJhdGlvblJlc3VsdChlcnJvciwgcmVzdWx0KSB7XG4gICAgICAgIC8vIFdlIHNob3VsZCBub3Qgc3dhbGxvdyBhbiBlcnJvciBpZiBpdCBpcyBwcmVzZW50LlxuICAgICAgICBpZiAoZXJyb3IgPT0gbnVsbCAmJiByZXN1bHQgIT0gbnVsbCkge1xuICAgICAgICAgICAgcmV0dXJuIGNhbGxiYWNrKHVuZGVmaW5lZCwgcmVzdWx0KTtcbiAgICAgICAgfVxuICAgICAgICBpZiAob3B0aW9ucyAhPSBudWxsICYmICdub1Jlc3BvbnNlJyBpbiBvcHRpb25zICYmIG9wdGlvbnMubm9SZXNwb25zZSA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgcmV0dXJuIGNhbGxiYWNrKHVuZGVmaW5lZCwgbnVsbCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFlcnJvcikge1xuICAgICAgICAgICAgcmV0dXJuIGNhbGxiYWNrKG5ldyBlcnJvcl8xLk1vbmdvVW5leHBlY3RlZFNlcnZlclJlc3BvbnNlRXJyb3IoJ0VtcHR5IHJlc3BvbnNlIHdpdGggbm8gZXJyb3InKSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCEoZXJyb3IgaW5zdGFuY2VvZiBlcnJvcl8xLk1vbmdvRXJyb3IpKSB7XG4gICAgICAgICAgICAvLyBOb2RlLmpzIG9yIHNvbWUgb3RoZXIgZXJyb3Igd2UgaGF2ZSBub3Qgc3BlY2lhbCBoYW5kbGluZyBmb3JcbiAgICAgICAgICAgIHJldHVybiBjYWxsYmFjayhlcnJvcik7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGNvbm5lY3Rpb25Jc1N0YWxlKHNlcnZlci5wb29sLCBjb25uZWN0aW9uKSkge1xuICAgICAgICAgICAgcmV0dXJuIGNhbGxiYWNrKGVycm9yKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoZXJyb3IgaW5zdGFuY2VvZiBlcnJvcl8xLk1vbmdvTmV0d29ya0Vycm9yKSB7XG4gICAgICAgICAgICBpZiAoc2Vzc2lvbiAmJiAhc2Vzc2lvbi5oYXNFbmRlZCAmJiBzZXNzaW9uLnNlcnZlclNlc3Npb24pIHtcbiAgICAgICAgICAgICAgICBzZXNzaW9uLnNlcnZlclNlc3Npb24uaXNEaXJ0eSA9IHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBpbkFjdGl2ZVRyYW5zYWN0aW9uIGNoZWNrIGhhbmRsZXMgY29tbWl0IGFuZCBhYm9ydC5cbiAgICAgICAgICAgIGlmIChpbkFjdGl2ZVRyYW5zYWN0aW9uKHNlc3Npb24sIGNtZCkgJiZcbiAgICAgICAgICAgICAgICAhZXJyb3IuaGFzRXJyb3JMYWJlbChlcnJvcl8xLk1vbmdvRXJyb3JMYWJlbC5UcmFuc2llbnRUcmFuc2FjdGlvbkVycm9yKSkge1xuICAgICAgICAgICAgICAgIGVycm9yLmFkZEVycm9yTGFiZWwoZXJyb3JfMS5Nb25nb0Vycm9yTGFiZWwuVHJhbnNpZW50VHJhbnNhY3Rpb25FcnJvcik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoKGlzUmV0cnlhYmxlV3JpdGVzRW5hYmxlZChzZXJ2ZXIudG9wb2xvZ3kpIHx8ICgwLCB0cmFuc2FjdGlvbnNfMS5pc1RyYW5zYWN0aW9uQ29tbWFuZCkoY21kKSkgJiZcbiAgICAgICAgICAgICAgICAoMCwgdXRpbHNfMS5zdXBwb3J0c1JldHJ5YWJsZVdyaXRlcykoc2VydmVyKSAmJlxuICAgICAgICAgICAgICAgICFpbkFjdGl2ZVRyYW5zYWN0aW9uKHNlc3Npb24sIGNtZCkpIHtcbiAgICAgICAgICAgICAgICBlcnJvci5hZGRFcnJvckxhYmVsKGVycm9yXzEuTW9uZ29FcnJvckxhYmVsLlJldHJ5YWJsZVdyaXRlRXJyb3IpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgaWYgKChpc1JldHJ5YWJsZVdyaXRlc0VuYWJsZWQoc2VydmVyLnRvcG9sb2d5KSB8fCAoMCwgdHJhbnNhY3Rpb25zXzEuaXNUcmFuc2FjdGlvbkNvbW1hbmQpKGNtZCkpICYmXG4gICAgICAgICAgICAgICAgKDAsIGVycm9yXzEubmVlZHNSZXRyeWFibGVXcml0ZUxhYmVsKShlcnJvciwgKDAsIHV0aWxzXzEubWF4V2lyZVZlcnNpb24pKHNlcnZlcikpICYmXG4gICAgICAgICAgICAgICAgIWluQWN0aXZlVHJhbnNhY3Rpb24oc2Vzc2lvbiwgY21kKSkge1xuICAgICAgICAgICAgICAgIGVycm9yLmFkZEVycm9yTGFiZWwoZXJyb3JfMS5Nb25nb0Vycm9yTGFiZWwuUmV0cnlhYmxlV3JpdGVFcnJvcik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHNlc3Npb24gJiZcbiAgICAgICAgICAgIHNlc3Npb24uaXNQaW5uZWQgJiZcbiAgICAgICAgICAgIGVycm9yLmhhc0Vycm9yTGFiZWwoZXJyb3JfMS5Nb25nb0Vycm9yTGFiZWwuVHJhbnNpZW50VHJhbnNhY3Rpb25FcnJvcikpIHtcbiAgICAgICAgICAgIHNlc3Npb24udW5waW4oeyBmb3JjZTogdHJ1ZSB9KTtcbiAgICAgICAgfVxuICAgICAgICBzZXJ2ZXIuaGFuZGxlRXJyb3IoZXJyb3IsIGNvbm5lY3Rpb24pO1xuICAgICAgICByZXR1cm4gY2FsbGJhY2soZXJyb3IpO1xuICAgIH07XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1zZXJ2ZXIuanMubWFwIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiU2VydmVyIiwidXRpbF8xIiwicmVxdWlyZSIsImNvbm5lY3Rpb25fMSIsImNvbm5lY3Rpb25fcG9vbF8xIiwiZXJyb3JzXzEiLCJjb25zdGFudHNfMSIsImVycm9yXzEiLCJtb25nb190eXBlc18xIiwidHJhbnNhY3Rpb25zXzEiLCJ1dGlsc18xIiwiY29tbW9uXzEiLCJtb25pdG9yXzEiLCJzZXJ2ZXJfZGVzY3JpcHRpb25fMSIsInN0YXRlVHJhbnNpdGlvbiIsIm1ha2VTdGF0ZU1hY2hpbmUiLCJTVEFURV9DTE9TRUQiLCJTVEFURV9DT05ORUNUSU5HIiwiU1RBVEVfQ0xPU0lORyIsIlNUQVRFX0NPTk5FQ1RFRCIsIlR5cGVkRXZlbnRFbWl0dGVyIiwiY29uc3RydWN0b3IiLCJ0b3BvbG9neSIsImRlc2NyaXB0aW9uIiwib3B0aW9ucyIsImNvbW1hbmRBc3luYyIsInByb21pc2lmeSIsIm5zIiwiY21kIiwiY2FsbGJhY2siLCJjb21tYW5kIiwic2VydmVyQXBpIiwicG9vbE9wdGlvbnMiLCJob3N0QWRkcmVzcyIsInBvb2wiLCJDb25uZWN0aW9uUG9vbCIsInMiLCJzdGF0ZSIsIm9wZXJhdGlvbkNvdW50IiwiZXZlbnQiLCJDTUFQX0VWRU5UUyIsIkFQTV9FVkVOVFMiLCJvbiIsImUiLCJlbWl0IiwiQ29ubmVjdGlvbiIsIkNMVVNURVJfVElNRV9SRUNFSVZFRCIsImNsdXN0ZXJUaW1lIiwibG9hZEJhbGFuY2VkIiwibW9uaXRvciIsIk1vbml0b3IiLCJIRUFSVEJFQVRfRVZFTlRTIiwiZXJyb3IiLCJtYXJrU2VydmVyVW5rbm93biIsIlNFUlZFUl9IRUFSVEJFQVRfU1VDQ0VFREVEIiwiREVTQ1JJUFRJT05fUkVDRUlWRUQiLCJTZXJ2ZXJEZXNjcmlwdGlvbiIsInJlcGx5Iiwicm91bmRUcmlwVGltZSIsImNhbGN1bGF0ZVJvdW5kVHJpcFRpbWUiLCJkdXJhdGlvbiIsIkNPTk5FQ1QiLCJuYW1lIiwiYWRkcmVzcyIsImF1dG9FbmNyeXB0ZXIiLCJ0eXBlIiwiVG9wb2xvZ3lUeXBlIiwiTG9hZEJhbGFuY2VkIiwiY29ubmVjdCIsImRlc3Ryb3kiLCJmb3JjZSIsImFzc2lnbiIsImNsb3NlIiwiZXJyIiwicmVxdWVzdENoZWNrIiwiTW9uZ29JbnZhbGlkQXJndW1lbnRFcnJvciIsImRiIiwiTW9uZ29TZXJ2ZXJDbG9zZWRFcnJvciIsImZpbmFsT3B0aW9ucyIsIndpcmVQcm90b2NvbENvbW1hbmQiLCJvbWl0UmVhZFByZWZlcmVuY2UiLCJyZWFkUHJlZmVyZW5jZSIsInNlc3Npb24iLCJjb25uIiwicGlubmVkQ29ubmVjdGlvbiIsImlzUGlubmFibGVDb21tYW5kIiwiY2hlY2tPdXQiLCJjaGVja2VkT3V0IiwicGluIiwiaW5jcmVtZW50T3BlcmF0aW9uQ291bnQiLCJ3aXRoQ29ubmVjdGlvbiIsImNiIiwiZGVjcmVtZW50T3BlcmF0aW9uQ291bnQiLCJNb25nb1J1bnRpbWVFcnJvciIsIlBvb2xDbGVhcmVkRXJyb3IiLCJoYW5kbGVFcnJvciIsIm1ha2VPcGVyYXRpb25IYW5kbGVyIiwicmVzcG9uc2UiLCJjb25uZWN0aW9uIiwiTW9uZ29FcnJvciIsImlzU3RhbGVFcnJvciIsImNvbm5lY3Rpb25HZW5lcmF0aW9uIiwiZ2VuZXJhdGlvbiIsImlzTmV0d29ya05vblRpbWVvdXRFcnJvciIsIk1vbmdvTmV0d29ya0Vycm9yIiwiTW9uZ29OZXR3b3JrVGltZW91dEVycm9yIiwiaXNOZXR3b3JrVGltZW91dEJlZm9yZUhhbmRzaGFrZUVycm9yIiwiaXNOZXR3b3JrRXJyb3JCZWZvcmVIYW5kc2hha2UiLCJpc0F1dGhIYW5kc2hha2VFcnJvciIsImhhc0Vycm9yTGFiZWwiLCJNb25nb0Vycm9yTGFiZWwiLCJIYW5kc2hha2VFcnJvciIsImFkZEVycm9yTGFiZWwiLCJSZXNldFBvb2wiLCJjbGVhciIsInNlcnZpY2VJZCIsImlzU0RBTVVucmVjb3ZlcmFibGVFcnJvciIsInNob3VsZEhhbmRsZVN0YXRlQ2hhbmdlRXJyb3IiLCJzaG91bGRDbGVhclBvb2wiLCJtYXhXaXJlVmVyc2lvbiIsImlzTm9kZVNodXR0aW5nRG93bkVycm9yIiwicHJvY2VzcyIsIm5leHRUaWNrIiwiU0VSVkVSX0hFQVJUQkVBVF9TVEFSVEVEIiwiU0VSVkVSX0hFQVJUQkVBVF9GQUlMRUQiLCJDTE9TRUQiLCJFTkRFRCIsIm9sZFJ0dCIsImFscGhhIiwic2VydmVyIiwicmVzZXQiLCJ1bmRlZmluZWQiLCJpblRyYW5zYWN0aW9uIiwiY29ubmVjdGlvbklzU3RhbGUiLCJzZXJ2aWNlR2VuZXJhdGlvbnMiLCJnZXQiLCJ0b0hleFN0cmluZyIsImV0diIsInRvcG9sb2d5VmVyc2lvbiIsInN0diIsImNvbXBhcmVUb3BvbG9neVZlcnNpb24iLCJpbkFjdGl2ZVRyYW5zYWN0aW9uIiwiaXNUcmFuc2FjdGlvbkNvbW1hbmQiLCJpc1JldHJ5YWJsZVdyaXRlc0VuYWJsZWQiLCJyZXRyeVdyaXRlcyIsImhhbmRsZU9wZXJhdGlvblJlc3VsdCIsInJlc3VsdCIsIm5vUmVzcG9uc2UiLCJNb25nb1VuZXhwZWN0ZWRTZXJ2ZXJSZXNwb25zZUVycm9yIiwiaGFzRW5kZWQiLCJzZXJ2ZXJTZXNzaW9uIiwiaXNEaXJ0eSIsIlRyYW5zaWVudFRyYW5zYWN0aW9uRXJyb3IiLCJzdXBwb3J0c1JldHJ5YWJsZVdyaXRlcyIsIlJldHJ5YWJsZVdyaXRlRXJyb3IiLCJuZWVkc1JldHJ5YWJsZVdyaXRlTGFiZWwiLCJpc1Bpbm5lZCIsInVucGluIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongodb/lib/sdam/server.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongodb/lib/sdam/server_description.js":
/*!*************************************************************!*\
  !*** ./node_modules/mongodb/lib/sdam/server_description.js ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.compareTopologyVersion = exports.parseServerType = exports.ServerDescription = void 0;\nconst bson_1 = __webpack_require__(/*! ../bson */ \"(ssr)/./node_modules/mongodb/lib/bson.js\");\nconst error_1 = __webpack_require__(/*! ../error */ \"(ssr)/./node_modules/mongodb/lib/error.js\");\nconst utils_1 = __webpack_require__(/*! ../utils */ \"(ssr)/./node_modules/mongodb/lib/utils.js\");\nconst common_1 = __webpack_require__(/*! ./common */ \"(ssr)/./node_modules/mongodb/lib/sdam/common.js\");\nconst WRITABLE_SERVER_TYPES = new Set([\n    common_1.ServerType.RSPrimary,\n    common_1.ServerType.Standalone,\n    common_1.ServerType.Mongos,\n    common_1.ServerType.LoadBalancer\n]);\nconst DATA_BEARING_SERVER_TYPES = new Set([\n    common_1.ServerType.RSPrimary,\n    common_1.ServerType.RSSecondary,\n    common_1.ServerType.Mongos,\n    common_1.ServerType.Standalone,\n    common_1.ServerType.LoadBalancer\n]);\n/**\n * The client's view of a single server, based on the most recent hello outcome.\n *\n * Internal type, not meant to be directly instantiated\n * @public\n */ class ServerDescription {\n    /**\n     * Create a ServerDescription\n     * @internal\n     *\n     * @param address - The address of the server\n     * @param hello - An optional hello response for this server\n     */ constructor(address, hello, options = {}){\n        if (address == null || address === \"\") {\n            throw new error_1.MongoRuntimeError(\"ServerDescription must be provided with a non-empty address\");\n        }\n        this.address = typeof address === \"string\" ? utils_1.HostAddress.fromString(address).toString() // Use HostAddress to normalize\n         : address.toString();\n        this.type = parseServerType(hello, options);\n        this.hosts = hello?.hosts?.map((host)=>host.toLowerCase()) ?? [];\n        this.passives = hello?.passives?.map((host)=>host.toLowerCase()) ?? [];\n        this.arbiters = hello?.arbiters?.map((host)=>host.toLowerCase()) ?? [];\n        this.tags = hello?.tags ?? {};\n        this.minWireVersion = hello?.minWireVersion ?? 0;\n        this.maxWireVersion = hello?.maxWireVersion ?? 0;\n        this.roundTripTime = options?.roundTripTime ?? -1;\n        this.lastUpdateTime = (0, utils_1.now)();\n        this.lastWriteDate = hello?.lastWrite?.lastWriteDate ?? 0;\n        this.error = options.error ?? null;\n        // TODO(NODE-2674): Preserve int64 sent from MongoDB\n        this.topologyVersion = this.error?.topologyVersion ?? hello?.topologyVersion ?? null;\n        this.setName = hello?.setName ?? null;\n        this.setVersion = hello?.setVersion ?? null;\n        this.electionId = hello?.electionId ?? null;\n        this.logicalSessionTimeoutMinutes = hello?.logicalSessionTimeoutMinutes ?? null;\n        this.primary = hello?.primary ?? null;\n        this.me = hello?.me?.toLowerCase() ?? null;\n        this.$clusterTime = hello?.$clusterTime ?? null;\n    }\n    get hostAddress() {\n        return utils_1.HostAddress.fromString(this.address);\n    }\n    get allHosts() {\n        return this.hosts.concat(this.arbiters).concat(this.passives);\n    }\n    /** Is this server available for reads*/ get isReadable() {\n        return this.type === common_1.ServerType.RSSecondary || this.isWritable;\n    }\n    /** Is this server data bearing */ get isDataBearing() {\n        return DATA_BEARING_SERVER_TYPES.has(this.type);\n    }\n    /** Is this server available for writes */ get isWritable() {\n        return WRITABLE_SERVER_TYPES.has(this.type);\n    }\n    get host() {\n        const chopLength = `:${this.port}`.length;\n        return this.address.slice(0, -chopLength);\n    }\n    get port() {\n        const port = this.address.split(\":\").pop();\n        return port ? Number.parseInt(port, 10) : 27017;\n    }\n    /**\n     * Determines if another `ServerDescription` is equal to this one per the rules defined\n     * in the {@link https://github.com/mongodb/specifications/blob/master/source/server-discovery-and-monitoring/server-discovery-and-monitoring.rst#serverdescription|SDAM spec}\n     */ equals(other) {\n        // Despite using the comparator that would determine a nullish topologyVersion as greater than\n        // for equality we should only always perform direct equality comparison\n        const topologyVersionsEqual = this.topologyVersion === other?.topologyVersion || compareTopologyVersion(this.topologyVersion, other?.topologyVersion) === 0;\n        const electionIdsEqual = this.electionId != null && other?.electionId != null ? (0, utils_1.compareObjectId)(this.electionId, other.electionId) === 0 : this.electionId === other?.electionId;\n        return other != null && (0, utils_1.errorStrictEqual)(this.error, other.error) && this.type === other.type && this.minWireVersion === other.minWireVersion && (0, utils_1.arrayStrictEqual)(this.hosts, other.hosts) && tagsStrictEqual(this.tags, other.tags) && this.setName === other.setName && this.setVersion === other.setVersion && electionIdsEqual && this.primary === other.primary && this.logicalSessionTimeoutMinutes === other.logicalSessionTimeoutMinutes && topologyVersionsEqual;\n    }\n}\nexports.ServerDescription = ServerDescription;\n// Parses a `hello` message and determines the server type\nfunction parseServerType(hello, options) {\n    if (options?.loadBalanced) {\n        return common_1.ServerType.LoadBalancer;\n    }\n    if (!hello || !hello.ok) {\n        return common_1.ServerType.Unknown;\n    }\n    if (hello.isreplicaset) {\n        return common_1.ServerType.RSGhost;\n    }\n    if (hello.msg && hello.msg === \"isdbgrid\") {\n        return common_1.ServerType.Mongos;\n    }\n    if (hello.setName) {\n        if (hello.hidden) {\n            return common_1.ServerType.RSOther;\n        } else if (hello.isWritablePrimary) {\n            return common_1.ServerType.RSPrimary;\n        } else if (hello.secondary) {\n            return common_1.ServerType.RSSecondary;\n        } else if (hello.arbiterOnly) {\n            return common_1.ServerType.RSArbiter;\n        } else {\n            return common_1.ServerType.RSOther;\n        }\n    }\n    return common_1.ServerType.Standalone;\n}\nexports.parseServerType = parseServerType;\nfunction tagsStrictEqual(tags, tags2) {\n    const tagsKeys = Object.keys(tags);\n    const tags2Keys = Object.keys(tags2);\n    return tagsKeys.length === tags2Keys.length && tagsKeys.every((key)=>tags2[key] === tags[key]);\n}\n/**\n * Compares two topology versions.\n *\n * 1. If the response topologyVersion is unset or the ServerDescription's\n *    topologyVersion is null, the client MUST assume the response is more recent.\n * 1. If the response's topologyVersion.processId is not equal to the\n *    ServerDescription's, the client MUST assume the response is more recent.\n * 1. If the response's topologyVersion.processId is equal to the\n *    ServerDescription's, the client MUST use the counter field to determine\n *    which topologyVersion is more recent.\n *\n * ```ts\n * currentTv <   newTv === -1\n * currentTv === newTv === 0\n * currentTv >   newTv === 1\n * ```\n */ function compareTopologyVersion(currentTv, newTv) {\n    if (currentTv == null || newTv == null) {\n        return -1;\n    }\n    if (!currentTv.processId.equals(newTv.processId)) {\n        return -1;\n    }\n    // TODO(NODE-2674): Preserve int64 sent from MongoDB\n    const currentCounter = bson_1.Long.isLong(currentTv.counter) ? currentTv.counter : bson_1.Long.fromNumber(currentTv.counter);\n    const newCounter = bson_1.Long.isLong(newTv.counter) ? newTv.counter : bson_1.Long.fromNumber(newTv.counter);\n    return currentCounter.compare(newCounter);\n}\nexports.compareTopologyVersion = compareTopologyVersion; //# sourceMappingURL=server_description.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbW9uZ29kYi9saWIvc2RhbS9zZXJ2ZXJfZGVzY3JpcHRpb24uanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYkEsOENBQTZDO0lBQUVHLE9BQU87QUFBSyxDQUFDLEVBQUM7QUFDN0RELDhCQUE4QixHQUFHQSx1QkFBdUIsR0FBR0EseUJBQXlCLEdBQUcsS0FBSztBQUM1RixNQUFNSyxTQUFTQyxtQkFBT0EsQ0FBQyx5REFBUztBQUNoQyxNQUFNQyxVQUFVRCxtQkFBT0EsQ0FBQywyREFBVTtBQUNsQyxNQUFNRSxVQUFVRixtQkFBT0EsQ0FBQywyREFBVTtBQUNsQyxNQUFNRyxXQUFXSCxtQkFBT0EsQ0FBQyxpRUFBVTtBQUNuQyxNQUFNSSx3QkFBd0IsSUFBSUMsSUFBSTtJQUNsQ0YsU0FBU0csVUFBVSxDQUFDQyxTQUFTO0lBQzdCSixTQUFTRyxVQUFVLENBQUNFLFVBQVU7SUFDOUJMLFNBQVNHLFVBQVUsQ0FBQ0csTUFBTTtJQUMxQk4sU0FBU0csVUFBVSxDQUFDSSxZQUFZO0NBQ25DO0FBQ0QsTUFBTUMsNEJBQTRCLElBQUlOLElBQUk7SUFDdENGLFNBQVNHLFVBQVUsQ0FBQ0MsU0FBUztJQUM3QkosU0FBU0csVUFBVSxDQUFDTSxXQUFXO0lBQy9CVCxTQUFTRyxVQUFVLENBQUNHLE1BQU07SUFDMUJOLFNBQVNHLFVBQVUsQ0FBQ0UsVUFBVTtJQUM5QkwsU0FBU0csVUFBVSxDQUFDSSxZQUFZO0NBQ25DO0FBQ0Q7Ozs7O0NBS0MsR0FDRCxNQUFNWjtJQUNGOzs7Ozs7S0FNQyxHQUNEZSxZQUFZQyxPQUFPLEVBQUVDLEtBQUssRUFBRUMsVUFBVSxDQUFDLENBQUMsQ0FBRTtRQUN0QyxJQUFJRixXQUFXLFFBQVFBLFlBQVksSUFBSTtZQUNuQyxNQUFNLElBQUliLFFBQVFnQixpQkFBaUIsQ0FBQztRQUN4QztRQUNBLElBQUksQ0FBQ0gsT0FBTyxHQUNSLE9BQU9BLFlBQVksV0FDYlosUUFBUWdCLFdBQVcsQ0FBQ0MsVUFBVSxDQUFDTCxTQUFTTSxRQUFRLEdBQUcsK0JBQStCO1dBQ2xGTixRQUFRTSxRQUFRO1FBQzFCLElBQUksQ0FBQ0MsSUFBSSxHQUFHeEIsZ0JBQWdCa0IsT0FBT0M7UUFDbkMsSUFBSSxDQUFDTSxLQUFLLEdBQUdQLE9BQU9PLE9BQU9DLElBQUksQ0FBQ0MsT0FBU0EsS0FBS0MsV0FBVyxPQUFPLEVBQUU7UUFDbEUsSUFBSSxDQUFDQyxRQUFRLEdBQUdYLE9BQU9XLFVBQVVILElBQUksQ0FBQ0MsT0FBU0EsS0FBS0MsV0FBVyxPQUFPLEVBQUU7UUFDeEUsSUFBSSxDQUFDRSxRQUFRLEdBQUdaLE9BQU9ZLFVBQVVKLElBQUksQ0FBQ0MsT0FBU0EsS0FBS0MsV0FBVyxPQUFPLEVBQUU7UUFDeEUsSUFBSSxDQUFDRyxJQUFJLEdBQUdiLE9BQU9hLFFBQVEsQ0FBQztRQUM1QixJQUFJLENBQUNDLGNBQWMsR0FBR2QsT0FBT2Msa0JBQWtCO1FBQy9DLElBQUksQ0FBQ0MsY0FBYyxHQUFHZixPQUFPZSxrQkFBa0I7UUFDL0MsSUFBSSxDQUFDQyxhQUFhLEdBQUdmLFNBQVNlLGlCQUFpQixDQUFDO1FBQ2hELElBQUksQ0FBQ0MsY0FBYyxHQUFHLENBQUMsR0FBRzlCLFFBQVErQixHQUFHO1FBQ3JDLElBQUksQ0FBQ0MsYUFBYSxHQUFHbkIsT0FBT29CLFdBQVdELGlCQUFpQjtRQUN4RCxJQUFJLENBQUNFLEtBQUssR0FBR3BCLFFBQVFvQixLQUFLLElBQUk7UUFDOUIsb0RBQW9EO1FBQ3BELElBQUksQ0FBQ0MsZUFBZSxHQUFHLElBQUksQ0FBQ0QsS0FBSyxFQUFFQyxtQkFBbUJ0QixPQUFPc0IsbUJBQW1CO1FBQ2hGLElBQUksQ0FBQ0MsT0FBTyxHQUFHdkIsT0FBT3VCLFdBQVc7UUFDakMsSUFBSSxDQUFDQyxVQUFVLEdBQUd4QixPQUFPd0IsY0FBYztRQUN2QyxJQUFJLENBQUNDLFVBQVUsR0FBR3pCLE9BQU95QixjQUFjO1FBQ3ZDLElBQUksQ0FBQ0MsNEJBQTRCLEdBQUcxQixPQUFPMEIsZ0NBQWdDO1FBQzNFLElBQUksQ0FBQ0MsT0FBTyxHQUFHM0IsT0FBTzJCLFdBQVc7UUFDakMsSUFBSSxDQUFDQyxFQUFFLEdBQUc1QixPQUFPNEIsSUFBSWxCLGlCQUFpQjtRQUN0QyxJQUFJLENBQUNtQixZQUFZLEdBQUc3QixPQUFPNkIsZ0JBQWdCO0lBQy9DO0lBQ0EsSUFBSUMsY0FBYztRQUNkLE9BQU8zQyxRQUFRZ0IsV0FBVyxDQUFDQyxVQUFVLENBQUMsSUFBSSxDQUFDTCxPQUFPO0lBQ3REO0lBQ0EsSUFBSWdDLFdBQVc7UUFDWCxPQUFPLElBQUksQ0FBQ3hCLEtBQUssQ0FBQ3lCLE1BQU0sQ0FBQyxJQUFJLENBQUNwQixRQUFRLEVBQUVvQixNQUFNLENBQUMsSUFBSSxDQUFDckIsUUFBUTtJQUNoRTtJQUNBLHNDQUFzQyxHQUN0QyxJQUFJc0IsYUFBYTtRQUNiLE9BQU8sSUFBSSxDQUFDM0IsSUFBSSxLQUFLbEIsU0FBU0csVUFBVSxDQUFDTSxXQUFXLElBQUksSUFBSSxDQUFDcUMsVUFBVTtJQUMzRTtJQUNBLGdDQUFnQyxHQUNoQyxJQUFJQyxnQkFBZ0I7UUFDaEIsT0FBT3ZDLDBCQUEwQndDLEdBQUcsQ0FBQyxJQUFJLENBQUM5QixJQUFJO0lBQ2xEO0lBQ0Esd0NBQXdDLEdBQ3hDLElBQUk0QixhQUFhO1FBQ2IsT0FBTzdDLHNCQUFzQitDLEdBQUcsQ0FBQyxJQUFJLENBQUM5QixJQUFJO0lBQzlDO0lBQ0EsSUFBSUcsT0FBTztRQUNQLE1BQU00QixhQUFhLENBQUMsQ0FBQyxFQUFFLElBQUksQ0FBQ0MsSUFBSSxDQUFDLENBQUMsQ0FBQ0MsTUFBTTtRQUN6QyxPQUFPLElBQUksQ0FBQ3hDLE9BQU8sQ0FBQ3lDLEtBQUssQ0FBQyxHQUFHLENBQUNIO0lBQ2xDO0lBQ0EsSUFBSUMsT0FBTztRQUNQLE1BQU1BLE9BQU8sSUFBSSxDQUFDdkMsT0FBTyxDQUFDMEMsS0FBSyxDQUFDLEtBQUtDLEdBQUc7UUFDeEMsT0FBT0osT0FBT0ssT0FBT0MsUUFBUSxDQUFDTixNQUFNLE1BQU07SUFDOUM7SUFDQTs7O0tBR0MsR0FDRE8sT0FBT0MsS0FBSyxFQUFFO1FBQ1YsOEZBQThGO1FBQzlGLHdFQUF3RTtRQUN4RSxNQUFNQyx3QkFBd0IsSUFBSSxDQUFDekIsZUFBZSxLQUFLd0IsT0FBT3hCLG1CQUMxRHpDLHVCQUF1QixJQUFJLENBQUN5QyxlQUFlLEVBQUV3QixPQUFPeEIscUJBQXFCO1FBQzdFLE1BQU0wQixtQkFBbUIsSUFBSSxDQUFDdkIsVUFBVSxJQUFJLFFBQVFxQixPQUFPckIsY0FBYyxPQUNuRSxDQUFDLEdBQUd0QyxRQUFROEQsZUFBZSxFQUFFLElBQUksQ0FBQ3hCLFVBQVUsRUFBRXFCLE1BQU1yQixVQUFVLE1BQU0sSUFDcEUsSUFBSSxDQUFDQSxVQUFVLEtBQUtxQixPQUFPckI7UUFDakMsT0FBUXFCLFNBQVMsUUFDYixDQUFDLEdBQUczRCxRQUFRK0QsZ0JBQWdCLEVBQUUsSUFBSSxDQUFDN0IsS0FBSyxFQUFFeUIsTUFBTXpCLEtBQUssS0FDckQsSUFBSSxDQUFDZixJQUFJLEtBQUt3QyxNQUFNeEMsSUFBSSxJQUN4QixJQUFJLENBQUNRLGNBQWMsS0FBS2dDLE1BQU1oQyxjQUFjLElBQzVDLENBQUMsR0FBRzNCLFFBQVFnRSxnQkFBZ0IsRUFBRSxJQUFJLENBQUM1QyxLQUFLLEVBQUV1QyxNQUFNdkMsS0FBSyxLQUNyRDZDLGdCQUFnQixJQUFJLENBQUN2QyxJQUFJLEVBQUVpQyxNQUFNakMsSUFBSSxLQUNyQyxJQUFJLENBQUNVLE9BQU8sS0FBS3VCLE1BQU12QixPQUFPLElBQzlCLElBQUksQ0FBQ0MsVUFBVSxLQUFLc0IsTUFBTXRCLFVBQVUsSUFDcEN3QixvQkFDQSxJQUFJLENBQUNyQixPQUFPLEtBQUttQixNQUFNbkIsT0FBTyxJQUM5QixJQUFJLENBQUNELDRCQUE0QixLQUFLb0IsTUFBTXBCLDRCQUE0QixJQUN4RXFCO0lBQ1I7QUFDSjtBQUNBcEUseUJBQXlCLEdBQUdJO0FBQzVCLDBEQUEwRDtBQUMxRCxTQUFTRCxnQkFBZ0JrQixLQUFLLEVBQUVDLE9BQU87SUFDbkMsSUFBSUEsU0FBU29ELGNBQWM7UUFDdkIsT0FBT2pFLFNBQVNHLFVBQVUsQ0FBQ0ksWUFBWTtJQUMzQztJQUNBLElBQUksQ0FBQ0ssU0FBUyxDQUFDQSxNQUFNc0QsRUFBRSxFQUFFO1FBQ3JCLE9BQU9sRSxTQUFTRyxVQUFVLENBQUNnRSxPQUFPO0lBQ3RDO0lBQ0EsSUFBSXZELE1BQU13RCxZQUFZLEVBQUU7UUFDcEIsT0FBT3BFLFNBQVNHLFVBQVUsQ0FBQ2tFLE9BQU87SUFDdEM7SUFDQSxJQUFJekQsTUFBTTBELEdBQUcsSUFBSTFELE1BQU0wRCxHQUFHLEtBQUssWUFBWTtRQUN2QyxPQUFPdEUsU0FBU0csVUFBVSxDQUFDRyxNQUFNO0lBQ3JDO0lBQ0EsSUFBSU0sTUFBTXVCLE9BQU8sRUFBRTtRQUNmLElBQUl2QixNQUFNMkQsTUFBTSxFQUFFO1lBQ2QsT0FBT3ZFLFNBQVNHLFVBQVUsQ0FBQ3FFLE9BQU87UUFDdEMsT0FDSyxJQUFJNUQsTUFBTTZELGlCQUFpQixFQUFFO1lBQzlCLE9BQU96RSxTQUFTRyxVQUFVLENBQUNDLFNBQVM7UUFDeEMsT0FDSyxJQUFJUSxNQUFNOEQsU0FBUyxFQUFFO1lBQ3RCLE9BQU8xRSxTQUFTRyxVQUFVLENBQUNNLFdBQVc7UUFDMUMsT0FDSyxJQUFJRyxNQUFNK0QsV0FBVyxFQUFFO1lBQ3hCLE9BQU8zRSxTQUFTRyxVQUFVLENBQUN5RSxTQUFTO1FBQ3hDLE9BQ0s7WUFDRCxPQUFPNUUsU0FBU0csVUFBVSxDQUFDcUUsT0FBTztRQUN0QztJQUNKO0lBQ0EsT0FBT3hFLFNBQVNHLFVBQVUsQ0FBQ0UsVUFBVTtBQUN6QztBQUNBZCx1QkFBdUIsR0FBR0c7QUFDMUIsU0FBU3NFLGdCQUFnQnZDLElBQUksRUFBRW9ELEtBQUs7SUFDaEMsTUFBTUMsV0FBV3pGLE9BQU8wRixJQUFJLENBQUN0RDtJQUM3QixNQUFNdUQsWUFBWTNGLE9BQU8wRixJQUFJLENBQUNGO0lBQzlCLE9BQVFDLFNBQVMzQixNQUFNLEtBQUs2QixVQUFVN0IsTUFBTSxJQUN4QzJCLFNBQVNHLEtBQUssQ0FBQyxDQUFDQyxNQUFRTCxLQUFLLENBQUNLLElBQUksS0FBS3pELElBQUksQ0FBQ3lELElBQUk7QUFDeEQ7QUFDQTs7Ozs7Ozs7Ozs7Ozs7OztDQWdCQyxHQUNELFNBQVN6Rix1QkFBdUIwRixTQUFTLEVBQUVDLEtBQUs7SUFDNUMsSUFBSUQsYUFBYSxRQUFRQyxTQUFTLE1BQU07UUFDcEMsT0FBTyxDQUFDO0lBQ1o7SUFDQSxJQUFJLENBQUNELFVBQVVFLFNBQVMsQ0FBQzVCLE1BQU0sQ0FBQzJCLE1BQU1DLFNBQVMsR0FBRztRQUM5QyxPQUFPLENBQUM7SUFDWjtJQUNBLG9EQUFvRDtJQUNwRCxNQUFNQyxpQkFBaUIxRixPQUFPMkYsSUFBSSxDQUFDQyxNQUFNLENBQUNMLFVBQVVNLE9BQU8sSUFDckROLFVBQVVNLE9BQU8sR0FDakI3RixPQUFPMkYsSUFBSSxDQUFDRyxVQUFVLENBQUNQLFVBQVVNLE9BQU87SUFDOUMsTUFBTUUsYUFBYS9GLE9BQU8yRixJQUFJLENBQUNDLE1BQU0sQ0FBQ0osTUFBTUssT0FBTyxJQUFJTCxNQUFNSyxPQUFPLEdBQUc3RixPQUFPMkYsSUFBSSxDQUFDRyxVQUFVLENBQUNOLE1BQU1LLE9BQU87SUFDM0csT0FBT0gsZUFBZU0sT0FBTyxDQUFDRDtBQUNsQztBQUNBcEcsOEJBQThCLEdBQUdFLHdCQUNqQyw4Q0FBOEMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9ibG9nLWFwcGxpY2F0aW9uLy4vbm9kZV9tb2R1bGVzL21vbmdvZGIvbGliL3NkYW0vc2VydmVyX2Rlc2NyaXB0aW9uLmpzPzRmNzAiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLmNvbXBhcmVUb3BvbG9neVZlcnNpb24gPSBleHBvcnRzLnBhcnNlU2VydmVyVHlwZSA9IGV4cG9ydHMuU2VydmVyRGVzY3JpcHRpb24gPSB2b2lkIDA7XG5jb25zdCBic29uXzEgPSByZXF1aXJlKFwiLi4vYnNvblwiKTtcbmNvbnN0IGVycm9yXzEgPSByZXF1aXJlKFwiLi4vZXJyb3JcIik7XG5jb25zdCB1dGlsc18xID0gcmVxdWlyZShcIi4uL3V0aWxzXCIpO1xuY29uc3QgY29tbW9uXzEgPSByZXF1aXJlKFwiLi9jb21tb25cIik7XG5jb25zdCBXUklUQUJMRV9TRVJWRVJfVFlQRVMgPSBuZXcgU2V0KFtcbiAgICBjb21tb25fMS5TZXJ2ZXJUeXBlLlJTUHJpbWFyeSxcbiAgICBjb21tb25fMS5TZXJ2ZXJUeXBlLlN0YW5kYWxvbmUsXG4gICAgY29tbW9uXzEuU2VydmVyVHlwZS5Nb25nb3MsXG4gICAgY29tbW9uXzEuU2VydmVyVHlwZS5Mb2FkQmFsYW5jZXJcbl0pO1xuY29uc3QgREFUQV9CRUFSSU5HX1NFUlZFUl9UWVBFUyA9IG5ldyBTZXQoW1xuICAgIGNvbW1vbl8xLlNlcnZlclR5cGUuUlNQcmltYXJ5LFxuICAgIGNvbW1vbl8xLlNlcnZlclR5cGUuUlNTZWNvbmRhcnksXG4gICAgY29tbW9uXzEuU2VydmVyVHlwZS5Nb25nb3MsXG4gICAgY29tbW9uXzEuU2VydmVyVHlwZS5TdGFuZGFsb25lLFxuICAgIGNvbW1vbl8xLlNlcnZlclR5cGUuTG9hZEJhbGFuY2VyXG5dKTtcbi8qKlxuICogVGhlIGNsaWVudCdzIHZpZXcgb2YgYSBzaW5nbGUgc2VydmVyLCBiYXNlZCBvbiB0aGUgbW9zdCByZWNlbnQgaGVsbG8gb3V0Y29tZS5cbiAqXG4gKiBJbnRlcm5hbCB0eXBlLCBub3QgbWVhbnQgdG8gYmUgZGlyZWN0bHkgaW5zdGFudGlhdGVkXG4gKiBAcHVibGljXG4gKi9cbmNsYXNzIFNlcnZlckRlc2NyaXB0aW9uIHtcbiAgICAvKipcbiAgICAgKiBDcmVhdGUgYSBTZXJ2ZXJEZXNjcmlwdGlvblxuICAgICAqIEBpbnRlcm5hbFxuICAgICAqXG4gICAgICogQHBhcmFtIGFkZHJlc3MgLSBUaGUgYWRkcmVzcyBvZiB0aGUgc2VydmVyXG4gICAgICogQHBhcmFtIGhlbGxvIC0gQW4gb3B0aW9uYWwgaGVsbG8gcmVzcG9uc2UgZm9yIHRoaXMgc2VydmVyXG4gICAgICovXG4gICAgY29uc3RydWN0b3IoYWRkcmVzcywgaGVsbG8sIG9wdGlvbnMgPSB7fSkge1xuICAgICAgICBpZiAoYWRkcmVzcyA9PSBudWxsIHx8IGFkZHJlc3MgPT09ICcnKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgZXJyb3JfMS5Nb25nb1J1bnRpbWVFcnJvcignU2VydmVyRGVzY3JpcHRpb24gbXVzdCBiZSBwcm92aWRlZCB3aXRoIGEgbm9uLWVtcHR5IGFkZHJlc3MnKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmFkZHJlc3MgPVxuICAgICAgICAgICAgdHlwZW9mIGFkZHJlc3MgPT09ICdzdHJpbmcnXG4gICAgICAgICAgICAgICAgPyB1dGlsc18xLkhvc3RBZGRyZXNzLmZyb21TdHJpbmcoYWRkcmVzcykudG9TdHJpbmcoKSAvLyBVc2UgSG9zdEFkZHJlc3MgdG8gbm9ybWFsaXplXG4gICAgICAgICAgICAgICAgOiBhZGRyZXNzLnRvU3RyaW5nKCk7XG4gICAgICAgIHRoaXMudHlwZSA9IHBhcnNlU2VydmVyVHlwZShoZWxsbywgb3B0aW9ucyk7XG4gICAgICAgIHRoaXMuaG9zdHMgPSBoZWxsbz8uaG9zdHM/Lm1hcCgoaG9zdCkgPT4gaG9zdC50b0xvd2VyQ2FzZSgpKSA/PyBbXTtcbiAgICAgICAgdGhpcy5wYXNzaXZlcyA9IGhlbGxvPy5wYXNzaXZlcz8ubWFwKChob3N0KSA9PiBob3N0LnRvTG93ZXJDYXNlKCkpID8/IFtdO1xuICAgICAgICB0aGlzLmFyYml0ZXJzID0gaGVsbG8/LmFyYml0ZXJzPy5tYXAoKGhvc3QpID0+IGhvc3QudG9Mb3dlckNhc2UoKSkgPz8gW107XG4gICAgICAgIHRoaXMudGFncyA9IGhlbGxvPy50YWdzID8/IHt9O1xuICAgICAgICB0aGlzLm1pbldpcmVWZXJzaW9uID0gaGVsbG8/Lm1pbldpcmVWZXJzaW9uID8/IDA7XG4gICAgICAgIHRoaXMubWF4V2lyZVZlcnNpb24gPSBoZWxsbz8ubWF4V2lyZVZlcnNpb24gPz8gMDtcbiAgICAgICAgdGhpcy5yb3VuZFRyaXBUaW1lID0gb3B0aW9ucz8ucm91bmRUcmlwVGltZSA/PyAtMTtcbiAgICAgICAgdGhpcy5sYXN0VXBkYXRlVGltZSA9ICgwLCB1dGlsc18xLm5vdykoKTtcbiAgICAgICAgdGhpcy5sYXN0V3JpdGVEYXRlID0gaGVsbG8/Lmxhc3RXcml0ZT8ubGFzdFdyaXRlRGF0ZSA/PyAwO1xuICAgICAgICB0aGlzLmVycm9yID0gb3B0aW9ucy5lcnJvciA/PyBudWxsO1xuICAgICAgICAvLyBUT0RPKE5PREUtMjY3NCk6IFByZXNlcnZlIGludDY0IHNlbnQgZnJvbSBNb25nb0RCXG4gICAgICAgIHRoaXMudG9wb2xvZ3lWZXJzaW9uID0gdGhpcy5lcnJvcj8udG9wb2xvZ3lWZXJzaW9uID8/IGhlbGxvPy50b3BvbG9neVZlcnNpb24gPz8gbnVsbDtcbiAgICAgICAgdGhpcy5zZXROYW1lID0gaGVsbG8/LnNldE5hbWUgPz8gbnVsbDtcbiAgICAgICAgdGhpcy5zZXRWZXJzaW9uID0gaGVsbG8/LnNldFZlcnNpb24gPz8gbnVsbDtcbiAgICAgICAgdGhpcy5lbGVjdGlvbklkID0gaGVsbG8/LmVsZWN0aW9uSWQgPz8gbnVsbDtcbiAgICAgICAgdGhpcy5sb2dpY2FsU2Vzc2lvblRpbWVvdXRNaW51dGVzID0gaGVsbG8/LmxvZ2ljYWxTZXNzaW9uVGltZW91dE1pbnV0ZXMgPz8gbnVsbDtcbiAgICAgICAgdGhpcy5wcmltYXJ5ID0gaGVsbG8/LnByaW1hcnkgPz8gbnVsbDtcbiAgICAgICAgdGhpcy5tZSA9IGhlbGxvPy5tZT8udG9Mb3dlckNhc2UoKSA/PyBudWxsO1xuICAgICAgICB0aGlzLiRjbHVzdGVyVGltZSA9IGhlbGxvPy4kY2x1c3RlclRpbWUgPz8gbnVsbDtcbiAgICB9XG4gICAgZ2V0IGhvc3RBZGRyZXNzKCkge1xuICAgICAgICByZXR1cm4gdXRpbHNfMS5Ib3N0QWRkcmVzcy5mcm9tU3RyaW5nKHRoaXMuYWRkcmVzcyk7XG4gICAgfVxuICAgIGdldCBhbGxIb3N0cygpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuaG9zdHMuY29uY2F0KHRoaXMuYXJiaXRlcnMpLmNvbmNhdCh0aGlzLnBhc3NpdmVzKTtcbiAgICB9XG4gICAgLyoqIElzIHRoaXMgc2VydmVyIGF2YWlsYWJsZSBmb3IgcmVhZHMqL1xuICAgIGdldCBpc1JlYWRhYmxlKCkge1xuICAgICAgICByZXR1cm4gdGhpcy50eXBlID09PSBjb21tb25fMS5TZXJ2ZXJUeXBlLlJTU2Vjb25kYXJ5IHx8IHRoaXMuaXNXcml0YWJsZTtcbiAgICB9XG4gICAgLyoqIElzIHRoaXMgc2VydmVyIGRhdGEgYmVhcmluZyAqL1xuICAgIGdldCBpc0RhdGFCZWFyaW5nKCkge1xuICAgICAgICByZXR1cm4gREFUQV9CRUFSSU5HX1NFUlZFUl9UWVBFUy5oYXModGhpcy50eXBlKTtcbiAgICB9XG4gICAgLyoqIElzIHRoaXMgc2VydmVyIGF2YWlsYWJsZSBmb3Igd3JpdGVzICovXG4gICAgZ2V0IGlzV3JpdGFibGUoKSB7XG4gICAgICAgIHJldHVybiBXUklUQUJMRV9TRVJWRVJfVFlQRVMuaGFzKHRoaXMudHlwZSk7XG4gICAgfVxuICAgIGdldCBob3N0KCkge1xuICAgICAgICBjb25zdCBjaG9wTGVuZ3RoID0gYDoke3RoaXMucG9ydH1gLmxlbmd0aDtcbiAgICAgICAgcmV0dXJuIHRoaXMuYWRkcmVzcy5zbGljZSgwLCAtY2hvcExlbmd0aCk7XG4gICAgfVxuICAgIGdldCBwb3J0KCkge1xuICAgICAgICBjb25zdCBwb3J0ID0gdGhpcy5hZGRyZXNzLnNwbGl0KCc6JykucG9wKCk7XG4gICAgICAgIHJldHVybiBwb3J0ID8gTnVtYmVyLnBhcnNlSW50KHBvcnQsIDEwKSA6IDI3MDE3O1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBEZXRlcm1pbmVzIGlmIGFub3RoZXIgYFNlcnZlckRlc2NyaXB0aW9uYCBpcyBlcXVhbCB0byB0aGlzIG9uZSBwZXIgdGhlIHJ1bGVzIGRlZmluZWRcbiAgICAgKiBpbiB0aGUge0BsaW5rIGh0dHBzOi8vZ2l0aHViLmNvbS9tb25nb2RiL3NwZWNpZmljYXRpb25zL2Jsb2IvbWFzdGVyL3NvdXJjZS9zZXJ2ZXItZGlzY292ZXJ5LWFuZC1tb25pdG9yaW5nL3NlcnZlci1kaXNjb3ZlcnktYW5kLW1vbml0b3JpbmcucnN0I3NlcnZlcmRlc2NyaXB0aW9ufFNEQU0gc3BlY31cbiAgICAgKi9cbiAgICBlcXVhbHMob3RoZXIpIHtcbiAgICAgICAgLy8gRGVzcGl0ZSB1c2luZyB0aGUgY29tcGFyYXRvciB0aGF0IHdvdWxkIGRldGVybWluZSBhIG51bGxpc2ggdG9wb2xvZ3lWZXJzaW9uIGFzIGdyZWF0ZXIgdGhhblxuICAgICAgICAvLyBmb3IgZXF1YWxpdHkgd2Ugc2hvdWxkIG9ubHkgYWx3YXlzIHBlcmZvcm0gZGlyZWN0IGVxdWFsaXR5IGNvbXBhcmlzb25cbiAgICAgICAgY29uc3QgdG9wb2xvZ3lWZXJzaW9uc0VxdWFsID0gdGhpcy50b3BvbG9neVZlcnNpb24gPT09IG90aGVyPy50b3BvbG9neVZlcnNpb24gfHxcbiAgICAgICAgICAgIGNvbXBhcmVUb3BvbG9neVZlcnNpb24odGhpcy50b3BvbG9neVZlcnNpb24sIG90aGVyPy50b3BvbG9neVZlcnNpb24pID09PSAwO1xuICAgICAgICBjb25zdCBlbGVjdGlvbklkc0VxdWFsID0gdGhpcy5lbGVjdGlvbklkICE9IG51bGwgJiYgb3RoZXI/LmVsZWN0aW9uSWQgIT0gbnVsbFxuICAgICAgICAgICAgPyAoMCwgdXRpbHNfMS5jb21wYXJlT2JqZWN0SWQpKHRoaXMuZWxlY3Rpb25JZCwgb3RoZXIuZWxlY3Rpb25JZCkgPT09IDBcbiAgICAgICAgICAgIDogdGhpcy5lbGVjdGlvbklkID09PSBvdGhlcj8uZWxlY3Rpb25JZDtcbiAgICAgICAgcmV0dXJuIChvdGhlciAhPSBudWxsICYmXG4gICAgICAgICAgICAoMCwgdXRpbHNfMS5lcnJvclN0cmljdEVxdWFsKSh0aGlzLmVycm9yLCBvdGhlci5lcnJvcikgJiZcbiAgICAgICAgICAgIHRoaXMudHlwZSA9PT0gb3RoZXIudHlwZSAmJlxuICAgICAgICAgICAgdGhpcy5taW5XaXJlVmVyc2lvbiA9PT0gb3RoZXIubWluV2lyZVZlcnNpb24gJiZcbiAgICAgICAgICAgICgwLCB1dGlsc18xLmFycmF5U3RyaWN0RXF1YWwpKHRoaXMuaG9zdHMsIG90aGVyLmhvc3RzKSAmJlxuICAgICAgICAgICAgdGFnc1N0cmljdEVxdWFsKHRoaXMudGFncywgb3RoZXIudGFncykgJiZcbiAgICAgICAgICAgIHRoaXMuc2V0TmFtZSA9PT0gb3RoZXIuc2V0TmFtZSAmJlxuICAgICAgICAgICAgdGhpcy5zZXRWZXJzaW9uID09PSBvdGhlci5zZXRWZXJzaW9uICYmXG4gICAgICAgICAgICBlbGVjdGlvbklkc0VxdWFsICYmXG4gICAgICAgICAgICB0aGlzLnByaW1hcnkgPT09IG90aGVyLnByaW1hcnkgJiZcbiAgICAgICAgICAgIHRoaXMubG9naWNhbFNlc3Npb25UaW1lb3V0TWludXRlcyA9PT0gb3RoZXIubG9naWNhbFNlc3Npb25UaW1lb3V0TWludXRlcyAmJlxuICAgICAgICAgICAgdG9wb2xvZ3lWZXJzaW9uc0VxdWFsKTtcbiAgICB9XG59XG5leHBvcnRzLlNlcnZlckRlc2NyaXB0aW9uID0gU2VydmVyRGVzY3JpcHRpb247XG4vLyBQYXJzZXMgYSBgaGVsbG9gIG1lc3NhZ2UgYW5kIGRldGVybWluZXMgdGhlIHNlcnZlciB0eXBlXG5mdW5jdGlvbiBwYXJzZVNlcnZlclR5cGUoaGVsbG8sIG9wdGlvbnMpIHtcbiAgICBpZiAob3B0aW9ucz8ubG9hZEJhbGFuY2VkKSB7XG4gICAgICAgIHJldHVybiBjb21tb25fMS5TZXJ2ZXJUeXBlLkxvYWRCYWxhbmNlcjtcbiAgICB9XG4gICAgaWYgKCFoZWxsbyB8fCAhaGVsbG8ub2spIHtcbiAgICAgICAgcmV0dXJuIGNvbW1vbl8xLlNlcnZlclR5cGUuVW5rbm93bjtcbiAgICB9XG4gICAgaWYgKGhlbGxvLmlzcmVwbGljYXNldCkge1xuICAgICAgICByZXR1cm4gY29tbW9uXzEuU2VydmVyVHlwZS5SU0dob3N0O1xuICAgIH1cbiAgICBpZiAoaGVsbG8ubXNnICYmIGhlbGxvLm1zZyA9PT0gJ2lzZGJncmlkJykge1xuICAgICAgICByZXR1cm4gY29tbW9uXzEuU2VydmVyVHlwZS5Nb25nb3M7XG4gICAgfVxuICAgIGlmIChoZWxsby5zZXROYW1lKSB7XG4gICAgICAgIGlmIChoZWxsby5oaWRkZW4pIHtcbiAgICAgICAgICAgIHJldHVybiBjb21tb25fMS5TZXJ2ZXJUeXBlLlJTT3RoZXI7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoaGVsbG8uaXNXcml0YWJsZVByaW1hcnkpIHtcbiAgICAgICAgICAgIHJldHVybiBjb21tb25fMS5TZXJ2ZXJUeXBlLlJTUHJpbWFyeTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChoZWxsby5zZWNvbmRhcnkpIHtcbiAgICAgICAgICAgIHJldHVybiBjb21tb25fMS5TZXJ2ZXJUeXBlLlJTU2Vjb25kYXJ5O1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGhlbGxvLmFyYml0ZXJPbmx5KSB7XG4gICAgICAgICAgICByZXR1cm4gY29tbW9uXzEuU2VydmVyVHlwZS5SU0FyYml0ZXI7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gY29tbW9uXzEuU2VydmVyVHlwZS5SU090aGVyO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBjb21tb25fMS5TZXJ2ZXJUeXBlLlN0YW5kYWxvbmU7XG59XG5leHBvcnRzLnBhcnNlU2VydmVyVHlwZSA9IHBhcnNlU2VydmVyVHlwZTtcbmZ1bmN0aW9uIHRhZ3NTdHJpY3RFcXVhbCh0YWdzLCB0YWdzMikge1xuICAgIGNvbnN0IHRhZ3NLZXlzID0gT2JqZWN0LmtleXModGFncyk7XG4gICAgY29uc3QgdGFnczJLZXlzID0gT2JqZWN0LmtleXModGFnczIpO1xuICAgIHJldHVybiAodGFnc0tleXMubGVuZ3RoID09PSB0YWdzMktleXMubGVuZ3RoICYmXG4gICAgICAgIHRhZ3NLZXlzLmV2ZXJ5KChrZXkpID0+IHRhZ3MyW2tleV0gPT09IHRhZ3Nba2V5XSkpO1xufVxuLyoqXG4gKiBDb21wYXJlcyB0d28gdG9wb2xvZ3kgdmVyc2lvbnMuXG4gKlxuICogMS4gSWYgdGhlIHJlc3BvbnNlIHRvcG9sb2d5VmVyc2lvbiBpcyB1bnNldCBvciB0aGUgU2VydmVyRGVzY3JpcHRpb24nc1xuICogICAgdG9wb2xvZ3lWZXJzaW9uIGlzIG51bGwsIHRoZSBjbGllbnQgTVVTVCBhc3N1bWUgdGhlIHJlc3BvbnNlIGlzIG1vcmUgcmVjZW50LlxuICogMS4gSWYgdGhlIHJlc3BvbnNlJ3MgdG9wb2xvZ3lWZXJzaW9uLnByb2Nlc3NJZCBpcyBub3QgZXF1YWwgdG8gdGhlXG4gKiAgICBTZXJ2ZXJEZXNjcmlwdGlvbidzLCB0aGUgY2xpZW50IE1VU1QgYXNzdW1lIHRoZSByZXNwb25zZSBpcyBtb3JlIHJlY2VudC5cbiAqIDEuIElmIHRoZSByZXNwb25zZSdzIHRvcG9sb2d5VmVyc2lvbi5wcm9jZXNzSWQgaXMgZXF1YWwgdG8gdGhlXG4gKiAgICBTZXJ2ZXJEZXNjcmlwdGlvbidzLCB0aGUgY2xpZW50IE1VU1QgdXNlIHRoZSBjb3VudGVyIGZpZWxkIHRvIGRldGVybWluZVxuICogICAgd2hpY2ggdG9wb2xvZ3lWZXJzaW9uIGlzIG1vcmUgcmVjZW50LlxuICpcbiAqIGBgYHRzXG4gKiBjdXJyZW50VHYgPCAgIG5ld1R2ID09PSAtMVxuICogY3VycmVudFR2ID09PSBuZXdUdiA9PT0gMFxuICogY3VycmVudFR2ID4gICBuZXdUdiA9PT0gMVxuICogYGBgXG4gKi9cbmZ1bmN0aW9uIGNvbXBhcmVUb3BvbG9neVZlcnNpb24oY3VycmVudFR2LCBuZXdUdikge1xuICAgIGlmIChjdXJyZW50VHYgPT0gbnVsbCB8fCBuZXdUdiA9PSBudWxsKSB7XG4gICAgICAgIHJldHVybiAtMTtcbiAgICB9XG4gICAgaWYgKCFjdXJyZW50VHYucHJvY2Vzc0lkLmVxdWFscyhuZXdUdi5wcm9jZXNzSWQpKSB7XG4gICAgICAgIHJldHVybiAtMTtcbiAgICB9XG4gICAgLy8gVE9ETyhOT0RFLTI2NzQpOiBQcmVzZXJ2ZSBpbnQ2NCBzZW50IGZyb20gTW9uZ29EQlxuICAgIGNvbnN0IGN1cnJlbnRDb3VudGVyID0gYnNvbl8xLkxvbmcuaXNMb25nKGN1cnJlbnRUdi5jb3VudGVyKVxuICAgICAgICA/IGN1cnJlbnRUdi5jb3VudGVyXG4gICAgICAgIDogYnNvbl8xLkxvbmcuZnJvbU51bWJlcihjdXJyZW50VHYuY291bnRlcik7XG4gICAgY29uc3QgbmV3Q291bnRlciA9IGJzb25fMS5Mb25nLmlzTG9uZyhuZXdUdi5jb3VudGVyKSA/IG5ld1R2LmNvdW50ZXIgOiBic29uXzEuTG9uZy5mcm9tTnVtYmVyKG5ld1R2LmNvdW50ZXIpO1xuICAgIHJldHVybiBjdXJyZW50Q291bnRlci5jb21wYXJlKG5ld0NvdW50ZXIpO1xufVxuZXhwb3J0cy5jb21wYXJlVG9wb2xvZ3lWZXJzaW9uID0gY29tcGFyZVRvcG9sb2d5VmVyc2lvbjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXNlcnZlcl9kZXNjcmlwdGlvbi5qcy5tYXAiXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJjb21wYXJlVG9wb2xvZ3lWZXJzaW9uIiwicGFyc2VTZXJ2ZXJUeXBlIiwiU2VydmVyRGVzY3JpcHRpb24iLCJic29uXzEiLCJyZXF1aXJlIiwiZXJyb3JfMSIsInV0aWxzXzEiLCJjb21tb25fMSIsIldSSVRBQkxFX1NFUlZFUl9UWVBFUyIsIlNldCIsIlNlcnZlclR5cGUiLCJSU1ByaW1hcnkiLCJTdGFuZGFsb25lIiwiTW9uZ29zIiwiTG9hZEJhbGFuY2VyIiwiREFUQV9CRUFSSU5HX1NFUlZFUl9UWVBFUyIsIlJTU2Vjb25kYXJ5IiwiY29uc3RydWN0b3IiLCJhZGRyZXNzIiwiaGVsbG8iLCJvcHRpb25zIiwiTW9uZ29SdW50aW1lRXJyb3IiLCJIb3N0QWRkcmVzcyIsImZyb21TdHJpbmciLCJ0b1N0cmluZyIsInR5cGUiLCJob3N0cyIsIm1hcCIsImhvc3QiLCJ0b0xvd2VyQ2FzZSIsInBhc3NpdmVzIiwiYXJiaXRlcnMiLCJ0YWdzIiwibWluV2lyZVZlcnNpb24iLCJtYXhXaXJlVmVyc2lvbiIsInJvdW5kVHJpcFRpbWUiLCJsYXN0VXBkYXRlVGltZSIsIm5vdyIsImxhc3RXcml0ZURhdGUiLCJsYXN0V3JpdGUiLCJlcnJvciIsInRvcG9sb2d5VmVyc2lvbiIsInNldE5hbWUiLCJzZXRWZXJzaW9uIiwiZWxlY3Rpb25JZCIsImxvZ2ljYWxTZXNzaW9uVGltZW91dE1pbnV0ZXMiLCJwcmltYXJ5IiwibWUiLCIkY2x1c3RlclRpbWUiLCJob3N0QWRkcmVzcyIsImFsbEhvc3RzIiwiY29uY2F0IiwiaXNSZWFkYWJsZSIsImlzV3JpdGFibGUiLCJpc0RhdGFCZWFyaW5nIiwiaGFzIiwiY2hvcExlbmd0aCIsInBvcnQiLCJsZW5ndGgiLCJzbGljZSIsInNwbGl0IiwicG9wIiwiTnVtYmVyIiwicGFyc2VJbnQiLCJlcXVhbHMiLCJvdGhlciIsInRvcG9sb2d5VmVyc2lvbnNFcXVhbCIsImVsZWN0aW9uSWRzRXF1YWwiLCJjb21wYXJlT2JqZWN0SWQiLCJlcnJvclN0cmljdEVxdWFsIiwiYXJyYXlTdHJpY3RFcXVhbCIsInRhZ3NTdHJpY3RFcXVhbCIsImxvYWRCYWxhbmNlZCIsIm9rIiwiVW5rbm93biIsImlzcmVwbGljYXNldCIsIlJTR2hvc3QiLCJtc2ciLCJoaWRkZW4iLCJSU090aGVyIiwiaXNXcml0YWJsZVByaW1hcnkiLCJzZWNvbmRhcnkiLCJhcmJpdGVyT25seSIsIlJTQXJiaXRlciIsInRhZ3MyIiwidGFnc0tleXMiLCJrZXlzIiwidGFnczJLZXlzIiwiZXZlcnkiLCJrZXkiLCJjdXJyZW50VHYiLCJuZXdUdiIsInByb2Nlc3NJZCIsImN1cnJlbnRDb3VudGVyIiwiTG9uZyIsImlzTG9uZyIsImNvdW50ZXIiLCJmcm9tTnVtYmVyIiwibmV3Q291bnRlciIsImNvbXBhcmUiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongodb/lib/sdam/server_description.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongodb/lib/sdam/server_selection.js":
/*!***********************************************************!*\
  !*** ./node_modules/mongodb/lib/sdam/server_selection.js ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.readPreferenceServerSelector = exports.secondaryWritableServerSelector = exports.sameServerSelector = exports.writableServerSelector = exports.MIN_SECONDARY_WRITE_WIRE_VERSION = void 0;\nconst error_1 = __webpack_require__(/*! ../error */ \"(ssr)/./node_modules/mongodb/lib/error.js\");\nconst read_preference_1 = __webpack_require__(/*! ../read_preference */ \"(ssr)/./node_modules/mongodb/lib/read_preference.js\");\nconst common_1 = __webpack_require__(/*! ./common */ \"(ssr)/./node_modules/mongodb/lib/sdam/common.js\");\n// max staleness constants\nconst IDLE_WRITE_PERIOD = 10000;\nconst SMALLEST_MAX_STALENESS_SECONDS = 90;\n//  Minimum version to try writes on secondaries.\nexports.MIN_SECONDARY_WRITE_WIRE_VERSION = 13;\n/**\n * Returns a server selector that selects for writable servers\n */ function writableServerSelector() {\n    return (topologyDescription, servers)=>latencyWindowReducer(topologyDescription, servers.filter((s)=>s.isWritable));\n}\nexports.writableServerSelector = writableServerSelector;\n/**\n * The purpose of this selector is to select the same server, only\n * if it is in a state that it can have commands sent to it.\n */ function sameServerSelector(description) {\n    return (topologyDescription, servers)=>{\n        if (!description) return [];\n        // Filter the servers to match the provided description only if\n        // the type is not unknown.\n        return servers.filter((sd)=>{\n            return sd.address === description.address && sd.type !== common_1.ServerType.Unknown;\n        });\n    };\n}\nexports.sameServerSelector = sameServerSelector;\n/**\n * Returns a server selector that uses a read preference to select a\n * server potentially for a write on a secondary.\n */ function secondaryWritableServerSelector(wireVersion, readPreference) {\n    // If server version < 5.0, read preference always primary.\n    // If server version >= 5.0...\n    // - If read preference is supplied, use that.\n    // - If no read preference is supplied, use primary.\n    if (!readPreference || !wireVersion || wireVersion && wireVersion < exports.MIN_SECONDARY_WRITE_WIRE_VERSION) {\n        return readPreferenceServerSelector(read_preference_1.ReadPreference.primary);\n    }\n    return readPreferenceServerSelector(readPreference);\n}\nexports.secondaryWritableServerSelector = secondaryWritableServerSelector;\n/**\n * Reduces the passed in array of servers by the rules of the \"Max Staleness\" specification\n * found here: https://github.com/mongodb/specifications/blob/master/source/max-staleness/max-staleness.rst\n *\n * @param readPreference - The read preference providing max staleness guidance\n * @param topologyDescription - The topology description\n * @param servers - The list of server descriptions to be reduced\n * @returns The list of servers that satisfy the requirements of max staleness\n */ function maxStalenessReducer(readPreference, topologyDescription, servers) {\n    if (readPreference.maxStalenessSeconds == null || readPreference.maxStalenessSeconds < 0) {\n        return servers;\n    }\n    const maxStaleness = readPreference.maxStalenessSeconds;\n    const maxStalenessVariance = (topologyDescription.heartbeatFrequencyMS + IDLE_WRITE_PERIOD) / 1000;\n    if (maxStaleness < maxStalenessVariance) {\n        throw new error_1.MongoInvalidArgumentError(`Option \"maxStalenessSeconds\" must be at least ${maxStalenessVariance} seconds`);\n    }\n    if (maxStaleness < SMALLEST_MAX_STALENESS_SECONDS) {\n        throw new error_1.MongoInvalidArgumentError(`Option \"maxStalenessSeconds\" must be at least ${SMALLEST_MAX_STALENESS_SECONDS} seconds`);\n    }\n    if (topologyDescription.type === common_1.TopologyType.ReplicaSetWithPrimary) {\n        const primary = Array.from(topologyDescription.servers.values()).filter(primaryFilter)[0];\n        return servers.reduce((result, server)=>{\n            const stalenessMS = server.lastUpdateTime - server.lastWriteDate - (primary.lastUpdateTime - primary.lastWriteDate) + topologyDescription.heartbeatFrequencyMS;\n            const staleness = stalenessMS / 1000;\n            const maxStalenessSeconds = readPreference.maxStalenessSeconds ?? 0;\n            if (staleness <= maxStalenessSeconds) {\n                result.push(server);\n            }\n            return result;\n        }, []);\n    }\n    if (topologyDescription.type === common_1.TopologyType.ReplicaSetNoPrimary) {\n        if (servers.length === 0) {\n            return servers;\n        }\n        const sMax = servers.reduce((max, s)=>s.lastWriteDate > max.lastWriteDate ? s : max);\n        return servers.reduce((result, server)=>{\n            const stalenessMS = sMax.lastWriteDate - server.lastWriteDate + topologyDescription.heartbeatFrequencyMS;\n            const staleness = stalenessMS / 1000;\n            const maxStalenessSeconds = readPreference.maxStalenessSeconds ?? 0;\n            if (staleness <= maxStalenessSeconds) {\n                result.push(server);\n            }\n            return result;\n        }, []);\n    }\n    return servers;\n}\n/**\n * Determines whether a server's tags match a given set of tags\n *\n * @param tagSet - The requested tag set to match\n * @param serverTags - The server's tags\n */ function tagSetMatch(tagSet, serverTags) {\n    const keys = Object.keys(tagSet);\n    const serverTagKeys = Object.keys(serverTags);\n    for(let i = 0; i < keys.length; ++i){\n        const key = keys[i];\n        if (serverTagKeys.indexOf(key) === -1 || serverTags[key] !== tagSet[key]) {\n            return false;\n        }\n    }\n    return true;\n}\n/**\n * Reduces a set of server descriptions based on tags requested by the read preference\n *\n * @param readPreference - The read preference providing the requested tags\n * @param servers - The list of server descriptions to reduce\n * @returns The list of servers matching the requested tags\n */ function tagSetReducer(readPreference, servers) {\n    if (readPreference.tags == null || Array.isArray(readPreference.tags) && readPreference.tags.length === 0) {\n        return servers;\n    }\n    for(let i = 0; i < readPreference.tags.length; ++i){\n        const tagSet = readPreference.tags[i];\n        const serversMatchingTagset = servers.reduce((matched, server)=>{\n            if (tagSetMatch(tagSet, server.tags)) matched.push(server);\n            return matched;\n        }, []);\n        if (serversMatchingTagset.length) {\n            return serversMatchingTagset;\n        }\n    }\n    return [];\n}\n/**\n * Reduces a list of servers to ensure they fall within an acceptable latency window. This is\n * further specified in the \"Server Selection\" specification, found here:\n * https://github.com/mongodb/specifications/blob/master/source/server-selection/server-selection.rst\n *\n * @param topologyDescription - The topology description\n * @param servers - The list of servers to reduce\n * @returns The servers which fall within an acceptable latency window\n */ function latencyWindowReducer(topologyDescription, servers) {\n    const low = servers.reduce((min, server)=>min === -1 ? server.roundTripTime : Math.min(server.roundTripTime, min), -1);\n    const high = low + topologyDescription.localThresholdMS;\n    return servers.reduce((result, server)=>{\n        if (server.roundTripTime <= high && server.roundTripTime >= low) result.push(server);\n        return result;\n    }, []);\n}\n// filters\nfunction primaryFilter(server) {\n    return server.type === common_1.ServerType.RSPrimary;\n}\nfunction secondaryFilter(server) {\n    return server.type === common_1.ServerType.RSSecondary;\n}\nfunction nearestFilter(server) {\n    return server.type === common_1.ServerType.RSSecondary || server.type === common_1.ServerType.RSPrimary;\n}\nfunction knownFilter(server) {\n    return server.type !== common_1.ServerType.Unknown;\n}\nfunction loadBalancerFilter(server) {\n    return server.type === common_1.ServerType.LoadBalancer;\n}\n/**\n * Returns a function which selects servers based on a provided read preference\n *\n * @param readPreference - The read preference to select with\n */ function readPreferenceServerSelector(readPreference) {\n    if (!readPreference.isValid()) {\n        throw new error_1.MongoInvalidArgumentError(\"Invalid read preference specified\");\n    }\n    return (topologyDescription, servers)=>{\n        const commonWireVersion = topologyDescription.commonWireVersion;\n        if (commonWireVersion && readPreference.minWireVersion && readPreference.minWireVersion > commonWireVersion) {\n            throw new error_1.MongoCompatibilityError(`Minimum wire version '${readPreference.minWireVersion}' required, but found '${commonWireVersion}'`);\n        }\n        if (topologyDescription.type === common_1.TopologyType.LoadBalanced) {\n            return servers.filter(loadBalancerFilter);\n        }\n        if (topologyDescription.type === common_1.TopologyType.Unknown) {\n            return [];\n        }\n        if (topologyDescription.type === common_1.TopologyType.Single || topologyDescription.type === common_1.TopologyType.Sharded) {\n            return latencyWindowReducer(topologyDescription, servers.filter(knownFilter));\n        }\n        const mode = readPreference.mode;\n        if (mode === read_preference_1.ReadPreference.PRIMARY) {\n            return servers.filter(primaryFilter);\n        }\n        if (mode === read_preference_1.ReadPreference.PRIMARY_PREFERRED) {\n            const result = servers.filter(primaryFilter);\n            if (result.length) {\n                return result;\n            }\n        }\n        const filter = mode === read_preference_1.ReadPreference.NEAREST ? nearestFilter : secondaryFilter;\n        const selectedServers = latencyWindowReducer(topologyDescription, tagSetReducer(readPreference, maxStalenessReducer(readPreference, topologyDescription, servers.filter(filter))));\n        if (mode === read_preference_1.ReadPreference.SECONDARY_PREFERRED && selectedServers.length === 0) {\n            return servers.filter(primaryFilter);\n        }\n        return selectedServers;\n    };\n}\nexports.readPreferenceServerSelector = readPreferenceServerSelector; //# sourceMappingURL=server_selection.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongodb/lib/sdam/server_selection.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongodb/lib/sdam/srv_polling.js":
/*!******************************************************!*\
  !*** ./node_modules/mongodb/lib/sdam/srv_polling.js ***!
  \******************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.SrvPoller = exports.SrvPollingEvent = void 0;\nconst dns = __webpack_require__(/*! dns */ \"dns\");\nconst timers_1 = __webpack_require__(/*! timers */ \"timers\");\nconst error_1 = __webpack_require__(/*! ../error */ \"(ssr)/./node_modules/mongodb/lib/error.js\");\nconst mongo_types_1 = __webpack_require__(/*! ../mongo_types */ \"(ssr)/./node_modules/mongodb/lib/mongo_types.js\");\nconst utils_1 = __webpack_require__(/*! ../utils */ \"(ssr)/./node_modules/mongodb/lib/utils.js\");\n/**\n * @internal\n * @category Event\n */ class SrvPollingEvent {\n    constructor(srvRecords){\n        this.srvRecords = srvRecords;\n    }\n    hostnames() {\n        return new Set(this.srvRecords.map((r)=>utils_1.HostAddress.fromSrvRecord(r).toString()));\n    }\n}\nexports.SrvPollingEvent = SrvPollingEvent;\n/** @internal */ class SrvPoller extends mongo_types_1.TypedEventEmitter {\n    constructor(options){\n        super();\n        if (!options || !options.srvHost) {\n            throw new error_1.MongoRuntimeError(\"Options for SrvPoller must exist and include srvHost\");\n        }\n        this.srvHost = options.srvHost;\n        this.srvMaxHosts = options.srvMaxHosts ?? 0;\n        this.srvServiceName = options.srvServiceName ?? \"mongodb\";\n        this.rescanSrvIntervalMS = 60000;\n        this.heartbeatFrequencyMS = options.heartbeatFrequencyMS ?? 10000;\n        this.haMode = false;\n        this.generation = 0;\n        this._timeout = undefined;\n    }\n    get srvAddress() {\n        return `_${this.srvServiceName}._tcp.${this.srvHost}`;\n    }\n    get intervalMS() {\n        return this.haMode ? this.heartbeatFrequencyMS : this.rescanSrvIntervalMS;\n    }\n    start() {\n        if (!this._timeout) {\n            this.schedule();\n        }\n    }\n    stop() {\n        if (this._timeout) {\n            (0, timers_1.clearTimeout)(this._timeout);\n            this.generation += 1;\n            this._timeout = undefined;\n        }\n    }\n    // TODO(NODE-4994): implement new logging logic for SrvPoller failures\n    schedule() {\n        if (this._timeout) {\n            (0, timers_1.clearTimeout)(this._timeout);\n        }\n        this._timeout = (0, timers_1.setTimeout)(()=>{\n            this._poll().catch(()=>null);\n        }, this.intervalMS);\n    }\n    success(srvRecords) {\n        this.haMode = false;\n        this.schedule();\n        this.emit(SrvPoller.SRV_RECORD_DISCOVERY, new SrvPollingEvent(srvRecords));\n    }\n    failure() {\n        this.haMode = true;\n        this.schedule();\n    }\n    async _poll() {\n        const generation = this.generation;\n        let srvRecords;\n        try {\n            srvRecords = await dns.promises.resolveSrv(this.srvAddress);\n        } catch (dnsError) {\n            this.failure();\n            return;\n        }\n        if (generation !== this.generation) {\n            return;\n        }\n        const finalAddresses = [];\n        for (const record of srvRecords){\n            if ((0, utils_1.matchesParentDomain)(record.name, this.srvHost)) {\n                finalAddresses.push(record);\n            }\n        }\n        if (!finalAddresses.length) {\n            this.failure();\n            return;\n        }\n        this.success(finalAddresses);\n    }\n}\n/** @event */ SrvPoller.SRV_RECORD_DISCOVERY = \"srvRecordDiscovery\";\nexports.SrvPoller = SrvPoller; //# sourceMappingURL=srv_polling.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongodb/lib/sdam/srv_polling.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongodb/lib/sdam/topology.js":
/*!***************************************************!*\
  !*** ./node_modules/mongodb/lib/sdam/topology.js ***!
  \***************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.ServerCapabilities = exports.Topology = void 0;\nconst util_1 = __webpack_require__(/*! util */ \"util\");\nconst connection_string_1 = __webpack_require__(/*! ../connection_string */ \"(ssr)/./node_modules/mongodb/lib/connection_string.js\");\nconst constants_1 = __webpack_require__(/*! ../constants */ \"(ssr)/./node_modules/mongodb/lib/constants.js\");\nconst error_1 = __webpack_require__(/*! ../error */ \"(ssr)/./node_modules/mongodb/lib/error.js\");\nconst mongo_types_1 = __webpack_require__(/*! ../mongo_types */ \"(ssr)/./node_modules/mongodb/lib/mongo_types.js\");\nconst read_preference_1 = __webpack_require__(/*! ../read_preference */ \"(ssr)/./node_modules/mongodb/lib/read_preference.js\");\nconst utils_1 = __webpack_require__(/*! ../utils */ \"(ssr)/./node_modules/mongodb/lib/utils.js\");\nconst common_1 = __webpack_require__(/*! ./common */ \"(ssr)/./node_modules/mongodb/lib/sdam/common.js\");\nconst events_1 = __webpack_require__(/*! ./events */ \"(ssr)/./node_modules/mongodb/lib/sdam/events.js\");\nconst server_1 = __webpack_require__(/*! ./server */ \"(ssr)/./node_modules/mongodb/lib/sdam/server.js\");\nconst server_description_1 = __webpack_require__(/*! ./server_description */ \"(ssr)/./node_modules/mongodb/lib/sdam/server_description.js\");\nconst server_selection_1 = __webpack_require__(/*! ./server_selection */ \"(ssr)/./node_modules/mongodb/lib/sdam/server_selection.js\");\nconst srv_polling_1 = __webpack_require__(/*! ./srv_polling */ \"(ssr)/./node_modules/mongodb/lib/sdam/srv_polling.js\");\nconst topology_description_1 = __webpack_require__(/*! ./topology_description */ \"(ssr)/./node_modules/mongodb/lib/sdam/topology_description.js\");\n// Global state\nlet globalTopologyCounter = 0;\nconst stateTransition = (0, utils_1.makeStateMachine)({\n    [common_1.STATE_CLOSED]: [\n        common_1.STATE_CLOSED,\n        common_1.STATE_CONNECTING\n    ],\n    [common_1.STATE_CONNECTING]: [\n        common_1.STATE_CONNECTING,\n        common_1.STATE_CLOSING,\n        common_1.STATE_CONNECTED,\n        common_1.STATE_CLOSED\n    ],\n    [common_1.STATE_CONNECTED]: [\n        common_1.STATE_CONNECTED,\n        common_1.STATE_CLOSING,\n        common_1.STATE_CLOSED\n    ],\n    [common_1.STATE_CLOSING]: [\n        common_1.STATE_CLOSING,\n        common_1.STATE_CLOSED\n    ]\n});\n/** @internal */ const kCancelled = Symbol(\"cancelled\");\n/** @internal */ const kWaitQueue = Symbol(\"waitQueue\");\n/**\n * A container of server instances representing a connection to a MongoDB topology.\n * @internal\n */ class Topology extends mongo_types_1.TypedEventEmitter {\n    /**\n     * @param seedlist - a list of HostAddress instances to connect to\n     */ constructor(client, seeds, options){\n        super();\n        this.client = client;\n        this.selectServerAsync = (0, util_1.promisify)((selector, options, callback)=>this.selectServer(selector, options, callback));\n        // Options should only be undefined in tests, MongoClient will always have defined options\n        options = options ?? {\n            hosts: [\n                utils_1.HostAddress.fromString(\"localhost:27017\")\n            ],\n            ...Object.fromEntries(connection_string_1.DEFAULT_OPTIONS.entries()),\n            ...Object.fromEntries(connection_string_1.FEATURE_FLAGS.entries())\n        };\n        if (typeof seeds === \"string\") {\n            seeds = [\n                utils_1.HostAddress.fromString(seeds)\n            ];\n        } else if (!Array.isArray(seeds)) {\n            seeds = [\n                seeds\n            ];\n        }\n        const seedlist = [];\n        for (const seed of seeds){\n            if (typeof seed === \"string\") {\n                seedlist.push(utils_1.HostAddress.fromString(seed));\n            } else if (seed instanceof utils_1.HostAddress) {\n                seedlist.push(seed);\n            } else {\n                // FIXME(NODE-3483): May need to be a MongoParseError\n                throw new error_1.MongoRuntimeError(`Topology cannot be constructed from ${JSON.stringify(seed)}`);\n            }\n        }\n        const topologyType = topologyTypeFromOptions(options);\n        const topologyId = globalTopologyCounter++;\n        const selectedHosts = options.srvMaxHosts == null || options.srvMaxHosts === 0 || options.srvMaxHosts >= seedlist.length ? seedlist : (0, utils_1.shuffle)(seedlist, options.srvMaxHosts);\n        const serverDescriptions = new Map();\n        for (const hostAddress of selectedHosts){\n            serverDescriptions.set(hostAddress.toString(), new server_description_1.ServerDescription(hostAddress));\n        }\n        this[kWaitQueue] = new utils_1.List();\n        this.s = {\n            // the id of this topology\n            id: topologyId,\n            // passed in options\n            options,\n            // initial seedlist of servers to connect to\n            seedlist,\n            // initial state\n            state: common_1.STATE_CLOSED,\n            // the topology description\n            description: new topology_description_1.TopologyDescription(topologyType, serverDescriptions, options.replicaSet, undefined, undefined, undefined, options),\n            serverSelectionTimeoutMS: options.serverSelectionTimeoutMS,\n            heartbeatFrequencyMS: options.heartbeatFrequencyMS,\n            minHeartbeatFrequencyMS: options.minHeartbeatFrequencyMS,\n            // a map of server instances to normalized addresses\n            servers: new Map(),\n            credentials: options?.credentials,\n            clusterTime: undefined,\n            // timer management\n            connectionTimers: new Set(),\n            detectShardedTopology: (ev)=>this.detectShardedTopology(ev),\n            detectSrvRecords: (ev)=>this.detectSrvRecords(ev)\n        };\n        if (options.srvHost && !options.loadBalanced) {\n            this.s.srvPoller = options.srvPoller ?? new srv_polling_1.SrvPoller({\n                heartbeatFrequencyMS: this.s.heartbeatFrequencyMS,\n                srvHost: options.srvHost,\n                srvMaxHosts: options.srvMaxHosts,\n                srvServiceName: options.srvServiceName\n            });\n            this.on(Topology.TOPOLOGY_DESCRIPTION_CHANGED, this.s.detectShardedTopology);\n        }\n    }\n    detectShardedTopology(event) {\n        const previousType = event.previousDescription.type;\n        const newType = event.newDescription.type;\n        const transitionToSharded = previousType !== common_1.TopologyType.Sharded && newType === common_1.TopologyType.Sharded;\n        const srvListeners = this.s.srvPoller?.listeners(srv_polling_1.SrvPoller.SRV_RECORD_DISCOVERY);\n        const listeningToSrvPolling = !!srvListeners?.includes(this.s.detectSrvRecords);\n        if (transitionToSharded && !listeningToSrvPolling) {\n            this.s.srvPoller?.on(srv_polling_1.SrvPoller.SRV_RECORD_DISCOVERY, this.s.detectSrvRecords);\n            this.s.srvPoller?.start();\n        }\n    }\n    detectSrvRecords(ev) {\n        const previousTopologyDescription = this.s.description;\n        this.s.description = this.s.description.updateFromSrvPollingEvent(ev, this.s.options.srvMaxHosts);\n        if (this.s.description === previousTopologyDescription) {\n            // Nothing changed, so return\n            return;\n        }\n        updateServers(this);\n        this.emit(Topology.TOPOLOGY_DESCRIPTION_CHANGED, new events_1.TopologyDescriptionChangedEvent(this.s.id, previousTopologyDescription, this.s.description));\n    }\n    /**\n     * @returns A `TopologyDescription` for this topology\n     */ get description() {\n        return this.s.description;\n    }\n    get loadBalanced() {\n        return this.s.options.loadBalanced;\n    }\n    get capabilities() {\n        return new ServerCapabilities(this.lastHello());\n    }\n    connect(options, callback) {\n        if (typeof options === \"function\") callback = options, options = {};\n        options = options ?? {};\n        if (this.s.state === common_1.STATE_CONNECTED) {\n            if (typeof callback === \"function\") {\n                callback();\n            }\n            return;\n        }\n        stateTransition(this, common_1.STATE_CONNECTING);\n        // emit SDAM monitoring events\n        this.emit(Topology.TOPOLOGY_OPENING, new events_1.TopologyOpeningEvent(this.s.id));\n        // emit an event for the topology change\n        this.emit(Topology.TOPOLOGY_DESCRIPTION_CHANGED, new events_1.TopologyDescriptionChangedEvent(this.s.id, new topology_description_1.TopologyDescription(common_1.TopologyType.Unknown), this.s.description));\n        // connect all known servers, then attempt server selection to connect\n        const serverDescriptions = Array.from(this.s.description.servers.values());\n        this.s.servers = new Map(serverDescriptions.map((serverDescription)=>[\n                serverDescription.address,\n                createAndConnectServer(this, serverDescription)\n            ]));\n        // In load balancer mode we need to fake a server description getting\n        // emitted from the monitor, since the monitor doesn't exist.\n        if (this.s.options.loadBalanced) {\n            for (const description of serverDescriptions){\n                const newDescription = new server_description_1.ServerDescription(description.hostAddress, undefined, {\n                    loadBalanced: this.s.options.loadBalanced\n                });\n                this.serverUpdateHandler(newDescription);\n            }\n        }\n        const exitWithError = (error)=>callback ? callback(error) : this.emit(Topology.ERROR, error);\n        const readPreference = options.readPreference ?? read_preference_1.ReadPreference.primary;\n        this.selectServer((0, server_selection_1.readPreferenceServerSelector)(readPreference), options, (err, server)=>{\n            if (err) {\n                return this.close({\n                    force: false\n                }, ()=>exitWithError(err));\n            }\n            // TODO: NODE-2471\n            const skipPingOnConnect = this.s.options[Symbol.for(\"@@mdb.skipPingOnConnect\")] === true;\n            if (!skipPingOnConnect && server && this.s.credentials) {\n                server.command((0, utils_1.ns)(\"admin.$cmd\"), {\n                    ping: 1\n                }, {}, (err)=>{\n                    if (err) {\n                        return exitWithError(err);\n                    }\n                    stateTransition(this, common_1.STATE_CONNECTED);\n                    this.emit(Topology.OPEN, this);\n                    this.emit(Topology.CONNECT, this);\n                    callback?.(undefined, this);\n                });\n                return;\n            }\n            stateTransition(this, common_1.STATE_CONNECTED);\n            this.emit(Topology.OPEN, this);\n            this.emit(Topology.CONNECT, this);\n            callback?.(undefined, this);\n        });\n    }\n    close(options, callback) {\n        options = options ?? {\n            force: false\n        };\n        if (this.s.state === common_1.STATE_CLOSED || this.s.state === common_1.STATE_CLOSING) {\n            return callback?.();\n        }\n        const destroyedServers = Array.from(this.s.servers.values(), (server)=>{\n            return (0, util_1.promisify)(destroyServer)(server, this, {\n                force: !!options?.force\n            });\n        });\n        Promise.all(destroyedServers).then(()=>{\n            this.s.servers.clear();\n            stateTransition(this, common_1.STATE_CLOSING);\n            drainWaitQueue(this[kWaitQueue], new error_1.MongoTopologyClosedError());\n            (0, common_1.drainTimerQueue)(this.s.connectionTimers);\n            if (this.s.srvPoller) {\n                this.s.srvPoller.stop();\n                this.s.srvPoller.removeListener(srv_polling_1.SrvPoller.SRV_RECORD_DISCOVERY, this.s.detectSrvRecords);\n            }\n            this.removeListener(Topology.TOPOLOGY_DESCRIPTION_CHANGED, this.s.detectShardedTopology);\n            stateTransition(this, common_1.STATE_CLOSED);\n            // emit an event for close\n            this.emit(Topology.TOPOLOGY_CLOSED, new events_1.TopologyClosedEvent(this.s.id));\n        }).finally(()=>callback?.());\n    }\n    /**\n     * Selects a server according to the selection predicate provided\n     *\n     * @param selector - An optional selector to select servers by, defaults to a random selection within a latency window\n     * @param options - Optional settings related to server selection\n     * @param callback - The callback used to indicate success or failure\n     * @returns An instance of a `Server` meeting the criteria of the predicate provided\n     */ selectServer(selector, options, callback) {\n        let serverSelector;\n        if (typeof selector !== \"function\") {\n            if (typeof selector === \"string\") {\n                serverSelector = (0, server_selection_1.readPreferenceServerSelector)(read_preference_1.ReadPreference.fromString(selector));\n            } else {\n                let readPreference;\n                if (selector instanceof read_preference_1.ReadPreference) {\n                    readPreference = selector;\n                } else {\n                    read_preference_1.ReadPreference.translate(options);\n                    readPreference = options.readPreference || read_preference_1.ReadPreference.primary;\n                }\n                serverSelector = (0, server_selection_1.readPreferenceServerSelector)(readPreference);\n            }\n        } else {\n            serverSelector = selector;\n        }\n        options = Object.assign({}, {\n            serverSelectionTimeoutMS: this.s.serverSelectionTimeoutMS\n        }, options);\n        const isSharded = this.description.type === common_1.TopologyType.Sharded;\n        const session = options.session;\n        const transaction = session && session.transaction;\n        if (isSharded && transaction && transaction.server) {\n            callback(undefined, transaction.server);\n            return;\n        }\n        const waitQueueMember = {\n            serverSelector,\n            transaction,\n            callback,\n            timeoutController: new utils_1.TimeoutController(options.serverSelectionTimeoutMS)\n        };\n        waitQueueMember.timeoutController.signal.addEventListener(\"abort\", ()=>{\n            waitQueueMember[kCancelled] = true;\n            waitQueueMember.timeoutController.clear();\n            const timeoutError = new error_1.MongoServerSelectionError(`Server selection timed out after ${options.serverSelectionTimeoutMS} ms`, this.description);\n            waitQueueMember.callback(timeoutError);\n        });\n        this[kWaitQueue].push(waitQueueMember);\n        processWaitQueue(this);\n    }\n    /**\n     * Update the internal TopologyDescription with a ServerDescription\n     *\n     * @param serverDescription - The server to update in the internal list of server descriptions\n     */ serverUpdateHandler(serverDescription) {\n        if (!this.s.description.hasServer(serverDescription.address)) {\n            return;\n        }\n        // ignore this server update if its from an outdated topologyVersion\n        if (isStaleServerDescription(this.s.description, serverDescription)) {\n            return;\n        }\n        // these will be used for monitoring events later\n        const previousTopologyDescription = this.s.description;\n        const previousServerDescription = this.s.description.servers.get(serverDescription.address);\n        if (!previousServerDescription) {\n            return;\n        }\n        // Driver Sessions Spec: \"Whenever a driver receives a cluster time from\n        // a server it MUST compare it to the current highest seen cluster time\n        // for the deployment. If the new cluster time is higher than the\n        // highest seen cluster time it MUST become the new highest seen cluster\n        // time. Two cluster times are compared using only the BsonTimestamp\n        // value of the clusterTime embedded field.\"\n        const clusterTime = serverDescription.$clusterTime;\n        if (clusterTime) {\n            (0, common_1._advanceClusterTime)(this, clusterTime);\n        }\n        // If we already know all the information contained in this updated description, then\n        // we don't need to emit SDAM events, but still need to update the description, in order\n        // to keep client-tracked attributes like last update time and round trip time up to date\n        const equalDescriptions = previousServerDescription && previousServerDescription.equals(serverDescription);\n        // first update the TopologyDescription\n        this.s.description = this.s.description.update(serverDescription);\n        if (this.s.description.compatibilityError) {\n            this.emit(Topology.ERROR, new error_1.MongoCompatibilityError(this.s.description.compatibilityError));\n            return;\n        }\n        // emit monitoring events for this change\n        if (!equalDescriptions) {\n            const newDescription = this.s.description.servers.get(serverDescription.address);\n            if (newDescription) {\n                this.emit(Topology.SERVER_DESCRIPTION_CHANGED, new events_1.ServerDescriptionChangedEvent(this.s.id, serverDescription.address, previousServerDescription, newDescription));\n            }\n        }\n        // update server list from updated descriptions\n        updateServers(this, serverDescription);\n        // attempt to resolve any outstanding server selection attempts\n        if (this[kWaitQueue].length > 0) {\n            processWaitQueue(this);\n        }\n        if (!equalDescriptions) {\n            this.emit(Topology.TOPOLOGY_DESCRIPTION_CHANGED, new events_1.TopologyDescriptionChangedEvent(this.s.id, previousTopologyDescription, this.s.description));\n        }\n    }\n    auth(credentials, callback) {\n        if (typeof credentials === \"function\") callback = credentials, credentials = undefined;\n        if (typeof callback === \"function\") callback(undefined, true);\n    }\n    get clientMetadata() {\n        return this.s.options.metadata;\n    }\n    isConnected() {\n        return this.s.state === common_1.STATE_CONNECTED;\n    }\n    isDestroyed() {\n        return this.s.state === common_1.STATE_CLOSED;\n    }\n    // NOTE: There are many places in code where we explicitly check the last hello\n    //       to do feature support detection. This should be done any other way, but for\n    //       now we will just return the first hello seen, which should suffice.\n    lastHello() {\n        const serverDescriptions = Array.from(this.description.servers.values());\n        if (serverDescriptions.length === 0) return {};\n        const sd = serverDescriptions.filter((sd)=>sd.type !== common_1.ServerType.Unknown)[0];\n        const result = sd || {\n            maxWireVersion: this.description.commonWireVersion\n        };\n        return result;\n    }\n    get commonWireVersion() {\n        return this.description.commonWireVersion;\n    }\n    get logicalSessionTimeoutMinutes() {\n        return this.description.logicalSessionTimeoutMinutes;\n    }\n    get clusterTime() {\n        return this.s.clusterTime;\n    }\n    set clusterTime(clusterTime) {\n        this.s.clusterTime = clusterTime;\n    }\n}\n/** @event */ Topology.SERVER_OPENING = constants_1.SERVER_OPENING;\n/** @event */ Topology.SERVER_CLOSED = constants_1.SERVER_CLOSED;\n/** @event */ Topology.SERVER_DESCRIPTION_CHANGED = constants_1.SERVER_DESCRIPTION_CHANGED;\n/** @event */ Topology.TOPOLOGY_OPENING = constants_1.TOPOLOGY_OPENING;\n/** @event */ Topology.TOPOLOGY_CLOSED = constants_1.TOPOLOGY_CLOSED;\n/** @event */ Topology.TOPOLOGY_DESCRIPTION_CHANGED = constants_1.TOPOLOGY_DESCRIPTION_CHANGED;\n/** @event */ Topology.ERROR = constants_1.ERROR;\n/** @event */ Topology.OPEN = constants_1.OPEN;\n/** @event */ Topology.CONNECT = constants_1.CONNECT;\n/** @event */ Topology.CLOSE = constants_1.CLOSE;\n/** @event */ Topology.TIMEOUT = constants_1.TIMEOUT;\nexports.Topology = Topology;\n/** Destroys a server, and removes all event listeners from the instance */ function destroyServer(server, topology, options, callback) {\n    options = options ?? {\n        force: false\n    };\n    for (const event of constants_1.LOCAL_SERVER_EVENTS){\n        server.removeAllListeners(event);\n    }\n    server.destroy(options, ()=>{\n        topology.emit(Topology.SERVER_CLOSED, new events_1.ServerClosedEvent(topology.s.id, server.description.address));\n        for (const event of constants_1.SERVER_RELAY_EVENTS){\n            server.removeAllListeners(event);\n        }\n        if (typeof callback === \"function\") {\n            callback();\n        }\n    });\n}\n/** Predicts the TopologyType from options */ function topologyTypeFromOptions(options) {\n    if (options?.directConnection) {\n        return common_1.TopologyType.Single;\n    }\n    if (options?.replicaSet) {\n        return common_1.TopologyType.ReplicaSetNoPrimary;\n    }\n    if (options?.loadBalanced) {\n        return common_1.TopologyType.LoadBalanced;\n    }\n    return common_1.TopologyType.Unknown;\n}\n/**\n * Creates new server instances and attempts to connect them\n *\n * @param topology - The topology that this server belongs to\n * @param serverDescription - The description for the server to initialize and connect to\n */ function createAndConnectServer(topology, serverDescription) {\n    topology.emit(Topology.SERVER_OPENING, new events_1.ServerOpeningEvent(topology.s.id, serverDescription.address));\n    const server = new server_1.Server(topology, serverDescription, topology.s.options);\n    for (const event of constants_1.SERVER_RELAY_EVENTS){\n        server.on(event, (e)=>topology.emit(event, e));\n    }\n    server.on(server_1.Server.DESCRIPTION_RECEIVED, (description)=>topology.serverUpdateHandler(description));\n    server.connect();\n    return server;\n}\n/**\n * @param topology - Topology to update.\n * @param incomingServerDescription - New server description.\n */ function updateServers(topology, incomingServerDescription) {\n    // update the internal server's description\n    if (incomingServerDescription && topology.s.servers.has(incomingServerDescription.address)) {\n        const server = topology.s.servers.get(incomingServerDescription.address);\n        if (server) {\n            server.s.description = incomingServerDescription;\n            if (incomingServerDescription.error instanceof error_1.MongoError && incomingServerDescription.error.hasErrorLabel(error_1.MongoErrorLabel.ResetPool)) {\n                const interruptInUseConnections = incomingServerDescription.error.hasErrorLabel(error_1.MongoErrorLabel.InterruptInUseConnections);\n                server.pool.clear({\n                    interruptInUseConnections\n                });\n            } else if (incomingServerDescription.error == null) {\n                const newTopologyType = topology.s.description.type;\n                const shouldMarkPoolReady = incomingServerDescription.isDataBearing || incomingServerDescription.type !== common_1.ServerType.Unknown && newTopologyType === common_1.TopologyType.Single;\n                if (shouldMarkPoolReady) {\n                    server.pool.ready();\n                }\n            }\n        }\n    }\n    // add new servers for all descriptions we currently don't know about locally\n    for (const serverDescription of topology.description.servers.values()){\n        if (!topology.s.servers.has(serverDescription.address)) {\n            const server = createAndConnectServer(topology, serverDescription);\n            topology.s.servers.set(serverDescription.address, server);\n        }\n    }\n    // for all servers no longer known, remove their descriptions and destroy their instances\n    for (const entry of topology.s.servers){\n        const serverAddress = entry[0];\n        if (topology.description.hasServer(serverAddress)) {\n            continue;\n        }\n        if (!topology.s.servers.has(serverAddress)) {\n            continue;\n        }\n        const server = topology.s.servers.get(serverAddress);\n        topology.s.servers.delete(serverAddress);\n        // prepare server for garbage collection\n        if (server) {\n            destroyServer(server, topology);\n        }\n    }\n}\nfunction drainWaitQueue(queue, err) {\n    while(queue.length){\n        const waitQueueMember = queue.shift();\n        if (!waitQueueMember) {\n            continue;\n        }\n        waitQueueMember.timeoutController.clear();\n        if (!waitQueueMember[kCancelled]) {\n            waitQueueMember.callback(err);\n        }\n    }\n}\nfunction processWaitQueue(topology) {\n    if (topology.s.state === common_1.STATE_CLOSED) {\n        drainWaitQueue(topology[kWaitQueue], new error_1.MongoTopologyClosedError());\n        return;\n    }\n    const isSharded = topology.description.type === common_1.TopologyType.Sharded;\n    const serverDescriptions = Array.from(topology.description.servers.values());\n    const membersToProcess = topology[kWaitQueue].length;\n    for(let i = 0; i < membersToProcess; ++i){\n        const waitQueueMember = topology[kWaitQueue].shift();\n        if (!waitQueueMember) {\n            continue;\n        }\n        if (waitQueueMember[kCancelled]) {\n            continue;\n        }\n        let selectedDescriptions;\n        try {\n            const serverSelector = waitQueueMember.serverSelector;\n            selectedDescriptions = serverSelector ? serverSelector(topology.description, serverDescriptions) : serverDescriptions;\n        } catch (e) {\n            waitQueueMember.timeoutController.clear();\n            waitQueueMember.callback(e);\n            continue;\n        }\n        let selectedServer;\n        if (selectedDescriptions.length === 0) {\n            topology[kWaitQueue].push(waitQueueMember);\n            continue;\n        } else if (selectedDescriptions.length === 1) {\n            selectedServer = topology.s.servers.get(selectedDescriptions[0].address);\n        } else {\n            const descriptions = (0, utils_1.shuffle)(selectedDescriptions, 2);\n            const server1 = topology.s.servers.get(descriptions[0].address);\n            const server2 = topology.s.servers.get(descriptions[1].address);\n            selectedServer = server1 && server2 && server1.s.operationCount < server2.s.operationCount ? server1 : server2;\n        }\n        if (!selectedServer) {\n            waitQueueMember.callback(new error_1.MongoServerSelectionError(\"server selection returned a server description but the server was not found in the topology\", topology.description));\n            return;\n        }\n        const transaction = waitQueueMember.transaction;\n        if (isSharded && transaction && transaction.isActive && selectedServer) {\n            transaction.pinServer(selectedServer);\n        }\n        waitQueueMember.timeoutController.clear();\n        waitQueueMember.callback(undefined, selectedServer);\n    }\n    if (topology[kWaitQueue].length > 0) {\n        // ensure all server monitors attempt monitoring soon\n        for (const [, server] of topology.s.servers){\n            process.nextTick(function scheduleServerCheck() {\n                return server.requestCheck();\n            });\n        }\n    }\n}\nfunction isStaleServerDescription(topologyDescription, incomingServerDescription) {\n    const currentServerDescription = topologyDescription.servers.get(incomingServerDescription.address);\n    const currentTopologyVersion = currentServerDescription?.topologyVersion;\n    return (0, server_description_1.compareTopologyVersion)(currentTopologyVersion, incomingServerDescription.topologyVersion) > 0;\n}\n/** @public */ class ServerCapabilities {\n    constructor(hello){\n        this.minWireVersion = hello.minWireVersion || 0;\n        this.maxWireVersion = hello.maxWireVersion || 0;\n    }\n    get hasAggregationCursor() {\n        return this.maxWireVersion >= 1;\n    }\n    get hasWriteCommands() {\n        return this.maxWireVersion >= 2;\n    }\n    get hasTextSearch() {\n        return this.minWireVersion >= 0;\n    }\n    get hasAuthCommands() {\n        return this.maxWireVersion >= 1;\n    }\n    get hasListCollectionsCommand() {\n        return this.maxWireVersion >= 3;\n    }\n    get hasListIndexesCommand() {\n        return this.maxWireVersion >= 3;\n    }\n    get supportsSnapshotReads() {\n        return this.maxWireVersion >= 13;\n    }\n    get commandsTakeWriteConcern() {\n        return this.maxWireVersion >= 5;\n    }\n    get commandsTakeCollation() {\n        return this.maxWireVersion >= 5;\n    }\n}\nexports.ServerCapabilities = ServerCapabilities; //# sourceMappingURL=topology.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbW9uZ29kYi9saWIvc2RhbS90b3BvbG9neS5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiQSw4Q0FBNkM7SUFBRUcsT0FBTztBQUFLLENBQUMsRUFBQztBQUM3REQsMEJBQTBCLEdBQUdBLGdCQUFnQixHQUFHLEtBQUs7QUFDckQsTUFBTUksU0FBU0MsbUJBQU9BLENBQUMsa0JBQU07QUFDN0IsTUFBTUMsc0JBQXNCRCxtQkFBT0EsQ0FBQyxtRkFBc0I7QUFDMUQsTUFBTUUsY0FBY0YsbUJBQU9BLENBQUMsbUVBQWM7QUFDMUMsTUFBTUcsVUFBVUgsbUJBQU9BLENBQUMsMkRBQVU7QUFDbEMsTUFBTUksZ0JBQWdCSixtQkFBT0EsQ0FBQyx1RUFBZ0I7QUFDOUMsTUFBTUssb0JBQW9CTCxtQkFBT0EsQ0FBQywrRUFBb0I7QUFDdEQsTUFBTU0sVUFBVU4sbUJBQU9BLENBQUMsMkRBQVU7QUFDbEMsTUFBTU8sV0FBV1AsbUJBQU9BLENBQUMsaUVBQVU7QUFDbkMsTUFBTVEsV0FBV1IsbUJBQU9BLENBQUMsaUVBQVU7QUFDbkMsTUFBTVMsV0FBV1QsbUJBQU9BLENBQUMsaUVBQVU7QUFDbkMsTUFBTVUsdUJBQXVCVixtQkFBT0EsQ0FBQyx5RkFBc0I7QUFDM0QsTUFBTVcscUJBQXFCWCxtQkFBT0EsQ0FBQyxxRkFBb0I7QUFDdkQsTUFBTVksZ0JBQWdCWixtQkFBT0EsQ0FBQywyRUFBZTtBQUM3QyxNQUFNYSx5QkFBeUJiLG1CQUFPQSxDQUFDLDZGQUF3QjtBQUMvRCxlQUFlO0FBQ2YsSUFBSWMsd0JBQXdCO0FBQzVCLE1BQU1DLGtCQUFrQixDQUFDLEdBQUdULFFBQVFVLGdCQUFnQixFQUFFO0lBQ2xELENBQUNULFNBQVNVLFlBQVksQ0FBQyxFQUFFO1FBQUNWLFNBQVNVLFlBQVk7UUFBRVYsU0FBU1csZ0JBQWdCO0tBQUM7SUFDM0UsQ0FBQ1gsU0FBU1csZ0JBQWdCLENBQUMsRUFBRTtRQUFDWCxTQUFTVyxnQkFBZ0I7UUFBRVgsU0FBU1ksYUFBYTtRQUFFWixTQUFTYSxlQUFlO1FBQUViLFNBQVNVLFlBQVk7S0FBQztJQUNqSSxDQUFDVixTQUFTYSxlQUFlLENBQUMsRUFBRTtRQUFDYixTQUFTYSxlQUFlO1FBQUViLFNBQVNZLGFBQWE7UUFBRVosU0FBU1UsWUFBWTtLQUFDO0lBQ3JHLENBQUNWLFNBQVNZLGFBQWEsQ0FBQyxFQUFFO1FBQUNaLFNBQVNZLGFBQWE7UUFBRVosU0FBU1UsWUFBWTtLQUFDO0FBQzdFO0FBQ0EsY0FBYyxHQUNkLE1BQU1JLGFBQWFDLE9BQU87QUFDMUIsY0FBYyxHQUNkLE1BQU1DLGFBQWFELE9BQU87QUFDMUI7OztDQUdDLEdBQ0QsTUFBTXhCLGlCQUFpQk0sY0FBY29CLGlCQUFpQjtJQUNsRDs7S0FFQyxHQUNEQyxZQUFZQyxNQUFNLEVBQUVDLEtBQUssRUFBRUMsT0FBTyxDQUFFO1FBQ2hDLEtBQUs7UUFDTCxJQUFJLENBQUNGLE1BQU0sR0FBR0E7UUFDZCxJQUFJLENBQUNHLGlCQUFpQixHQUFHLENBQUMsR0FBRzlCLE9BQU8rQixTQUFTLEVBQUUsQ0FBQ0MsVUFBVUgsU0FBU0ksV0FBYSxJQUFJLENBQUNDLFlBQVksQ0FBQ0YsVUFBVUgsU0FBU0k7UUFDckgsMEZBQTBGO1FBQzFGSixVQUFVQSxXQUFXO1lBQ2pCTSxPQUFPO2dCQUFDNUIsUUFBUTZCLFdBQVcsQ0FBQ0MsVUFBVSxDQUFDO2FBQW1CO1lBQzFELEdBQUczQyxPQUFPNEMsV0FBVyxDQUFDcEMsb0JBQW9CcUMsZUFBZSxDQUFDQyxPQUFPLEdBQUc7WUFDcEUsR0FBRzlDLE9BQU80QyxXQUFXLENBQUNwQyxvQkFBb0J1QyxhQUFhLENBQUNELE9BQU8sR0FBRztRQUN0RTtRQUNBLElBQUksT0FBT1osVUFBVSxVQUFVO1lBQzNCQSxRQUFRO2dCQUFDckIsUUFBUTZCLFdBQVcsQ0FBQ0MsVUFBVSxDQUFDVDthQUFPO1FBQ25ELE9BQ0ssSUFBSSxDQUFDYyxNQUFNQyxPQUFPLENBQUNmLFFBQVE7WUFDNUJBLFFBQVE7Z0JBQUNBO2FBQU07UUFDbkI7UUFDQSxNQUFNZ0IsV0FBVyxFQUFFO1FBQ25CLEtBQUssTUFBTUMsUUFBUWpCLE1BQU87WUFDdEIsSUFBSSxPQUFPaUIsU0FBUyxVQUFVO2dCQUMxQkQsU0FBU0UsSUFBSSxDQUFDdkMsUUFBUTZCLFdBQVcsQ0FBQ0MsVUFBVSxDQUFDUTtZQUNqRCxPQUNLLElBQUlBLGdCQUFnQnRDLFFBQVE2QixXQUFXLEVBQUU7Z0JBQzFDUSxTQUFTRSxJQUFJLENBQUNEO1lBQ2xCLE9BQ0s7Z0JBQ0QscURBQXFEO2dCQUNyRCxNQUFNLElBQUl6QyxRQUFRMkMsaUJBQWlCLENBQUMsQ0FBQyxvQ0FBb0MsRUFBRUMsS0FBS0MsU0FBUyxDQUFDSixNQUFNLENBQUM7WUFDckc7UUFDSjtRQUNBLE1BQU1LLGVBQWVDLHdCQUF3QnRCO1FBQzdDLE1BQU11QixhQUFhckM7UUFDbkIsTUFBTXNDLGdCQUFnQnhCLFFBQVF5QixXQUFXLElBQUksUUFDekN6QixRQUFReUIsV0FBVyxLQUFLLEtBQ3hCekIsUUFBUXlCLFdBQVcsSUFBSVYsU0FBU1csTUFBTSxHQUNwQ1gsV0FDQSxDQUFDLEdBQUdyQyxRQUFRaUQsT0FBTyxFQUFFWixVQUFVZixRQUFReUIsV0FBVztRQUN4RCxNQUFNRyxxQkFBcUIsSUFBSUM7UUFDL0IsS0FBSyxNQUFNQyxlQUFlTixjQUFlO1lBQ3JDSSxtQkFBbUJHLEdBQUcsQ0FBQ0QsWUFBWUUsUUFBUSxJQUFJLElBQUlsRCxxQkFBcUJtRCxpQkFBaUIsQ0FBQ0g7UUFDOUY7UUFDQSxJQUFJLENBQUNuQyxXQUFXLEdBQUcsSUFBSWpCLFFBQVF3RCxJQUFJO1FBQ25DLElBQUksQ0FBQ0MsQ0FBQyxHQUFHO1lBQ0wsMEJBQTBCO1lBQzFCQyxJQUFJYjtZQUNKLG9CQUFvQjtZQUNwQnZCO1lBQ0EsNENBQTRDO1lBQzVDZTtZQUNBLGdCQUFnQjtZQUNoQnNCLE9BQU8xRCxTQUFTVSxZQUFZO1lBQzVCLDJCQUEyQjtZQUMzQmlELGFBQWEsSUFBSXJELHVCQUF1QnNELG1CQUFtQixDQUFDbEIsY0FBY08sb0JBQW9CNUIsUUFBUXdDLFVBQVUsRUFBRUMsV0FBV0EsV0FBV0EsV0FBV3pDO1lBQ25KMEMsMEJBQTBCMUMsUUFBUTBDLHdCQUF3QjtZQUMxREMsc0JBQXNCM0MsUUFBUTJDLG9CQUFvQjtZQUNsREMseUJBQXlCNUMsUUFBUTRDLHVCQUF1QjtZQUN4RCxvREFBb0Q7WUFDcERDLFNBQVMsSUFBSWhCO1lBQ2JpQixhQUFhOUMsU0FBUzhDO1lBQ3RCQyxhQUFhTjtZQUNiLG1CQUFtQjtZQUNuQk8sa0JBQWtCLElBQUlDO1lBQ3RCQyx1QkFBdUJDLENBQUFBLEtBQU0sSUFBSSxDQUFDRCxxQkFBcUIsQ0FBQ0M7WUFDeERDLGtCQUFrQkQsQ0FBQUEsS0FBTSxJQUFJLENBQUNDLGdCQUFnQixDQUFDRDtRQUNsRDtRQUNBLElBQUluRCxRQUFRcUQsT0FBTyxJQUFJLENBQUNyRCxRQUFRc0QsWUFBWSxFQUFFO1lBQzFDLElBQUksQ0FBQ25CLENBQUMsQ0FBQ29CLFNBQVMsR0FDWnZELFFBQVF1RCxTQUFTLElBQ2IsSUFBSXZFLGNBQWN3RSxTQUFTLENBQUM7Z0JBQ3hCYixzQkFBc0IsSUFBSSxDQUFDUixDQUFDLENBQUNRLG9CQUFvQjtnQkFDakRVLFNBQVNyRCxRQUFRcUQsT0FBTztnQkFDeEI1QixhQUFhekIsUUFBUXlCLFdBQVc7Z0JBQ2hDZ0MsZ0JBQWdCekQsUUFBUXlELGNBQWM7WUFDMUM7WUFDUixJQUFJLENBQUNDLEVBQUUsQ0FBQ3hGLFNBQVN5Riw0QkFBNEIsRUFBRSxJQUFJLENBQUN4QixDQUFDLENBQUNlLHFCQUFxQjtRQUMvRTtJQUNKO0lBQ0FBLHNCQUFzQlUsS0FBSyxFQUFFO1FBQ3pCLE1BQU1DLGVBQWVELE1BQU1FLG1CQUFtQixDQUFDQyxJQUFJO1FBQ25ELE1BQU1DLFVBQVVKLE1BQU1LLGNBQWMsQ0FBQ0YsSUFBSTtRQUN6QyxNQUFNRyxzQkFBc0JMLGlCQUFpQmxGLFNBQVN3RixZQUFZLENBQUNDLE9BQU8sSUFBSUosWUFBWXJGLFNBQVN3RixZQUFZLENBQUNDLE9BQU87UUFDdkgsTUFBTUMsZUFBZSxJQUFJLENBQUNsQyxDQUFDLENBQUNvQixTQUFTLEVBQUVlLFVBQVV0RixjQUFjd0UsU0FBUyxDQUFDZSxvQkFBb0I7UUFDN0YsTUFBTUMsd0JBQXdCLENBQUMsQ0FBQ0gsY0FBY0ksU0FBUyxJQUFJLENBQUN0QyxDQUFDLENBQUNpQixnQkFBZ0I7UUFDOUUsSUFBSWMsdUJBQXVCLENBQUNNLHVCQUF1QjtZQUMvQyxJQUFJLENBQUNyQyxDQUFDLENBQUNvQixTQUFTLEVBQUVHLEdBQUcxRSxjQUFjd0UsU0FBUyxDQUFDZSxvQkFBb0IsRUFBRSxJQUFJLENBQUNwQyxDQUFDLENBQUNpQixnQkFBZ0I7WUFDMUYsSUFBSSxDQUFDakIsQ0FBQyxDQUFDb0IsU0FBUyxFQUFFbUI7UUFDdEI7SUFDSjtJQUNBdEIsaUJBQWlCRCxFQUFFLEVBQUU7UUFDakIsTUFBTXdCLDhCQUE4QixJQUFJLENBQUN4QyxDQUFDLENBQUNHLFdBQVc7UUFDdEQsSUFBSSxDQUFDSCxDQUFDLENBQUNHLFdBQVcsR0FBRyxJQUFJLENBQUNILENBQUMsQ0FBQ0csV0FBVyxDQUFDc0MseUJBQXlCLENBQUN6QixJQUFJLElBQUksQ0FBQ2hCLENBQUMsQ0FBQ25DLE9BQU8sQ0FBQ3lCLFdBQVc7UUFDaEcsSUFBSSxJQUFJLENBQUNVLENBQUMsQ0FBQ0csV0FBVyxLQUFLcUMsNkJBQTZCO1lBQ3BELDZCQUE2QjtZQUM3QjtRQUNKO1FBQ0FFLGNBQWMsSUFBSTtRQUNsQixJQUFJLENBQUNDLElBQUksQ0FBQzVHLFNBQVN5Riw0QkFBNEIsRUFBRSxJQUFJL0UsU0FBU21HLCtCQUErQixDQUFDLElBQUksQ0FBQzVDLENBQUMsQ0FBQ0MsRUFBRSxFQUFFdUMsNkJBQTZCLElBQUksQ0FBQ3hDLENBQUMsQ0FBQ0csV0FBVztJQUM1SjtJQUNBOztLQUVDLEdBQ0QsSUFBSUEsY0FBYztRQUNkLE9BQU8sSUFBSSxDQUFDSCxDQUFDLENBQUNHLFdBQVc7SUFDN0I7SUFDQSxJQUFJZ0IsZUFBZTtRQUNmLE9BQU8sSUFBSSxDQUFDbkIsQ0FBQyxDQUFDbkMsT0FBTyxDQUFDc0QsWUFBWTtJQUN0QztJQUNBLElBQUkwQixlQUFlO1FBQ2YsT0FBTyxJQUFJL0csbUJBQW1CLElBQUksQ0FBQ2dILFNBQVM7SUFDaEQ7SUFDQUMsUUFBUWxGLE9BQU8sRUFBRUksUUFBUSxFQUFFO1FBQ3ZCLElBQUksT0FBT0osWUFBWSxZQUNuQixXQUFZQSxTQUFXQSxVQUFVLENBQUM7UUFDdENBLFVBQVVBLFdBQVcsQ0FBQztRQUN0QixJQUFJLElBQUksQ0FBQ21DLENBQUMsQ0FBQ0UsS0FBSyxLQUFLMUQsU0FBU2EsZUFBZSxFQUFFO1lBQzNDLElBQUksT0FBT1ksYUFBYSxZQUFZO2dCQUNoQ0E7WUFDSjtZQUNBO1FBQ0o7UUFDQWpCLGdCQUFnQixJQUFJLEVBQUVSLFNBQVNXLGdCQUFnQjtRQUMvQyw4QkFBOEI7UUFDOUIsSUFBSSxDQUFDd0YsSUFBSSxDQUFDNUcsU0FBU2lILGdCQUFnQixFQUFFLElBQUl2RyxTQUFTd0csb0JBQW9CLENBQUMsSUFBSSxDQUFDakQsQ0FBQyxDQUFDQyxFQUFFO1FBQ2hGLHdDQUF3QztRQUN4QyxJQUFJLENBQUMwQyxJQUFJLENBQUM1RyxTQUFTeUYsNEJBQTRCLEVBQUUsSUFBSS9FLFNBQVNtRywrQkFBK0IsQ0FBQyxJQUFJLENBQUM1QyxDQUFDLENBQUNDLEVBQUUsRUFBRSxJQUFJbkQsdUJBQXVCc0QsbUJBQW1CLENBQUM1RCxTQUFTd0YsWUFBWSxDQUFDa0IsT0FBTyxHQUNyTCxJQUFJLENBQUNsRCxDQUFDLENBQUNHLFdBQVc7UUFDbEIsc0VBQXNFO1FBQ3RFLE1BQU1WLHFCQUFxQmYsTUFBTXlFLElBQUksQ0FBQyxJQUFJLENBQUNuRCxDQUFDLENBQUNHLFdBQVcsQ0FBQ08sT0FBTyxDQUFDMEMsTUFBTTtRQUN2RSxJQUFJLENBQUNwRCxDQUFDLENBQUNVLE9BQU8sR0FBRyxJQUFJaEIsSUFBSUQsbUJBQW1CNEQsR0FBRyxDQUFDQyxDQUFBQSxvQkFBcUI7Z0JBQ2pFQSxrQkFBa0JDLE9BQU87Z0JBQ3pCQyx1QkFBdUIsSUFBSSxFQUFFRjthQUNoQztRQUNELHFFQUFxRTtRQUNyRSw2REFBNkQ7UUFDN0QsSUFBSSxJQUFJLENBQUN0RCxDQUFDLENBQUNuQyxPQUFPLENBQUNzRCxZQUFZLEVBQUU7WUFDN0IsS0FBSyxNQUFNaEIsZUFBZVYsbUJBQW9CO2dCQUMxQyxNQUFNcUMsaUJBQWlCLElBQUluRixxQkFBcUJtRCxpQkFBaUIsQ0FBQ0ssWUFBWVIsV0FBVyxFQUFFVyxXQUFXO29CQUNsR2EsY0FBYyxJQUFJLENBQUNuQixDQUFDLENBQUNuQyxPQUFPLENBQUNzRCxZQUFZO2dCQUM3QztnQkFDQSxJQUFJLENBQUNzQyxtQkFBbUIsQ0FBQzNCO1lBQzdCO1FBQ0o7UUFDQSxNQUFNNEIsZ0JBQWdCLENBQUNDLFFBQVUxRixXQUFXQSxTQUFTMEYsU0FBUyxJQUFJLENBQUNoQixJQUFJLENBQUM1RyxTQUFTNkgsS0FBSyxFQUFFRDtRQUN4RixNQUFNRSxpQkFBaUJoRyxRQUFRZ0csY0FBYyxJQUFJdkgsa0JBQWtCd0gsY0FBYyxDQUFDQyxPQUFPO1FBQ3pGLElBQUksQ0FBQzdGLFlBQVksQ0FBQyxDQUFDLEdBQUd0QixtQkFBbUJvSCw0QkFBNEIsRUFBRUgsaUJBQWlCaEcsU0FBUyxDQUFDb0csS0FBS0M7WUFDbkcsSUFBSUQsS0FBSztnQkFDTCxPQUFPLElBQUksQ0FBQ0UsS0FBSyxDQUFDO29CQUFFQyxPQUFPO2dCQUFNLEdBQUcsSUFBTVYsY0FBY087WUFDNUQ7WUFDQSxrQkFBa0I7WUFDbEIsTUFBTUksb0JBQW9CLElBQUksQ0FBQ3JFLENBQUMsQ0FBQ25DLE9BQU8sQ0FBQ04sT0FBTytHLEdBQUcsQ0FBQywyQkFBMkIsS0FBSztZQUNwRixJQUFJLENBQUNELHFCQUFxQkgsVUFBVSxJQUFJLENBQUNsRSxDQUFDLENBQUNXLFdBQVcsRUFBRTtnQkFDcER1RCxPQUFPSyxPQUFPLENBQUMsQ0FBQyxHQUFHaEksUUFBUWlJLEVBQUUsRUFBRSxlQUFlO29CQUFFQyxNQUFNO2dCQUFFLEdBQUcsQ0FBQyxHQUFHUixDQUFBQTtvQkFDM0QsSUFBSUEsS0FBSzt3QkFDTCxPQUFPUCxjQUFjTztvQkFDekI7b0JBQ0FqSCxnQkFBZ0IsSUFBSSxFQUFFUixTQUFTYSxlQUFlO29CQUM5QyxJQUFJLENBQUNzRixJQUFJLENBQUM1RyxTQUFTMkksSUFBSSxFQUFFLElBQUk7b0JBQzdCLElBQUksQ0FBQy9CLElBQUksQ0FBQzVHLFNBQVM0SSxPQUFPLEVBQUUsSUFBSTtvQkFDaEMxRyxXQUFXcUMsV0FBVyxJQUFJO2dCQUM5QjtnQkFDQTtZQUNKO1lBQ0F0RCxnQkFBZ0IsSUFBSSxFQUFFUixTQUFTYSxlQUFlO1lBQzlDLElBQUksQ0FBQ3NGLElBQUksQ0FBQzVHLFNBQVMySSxJQUFJLEVBQUUsSUFBSTtZQUM3QixJQUFJLENBQUMvQixJQUFJLENBQUM1RyxTQUFTNEksT0FBTyxFQUFFLElBQUk7WUFDaEMxRyxXQUFXcUMsV0FBVyxJQUFJO1FBQzlCO0lBQ0o7SUFDQTZELE1BQU10RyxPQUFPLEVBQUVJLFFBQVEsRUFBRTtRQUNyQkosVUFBVUEsV0FBVztZQUFFdUcsT0FBTztRQUFNO1FBQ3BDLElBQUksSUFBSSxDQUFDcEUsQ0FBQyxDQUFDRSxLQUFLLEtBQUsxRCxTQUFTVSxZQUFZLElBQUksSUFBSSxDQUFDOEMsQ0FBQyxDQUFDRSxLQUFLLEtBQUsxRCxTQUFTWSxhQUFhLEVBQUU7WUFDbkYsT0FBT2E7UUFDWDtRQUNBLE1BQU0yRyxtQkFBbUJsRyxNQUFNeUUsSUFBSSxDQUFDLElBQUksQ0FBQ25ELENBQUMsQ0FBQ1UsT0FBTyxDQUFDMEMsTUFBTSxJQUFJYyxDQUFBQTtZQUN6RCxPQUFPLENBQUMsR0FBR2xJLE9BQU8rQixTQUFTLEVBQUU4RyxlQUFlWCxRQUFRLElBQUksRUFBRTtnQkFBRUUsT0FBTyxDQUFDLENBQUN2RyxTQUFTdUc7WUFBTTtRQUN4RjtRQUNBVSxRQUFRQyxHQUFHLENBQUNILGtCQUNQSSxJQUFJLENBQUM7WUFDTixJQUFJLENBQUNoRixDQUFDLENBQUNVLE9BQU8sQ0FBQ3VFLEtBQUs7WUFDcEJqSSxnQkFBZ0IsSUFBSSxFQUFFUixTQUFTWSxhQUFhO1lBQzVDOEgsZUFBZSxJQUFJLENBQUMxSCxXQUFXLEVBQUUsSUFBSXBCLFFBQVErSSx3QkFBd0I7WUFDcEUsSUFBRzNJLFNBQVM0SSxlQUFlLEVBQUUsSUFBSSxDQUFDcEYsQ0FBQyxDQUFDYSxnQkFBZ0I7WUFDckQsSUFBSSxJQUFJLENBQUNiLENBQUMsQ0FBQ29CLFNBQVMsRUFBRTtnQkFDbEIsSUFBSSxDQUFDcEIsQ0FBQyxDQUFDb0IsU0FBUyxDQUFDaUUsSUFBSTtnQkFDckIsSUFBSSxDQUFDckYsQ0FBQyxDQUFDb0IsU0FBUyxDQUFDa0UsY0FBYyxDQUFDekksY0FBY3dFLFNBQVMsQ0FBQ2Usb0JBQW9CLEVBQUUsSUFBSSxDQUFDcEMsQ0FBQyxDQUFDaUIsZ0JBQWdCO1lBQ3pHO1lBQ0EsSUFBSSxDQUFDcUUsY0FBYyxDQUFDdkosU0FBU3lGLDRCQUE0QixFQUFFLElBQUksQ0FBQ3hCLENBQUMsQ0FBQ2UscUJBQXFCO1lBQ3ZGL0QsZ0JBQWdCLElBQUksRUFBRVIsU0FBU1UsWUFBWTtZQUMzQywwQkFBMEI7WUFDMUIsSUFBSSxDQUFDeUYsSUFBSSxDQUFDNUcsU0FBU3dKLGVBQWUsRUFBRSxJQUFJOUksU0FBUytJLG1CQUFtQixDQUFDLElBQUksQ0FBQ3hGLENBQUMsQ0FBQ0MsRUFBRTtRQUNsRixHQUNLd0YsT0FBTyxDQUFDLElBQU14SDtJQUN2QjtJQUNBOzs7Ozs7O0tBT0MsR0FDREMsYUFBYUYsUUFBUSxFQUFFSCxPQUFPLEVBQUVJLFFBQVEsRUFBRTtRQUN0QyxJQUFJeUg7UUFDSixJQUFJLE9BQU8xSCxhQUFhLFlBQVk7WUFDaEMsSUFBSSxPQUFPQSxhQUFhLFVBQVU7Z0JBQzlCMEgsaUJBQWlCLENBQUMsR0FBRzlJLG1CQUFtQm9ILDRCQUE0QixFQUFFMUgsa0JBQWtCd0gsY0FBYyxDQUFDekYsVUFBVSxDQUFDTDtZQUN0SCxPQUNLO2dCQUNELElBQUk2RjtnQkFDSixJQUFJN0Ysb0JBQW9CMUIsa0JBQWtCd0gsY0FBYyxFQUFFO29CQUN0REQsaUJBQWlCN0Y7Z0JBQ3JCLE9BQ0s7b0JBQ0QxQixrQkFBa0J3SCxjQUFjLENBQUM2QixTQUFTLENBQUM5SDtvQkFDM0NnRyxpQkFBaUJoRyxRQUFRZ0csY0FBYyxJQUFJdkgsa0JBQWtCd0gsY0FBYyxDQUFDQyxPQUFPO2dCQUN2RjtnQkFDQTJCLGlCQUFpQixDQUFDLEdBQUc5SSxtQkFBbUJvSCw0QkFBNEIsRUFBRUg7WUFDMUU7UUFDSixPQUNLO1lBQ0Q2QixpQkFBaUIxSDtRQUNyQjtRQUNBSCxVQUFVbkMsT0FBT2tLLE1BQU0sQ0FBQyxDQUFDLEdBQUc7WUFBRXJGLDBCQUEwQixJQUFJLENBQUNQLENBQUMsQ0FBQ08sd0JBQXdCO1FBQUMsR0FBRzFDO1FBQzNGLE1BQU1nSSxZQUFZLElBQUksQ0FBQzFGLFdBQVcsQ0FBQ3lCLElBQUksS0FBS3BGLFNBQVN3RixZQUFZLENBQUNDLE9BQU87UUFDekUsTUFBTTZELFVBQVVqSSxRQUFRaUksT0FBTztRQUMvQixNQUFNQyxjQUFjRCxXQUFXQSxRQUFRQyxXQUFXO1FBQ2xELElBQUlGLGFBQWFFLGVBQWVBLFlBQVk3QixNQUFNLEVBQUU7WUFDaERqRyxTQUFTcUMsV0FBV3lGLFlBQVk3QixNQUFNO1lBQ3RDO1FBQ0o7UUFDQSxNQUFNOEIsa0JBQWtCO1lBQ3BCTjtZQUNBSztZQUNBOUg7WUFDQWdJLG1CQUFtQixJQUFJMUosUUFBUTJKLGlCQUFpQixDQUFDckksUUFBUTBDLHdCQUF3QjtRQUNyRjtRQUNBeUYsZ0JBQWdCQyxpQkFBaUIsQ0FBQ0UsTUFBTSxDQUFDQyxnQkFBZ0IsQ0FBQyxTQUFTO1lBQy9ESixlQUFlLENBQUMxSSxXQUFXLEdBQUc7WUFDOUIwSSxnQkFBZ0JDLGlCQUFpQixDQUFDaEIsS0FBSztZQUN2QyxNQUFNb0IsZUFBZSxJQUFJakssUUFBUWtLLHlCQUF5QixDQUFDLENBQUMsaUNBQWlDLEVBQUV6SSxRQUFRMEMsd0JBQXdCLENBQUMsR0FBRyxDQUFDLEVBQUUsSUFBSSxDQUFDSixXQUFXO1lBQ3RKNkYsZ0JBQWdCL0gsUUFBUSxDQUFDb0k7UUFDN0I7UUFDQSxJQUFJLENBQUM3SSxXQUFXLENBQUNzQixJQUFJLENBQUNrSDtRQUN0Qk8saUJBQWlCLElBQUk7SUFDekI7SUFDQTs7OztLQUlDLEdBQ0Q5QyxvQkFBb0JILGlCQUFpQixFQUFFO1FBQ25DLElBQUksQ0FBQyxJQUFJLENBQUN0RCxDQUFDLENBQUNHLFdBQVcsQ0FBQ3FHLFNBQVMsQ0FBQ2xELGtCQUFrQkMsT0FBTyxHQUFHO1lBQzFEO1FBQ0o7UUFDQSxvRUFBb0U7UUFDcEUsSUFBSWtELHlCQUF5QixJQUFJLENBQUN6RyxDQUFDLENBQUNHLFdBQVcsRUFBRW1ELG9CQUFvQjtZQUNqRTtRQUNKO1FBQ0EsaURBQWlEO1FBQ2pELE1BQU1kLDhCQUE4QixJQUFJLENBQUN4QyxDQUFDLENBQUNHLFdBQVc7UUFDdEQsTUFBTXVHLDRCQUE0QixJQUFJLENBQUMxRyxDQUFDLENBQUNHLFdBQVcsQ0FBQ08sT0FBTyxDQUFDaUcsR0FBRyxDQUFDckQsa0JBQWtCQyxPQUFPO1FBQzFGLElBQUksQ0FBQ21ELDJCQUEyQjtZQUM1QjtRQUNKO1FBQ0Esd0VBQXdFO1FBQ3hFLHVFQUF1RTtRQUN2RSxpRUFBaUU7UUFDakUsd0VBQXdFO1FBQ3hFLG9FQUFvRTtRQUNwRSw0Q0FBNEM7UUFDNUMsTUFBTTlGLGNBQWMwQyxrQkFBa0JzRCxZQUFZO1FBQ2xELElBQUloRyxhQUFhO1lBQ1osSUFBR3BFLFNBQVNxSyxtQkFBbUIsRUFBRSxJQUFJLEVBQUVqRztRQUM1QztRQUNBLHFGQUFxRjtRQUNyRix3RkFBd0Y7UUFDeEYseUZBQXlGO1FBQ3pGLE1BQU1rRyxvQkFBb0JKLDZCQUE2QkEsMEJBQTBCSyxNQUFNLENBQUN6RDtRQUN4Rix1Q0FBdUM7UUFDdkMsSUFBSSxDQUFDdEQsQ0FBQyxDQUFDRyxXQUFXLEdBQUcsSUFBSSxDQUFDSCxDQUFDLENBQUNHLFdBQVcsQ0FBQzZHLE1BQU0sQ0FBQzFEO1FBQy9DLElBQUksSUFBSSxDQUFDdEQsQ0FBQyxDQUFDRyxXQUFXLENBQUM4RyxrQkFBa0IsRUFBRTtZQUN2QyxJQUFJLENBQUN0RSxJQUFJLENBQUM1RyxTQUFTNkgsS0FBSyxFQUFFLElBQUl4SCxRQUFROEssdUJBQXVCLENBQUMsSUFBSSxDQUFDbEgsQ0FBQyxDQUFDRyxXQUFXLENBQUM4RyxrQkFBa0I7WUFDbkc7UUFDSjtRQUNBLHlDQUF5QztRQUN6QyxJQUFJLENBQUNILG1CQUFtQjtZQUNwQixNQUFNaEYsaUJBQWlCLElBQUksQ0FBQzlCLENBQUMsQ0FBQ0csV0FBVyxDQUFDTyxPQUFPLENBQUNpRyxHQUFHLENBQUNyRCxrQkFBa0JDLE9BQU87WUFDL0UsSUFBSXpCLGdCQUFnQjtnQkFDaEIsSUFBSSxDQUFDYSxJQUFJLENBQUM1RyxTQUFTb0wsMEJBQTBCLEVBQUUsSUFBSTFLLFNBQVMySyw2QkFBNkIsQ0FBQyxJQUFJLENBQUNwSCxDQUFDLENBQUNDLEVBQUUsRUFBRXFELGtCQUFrQkMsT0FBTyxFQUFFbUQsMkJBQTJCNUU7WUFDL0o7UUFDSjtRQUNBLCtDQUErQztRQUMvQ1ksY0FBYyxJQUFJLEVBQUVZO1FBQ3BCLCtEQUErRDtRQUMvRCxJQUFJLElBQUksQ0FBQzlGLFdBQVcsQ0FBQytCLE1BQU0sR0FBRyxHQUFHO1lBQzdCZ0gsaUJBQWlCLElBQUk7UUFDekI7UUFDQSxJQUFJLENBQUNPLG1CQUFtQjtZQUNwQixJQUFJLENBQUNuRSxJQUFJLENBQUM1RyxTQUFTeUYsNEJBQTRCLEVBQUUsSUFBSS9FLFNBQVNtRywrQkFBK0IsQ0FBQyxJQUFJLENBQUM1QyxDQUFDLENBQUNDLEVBQUUsRUFBRXVDLDZCQUE2QixJQUFJLENBQUN4QyxDQUFDLENBQUNHLFdBQVc7UUFDNUo7SUFDSjtJQUNBa0gsS0FBSzFHLFdBQVcsRUFBRTFDLFFBQVEsRUFBRTtRQUN4QixJQUFJLE9BQU8wQyxnQkFBZ0IsWUFDdkIsV0FBWUEsYUFBZUEsY0FBY0w7UUFDN0MsSUFBSSxPQUFPckMsYUFBYSxZQUNwQkEsU0FBU3FDLFdBQVc7SUFDNUI7SUFDQSxJQUFJZ0gsaUJBQWlCO1FBQ2pCLE9BQU8sSUFBSSxDQUFDdEgsQ0FBQyxDQUFDbkMsT0FBTyxDQUFDMEosUUFBUTtJQUNsQztJQUNBQyxjQUFjO1FBQ1YsT0FBTyxJQUFJLENBQUN4SCxDQUFDLENBQUNFLEtBQUssS0FBSzFELFNBQVNhLGVBQWU7SUFDcEQ7SUFDQW9LLGNBQWM7UUFDVixPQUFPLElBQUksQ0FBQ3pILENBQUMsQ0FBQ0UsS0FBSyxLQUFLMUQsU0FBU1UsWUFBWTtJQUNqRDtJQUNBLCtFQUErRTtJQUMvRSxvRkFBb0Y7SUFDcEYsNEVBQTRFO0lBQzVFNEYsWUFBWTtRQUNSLE1BQU1yRCxxQkFBcUJmLE1BQU15RSxJQUFJLENBQUMsSUFBSSxDQUFDaEQsV0FBVyxDQUFDTyxPQUFPLENBQUMwQyxNQUFNO1FBQ3JFLElBQUkzRCxtQkFBbUJGLE1BQU0sS0FBSyxHQUM5QixPQUFPLENBQUM7UUFDWixNQUFNbUksS0FBS2pJLG1CQUFtQmtJLE1BQU0sQ0FBQyxDQUFDRCxLQUFPQSxHQUFHOUYsSUFBSSxLQUFLcEYsU0FBU29MLFVBQVUsQ0FBQzFFLE9BQU8sQ0FBQyxDQUFDLEVBQUU7UUFDeEYsTUFBTTJFLFNBQVNILE1BQU07WUFBRUksZ0JBQWdCLElBQUksQ0FBQzNILFdBQVcsQ0FBQzRILGlCQUFpQjtRQUFDO1FBQzFFLE9BQU9GO0lBQ1g7SUFDQSxJQUFJRSxvQkFBb0I7UUFDcEIsT0FBTyxJQUFJLENBQUM1SCxXQUFXLENBQUM0SCxpQkFBaUI7SUFDN0M7SUFDQSxJQUFJQywrQkFBK0I7UUFDL0IsT0FBTyxJQUFJLENBQUM3SCxXQUFXLENBQUM2SCw0QkFBNEI7SUFDeEQ7SUFDQSxJQUFJcEgsY0FBYztRQUNkLE9BQU8sSUFBSSxDQUFDWixDQUFDLENBQUNZLFdBQVc7SUFDN0I7SUFDQSxJQUFJQSxZQUFZQSxXQUFXLEVBQUU7UUFDekIsSUFBSSxDQUFDWixDQUFDLENBQUNZLFdBQVcsR0FBR0E7SUFDekI7QUFDSjtBQUNBLFdBQVcsR0FDWDdFLFNBQVNrTSxjQUFjLEdBQUc5TCxZQUFZOEwsY0FBYztBQUNwRCxXQUFXLEdBQ1hsTSxTQUFTbU0sYUFBYSxHQUFHL0wsWUFBWStMLGFBQWE7QUFDbEQsV0FBVyxHQUNYbk0sU0FBU29MLDBCQUEwQixHQUFHaEwsWUFBWWdMLDBCQUEwQjtBQUM1RSxXQUFXLEdBQ1hwTCxTQUFTaUgsZ0JBQWdCLEdBQUc3RyxZQUFZNkcsZ0JBQWdCO0FBQ3hELFdBQVcsR0FDWGpILFNBQVN3SixlQUFlLEdBQUdwSixZQUFZb0osZUFBZTtBQUN0RCxXQUFXLEdBQ1h4SixTQUFTeUYsNEJBQTRCLEdBQUdyRixZQUFZcUYsNEJBQTRCO0FBQ2hGLFdBQVcsR0FDWHpGLFNBQVM2SCxLQUFLLEdBQUd6SCxZQUFZeUgsS0FBSztBQUNsQyxXQUFXLEdBQ1g3SCxTQUFTMkksSUFBSSxHQUFHdkksWUFBWXVJLElBQUk7QUFDaEMsV0FBVyxHQUNYM0ksU0FBUzRJLE9BQU8sR0FBR3hJLFlBQVl3SSxPQUFPO0FBQ3RDLFdBQVcsR0FDWDVJLFNBQVNvTSxLQUFLLEdBQUdoTSxZQUFZZ00sS0FBSztBQUNsQyxXQUFXLEdBQ1hwTSxTQUFTcU0sT0FBTyxHQUFHak0sWUFBWWlNLE9BQU87QUFDdEN4TSxnQkFBZ0IsR0FBR0c7QUFDbkIseUVBQXlFLEdBQ3pFLFNBQVM4SSxjQUFjWCxNQUFNLEVBQUVtRSxRQUFRLEVBQUV4SyxPQUFPLEVBQUVJLFFBQVE7SUFDdERKLFVBQVVBLFdBQVc7UUFBRXVHLE9BQU87SUFBTTtJQUNwQyxLQUFLLE1BQU0zQyxTQUFTdEYsWUFBWW1NLG1CQUFtQixDQUFFO1FBQ2pEcEUsT0FBT3FFLGtCQUFrQixDQUFDOUc7SUFDOUI7SUFDQXlDLE9BQU9zRSxPQUFPLENBQUMzSyxTQUFTO1FBQ3BCd0ssU0FBUzFGLElBQUksQ0FBQzVHLFNBQVNtTSxhQUFhLEVBQUUsSUFBSXpMLFNBQVNnTSxpQkFBaUIsQ0FBQ0osU0FBU3JJLENBQUMsQ0FBQ0MsRUFBRSxFQUFFaUUsT0FBTy9ELFdBQVcsQ0FBQ29ELE9BQU87UUFDOUcsS0FBSyxNQUFNOUIsU0FBU3RGLFlBQVl1TSxtQkFBbUIsQ0FBRTtZQUNqRHhFLE9BQU9xRSxrQkFBa0IsQ0FBQzlHO1FBQzlCO1FBQ0EsSUFBSSxPQUFPeEQsYUFBYSxZQUFZO1lBQ2hDQTtRQUNKO0lBQ0o7QUFDSjtBQUNBLDJDQUEyQyxHQUMzQyxTQUFTa0Isd0JBQXdCdEIsT0FBTztJQUNwQyxJQUFJQSxTQUFTOEssa0JBQWtCO1FBQzNCLE9BQU9uTSxTQUFTd0YsWUFBWSxDQUFDNEcsTUFBTTtJQUN2QztJQUNBLElBQUkvSyxTQUFTd0MsWUFBWTtRQUNyQixPQUFPN0QsU0FBU3dGLFlBQVksQ0FBQzZHLG1CQUFtQjtJQUNwRDtJQUNBLElBQUloTCxTQUFTc0QsY0FBYztRQUN2QixPQUFPM0UsU0FBU3dGLFlBQVksQ0FBQzhHLFlBQVk7SUFDN0M7SUFDQSxPQUFPdE0sU0FBU3dGLFlBQVksQ0FBQ2tCLE9BQU87QUFDeEM7QUFDQTs7Ozs7Q0FLQyxHQUNELFNBQVNNLHVCQUF1QjZFLFFBQVEsRUFBRS9FLGlCQUFpQjtJQUN2RCtFLFNBQVMxRixJQUFJLENBQUM1RyxTQUFTa00sY0FBYyxFQUFFLElBQUl4TCxTQUFTc00sa0JBQWtCLENBQUNWLFNBQVNySSxDQUFDLENBQUNDLEVBQUUsRUFBRXFELGtCQUFrQkMsT0FBTztJQUMvRyxNQUFNVyxTQUFTLElBQUl4SCxTQUFTc00sTUFBTSxDQUFDWCxVQUFVL0UsbUJBQW1CK0UsU0FBU3JJLENBQUMsQ0FBQ25DLE9BQU87SUFDbEYsS0FBSyxNQUFNNEQsU0FBU3RGLFlBQVl1TSxtQkFBbUIsQ0FBRTtRQUNqRHhFLE9BQU8zQyxFQUFFLENBQUNFLE9BQU8sQ0FBQ3dILElBQU1aLFNBQVMxRixJQUFJLENBQUNsQixPQUFPd0g7SUFDakQ7SUFDQS9FLE9BQU8zQyxFQUFFLENBQUM3RSxTQUFTc00sTUFBTSxDQUFDRSxvQkFBb0IsRUFBRS9JLENBQUFBLGNBQWVrSSxTQUFTNUUsbUJBQW1CLENBQUN0RDtJQUM1RitELE9BQU9uQixPQUFPO0lBQ2QsT0FBT21CO0FBQ1g7QUFDQTs7O0NBR0MsR0FDRCxTQUFTeEIsY0FBYzJGLFFBQVEsRUFBRWMseUJBQXlCO0lBQ3RELDJDQUEyQztJQUMzQyxJQUFJQSw2QkFBNkJkLFNBQVNySSxDQUFDLENBQUNVLE9BQU8sQ0FBQzBJLEdBQUcsQ0FBQ0QsMEJBQTBCNUYsT0FBTyxHQUFHO1FBQ3hGLE1BQU1XLFNBQVNtRSxTQUFTckksQ0FBQyxDQUFDVSxPQUFPLENBQUNpRyxHQUFHLENBQUN3QywwQkFBMEI1RixPQUFPO1FBQ3ZFLElBQUlXLFFBQVE7WUFDUkEsT0FBT2xFLENBQUMsQ0FBQ0csV0FBVyxHQUFHZ0o7WUFDdkIsSUFBSUEsMEJBQTBCeEYsS0FBSyxZQUFZdkgsUUFBUWlOLFVBQVUsSUFDN0RGLDBCQUEwQnhGLEtBQUssQ0FBQzJGLGFBQWEsQ0FBQ2xOLFFBQVFtTixlQUFlLENBQUNDLFNBQVMsR0FBRztnQkFDbEYsTUFBTUMsNEJBQTRCTiwwQkFBMEJ4RixLQUFLLENBQUMyRixhQUFhLENBQUNsTixRQUFRbU4sZUFBZSxDQUFDRyx5QkFBeUI7Z0JBQ2pJeEYsT0FBT3lGLElBQUksQ0FBQzFFLEtBQUssQ0FBQztvQkFBRXdFO2dCQUEwQjtZQUNsRCxPQUNLLElBQUlOLDBCQUEwQnhGLEtBQUssSUFBSSxNQUFNO2dCQUM5QyxNQUFNaUcsa0JBQWtCdkIsU0FBU3JJLENBQUMsQ0FBQ0csV0FBVyxDQUFDeUIsSUFBSTtnQkFDbkQsTUFBTWlJLHNCQUFzQlYsMEJBQTBCVyxhQUFhLElBQzlEWCwwQkFBMEJ2SCxJQUFJLEtBQUtwRixTQUFTb0wsVUFBVSxDQUFDMUUsT0FBTyxJQUMzRDBHLG9CQUFvQnBOLFNBQVN3RixZQUFZLENBQUM0RyxNQUFNO2dCQUN4RCxJQUFJaUIscUJBQXFCO29CQUNyQjNGLE9BQU95RixJQUFJLENBQUNJLEtBQUs7Z0JBQ3JCO1lBQ0o7UUFDSjtJQUNKO0lBQ0EsNkVBQTZFO0lBQzdFLEtBQUssTUFBTXpHLHFCQUFxQitFLFNBQVNsSSxXQUFXLENBQUNPLE9BQU8sQ0FBQzBDLE1BQU0sR0FBSTtRQUNuRSxJQUFJLENBQUNpRixTQUFTckksQ0FBQyxDQUFDVSxPQUFPLENBQUMwSSxHQUFHLENBQUM5RixrQkFBa0JDLE9BQU8sR0FBRztZQUNwRCxNQUFNVyxTQUFTVix1QkFBdUI2RSxVQUFVL0U7WUFDaEQrRSxTQUFTckksQ0FBQyxDQUFDVSxPQUFPLENBQUNkLEdBQUcsQ0FBQzBELGtCQUFrQkMsT0FBTyxFQUFFVztRQUN0RDtJQUNKO0lBQ0EseUZBQXlGO0lBQ3pGLEtBQUssTUFBTThGLFNBQVMzQixTQUFTckksQ0FBQyxDQUFDVSxPQUFPLENBQUU7UUFDcEMsTUFBTXVKLGdCQUFnQkQsS0FBSyxDQUFDLEVBQUU7UUFDOUIsSUFBSTNCLFNBQVNsSSxXQUFXLENBQUNxRyxTQUFTLENBQUN5RCxnQkFBZ0I7WUFDL0M7UUFDSjtRQUNBLElBQUksQ0FBQzVCLFNBQVNySSxDQUFDLENBQUNVLE9BQU8sQ0FBQzBJLEdBQUcsQ0FBQ2EsZ0JBQWdCO1lBQ3hDO1FBQ0o7UUFDQSxNQUFNL0YsU0FBU21FLFNBQVNySSxDQUFDLENBQUNVLE9BQU8sQ0FBQ2lHLEdBQUcsQ0FBQ3NEO1FBQ3RDNUIsU0FBU3JJLENBQUMsQ0FBQ1UsT0FBTyxDQUFDd0osTUFBTSxDQUFDRDtRQUMxQix3Q0FBd0M7UUFDeEMsSUFBSS9GLFFBQVE7WUFDUlcsY0FBY1gsUUFBUW1FO1FBQzFCO0lBQ0o7QUFDSjtBQUNBLFNBQVNuRCxlQUFlaUYsS0FBSyxFQUFFbEcsR0FBRztJQUM5QixNQUFPa0csTUFBTTVLLE1BQU0sQ0FBRTtRQUNqQixNQUFNeUcsa0JBQWtCbUUsTUFBTUMsS0FBSztRQUNuQyxJQUFJLENBQUNwRSxpQkFBaUI7WUFDbEI7UUFDSjtRQUNBQSxnQkFBZ0JDLGlCQUFpQixDQUFDaEIsS0FBSztRQUN2QyxJQUFJLENBQUNlLGVBQWUsQ0FBQzFJLFdBQVcsRUFBRTtZQUM5QjBJLGdCQUFnQi9ILFFBQVEsQ0FBQ2dHO1FBQzdCO0lBQ0o7QUFDSjtBQUNBLFNBQVNzQyxpQkFBaUI4QixRQUFRO0lBQzlCLElBQUlBLFNBQVNySSxDQUFDLENBQUNFLEtBQUssS0FBSzFELFNBQVNVLFlBQVksRUFBRTtRQUM1Q2dJLGVBQWVtRCxRQUFRLENBQUM3SyxXQUFXLEVBQUUsSUFBSXBCLFFBQVErSSx3QkFBd0I7UUFDekU7SUFDSjtJQUNBLE1BQU1VLFlBQVl3QyxTQUFTbEksV0FBVyxDQUFDeUIsSUFBSSxLQUFLcEYsU0FBU3dGLFlBQVksQ0FBQ0MsT0FBTztJQUM3RSxNQUFNeEMscUJBQXFCZixNQUFNeUUsSUFBSSxDQUFDa0YsU0FBU2xJLFdBQVcsQ0FBQ08sT0FBTyxDQUFDMEMsTUFBTTtJQUN6RSxNQUFNaUgsbUJBQW1CaEMsUUFBUSxDQUFDN0ssV0FBVyxDQUFDK0IsTUFBTTtJQUNwRCxJQUFLLElBQUkrSyxJQUFJLEdBQUdBLElBQUlELGtCQUFrQixFQUFFQyxFQUFHO1FBQ3ZDLE1BQU10RSxrQkFBa0JxQyxRQUFRLENBQUM3SyxXQUFXLENBQUM0TSxLQUFLO1FBQ2xELElBQUksQ0FBQ3BFLGlCQUFpQjtZQUNsQjtRQUNKO1FBQ0EsSUFBSUEsZUFBZSxDQUFDMUksV0FBVyxFQUFFO1lBQzdCO1FBQ0o7UUFDQSxJQUFJaU47UUFDSixJQUFJO1lBQ0EsTUFBTTdFLGlCQUFpQk0sZ0JBQWdCTixjQUFjO1lBQ3JENkUsdUJBQXVCN0UsaUJBQ2pCQSxlQUFlMkMsU0FBU2xJLFdBQVcsRUFBRVYsc0JBQ3JDQTtRQUNWLEVBQ0EsT0FBT3dKLEdBQUc7WUFDTmpELGdCQUFnQkMsaUJBQWlCLENBQUNoQixLQUFLO1lBQ3ZDZSxnQkFBZ0IvSCxRQUFRLENBQUNnTDtZQUN6QjtRQUNKO1FBQ0EsSUFBSXVCO1FBQ0osSUFBSUQscUJBQXFCaEwsTUFBTSxLQUFLLEdBQUc7WUFDbkM4SSxRQUFRLENBQUM3SyxXQUFXLENBQUNzQixJQUFJLENBQUNrSDtZQUMxQjtRQUNKLE9BQ0ssSUFBSXVFLHFCQUFxQmhMLE1BQU0sS0FBSyxHQUFHO1lBQ3hDaUwsaUJBQWlCbkMsU0FBU3JJLENBQUMsQ0FBQ1UsT0FBTyxDQUFDaUcsR0FBRyxDQUFDNEQsb0JBQW9CLENBQUMsRUFBRSxDQUFDaEgsT0FBTztRQUMzRSxPQUNLO1lBQ0QsTUFBTWtILGVBQWUsQ0FBQyxHQUFHbE8sUUFBUWlELE9BQU8sRUFBRStLLHNCQUFzQjtZQUNoRSxNQUFNRyxVQUFVckMsU0FBU3JJLENBQUMsQ0FBQ1UsT0FBTyxDQUFDaUcsR0FBRyxDQUFDOEQsWUFBWSxDQUFDLEVBQUUsQ0FBQ2xILE9BQU87WUFDOUQsTUFBTW9ILFVBQVV0QyxTQUFTckksQ0FBQyxDQUFDVSxPQUFPLENBQUNpRyxHQUFHLENBQUM4RCxZQUFZLENBQUMsRUFBRSxDQUFDbEgsT0FBTztZQUM5RGlILGlCQUNJRSxXQUFXQyxXQUFXRCxRQUFRMUssQ0FBQyxDQUFDNEssY0FBYyxHQUFHRCxRQUFRM0ssQ0FBQyxDQUFDNEssY0FBYyxHQUNuRUYsVUFDQUM7UUFDZDtRQUNBLElBQUksQ0FBQ0gsZ0JBQWdCO1lBQ2pCeEUsZ0JBQWdCL0gsUUFBUSxDQUFDLElBQUk3QixRQUFRa0sseUJBQXlCLENBQUMsK0ZBQStGK0IsU0FBU2xJLFdBQVc7WUFDbEw7UUFDSjtRQUNBLE1BQU00RixjQUFjQyxnQkFBZ0JELFdBQVc7UUFDL0MsSUFBSUYsYUFBYUUsZUFBZUEsWUFBWThFLFFBQVEsSUFBSUwsZ0JBQWdCO1lBQ3BFekUsWUFBWStFLFNBQVMsQ0FBQ047UUFDMUI7UUFDQXhFLGdCQUFnQkMsaUJBQWlCLENBQUNoQixLQUFLO1FBQ3ZDZSxnQkFBZ0IvSCxRQUFRLENBQUNxQyxXQUFXa0s7SUFDeEM7SUFDQSxJQUFJbkMsUUFBUSxDQUFDN0ssV0FBVyxDQUFDK0IsTUFBTSxHQUFHLEdBQUc7UUFDakMscURBQXFEO1FBQ3JELEtBQUssTUFBTSxHQUFHMkUsT0FBTyxJQUFJbUUsU0FBU3JJLENBQUMsQ0FBQ1UsT0FBTyxDQUFFO1lBQ3pDcUssUUFBUUMsUUFBUSxDQUFDLFNBQVNDO2dCQUN0QixPQUFPL0csT0FBT2dILFlBQVk7WUFDOUI7UUFDSjtJQUNKO0FBQ0o7QUFDQSxTQUFTekUseUJBQXlCMEUsbUJBQW1CLEVBQUVoQyx5QkFBeUI7SUFDNUUsTUFBTWlDLDJCQUEyQkQsb0JBQW9CekssT0FBTyxDQUFDaUcsR0FBRyxDQUFDd0MsMEJBQTBCNUYsT0FBTztJQUNsRyxNQUFNOEgseUJBQXlCRCwwQkFBMEJFO0lBQ3pELE9BQVEsQ0FBQyxHQUFHM08scUJBQXFCNE8sc0JBQXNCLEVBQUVGLHdCQUF3QmxDLDBCQUEwQm1DLGVBQWUsSUFBSTtBQUNsSTtBQUNBLFlBQVksR0FDWixNQUFNeFA7SUFDRjRCLFlBQVk4TixLQUFLLENBQUU7UUFDZixJQUFJLENBQUNDLGNBQWMsR0FBR0QsTUFBTUMsY0FBYyxJQUFJO1FBQzlDLElBQUksQ0FBQzNELGNBQWMsR0FBRzBELE1BQU0xRCxjQUFjLElBQUk7SUFDbEQ7SUFDQSxJQUFJNEQsdUJBQXVCO1FBQ3ZCLE9BQU8sSUFBSSxDQUFDNUQsY0FBYyxJQUFJO0lBQ2xDO0lBQ0EsSUFBSTZELG1CQUFtQjtRQUNuQixPQUFPLElBQUksQ0FBQzdELGNBQWMsSUFBSTtJQUNsQztJQUNBLElBQUk4RCxnQkFBZ0I7UUFDaEIsT0FBTyxJQUFJLENBQUNILGNBQWMsSUFBSTtJQUNsQztJQUNBLElBQUlJLGtCQUFrQjtRQUNsQixPQUFPLElBQUksQ0FBQy9ELGNBQWMsSUFBSTtJQUNsQztJQUNBLElBQUlnRSw0QkFBNEI7UUFDNUIsT0FBTyxJQUFJLENBQUNoRSxjQUFjLElBQUk7SUFDbEM7SUFDQSxJQUFJaUUsd0JBQXdCO1FBQ3hCLE9BQU8sSUFBSSxDQUFDakUsY0FBYyxJQUFJO0lBQ2xDO0lBQ0EsSUFBSWtFLHdCQUF3QjtRQUN4QixPQUFPLElBQUksQ0FBQ2xFLGNBQWMsSUFBSTtJQUNsQztJQUNBLElBQUltRSwyQkFBMkI7UUFDM0IsT0FBTyxJQUFJLENBQUNuRSxjQUFjLElBQUk7SUFDbEM7SUFDQSxJQUFJb0Usd0JBQXdCO1FBQ3hCLE9BQU8sSUFBSSxDQUFDcEUsY0FBYyxJQUFJO0lBQ2xDO0FBQ0o7QUFDQWxNLDBCQUEwQixHQUFHRSxvQkFDN0Isb0NBQW9DIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYmxvZy1hcHBsaWNhdGlvbi8uL25vZGVfbW9kdWxlcy9tb25nb2RiL2xpYi9zZGFtL3RvcG9sb2d5LmpzP2IzMGQiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLlNlcnZlckNhcGFiaWxpdGllcyA9IGV4cG9ydHMuVG9wb2xvZ3kgPSB2b2lkIDA7XG5jb25zdCB1dGlsXzEgPSByZXF1aXJlKFwidXRpbFwiKTtcbmNvbnN0IGNvbm5lY3Rpb25fc3RyaW5nXzEgPSByZXF1aXJlKFwiLi4vY29ubmVjdGlvbl9zdHJpbmdcIik7XG5jb25zdCBjb25zdGFudHNfMSA9IHJlcXVpcmUoXCIuLi9jb25zdGFudHNcIik7XG5jb25zdCBlcnJvcl8xID0gcmVxdWlyZShcIi4uL2Vycm9yXCIpO1xuY29uc3QgbW9uZ29fdHlwZXNfMSA9IHJlcXVpcmUoXCIuLi9tb25nb190eXBlc1wiKTtcbmNvbnN0IHJlYWRfcHJlZmVyZW5jZV8xID0gcmVxdWlyZShcIi4uL3JlYWRfcHJlZmVyZW5jZVwiKTtcbmNvbnN0IHV0aWxzXzEgPSByZXF1aXJlKFwiLi4vdXRpbHNcIik7XG5jb25zdCBjb21tb25fMSA9IHJlcXVpcmUoXCIuL2NvbW1vblwiKTtcbmNvbnN0IGV2ZW50c18xID0gcmVxdWlyZShcIi4vZXZlbnRzXCIpO1xuY29uc3Qgc2VydmVyXzEgPSByZXF1aXJlKFwiLi9zZXJ2ZXJcIik7XG5jb25zdCBzZXJ2ZXJfZGVzY3JpcHRpb25fMSA9IHJlcXVpcmUoXCIuL3NlcnZlcl9kZXNjcmlwdGlvblwiKTtcbmNvbnN0IHNlcnZlcl9zZWxlY3Rpb25fMSA9IHJlcXVpcmUoXCIuL3NlcnZlcl9zZWxlY3Rpb25cIik7XG5jb25zdCBzcnZfcG9sbGluZ18xID0gcmVxdWlyZShcIi4vc3J2X3BvbGxpbmdcIik7XG5jb25zdCB0b3BvbG9neV9kZXNjcmlwdGlvbl8xID0gcmVxdWlyZShcIi4vdG9wb2xvZ3lfZGVzY3JpcHRpb25cIik7XG4vLyBHbG9iYWwgc3RhdGVcbmxldCBnbG9iYWxUb3BvbG9neUNvdW50ZXIgPSAwO1xuY29uc3Qgc3RhdGVUcmFuc2l0aW9uID0gKDAsIHV0aWxzXzEubWFrZVN0YXRlTWFjaGluZSkoe1xuICAgIFtjb21tb25fMS5TVEFURV9DTE9TRURdOiBbY29tbW9uXzEuU1RBVEVfQ0xPU0VELCBjb21tb25fMS5TVEFURV9DT05ORUNUSU5HXSxcbiAgICBbY29tbW9uXzEuU1RBVEVfQ09OTkVDVElOR106IFtjb21tb25fMS5TVEFURV9DT05ORUNUSU5HLCBjb21tb25fMS5TVEFURV9DTE9TSU5HLCBjb21tb25fMS5TVEFURV9DT05ORUNURUQsIGNvbW1vbl8xLlNUQVRFX0NMT1NFRF0sXG4gICAgW2NvbW1vbl8xLlNUQVRFX0NPTk5FQ1RFRF06IFtjb21tb25fMS5TVEFURV9DT05ORUNURUQsIGNvbW1vbl8xLlNUQVRFX0NMT1NJTkcsIGNvbW1vbl8xLlNUQVRFX0NMT1NFRF0sXG4gICAgW2NvbW1vbl8xLlNUQVRFX0NMT1NJTkddOiBbY29tbW9uXzEuU1RBVEVfQ0xPU0lORywgY29tbW9uXzEuU1RBVEVfQ0xPU0VEXVxufSk7XG4vKiogQGludGVybmFsICovXG5jb25zdCBrQ2FuY2VsbGVkID0gU3ltYm9sKCdjYW5jZWxsZWQnKTtcbi8qKiBAaW50ZXJuYWwgKi9cbmNvbnN0IGtXYWl0UXVldWUgPSBTeW1ib2woJ3dhaXRRdWV1ZScpO1xuLyoqXG4gKiBBIGNvbnRhaW5lciBvZiBzZXJ2ZXIgaW5zdGFuY2VzIHJlcHJlc2VudGluZyBhIGNvbm5lY3Rpb24gdG8gYSBNb25nb0RCIHRvcG9sb2d5LlxuICogQGludGVybmFsXG4gKi9cbmNsYXNzIFRvcG9sb2d5IGV4dGVuZHMgbW9uZ29fdHlwZXNfMS5UeXBlZEV2ZW50RW1pdHRlciB7XG4gICAgLyoqXG4gICAgICogQHBhcmFtIHNlZWRsaXN0IC0gYSBsaXN0IG9mIEhvc3RBZGRyZXNzIGluc3RhbmNlcyB0byBjb25uZWN0IHRvXG4gICAgICovXG4gICAgY29uc3RydWN0b3IoY2xpZW50LCBzZWVkcywgb3B0aW9ucykge1xuICAgICAgICBzdXBlcigpO1xuICAgICAgICB0aGlzLmNsaWVudCA9IGNsaWVudDtcbiAgICAgICAgdGhpcy5zZWxlY3RTZXJ2ZXJBc3luYyA9ICgwLCB1dGlsXzEucHJvbWlzaWZ5KSgoc2VsZWN0b3IsIG9wdGlvbnMsIGNhbGxiYWNrKSA9PiB0aGlzLnNlbGVjdFNlcnZlcihzZWxlY3Rvciwgb3B0aW9ucywgY2FsbGJhY2spKTtcbiAgICAgICAgLy8gT3B0aW9ucyBzaG91bGQgb25seSBiZSB1bmRlZmluZWQgaW4gdGVzdHMsIE1vbmdvQ2xpZW50IHdpbGwgYWx3YXlzIGhhdmUgZGVmaW5lZCBvcHRpb25zXG4gICAgICAgIG9wdGlvbnMgPSBvcHRpb25zID8/IHtcbiAgICAgICAgICAgIGhvc3RzOiBbdXRpbHNfMS5Ib3N0QWRkcmVzcy5mcm9tU3RyaW5nKCdsb2NhbGhvc3Q6MjcwMTcnKV0sXG4gICAgICAgICAgICAuLi5PYmplY3QuZnJvbUVudHJpZXMoY29ubmVjdGlvbl9zdHJpbmdfMS5ERUZBVUxUX09QVElPTlMuZW50cmllcygpKSxcbiAgICAgICAgICAgIC4uLk9iamVjdC5mcm9tRW50cmllcyhjb25uZWN0aW9uX3N0cmluZ18xLkZFQVRVUkVfRkxBR1MuZW50cmllcygpKVxuICAgICAgICB9O1xuICAgICAgICBpZiAodHlwZW9mIHNlZWRzID09PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgc2VlZHMgPSBbdXRpbHNfMS5Ib3N0QWRkcmVzcy5mcm9tU3RyaW5nKHNlZWRzKV07XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoIUFycmF5LmlzQXJyYXkoc2VlZHMpKSB7XG4gICAgICAgICAgICBzZWVkcyA9IFtzZWVkc107XG4gICAgICAgIH1cbiAgICAgICAgY29uc3Qgc2VlZGxpc3QgPSBbXTtcbiAgICAgICAgZm9yIChjb25zdCBzZWVkIG9mIHNlZWRzKSB7XG4gICAgICAgICAgICBpZiAodHlwZW9mIHNlZWQgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICAgICAgc2VlZGxpc3QucHVzaCh1dGlsc18xLkhvc3RBZGRyZXNzLmZyb21TdHJpbmcoc2VlZCkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAoc2VlZCBpbnN0YW5jZW9mIHV0aWxzXzEuSG9zdEFkZHJlc3MpIHtcbiAgICAgICAgICAgICAgICBzZWVkbGlzdC5wdXNoKHNlZWQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgLy8gRklYTUUoTk9ERS0zNDgzKTogTWF5IG5lZWQgdG8gYmUgYSBNb25nb1BhcnNlRXJyb3JcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgZXJyb3JfMS5Nb25nb1J1bnRpbWVFcnJvcihgVG9wb2xvZ3kgY2Fubm90IGJlIGNvbnN0cnVjdGVkIGZyb20gJHtKU09OLnN0cmluZ2lmeShzZWVkKX1gKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBjb25zdCB0b3BvbG9neVR5cGUgPSB0b3BvbG9neVR5cGVGcm9tT3B0aW9ucyhvcHRpb25zKTtcbiAgICAgICAgY29uc3QgdG9wb2xvZ3lJZCA9IGdsb2JhbFRvcG9sb2d5Q291bnRlcisrO1xuICAgICAgICBjb25zdCBzZWxlY3RlZEhvc3RzID0gb3B0aW9ucy5zcnZNYXhIb3N0cyA9PSBudWxsIHx8XG4gICAgICAgICAgICBvcHRpb25zLnNydk1heEhvc3RzID09PSAwIHx8XG4gICAgICAgICAgICBvcHRpb25zLnNydk1heEhvc3RzID49IHNlZWRsaXN0Lmxlbmd0aFxuICAgICAgICAgICAgPyBzZWVkbGlzdFxuICAgICAgICAgICAgOiAoMCwgdXRpbHNfMS5zaHVmZmxlKShzZWVkbGlzdCwgb3B0aW9ucy5zcnZNYXhIb3N0cyk7XG4gICAgICAgIGNvbnN0IHNlcnZlckRlc2NyaXB0aW9ucyA9IG5ldyBNYXAoKTtcbiAgICAgICAgZm9yIChjb25zdCBob3N0QWRkcmVzcyBvZiBzZWxlY3RlZEhvc3RzKSB7XG4gICAgICAgICAgICBzZXJ2ZXJEZXNjcmlwdGlvbnMuc2V0KGhvc3RBZGRyZXNzLnRvU3RyaW5nKCksIG5ldyBzZXJ2ZXJfZGVzY3JpcHRpb25fMS5TZXJ2ZXJEZXNjcmlwdGlvbihob3N0QWRkcmVzcykpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXNba1dhaXRRdWV1ZV0gPSBuZXcgdXRpbHNfMS5MaXN0KCk7XG4gICAgICAgIHRoaXMucyA9IHtcbiAgICAgICAgICAgIC8vIHRoZSBpZCBvZiB0aGlzIHRvcG9sb2d5XG4gICAgICAgICAgICBpZDogdG9wb2xvZ3lJZCxcbiAgICAgICAgICAgIC8vIHBhc3NlZCBpbiBvcHRpb25zXG4gICAgICAgICAgICBvcHRpb25zLFxuICAgICAgICAgICAgLy8gaW5pdGlhbCBzZWVkbGlzdCBvZiBzZXJ2ZXJzIHRvIGNvbm5lY3QgdG9cbiAgICAgICAgICAgIHNlZWRsaXN0LFxuICAgICAgICAgICAgLy8gaW5pdGlhbCBzdGF0ZVxuICAgICAgICAgICAgc3RhdGU6IGNvbW1vbl8xLlNUQVRFX0NMT1NFRCxcbiAgICAgICAgICAgIC8vIHRoZSB0b3BvbG9neSBkZXNjcmlwdGlvblxuICAgICAgICAgICAgZGVzY3JpcHRpb246IG5ldyB0b3BvbG9neV9kZXNjcmlwdGlvbl8xLlRvcG9sb2d5RGVzY3JpcHRpb24odG9wb2xvZ3lUeXBlLCBzZXJ2ZXJEZXNjcmlwdGlvbnMsIG9wdGlvbnMucmVwbGljYVNldCwgdW5kZWZpbmVkLCB1bmRlZmluZWQsIHVuZGVmaW5lZCwgb3B0aW9ucyksXG4gICAgICAgICAgICBzZXJ2ZXJTZWxlY3Rpb25UaW1lb3V0TVM6IG9wdGlvbnMuc2VydmVyU2VsZWN0aW9uVGltZW91dE1TLFxuICAgICAgICAgICAgaGVhcnRiZWF0RnJlcXVlbmN5TVM6IG9wdGlvbnMuaGVhcnRiZWF0RnJlcXVlbmN5TVMsXG4gICAgICAgICAgICBtaW5IZWFydGJlYXRGcmVxdWVuY3lNUzogb3B0aW9ucy5taW5IZWFydGJlYXRGcmVxdWVuY3lNUyxcbiAgICAgICAgICAgIC8vIGEgbWFwIG9mIHNlcnZlciBpbnN0YW5jZXMgdG8gbm9ybWFsaXplZCBhZGRyZXNzZXNcbiAgICAgICAgICAgIHNlcnZlcnM6IG5ldyBNYXAoKSxcbiAgICAgICAgICAgIGNyZWRlbnRpYWxzOiBvcHRpb25zPy5jcmVkZW50aWFscyxcbiAgICAgICAgICAgIGNsdXN0ZXJUaW1lOiB1bmRlZmluZWQsXG4gICAgICAgICAgICAvLyB0aW1lciBtYW5hZ2VtZW50XG4gICAgICAgICAgICBjb25uZWN0aW9uVGltZXJzOiBuZXcgU2V0KCksXG4gICAgICAgICAgICBkZXRlY3RTaGFyZGVkVG9wb2xvZ3k6IGV2ID0+IHRoaXMuZGV0ZWN0U2hhcmRlZFRvcG9sb2d5KGV2KSxcbiAgICAgICAgICAgIGRldGVjdFNydlJlY29yZHM6IGV2ID0+IHRoaXMuZGV0ZWN0U3J2UmVjb3JkcyhldilcbiAgICAgICAgfTtcbiAgICAgICAgaWYgKG9wdGlvbnMuc3J2SG9zdCAmJiAhb3B0aW9ucy5sb2FkQmFsYW5jZWQpIHtcbiAgICAgICAgICAgIHRoaXMucy5zcnZQb2xsZXIgPVxuICAgICAgICAgICAgICAgIG9wdGlvbnMuc3J2UG9sbGVyID8/XG4gICAgICAgICAgICAgICAgICAgIG5ldyBzcnZfcG9sbGluZ18xLlNydlBvbGxlcih7XG4gICAgICAgICAgICAgICAgICAgICAgICBoZWFydGJlYXRGcmVxdWVuY3lNUzogdGhpcy5zLmhlYXJ0YmVhdEZyZXF1ZW5jeU1TLFxuICAgICAgICAgICAgICAgICAgICAgICAgc3J2SG9zdDogb3B0aW9ucy5zcnZIb3N0LFxuICAgICAgICAgICAgICAgICAgICAgICAgc3J2TWF4SG9zdHM6IG9wdGlvbnMuc3J2TWF4SG9zdHMsXG4gICAgICAgICAgICAgICAgICAgICAgICBzcnZTZXJ2aWNlTmFtZTogb3B0aW9ucy5zcnZTZXJ2aWNlTmFtZVxuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHRoaXMub24oVG9wb2xvZ3kuVE9QT0xPR1lfREVTQ1JJUFRJT05fQ0hBTkdFRCwgdGhpcy5zLmRldGVjdFNoYXJkZWRUb3BvbG9neSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgZGV0ZWN0U2hhcmRlZFRvcG9sb2d5KGV2ZW50KSB7XG4gICAgICAgIGNvbnN0IHByZXZpb3VzVHlwZSA9IGV2ZW50LnByZXZpb3VzRGVzY3JpcHRpb24udHlwZTtcbiAgICAgICAgY29uc3QgbmV3VHlwZSA9IGV2ZW50Lm5ld0Rlc2NyaXB0aW9uLnR5cGU7XG4gICAgICAgIGNvbnN0IHRyYW5zaXRpb25Ub1NoYXJkZWQgPSBwcmV2aW91c1R5cGUgIT09IGNvbW1vbl8xLlRvcG9sb2d5VHlwZS5TaGFyZGVkICYmIG5ld1R5cGUgPT09IGNvbW1vbl8xLlRvcG9sb2d5VHlwZS5TaGFyZGVkO1xuICAgICAgICBjb25zdCBzcnZMaXN0ZW5lcnMgPSB0aGlzLnMuc3J2UG9sbGVyPy5saXN0ZW5lcnMoc3J2X3BvbGxpbmdfMS5TcnZQb2xsZXIuU1JWX1JFQ09SRF9ESVNDT1ZFUlkpO1xuICAgICAgICBjb25zdCBsaXN0ZW5pbmdUb1NydlBvbGxpbmcgPSAhIXNydkxpc3RlbmVycz8uaW5jbHVkZXModGhpcy5zLmRldGVjdFNydlJlY29yZHMpO1xuICAgICAgICBpZiAodHJhbnNpdGlvblRvU2hhcmRlZCAmJiAhbGlzdGVuaW5nVG9TcnZQb2xsaW5nKSB7XG4gICAgICAgICAgICB0aGlzLnMuc3J2UG9sbGVyPy5vbihzcnZfcG9sbGluZ18xLlNydlBvbGxlci5TUlZfUkVDT1JEX0RJU0NPVkVSWSwgdGhpcy5zLmRldGVjdFNydlJlY29yZHMpO1xuICAgICAgICAgICAgdGhpcy5zLnNydlBvbGxlcj8uc3RhcnQoKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBkZXRlY3RTcnZSZWNvcmRzKGV2KSB7XG4gICAgICAgIGNvbnN0IHByZXZpb3VzVG9wb2xvZ3lEZXNjcmlwdGlvbiA9IHRoaXMucy5kZXNjcmlwdGlvbjtcbiAgICAgICAgdGhpcy5zLmRlc2NyaXB0aW9uID0gdGhpcy5zLmRlc2NyaXB0aW9uLnVwZGF0ZUZyb21TcnZQb2xsaW5nRXZlbnQoZXYsIHRoaXMucy5vcHRpb25zLnNydk1heEhvc3RzKTtcbiAgICAgICAgaWYgKHRoaXMucy5kZXNjcmlwdGlvbiA9PT0gcHJldmlvdXNUb3BvbG9neURlc2NyaXB0aW9uKSB7XG4gICAgICAgICAgICAvLyBOb3RoaW5nIGNoYW5nZWQsIHNvIHJldHVyblxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHVwZGF0ZVNlcnZlcnModGhpcyk7XG4gICAgICAgIHRoaXMuZW1pdChUb3BvbG9neS5UT1BPTE9HWV9ERVNDUklQVElPTl9DSEFOR0VELCBuZXcgZXZlbnRzXzEuVG9wb2xvZ3lEZXNjcmlwdGlvbkNoYW5nZWRFdmVudCh0aGlzLnMuaWQsIHByZXZpb3VzVG9wb2xvZ3lEZXNjcmlwdGlvbiwgdGhpcy5zLmRlc2NyaXB0aW9uKSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEByZXR1cm5zIEEgYFRvcG9sb2d5RGVzY3JpcHRpb25gIGZvciB0aGlzIHRvcG9sb2d5XG4gICAgICovXG4gICAgZ2V0IGRlc2NyaXB0aW9uKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5zLmRlc2NyaXB0aW9uO1xuICAgIH1cbiAgICBnZXQgbG9hZEJhbGFuY2VkKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5zLm9wdGlvbnMubG9hZEJhbGFuY2VkO1xuICAgIH1cbiAgICBnZXQgY2FwYWJpbGl0aWVzKCkge1xuICAgICAgICByZXR1cm4gbmV3IFNlcnZlckNhcGFiaWxpdGllcyh0aGlzLmxhc3RIZWxsbygpKTtcbiAgICB9XG4gICAgY29ubmVjdChvcHRpb25zLCBjYWxsYmFjaykge1xuICAgICAgICBpZiAodHlwZW9mIG9wdGlvbnMgPT09ICdmdW5jdGlvbicpXG4gICAgICAgICAgICAoY2FsbGJhY2sgPSBvcHRpb25zKSwgKG9wdGlvbnMgPSB7fSk7XG4gICAgICAgIG9wdGlvbnMgPSBvcHRpb25zID8/IHt9O1xuICAgICAgICBpZiAodGhpcy5zLnN0YXRlID09PSBjb21tb25fMS5TVEFURV9DT05ORUNURUQpIHtcbiAgICAgICAgICAgIGlmICh0eXBlb2YgY2FsbGJhY2sgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgICAgICBjYWxsYmFjaygpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHN0YXRlVHJhbnNpdGlvbih0aGlzLCBjb21tb25fMS5TVEFURV9DT05ORUNUSU5HKTtcbiAgICAgICAgLy8gZW1pdCBTREFNIG1vbml0b3JpbmcgZXZlbnRzXG4gICAgICAgIHRoaXMuZW1pdChUb3BvbG9neS5UT1BPTE9HWV9PUEVOSU5HLCBuZXcgZXZlbnRzXzEuVG9wb2xvZ3lPcGVuaW5nRXZlbnQodGhpcy5zLmlkKSk7XG4gICAgICAgIC8vIGVtaXQgYW4gZXZlbnQgZm9yIHRoZSB0b3BvbG9neSBjaGFuZ2VcbiAgICAgICAgdGhpcy5lbWl0KFRvcG9sb2d5LlRPUE9MT0dZX0RFU0NSSVBUSU9OX0NIQU5HRUQsIG5ldyBldmVudHNfMS5Ub3BvbG9neURlc2NyaXB0aW9uQ2hhbmdlZEV2ZW50KHRoaXMucy5pZCwgbmV3IHRvcG9sb2d5X2Rlc2NyaXB0aW9uXzEuVG9wb2xvZ3lEZXNjcmlwdGlvbihjb21tb25fMS5Ub3BvbG9neVR5cGUuVW5rbm93biksIC8vIGluaXRpYWwgaXMgYWx3YXlzIFVua25vd25cbiAgICAgICAgdGhpcy5zLmRlc2NyaXB0aW9uKSk7XG4gICAgICAgIC8vIGNvbm5lY3QgYWxsIGtub3duIHNlcnZlcnMsIHRoZW4gYXR0ZW1wdCBzZXJ2ZXIgc2VsZWN0aW9uIHRvIGNvbm5lY3RcbiAgICAgICAgY29uc3Qgc2VydmVyRGVzY3JpcHRpb25zID0gQXJyYXkuZnJvbSh0aGlzLnMuZGVzY3JpcHRpb24uc2VydmVycy52YWx1ZXMoKSk7XG4gICAgICAgIHRoaXMucy5zZXJ2ZXJzID0gbmV3IE1hcChzZXJ2ZXJEZXNjcmlwdGlvbnMubWFwKHNlcnZlckRlc2NyaXB0aW9uID0+IFtcbiAgICAgICAgICAgIHNlcnZlckRlc2NyaXB0aW9uLmFkZHJlc3MsXG4gICAgICAgICAgICBjcmVhdGVBbmRDb25uZWN0U2VydmVyKHRoaXMsIHNlcnZlckRlc2NyaXB0aW9uKVxuICAgICAgICBdKSk7XG4gICAgICAgIC8vIEluIGxvYWQgYmFsYW5jZXIgbW9kZSB3ZSBuZWVkIHRvIGZha2UgYSBzZXJ2ZXIgZGVzY3JpcHRpb24gZ2V0dGluZ1xuICAgICAgICAvLyBlbWl0dGVkIGZyb20gdGhlIG1vbml0b3IsIHNpbmNlIHRoZSBtb25pdG9yIGRvZXNuJ3QgZXhpc3QuXG4gICAgICAgIGlmICh0aGlzLnMub3B0aW9ucy5sb2FkQmFsYW5jZWQpIHtcbiAgICAgICAgICAgIGZvciAoY29uc3QgZGVzY3JpcHRpb24gb2Ygc2VydmVyRGVzY3JpcHRpb25zKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgbmV3RGVzY3JpcHRpb24gPSBuZXcgc2VydmVyX2Rlc2NyaXB0aW9uXzEuU2VydmVyRGVzY3JpcHRpb24oZGVzY3JpcHRpb24uaG9zdEFkZHJlc3MsIHVuZGVmaW5lZCwge1xuICAgICAgICAgICAgICAgICAgICBsb2FkQmFsYW5jZWQ6IHRoaXMucy5vcHRpb25zLmxvYWRCYWxhbmNlZFxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIHRoaXMuc2VydmVyVXBkYXRlSGFuZGxlcihuZXdEZXNjcmlwdGlvbik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgZXhpdFdpdGhFcnJvciA9IChlcnJvcikgPT4gY2FsbGJhY2sgPyBjYWxsYmFjayhlcnJvcikgOiB0aGlzLmVtaXQoVG9wb2xvZ3kuRVJST1IsIGVycm9yKTtcbiAgICAgICAgY29uc3QgcmVhZFByZWZlcmVuY2UgPSBvcHRpb25zLnJlYWRQcmVmZXJlbmNlID8/IHJlYWRfcHJlZmVyZW5jZV8xLlJlYWRQcmVmZXJlbmNlLnByaW1hcnk7XG4gICAgICAgIHRoaXMuc2VsZWN0U2VydmVyKCgwLCBzZXJ2ZXJfc2VsZWN0aW9uXzEucmVhZFByZWZlcmVuY2VTZXJ2ZXJTZWxlY3RvcikocmVhZFByZWZlcmVuY2UpLCBvcHRpb25zLCAoZXJyLCBzZXJ2ZXIpID0+IHtcbiAgICAgICAgICAgIGlmIChlcnIpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5jbG9zZSh7IGZvcmNlOiBmYWxzZSB9LCAoKSA9PiBleGl0V2l0aEVycm9yKGVycikpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gVE9ETzogTk9ERS0yNDcxXG4gICAgICAgICAgICBjb25zdCBza2lwUGluZ09uQ29ubmVjdCA9IHRoaXMucy5vcHRpb25zW1N5bWJvbC5mb3IoJ0BAbWRiLnNraXBQaW5nT25Db25uZWN0JyldID09PSB0cnVlO1xuICAgICAgICAgICAgaWYgKCFza2lwUGluZ09uQ29ubmVjdCAmJiBzZXJ2ZXIgJiYgdGhpcy5zLmNyZWRlbnRpYWxzKSB7XG4gICAgICAgICAgICAgICAgc2VydmVyLmNvbW1hbmQoKDAsIHV0aWxzXzEubnMpKCdhZG1pbi4kY21kJyksIHsgcGluZzogMSB9LCB7fSwgZXJyID0+IHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGVycikge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGV4aXRXaXRoRXJyb3IoZXJyKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBzdGF0ZVRyYW5zaXRpb24odGhpcywgY29tbW9uXzEuU1RBVEVfQ09OTkVDVEVEKTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5lbWl0KFRvcG9sb2d5Lk9QRU4sIHRoaXMpO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmVtaXQoVG9wb2xvZ3kuQ09OTkVDVCwgdGhpcyk7XG4gICAgICAgICAgICAgICAgICAgIGNhbGxiYWNrPy4odW5kZWZpbmVkLCB0aGlzKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBzdGF0ZVRyYW5zaXRpb24odGhpcywgY29tbW9uXzEuU1RBVEVfQ09OTkVDVEVEKTtcbiAgICAgICAgICAgIHRoaXMuZW1pdChUb3BvbG9neS5PUEVOLCB0aGlzKTtcbiAgICAgICAgICAgIHRoaXMuZW1pdChUb3BvbG9neS5DT05ORUNULCB0aGlzKTtcbiAgICAgICAgICAgIGNhbGxiYWNrPy4odW5kZWZpbmVkLCB0aGlzKTtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIGNsb3NlKG9wdGlvbnMsIGNhbGxiYWNrKSB7XG4gICAgICAgIG9wdGlvbnMgPSBvcHRpb25zID8/IHsgZm9yY2U6IGZhbHNlIH07XG4gICAgICAgIGlmICh0aGlzLnMuc3RhdGUgPT09IGNvbW1vbl8xLlNUQVRFX0NMT1NFRCB8fCB0aGlzLnMuc3RhdGUgPT09IGNvbW1vbl8xLlNUQVRFX0NMT1NJTkcpIHtcbiAgICAgICAgICAgIHJldHVybiBjYWxsYmFjaz8uKCk7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgZGVzdHJveWVkU2VydmVycyA9IEFycmF5LmZyb20odGhpcy5zLnNlcnZlcnMudmFsdWVzKCksIHNlcnZlciA9PiB7XG4gICAgICAgICAgICByZXR1cm4gKDAsIHV0aWxfMS5wcm9taXNpZnkpKGRlc3Ryb3lTZXJ2ZXIpKHNlcnZlciwgdGhpcywgeyBmb3JjZTogISFvcHRpb25zPy5mb3JjZSB9KTtcbiAgICAgICAgfSk7XG4gICAgICAgIFByb21pc2UuYWxsKGRlc3Ryb3llZFNlcnZlcnMpXG4gICAgICAgICAgICAudGhlbigoKSA9PiB7XG4gICAgICAgICAgICB0aGlzLnMuc2VydmVycy5jbGVhcigpO1xuICAgICAgICAgICAgc3RhdGVUcmFuc2l0aW9uKHRoaXMsIGNvbW1vbl8xLlNUQVRFX0NMT1NJTkcpO1xuICAgICAgICAgICAgZHJhaW5XYWl0UXVldWUodGhpc1trV2FpdFF1ZXVlXSwgbmV3IGVycm9yXzEuTW9uZ29Ub3BvbG9neUNsb3NlZEVycm9yKCkpO1xuICAgICAgICAgICAgKDAsIGNvbW1vbl8xLmRyYWluVGltZXJRdWV1ZSkodGhpcy5zLmNvbm5lY3Rpb25UaW1lcnMpO1xuICAgICAgICAgICAgaWYgKHRoaXMucy5zcnZQb2xsZXIpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnMuc3J2UG9sbGVyLnN0b3AoKTtcbiAgICAgICAgICAgICAgICB0aGlzLnMuc3J2UG9sbGVyLnJlbW92ZUxpc3RlbmVyKHNydl9wb2xsaW5nXzEuU3J2UG9sbGVyLlNSVl9SRUNPUkRfRElTQ09WRVJZLCB0aGlzLnMuZGV0ZWN0U3J2UmVjb3Jkcyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLnJlbW92ZUxpc3RlbmVyKFRvcG9sb2d5LlRPUE9MT0dZX0RFU0NSSVBUSU9OX0NIQU5HRUQsIHRoaXMucy5kZXRlY3RTaGFyZGVkVG9wb2xvZ3kpO1xuICAgICAgICAgICAgc3RhdGVUcmFuc2l0aW9uKHRoaXMsIGNvbW1vbl8xLlNUQVRFX0NMT1NFRCk7XG4gICAgICAgICAgICAvLyBlbWl0IGFuIGV2ZW50IGZvciBjbG9zZVxuICAgICAgICAgICAgdGhpcy5lbWl0KFRvcG9sb2d5LlRPUE9MT0dZX0NMT1NFRCwgbmV3IGV2ZW50c18xLlRvcG9sb2d5Q2xvc2VkRXZlbnQodGhpcy5zLmlkKSk7XG4gICAgICAgIH0pXG4gICAgICAgICAgICAuZmluYWxseSgoKSA9PiBjYWxsYmFjaz8uKCkpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBTZWxlY3RzIGEgc2VydmVyIGFjY29yZGluZyB0byB0aGUgc2VsZWN0aW9uIHByZWRpY2F0ZSBwcm92aWRlZFxuICAgICAqXG4gICAgICogQHBhcmFtIHNlbGVjdG9yIC0gQW4gb3B0aW9uYWwgc2VsZWN0b3IgdG8gc2VsZWN0IHNlcnZlcnMgYnksIGRlZmF1bHRzIHRvIGEgcmFuZG9tIHNlbGVjdGlvbiB3aXRoaW4gYSBsYXRlbmN5IHdpbmRvd1xuICAgICAqIEBwYXJhbSBvcHRpb25zIC0gT3B0aW9uYWwgc2V0dGluZ3MgcmVsYXRlZCB0byBzZXJ2ZXIgc2VsZWN0aW9uXG4gICAgICogQHBhcmFtIGNhbGxiYWNrIC0gVGhlIGNhbGxiYWNrIHVzZWQgdG8gaW5kaWNhdGUgc3VjY2VzcyBvciBmYWlsdXJlXG4gICAgICogQHJldHVybnMgQW4gaW5zdGFuY2Ugb2YgYSBgU2VydmVyYCBtZWV0aW5nIHRoZSBjcml0ZXJpYSBvZiB0aGUgcHJlZGljYXRlIHByb3ZpZGVkXG4gICAgICovXG4gICAgc2VsZWN0U2VydmVyKHNlbGVjdG9yLCBvcHRpb25zLCBjYWxsYmFjaykge1xuICAgICAgICBsZXQgc2VydmVyU2VsZWN0b3I7XG4gICAgICAgIGlmICh0eXBlb2Ygc2VsZWN0b3IgIT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgIGlmICh0eXBlb2Ygc2VsZWN0b3IgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICAgICAgc2VydmVyU2VsZWN0b3IgPSAoMCwgc2VydmVyX3NlbGVjdGlvbl8xLnJlYWRQcmVmZXJlbmNlU2VydmVyU2VsZWN0b3IpKHJlYWRfcHJlZmVyZW5jZV8xLlJlYWRQcmVmZXJlbmNlLmZyb21TdHJpbmcoc2VsZWN0b3IpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIGxldCByZWFkUHJlZmVyZW5jZTtcbiAgICAgICAgICAgICAgICBpZiAoc2VsZWN0b3IgaW5zdGFuY2VvZiByZWFkX3ByZWZlcmVuY2VfMS5SZWFkUHJlZmVyZW5jZSkge1xuICAgICAgICAgICAgICAgICAgICByZWFkUHJlZmVyZW5jZSA9IHNlbGVjdG9yO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgcmVhZF9wcmVmZXJlbmNlXzEuUmVhZFByZWZlcmVuY2UudHJhbnNsYXRlKG9wdGlvbnMpO1xuICAgICAgICAgICAgICAgICAgICByZWFkUHJlZmVyZW5jZSA9IG9wdGlvbnMucmVhZFByZWZlcmVuY2UgfHwgcmVhZF9wcmVmZXJlbmNlXzEuUmVhZFByZWZlcmVuY2UucHJpbWFyeTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgc2VydmVyU2VsZWN0b3IgPSAoMCwgc2VydmVyX3NlbGVjdGlvbl8xLnJlYWRQcmVmZXJlbmNlU2VydmVyU2VsZWN0b3IpKHJlYWRQcmVmZXJlbmNlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHNlcnZlclNlbGVjdG9yID0gc2VsZWN0b3I7XG4gICAgICAgIH1cbiAgICAgICAgb3B0aW9ucyA9IE9iamVjdC5hc3NpZ24oe30sIHsgc2VydmVyU2VsZWN0aW9uVGltZW91dE1TOiB0aGlzLnMuc2VydmVyU2VsZWN0aW9uVGltZW91dE1TIH0sIG9wdGlvbnMpO1xuICAgICAgICBjb25zdCBpc1NoYXJkZWQgPSB0aGlzLmRlc2NyaXB0aW9uLnR5cGUgPT09IGNvbW1vbl8xLlRvcG9sb2d5VHlwZS5TaGFyZGVkO1xuICAgICAgICBjb25zdCBzZXNzaW9uID0gb3B0aW9ucy5zZXNzaW9uO1xuICAgICAgICBjb25zdCB0cmFuc2FjdGlvbiA9IHNlc3Npb24gJiYgc2Vzc2lvbi50cmFuc2FjdGlvbjtcbiAgICAgICAgaWYgKGlzU2hhcmRlZCAmJiB0cmFuc2FjdGlvbiAmJiB0cmFuc2FjdGlvbi5zZXJ2ZXIpIHtcbiAgICAgICAgICAgIGNhbGxiYWNrKHVuZGVmaW5lZCwgdHJhbnNhY3Rpb24uc2VydmVyKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCB3YWl0UXVldWVNZW1iZXIgPSB7XG4gICAgICAgICAgICBzZXJ2ZXJTZWxlY3RvcixcbiAgICAgICAgICAgIHRyYW5zYWN0aW9uLFxuICAgICAgICAgICAgY2FsbGJhY2ssXG4gICAgICAgICAgICB0aW1lb3V0Q29udHJvbGxlcjogbmV3IHV0aWxzXzEuVGltZW91dENvbnRyb2xsZXIob3B0aW9ucy5zZXJ2ZXJTZWxlY3Rpb25UaW1lb3V0TVMpXG4gICAgICAgIH07XG4gICAgICAgIHdhaXRRdWV1ZU1lbWJlci50aW1lb3V0Q29udHJvbGxlci5zaWduYWwuYWRkRXZlbnRMaXN0ZW5lcignYWJvcnQnLCAoKSA9PiB7XG4gICAgICAgICAgICB3YWl0UXVldWVNZW1iZXJba0NhbmNlbGxlZF0gPSB0cnVlO1xuICAgICAgICAgICAgd2FpdFF1ZXVlTWVtYmVyLnRpbWVvdXRDb250cm9sbGVyLmNsZWFyKCk7XG4gICAgICAgICAgICBjb25zdCB0aW1lb3V0RXJyb3IgPSBuZXcgZXJyb3JfMS5Nb25nb1NlcnZlclNlbGVjdGlvbkVycm9yKGBTZXJ2ZXIgc2VsZWN0aW9uIHRpbWVkIG91dCBhZnRlciAke29wdGlvbnMuc2VydmVyU2VsZWN0aW9uVGltZW91dE1TfSBtc2AsIHRoaXMuZGVzY3JpcHRpb24pO1xuICAgICAgICAgICAgd2FpdFF1ZXVlTWVtYmVyLmNhbGxiYWNrKHRpbWVvdXRFcnJvcik7XG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzW2tXYWl0UXVldWVdLnB1c2god2FpdFF1ZXVlTWVtYmVyKTtcbiAgICAgICAgcHJvY2Vzc1dhaXRRdWV1ZSh0aGlzKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogVXBkYXRlIHRoZSBpbnRlcm5hbCBUb3BvbG9neURlc2NyaXB0aW9uIHdpdGggYSBTZXJ2ZXJEZXNjcmlwdGlvblxuICAgICAqXG4gICAgICogQHBhcmFtIHNlcnZlckRlc2NyaXB0aW9uIC0gVGhlIHNlcnZlciB0byB1cGRhdGUgaW4gdGhlIGludGVybmFsIGxpc3Qgb2Ygc2VydmVyIGRlc2NyaXB0aW9uc1xuICAgICAqL1xuICAgIHNlcnZlclVwZGF0ZUhhbmRsZXIoc2VydmVyRGVzY3JpcHRpb24pIHtcbiAgICAgICAgaWYgKCF0aGlzLnMuZGVzY3JpcHRpb24uaGFzU2VydmVyKHNlcnZlckRlc2NyaXB0aW9uLmFkZHJlc3MpKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgLy8gaWdub3JlIHRoaXMgc2VydmVyIHVwZGF0ZSBpZiBpdHMgZnJvbSBhbiBvdXRkYXRlZCB0b3BvbG9neVZlcnNpb25cbiAgICAgICAgaWYgKGlzU3RhbGVTZXJ2ZXJEZXNjcmlwdGlvbih0aGlzLnMuZGVzY3JpcHRpb24sIHNlcnZlckRlc2NyaXB0aW9uKSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIC8vIHRoZXNlIHdpbGwgYmUgdXNlZCBmb3IgbW9uaXRvcmluZyBldmVudHMgbGF0ZXJcbiAgICAgICAgY29uc3QgcHJldmlvdXNUb3BvbG9neURlc2NyaXB0aW9uID0gdGhpcy5zLmRlc2NyaXB0aW9uO1xuICAgICAgICBjb25zdCBwcmV2aW91c1NlcnZlckRlc2NyaXB0aW9uID0gdGhpcy5zLmRlc2NyaXB0aW9uLnNlcnZlcnMuZ2V0KHNlcnZlckRlc2NyaXB0aW9uLmFkZHJlc3MpO1xuICAgICAgICBpZiAoIXByZXZpb3VzU2VydmVyRGVzY3JpcHRpb24pIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICAvLyBEcml2ZXIgU2Vzc2lvbnMgU3BlYzogXCJXaGVuZXZlciBhIGRyaXZlciByZWNlaXZlcyBhIGNsdXN0ZXIgdGltZSBmcm9tXG4gICAgICAgIC8vIGEgc2VydmVyIGl0IE1VU1QgY29tcGFyZSBpdCB0byB0aGUgY3VycmVudCBoaWdoZXN0IHNlZW4gY2x1c3RlciB0aW1lXG4gICAgICAgIC8vIGZvciB0aGUgZGVwbG95bWVudC4gSWYgdGhlIG5ldyBjbHVzdGVyIHRpbWUgaXMgaGlnaGVyIHRoYW4gdGhlXG4gICAgICAgIC8vIGhpZ2hlc3Qgc2VlbiBjbHVzdGVyIHRpbWUgaXQgTVVTVCBiZWNvbWUgdGhlIG5ldyBoaWdoZXN0IHNlZW4gY2x1c3RlclxuICAgICAgICAvLyB0aW1lLiBUd28gY2x1c3RlciB0aW1lcyBhcmUgY29tcGFyZWQgdXNpbmcgb25seSB0aGUgQnNvblRpbWVzdGFtcFxuICAgICAgICAvLyB2YWx1ZSBvZiB0aGUgY2x1c3RlclRpbWUgZW1iZWRkZWQgZmllbGQuXCJcbiAgICAgICAgY29uc3QgY2x1c3RlclRpbWUgPSBzZXJ2ZXJEZXNjcmlwdGlvbi4kY2x1c3RlclRpbWU7XG4gICAgICAgIGlmIChjbHVzdGVyVGltZSkge1xuICAgICAgICAgICAgKDAsIGNvbW1vbl8xLl9hZHZhbmNlQ2x1c3RlclRpbWUpKHRoaXMsIGNsdXN0ZXJUaW1lKTtcbiAgICAgICAgfVxuICAgICAgICAvLyBJZiB3ZSBhbHJlYWR5IGtub3cgYWxsIHRoZSBpbmZvcm1hdGlvbiBjb250YWluZWQgaW4gdGhpcyB1cGRhdGVkIGRlc2NyaXB0aW9uLCB0aGVuXG4gICAgICAgIC8vIHdlIGRvbid0IG5lZWQgdG8gZW1pdCBTREFNIGV2ZW50cywgYnV0IHN0aWxsIG5lZWQgdG8gdXBkYXRlIHRoZSBkZXNjcmlwdGlvbiwgaW4gb3JkZXJcbiAgICAgICAgLy8gdG8ga2VlcCBjbGllbnQtdHJhY2tlZCBhdHRyaWJ1dGVzIGxpa2UgbGFzdCB1cGRhdGUgdGltZSBhbmQgcm91bmQgdHJpcCB0aW1lIHVwIHRvIGRhdGVcbiAgICAgICAgY29uc3QgZXF1YWxEZXNjcmlwdGlvbnMgPSBwcmV2aW91c1NlcnZlckRlc2NyaXB0aW9uICYmIHByZXZpb3VzU2VydmVyRGVzY3JpcHRpb24uZXF1YWxzKHNlcnZlckRlc2NyaXB0aW9uKTtcbiAgICAgICAgLy8gZmlyc3QgdXBkYXRlIHRoZSBUb3BvbG9neURlc2NyaXB0aW9uXG4gICAgICAgIHRoaXMucy5kZXNjcmlwdGlvbiA9IHRoaXMucy5kZXNjcmlwdGlvbi51cGRhdGUoc2VydmVyRGVzY3JpcHRpb24pO1xuICAgICAgICBpZiAodGhpcy5zLmRlc2NyaXB0aW9uLmNvbXBhdGliaWxpdHlFcnJvcikge1xuICAgICAgICAgICAgdGhpcy5lbWl0KFRvcG9sb2d5LkVSUk9SLCBuZXcgZXJyb3JfMS5Nb25nb0NvbXBhdGliaWxpdHlFcnJvcih0aGlzLnMuZGVzY3JpcHRpb24uY29tcGF0aWJpbGl0eUVycm9yKSk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgLy8gZW1pdCBtb25pdG9yaW5nIGV2ZW50cyBmb3IgdGhpcyBjaGFuZ2VcbiAgICAgICAgaWYgKCFlcXVhbERlc2NyaXB0aW9ucykge1xuICAgICAgICAgICAgY29uc3QgbmV3RGVzY3JpcHRpb24gPSB0aGlzLnMuZGVzY3JpcHRpb24uc2VydmVycy5nZXQoc2VydmVyRGVzY3JpcHRpb24uYWRkcmVzcyk7XG4gICAgICAgICAgICBpZiAobmV3RGVzY3JpcHRpb24pIHtcbiAgICAgICAgICAgICAgICB0aGlzLmVtaXQoVG9wb2xvZ3kuU0VSVkVSX0RFU0NSSVBUSU9OX0NIQU5HRUQsIG5ldyBldmVudHNfMS5TZXJ2ZXJEZXNjcmlwdGlvbkNoYW5nZWRFdmVudCh0aGlzLnMuaWQsIHNlcnZlckRlc2NyaXB0aW9uLmFkZHJlc3MsIHByZXZpb3VzU2VydmVyRGVzY3JpcHRpb24sIG5ld0Rlc2NyaXB0aW9uKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgLy8gdXBkYXRlIHNlcnZlciBsaXN0IGZyb20gdXBkYXRlZCBkZXNjcmlwdGlvbnNcbiAgICAgICAgdXBkYXRlU2VydmVycyh0aGlzLCBzZXJ2ZXJEZXNjcmlwdGlvbik7XG4gICAgICAgIC8vIGF0dGVtcHQgdG8gcmVzb2x2ZSBhbnkgb3V0c3RhbmRpbmcgc2VydmVyIHNlbGVjdGlvbiBhdHRlbXB0c1xuICAgICAgICBpZiAodGhpc1trV2FpdFF1ZXVlXS5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICBwcm9jZXNzV2FpdFF1ZXVlKHRoaXMpO1xuICAgICAgICB9XG4gICAgICAgIGlmICghZXF1YWxEZXNjcmlwdGlvbnMpIHtcbiAgICAgICAgICAgIHRoaXMuZW1pdChUb3BvbG9neS5UT1BPTE9HWV9ERVNDUklQVElPTl9DSEFOR0VELCBuZXcgZXZlbnRzXzEuVG9wb2xvZ3lEZXNjcmlwdGlvbkNoYW5nZWRFdmVudCh0aGlzLnMuaWQsIHByZXZpb3VzVG9wb2xvZ3lEZXNjcmlwdGlvbiwgdGhpcy5zLmRlc2NyaXB0aW9uKSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgYXV0aChjcmVkZW50aWFscywgY2FsbGJhY2spIHtcbiAgICAgICAgaWYgKHR5cGVvZiBjcmVkZW50aWFscyA9PT0gJ2Z1bmN0aW9uJylcbiAgICAgICAgICAgIChjYWxsYmFjayA9IGNyZWRlbnRpYWxzKSwgKGNyZWRlbnRpYWxzID0gdW5kZWZpbmVkKTtcbiAgICAgICAgaWYgKHR5cGVvZiBjYWxsYmFjayA9PT0gJ2Z1bmN0aW9uJylcbiAgICAgICAgICAgIGNhbGxiYWNrKHVuZGVmaW5lZCwgdHJ1ZSk7XG4gICAgfVxuICAgIGdldCBjbGllbnRNZXRhZGF0YSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucy5vcHRpb25zLm1ldGFkYXRhO1xuICAgIH1cbiAgICBpc0Nvbm5lY3RlZCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucy5zdGF0ZSA9PT0gY29tbW9uXzEuU1RBVEVfQ09OTkVDVEVEO1xuICAgIH1cbiAgICBpc0Rlc3Ryb3llZCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucy5zdGF0ZSA9PT0gY29tbW9uXzEuU1RBVEVfQ0xPU0VEO1xuICAgIH1cbiAgICAvLyBOT1RFOiBUaGVyZSBhcmUgbWFueSBwbGFjZXMgaW4gY29kZSB3aGVyZSB3ZSBleHBsaWNpdGx5IGNoZWNrIHRoZSBsYXN0IGhlbGxvXG4gICAgLy8gICAgICAgdG8gZG8gZmVhdHVyZSBzdXBwb3J0IGRldGVjdGlvbi4gVGhpcyBzaG91bGQgYmUgZG9uZSBhbnkgb3RoZXIgd2F5LCBidXQgZm9yXG4gICAgLy8gICAgICAgbm93IHdlIHdpbGwganVzdCByZXR1cm4gdGhlIGZpcnN0IGhlbGxvIHNlZW4sIHdoaWNoIHNob3VsZCBzdWZmaWNlLlxuICAgIGxhc3RIZWxsbygpIHtcbiAgICAgICAgY29uc3Qgc2VydmVyRGVzY3JpcHRpb25zID0gQXJyYXkuZnJvbSh0aGlzLmRlc2NyaXB0aW9uLnNlcnZlcnMudmFsdWVzKCkpO1xuICAgICAgICBpZiAoc2VydmVyRGVzY3JpcHRpb25zLmxlbmd0aCA9PT0gMClcbiAgICAgICAgICAgIHJldHVybiB7fTtcbiAgICAgICAgY29uc3Qgc2QgPSBzZXJ2ZXJEZXNjcmlwdGlvbnMuZmlsdGVyKChzZCkgPT4gc2QudHlwZSAhPT0gY29tbW9uXzEuU2VydmVyVHlwZS5Vbmtub3duKVswXTtcbiAgICAgICAgY29uc3QgcmVzdWx0ID0gc2QgfHwgeyBtYXhXaXJlVmVyc2lvbjogdGhpcy5kZXNjcmlwdGlvbi5jb21tb25XaXJlVmVyc2lvbiB9O1xuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cbiAgICBnZXQgY29tbW9uV2lyZVZlcnNpb24oKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmRlc2NyaXB0aW9uLmNvbW1vbldpcmVWZXJzaW9uO1xuICAgIH1cbiAgICBnZXQgbG9naWNhbFNlc3Npb25UaW1lb3V0TWludXRlcygpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZGVzY3JpcHRpb24ubG9naWNhbFNlc3Npb25UaW1lb3V0TWludXRlcztcbiAgICB9XG4gICAgZ2V0IGNsdXN0ZXJUaW1lKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5zLmNsdXN0ZXJUaW1lO1xuICAgIH1cbiAgICBzZXQgY2x1c3RlclRpbWUoY2x1c3RlclRpbWUpIHtcbiAgICAgICAgdGhpcy5zLmNsdXN0ZXJUaW1lID0gY2x1c3RlclRpbWU7XG4gICAgfVxufVxuLyoqIEBldmVudCAqL1xuVG9wb2xvZ3kuU0VSVkVSX09QRU5JTkcgPSBjb25zdGFudHNfMS5TRVJWRVJfT1BFTklORztcbi8qKiBAZXZlbnQgKi9cblRvcG9sb2d5LlNFUlZFUl9DTE9TRUQgPSBjb25zdGFudHNfMS5TRVJWRVJfQ0xPU0VEO1xuLyoqIEBldmVudCAqL1xuVG9wb2xvZ3kuU0VSVkVSX0RFU0NSSVBUSU9OX0NIQU5HRUQgPSBjb25zdGFudHNfMS5TRVJWRVJfREVTQ1JJUFRJT05fQ0hBTkdFRDtcbi8qKiBAZXZlbnQgKi9cblRvcG9sb2d5LlRPUE9MT0dZX09QRU5JTkcgPSBjb25zdGFudHNfMS5UT1BPTE9HWV9PUEVOSU5HO1xuLyoqIEBldmVudCAqL1xuVG9wb2xvZ3kuVE9QT0xPR1lfQ0xPU0VEID0gY29uc3RhbnRzXzEuVE9QT0xPR1lfQ0xPU0VEO1xuLyoqIEBldmVudCAqL1xuVG9wb2xvZ3kuVE9QT0xPR1lfREVTQ1JJUFRJT05fQ0hBTkdFRCA9IGNvbnN0YW50c18xLlRPUE9MT0dZX0RFU0NSSVBUSU9OX0NIQU5HRUQ7XG4vKiogQGV2ZW50ICovXG5Ub3BvbG9neS5FUlJPUiA9IGNvbnN0YW50c18xLkVSUk9SO1xuLyoqIEBldmVudCAqL1xuVG9wb2xvZ3kuT1BFTiA9IGNvbnN0YW50c18xLk9QRU47XG4vKiogQGV2ZW50ICovXG5Ub3BvbG9neS5DT05ORUNUID0gY29uc3RhbnRzXzEuQ09OTkVDVDtcbi8qKiBAZXZlbnQgKi9cblRvcG9sb2d5LkNMT1NFID0gY29uc3RhbnRzXzEuQ0xPU0U7XG4vKiogQGV2ZW50ICovXG5Ub3BvbG9neS5USU1FT1VUID0gY29uc3RhbnRzXzEuVElNRU9VVDtcbmV4cG9ydHMuVG9wb2xvZ3kgPSBUb3BvbG9neTtcbi8qKiBEZXN0cm95cyBhIHNlcnZlciwgYW5kIHJlbW92ZXMgYWxsIGV2ZW50IGxpc3RlbmVycyBmcm9tIHRoZSBpbnN0YW5jZSAqL1xuZnVuY3Rpb24gZGVzdHJveVNlcnZlcihzZXJ2ZXIsIHRvcG9sb2d5LCBvcHRpb25zLCBjYWxsYmFjaykge1xuICAgIG9wdGlvbnMgPSBvcHRpb25zID8/IHsgZm9yY2U6IGZhbHNlIH07XG4gICAgZm9yIChjb25zdCBldmVudCBvZiBjb25zdGFudHNfMS5MT0NBTF9TRVJWRVJfRVZFTlRTKSB7XG4gICAgICAgIHNlcnZlci5yZW1vdmVBbGxMaXN0ZW5lcnMoZXZlbnQpO1xuICAgIH1cbiAgICBzZXJ2ZXIuZGVzdHJveShvcHRpb25zLCAoKSA9PiB7XG4gICAgICAgIHRvcG9sb2d5LmVtaXQoVG9wb2xvZ3kuU0VSVkVSX0NMT1NFRCwgbmV3IGV2ZW50c18xLlNlcnZlckNsb3NlZEV2ZW50KHRvcG9sb2d5LnMuaWQsIHNlcnZlci5kZXNjcmlwdGlvbi5hZGRyZXNzKSk7XG4gICAgICAgIGZvciAoY29uc3QgZXZlbnQgb2YgY29uc3RhbnRzXzEuU0VSVkVSX1JFTEFZX0VWRU5UUykge1xuICAgICAgICAgICAgc2VydmVyLnJlbW92ZUFsbExpc3RlbmVycyhldmVudCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHR5cGVvZiBjYWxsYmFjayA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgY2FsbGJhY2soKTtcbiAgICAgICAgfVxuICAgIH0pO1xufVxuLyoqIFByZWRpY3RzIHRoZSBUb3BvbG9neVR5cGUgZnJvbSBvcHRpb25zICovXG5mdW5jdGlvbiB0b3BvbG9neVR5cGVGcm9tT3B0aW9ucyhvcHRpb25zKSB7XG4gICAgaWYgKG9wdGlvbnM/LmRpcmVjdENvbm5lY3Rpb24pIHtcbiAgICAgICAgcmV0dXJuIGNvbW1vbl8xLlRvcG9sb2d5VHlwZS5TaW5nbGU7XG4gICAgfVxuICAgIGlmIChvcHRpb25zPy5yZXBsaWNhU2V0KSB7XG4gICAgICAgIHJldHVybiBjb21tb25fMS5Ub3BvbG9neVR5cGUuUmVwbGljYVNldE5vUHJpbWFyeTtcbiAgICB9XG4gICAgaWYgKG9wdGlvbnM/LmxvYWRCYWxhbmNlZCkge1xuICAgICAgICByZXR1cm4gY29tbW9uXzEuVG9wb2xvZ3lUeXBlLkxvYWRCYWxhbmNlZDtcbiAgICB9XG4gICAgcmV0dXJuIGNvbW1vbl8xLlRvcG9sb2d5VHlwZS5Vbmtub3duO1xufVxuLyoqXG4gKiBDcmVhdGVzIG5ldyBzZXJ2ZXIgaW5zdGFuY2VzIGFuZCBhdHRlbXB0cyB0byBjb25uZWN0IHRoZW1cbiAqXG4gKiBAcGFyYW0gdG9wb2xvZ3kgLSBUaGUgdG9wb2xvZ3kgdGhhdCB0aGlzIHNlcnZlciBiZWxvbmdzIHRvXG4gKiBAcGFyYW0gc2VydmVyRGVzY3JpcHRpb24gLSBUaGUgZGVzY3JpcHRpb24gZm9yIHRoZSBzZXJ2ZXIgdG8gaW5pdGlhbGl6ZSBhbmQgY29ubmVjdCB0b1xuICovXG5mdW5jdGlvbiBjcmVhdGVBbmRDb25uZWN0U2VydmVyKHRvcG9sb2d5LCBzZXJ2ZXJEZXNjcmlwdGlvbikge1xuICAgIHRvcG9sb2d5LmVtaXQoVG9wb2xvZ3kuU0VSVkVSX09QRU5JTkcsIG5ldyBldmVudHNfMS5TZXJ2ZXJPcGVuaW5nRXZlbnQodG9wb2xvZ3kucy5pZCwgc2VydmVyRGVzY3JpcHRpb24uYWRkcmVzcykpO1xuICAgIGNvbnN0IHNlcnZlciA9IG5ldyBzZXJ2ZXJfMS5TZXJ2ZXIodG9wb2xvZ3ksIHNlcnZlckRlc2NyaXB0aW9uLCB0b3BvbG9neS5zLm9wdGlvbnMpO1xuICAgIGZvciAoY29uc3QgZXZlbnQgb2YgY29uc3RhbnRzXzEuU0VSVkVSX1JFTEFZX0VWRU5UUykge1xuICAgICAgICBzZXJ2ZXIub24oZXZlbnQsIChlKSA9PiB0b3BvbG9neS5lbWl0KGV2ZW50LCBlKSk7XG4gICAgfVxuICAgIHNlcnZlci5vbihzZXJ2ZXJfMS5TZXJ2ZXIuREVTQ1JJUFRJT05fUkVDRUlWRUQsIGRlc2NyaXB0aW9uID0+IHRvcG9sb2d5LnNlcnZlclVwZGF0ZUhhbmRsZXIoZGVzY3JpcHRpb24pKTtcbiAgICBzZXJ2ZXIuY29ubmVjdCgpO1xuICAgIHJldHVybiBzZXJ2ZXI7XG59XG4vKipcbiAqIEBwYXJhbSB0b3BvbG9neSAtIFRvcG9sb2d5IHRvIHVwZGF0ZS5cbiAqIEBwYXJhbSBpbmNvbWluZ1NlcnZlckRlc2NyaXB0aW9uIC0gTmV3IHNlcnZlciBkZXNjcmlwdGlvbi5cbiAqL1xuZnVuY3Rpb24gdXBkYXRlU2VydmVycyh0b3BvbG9neSwgaW5jb21pbmdTZXJ2ZXJEZXNjcmlwdGlvbikge1xuICAgIC8vIHVwZGF0ZSB0aGUgaW50ZXJuYWwgc2VydmVyJ3MgZGVzY3JpcHRpb25cbiAgICBpZiAoaW5jb21pbmdTZXJ2ZXJEZXNjcmlwdGlvbiAmJiB0b3BvbG9neS5zLnNlcnZlcnMuaGFzKGluY29taW5nU2VydmVyRGVzY3JpcHRpb24uYWRkcmVzcykpIHtcbiAgICAgICAgY29uc3Qgc2VydmVyID0gdG9wb2xvZ3kucy5zZXJ2ZXJzLmdldChpbmNvbWluZ1NlcnZlckRlc2NyaXB0aW9uLmFkZHJlc3MpO1xuICAgICAgICBpZiAoc2VydmVyKSB7XG4gICAgICAgICAgICBzZXJ2ZXIucy5kZXNjcmlwdGlvbiA9IGluY29taW5nU2VydmVyRGVzY3JpcHRpb247XG4gICAgICAgICAgICBpZiAoaW5jb21pbmdTZXJ2ZXJEZXNjcmlwdGlvbi5lcnJvciBpbnN0YW5jZW9mIGVycm9yXzEuTW9uZ29FcnJvciAmJlxuICAgICAgICAgICAgICAgIGluY29taW5nU2VydmVyRGVzY3JpcHRpb24uZXJyb3IuaGFzRXJyb3JMYWJlbChlcnJvcl8xLk1vbmdvRXJyb3JMYWJlbC5SZXNldFBvb2wpKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgaW50ZXJydXB0SW5Vc2VDb25uZWN0aW9ucyA9IGluY29taW5nU2VydmVyRGVzY3JpcHRpb24uZXJyb3IuaGFzRXJyb3JMYWJlbChlcnJvcl8xLk1vbmdvRXJyb3JMYWJlbC5JbnRlcnJ1cHRJblVzZUNvbm5lY3Rpb25zKTtcbiAgICAgICAgICAgICAgICBzZXJ2ZXIucG9vbC5jbGVhcih7IGludGVycnVwdEluVXNlQ29ubmVjdGlvbnMgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChpbmNvbWluZ1NlcnZlckRlc2NyaXB0aW9uLmVycm9yID09IG51bGwpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBuZXdUb3BvbG9neVR5cGUgPSB0b3BvbG9neS5zLmRlc2NyaXB0aW9uLnR5cGU7XG4gICAgICAgICAgICAgICAgY29uc3Qgc2hvdWxkTWFya1Bvb2xSZWFkeSA9IGluY29taW5nU2VydmVyRGVzY3JpcHRpb24uaXNEYXRhQmVhcmluZyB8fFxuICAgICAgICAgICAgICAgICAgICAoaW5jb21pbmdTZXJ2ZXJEZXNjcmlwdGlvbi50eXBlICE9PSBjb21tb25fMS5TZXJ2ZXJUeXBlLlVua25vd24gJiZcbiAgICAgICAgICAgICAgICAgICAgICAgIG5ld1RvcG9sb2d5VHlwZSA9PT0gY29tbW9uXzEuVG9wb2xvZ3lUeXBlLlNpbmdsZSk7XG4gICAgICAgICAgICAgICAgaWYgKHNob3VsZE1hcmtQb29sUmVhZHkpIHtcbiAgICAgICAgICAgICAgICAgICAgc2VydmVyLnBvb2wucmVhZHkoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgLy8gYWRkIG5ldyBzZXJ2ZXJzIGZvciBhbGwgZGVzY3JpcHRpb25zIHdlIGN1cnJlbnRseSBkb24ndCBrbm93IGFib3V0IGxvY2FsbHlcbiAgICBmb3IgKGNvbnN0IHNlcnZlckRlc2NyaXB0aW9uIG9mIHRvcG9sb2d5LmRlc2NyaXB0aW9uLnNlcnZlcnMudmFsdWVzKCkpIHtcbiAgICAgICAgaWYgKCF0b3BvbG9neS5zLnNlcnZlcnMuaGFzKHNlcnZlckRlc2NyaXB0aW9uLmFkZHJlc3MpKSB7XG4gICAgICAgICAgICBjb25zdCBzZXJ2ZXIgPSBjcmVhdGVBbmRDb25uZWN0U2VydmVyKHRvcG9sb2d5LCBzZXJ2ZXJEZXNjcmlwdGlvbik7XG4gICAgICAgICAgICB0b3BvbG9neS5zLnNlcnZlcnMuc2V0KHNlcnZlckRlc2NyaXB0aW9uLmFkZHJlc3MsIHNlcnZlcik7XG4gICAgICAgIH1cbiAgICB9XG4gICAgLy8gZm9yIGFsbCBzZXJ2ZXJzIG5vIGxvbmdlciBrbm93biwgcmVtb3ZlIHRoZWlyIGRlc2NyaXB0aW9ucyBhbmQgZGVzdHJveSB0aGVpciBpbnN0YW5jZXNcbiAgICBmb3IgKGNvbnN0IGVudHJ5IG9mIHRvcG9sb2d5LnMuc2VydmVycykge1xuICAgICAgICBjb25zdCBzZXJ2ZXJBZGRyZXNzID0gZW50cnlbMF07XG4gICAgICAgIGlmICh0b3BvbG9neS5kZXNjcmlwdGlvbi5oYXNTZXJ2ZXIoc2VydmVyQWRkcmVzcykpIHtcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG4gICAgICAgIGlmICghdG9wb2xvZ3kucy5zZXJ2ZXJzLmhhcyhzZXJ2ZXJBZGRyZXNzKSkge1xuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3Qgc2VydmVyID0gdG9wb2xvZ3kucy5zZXJ2ZXJzLmdldChzZXJ2ZXJBZGRyZXNzKTtcbiAgICAgICAgdG9wb2xvZ3kucy5zZXJ2ZXJzLmRlbGV0ZShzZXJ2ZXJBZGRyZXNzKTtcbiAgICAgICAgLy8gcHJlcGFyZSBzZXJ2ZXIgZm9yIGdhcmJhZ2UgY29sbGVjdGlvblxuICAgICAgICBpZiAoc2VydmVyKSB7XG4gICAgICAgICAgICBkZXN0cm95U2VydmVyKHNlcnZlciwgdG9wb2xvZ3kpO1xuICAgICAgICB9XG4gICAgfVxufVxuZnVuY3Rpb24gZHJhaW5XYWl0UXVldWUocXVldWUsIGVycikge1xuICAgIHdoaWxlIChxdWV1ZS5sZW5ndGgpIHtcbiAgICAgICAgY29uc3Qgd2FpdFF1ZXVlTWVtYmVyID0gcXVldWUuc2hpZnQoKTtcbiAgICAgICAgaWYgKCF3YWl0UXVldWVNZW1iZXIpIHtcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG4gICAgICAgIHdhaXRRdWV1ZU1lbWJlci50aW1lb3V0Q29udHJvbGxlci5jbGVhcigpO1xuICAgICAgICBpZiAoIXdhaXRRdWV1ZU1lbWJlcltrQ2FuY2VsbGVkXSkge1xuICAgICAgICAgICAgd2FpdFF1ZXVlTWVtYmVyLmNhbGxiYWNrKGVycik7XG4gICAgICAgIH1cbiAgICB9XG59XG5mdW5jdGlvbiBwcm9jZXNzV2FpdFF1ZXVlKHRvcG9sb2d5KSB7XG4gICAgaWYgKHRvcG9sb2d5LnMuc3RhdGUgPT09IGNvbW1vbl8xLlNUQVRFX0NMT1NFRCkge1xuICAgICAgICBkcmFpbldhaXRRdWV1ZSh0b3BvbG9neVtrV2FpdFF1ZXVlXSwgbmV3IGVycm9yXzEuTW9uZ29Ub3BvbG9neUNsb3NlZEVycm9yKCkpO1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIGNvbnN0IGlzU2hhcmRlZCA9IHRvcG9sb2d5LmRlc2NyaXB0aW9uLnR5cGUgPT09IGNvbW1vbl8xLlRvcG9sb2d5VHlwZS5TaGFyZGVkO1xuICAgIGNvbnN0IHNlcnZlckRlc2NyaXB0aW9ucyA9IEFycmF5LmZyb20odG9wb2xvZ3kuZGVzY3JpcHRpb24uc2VydmVycy52YWx1ZXMoKSk7XG4gICAgY29uc3QgbWVtYmVyc1RvUHJvY2VzcyA9IHRvcG9sb2d5W2tXYWl0UXVldWVdLmxlbmd0aDtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IG1lbWJlcnNUb1Byb2Nlc3M7ICsraSkge1xuICAgICAgICBjb25zdCB3YWl0UXVldWVNZW1iZXIgPSB0b3BvbG9neVtrV2FpdFF1ZXVlXS5zaGlmdCgpO1xuICAgICAgICBpZiAoIXdhaXRRdWV1ZU1lbWJlcikge1xuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHdhaXRRdWV1ZU1lbWJlcltrQ2FuY2VsbGVkXSkge1xuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cbiAgICAgICAgbGV0IHNlbGVjdGVkRGVzY3JpcHRpb25zO1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgY29uc3Qgc2VydmVyU2VsZWN0b3IgPSB3YWl0UXVldWVNZW1iZXIuc2VydmVyU2VsZWN0b3I7XG4gICAgICAgICAgICBzZWxlY3RlZERlc2NyaXB0aW9ucyA9IHNlcnZlclNlbGVjdG9yXG4gICAgICAgICAgICAgICAgPyBzZXJ2ZXJTZWxlY3Rvcih0b3BvbG9neS5kZXNjcmlwdGlvbiwgc2VydmVyRGVzY3JpcHRpb25zKVxuICAgICAgICAgICAgICAgIDogc2VydmVyRGVzY3JpcHRpb25zO1xuICAgICAgICB9XG4gICAgICAgIGNhdGNoIChlKSB7XG4gICAgICAgICAgICB3YWl0UXVldWVNZW1iZXIudGltZW91dENvbnRyb2xsZXIuY2xlYXIoKTtcbiAgICAgICAgICAgIHdhaXRRdWV1ZU1lbWJlci5jYWxsYmFjayhlKTtcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG4gICAgICAgIGxldCBzZWxlY3RlZFNlcnZlcjtcbiAgICAgICAgaWYgKHNlbGVjdGVkRGVzY3JpcHRpb25zLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgdG9wb2xvZ3lba1dhaXRRdWV1ZV0ucHVzaCh3YWl0UXVldWVNZW1iZXIpO1xuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoc2VsZWN0ZWREZXNjcmlwdGlvbnMubGVuZ3RoID09PSAxKSB7XG4gICAgICAgICAgICBzZWxlY3RlZFNlcnZlciA9IHRvcG9sb2d5LnMuc2VydmVycy5nZXQoc2VsZWN0ZWREZXNjcmlwdGlvbnNbMF0uYWRkcmVzcyk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBjb25zdCBkZXNjcmlwdGlvbnMgPSAoMCwgdXRpbHNfMS5zaHVmZmxlKShzZWxlY3RlZERlc2NyaXB0aW9ucywgMik7XG4gICAgICAgICAgICBjb25zdCBzZXJ2ZXIxID0gdG9wb2xvZ3kucy5zZXJ2ZXJzLmdldChkZXNjcmlwdGlvbnNbMF0uYWRkcmVzcyk7XG4gICAgICAgICAgICBjb25zdCBzZXJ2ZXIyID0gdG9wb2xvZ3kucy5zZXJ2ZXJzLmdldChkZXNjcmlwdGlvbnNbMV0uYWRkcmVzcyk7XG4gICAgICAgICAgICBzZWxlY3RlZFNlcnZlciA9XG4gICAgICAgICAgICAgICAgc2VydmVyMSAmJiBzZXJ2ZXIyICYmIHNlcnZlcjEucy5vcGVyYXRpb25Db3VudCA8IHNlcnZlcjIucy5vcGVyYXRpb25Db3VudFxuICAgICAgICAgICAgICAgICAgICA/IHNlcnZlcjFcbiAgICAgICAgICAgICAgICAgICAgOiBzZXJ2ZXIyO1xuICAgICAgICB9XG4gICAgICAgIGlmICghc2VsZWN0ZWRTZXJ2ZXIpIHtcbiAgICAgICAgICAgIHdhaXRRdWV1ZU1lbWJlci5jYWxsYmFjayhuZXcgZXJyb3JfMS5Nb25nb1NlcnZlclNlbGVjdGlvbkVycm9yKCdzZXJ2ZXIgc2VsZWN0aW9uIHJldHVybmVkIGEgc2VydmVyIGRlc2NyaXB0aW9uIGJ1dCB0aGUgc2VydmVyIHdhcyBub3QgZm91bmQgaW4gdGhlIHRvcG9sb2d5JywgdG9wb2xvZ3kuZGVzY3JpcHRpb24pKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCB0cmFuc2FjdGlvbiA9IHdhaXRRdWV1ZU1lbWJlci50cmFuc2FjdGlvbjtcbiAgICAgICAgaWYgKGlzU2hhcmRlZCAmJiB0cmFuc2FjdGlvbiAmJiB0cmFuc2FjdGlvbi5pc0FjdGl2ZSAmJiBzZWxlY3RlZFNlcnZlcikge1xuICAgICAgICAgICAgdHJhbnNhY3Rpb24ucGluU2VydmVyKHNlbGVjdGVkU2VydmVyKTtcbiAgICAgICAgfVxuICAgICAgICB3YWl0UXVldWVNZW1iZXIudGltZW91dENvbnRyb2xsZXIuY2xlYXIoKTtcbiAgICAgICAgd2FpdFF1ZXVlTWVtYmVyLmNhbGxiYWNrKHVuZGVmaW5lZCwgc2VsZWN0ZWRTZXJ2ZXIpO1xuICAgIH1cbiAgICBpZiAodG9wb2xvZ3lba1dhaXRRdWV1ZV0ubGVuZ3RoID4gMCkge1xuICAgICAgICAvLyBlbnN1cmUgYWxsIHNlcnZlciBtb25pdG9ycyBhdHRlbXB0IG1vbml0b3Jpbmcgc29vblxuICAgICAgICBmb3IgKGNvbnN0IFssIHNlcnZlcl0gb2YgdG9wb2xvZ3kucy5zZXJ2ZXJzKSB7XG4gICAgICAgICAgICBwcm9jZXNzLm5leHRUaWNrKGZ1bmN0aW9uIHNjaGVkdWxlU2VydmVyQ2hlY2soKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHNlcnZlci5yZXF1ZXN0Q2hlY2soKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgfVxufVxuZnVuY3Rpb24gaXNTdGFsZVNlcnZlckRlc2NyaXB0aW9uKHRvcG9sb2d5RGVzY3JpcHRpb24sIGluY29taW5nU2VydmVyRGVzY3JpcHRpb24pIHtcbiAgICBjb25zdCBjdXJyZW50U2VydmVyRGVzY3JpcHRpb24gPSB0b3BvbG9neURlc2NyaXB0aW9uLnNlcnZlcnMuZ2V0KGluY29taW5nU2VydmVyRGVzY3JpcHRpb24uYWRkcmVzcyk7XG4gICAgY29uc3QgY3VycmVudFRvcG9sb2d5VmVyc2lvbiA9IGN1cnJlbnRTZXJ2ZXJEZXNjcmlwdGlvbj8udG9wb2xvZ3lWZXJzaW9uO1xuICAgIHJldHVybiAoKDAsIHNlcnZlcl9kZXNjcmlwdGlvbl8xLmNvbXBhcmVUb3BvbG9neVZlcnNpb24pKGN1cnJlbnRUb3BvbG9neVZlcnNpb24sIGluY29taW5nU2VydmVyRGVzY3JpcHRpb24udG9wb2xvZ3lWZXJzaW9uKSA+IDApO1xufVxuLyoqIEBwdWJsaWMgKi9cbmNsYXNzIFNlcnZlckNhcGFiaWxpdGllcyB7XG4gICAgY29uc3RydWN0b3IoaGVsbG8pIHtcbiAgICAgICAgdGhpcy5taW5XaXJlVmVyc2lvbiA9IGhlbGxvLm1pbldpcmVWZXJzaW9uIHx8IDA7XG4gICAgICAgIHRoaXMubWF4V2lyZVZlcnNpb24gPSBoZWxsby5tYXhXaXJlVmVyc2lvbiB8fCAwO1xuICAgIH1cbiAgICBnZXQgaGFzQWdncmVnYXRpb25DdXJzb3IoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLm1heFdpcmVWZXJzaW9uID49IDE7XG4gICAgfVxuICAgIGdldCBoYXNXcml0ZUNvbW1hbmRzKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5tYXhXaXJlVmVyc2lvbiA+PSAyO1xuICAgIH1cbiAgICBnZXQgaGFzVGV4dFNlYXJjaCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMubWluV2lyZVZlcnNpb24gPj0gMDtcbiAgICB9XG4gICAgZ2V0IGhhc0F1dGhDb21tYW5kcygpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMubWF4V2lyZVZlcnNpb24gPj0gMTtcbiAgICB9XG4gICAgZ2V0IGhhc0xpc3RDb2xsZWN0aW9uc0NvbW1hbmQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLm1heFdpcmVWZXJzaW9uID49IDM7XG4gICAgfVxuICAgIGdldCBoYXNMaXN0SW5kZXhlc0NvbW1hbmQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLm1heFdpcmVWZXJzaW9uID49IDM7XG4gICAgfVxuICAgIGdldCBzdXBwb3J0c1NuYXBzaG90UmVhZHMoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLm1heFdpcmVWZXJzaW9uID49IDEzO1xuICAgIH1cbiAgICBnZXQgY29tbWFuZHNUYWtlV3JpdGVDb25jZXJuKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5tYXhXaXJlVmVyc2lvbiA+PSA1O1xuICAgIH1cbiAgICBnZXQgY29tbWFuZHNUYWtlQ29sbGF0aW9uKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5tYXhXaXJlVmVyc2lvbiA+PSA1O1xuICAgIH1cbn1cbmV4cG9ydHMuU2VydmVyQ2FwYWJpbGl0aWVzID0gU2VydmVyQ2FwYWJpbGl0aWVzO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dG9wb2xvZ3kuanMubWFwIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiU2VydmVyQ2FwYWJpbGl0aWVzIiwiVG9wb2xvZ3kiLCJ1dGlsXzEiLCJyZXF1aXJlIiwiY29ubmVjdGlvbl9zdHJpbmdfMSIsImNvbnN0YW50c18xIiwiZXJyb3JfMSIsIm1vbmdvX3R5cGVzXzEiLCJyZWFkX3ByZWZlcmVuY2VfMSIsInV0aWxzXzEiLCJjb21tb25fMSIsImV2ZW50c18xIiwic2VydmVyXzEiLCJzZXJ2ZXJfZGVzY3JpcHRpb25fMSIsInNlcnZlcl9zZWxlY3Rpb25fMSIsInNydl9wb2xsaW5nXzEiLCJ0b3BvbG9neV9kZXNjcmlwdGlvbl8xIiwiZ2xvYmFsVG9wb2xvZ3lDb3VudGVyIiwic3RhdGVUcmFuc2l0aW9uIiwibWFrZVN0YXRlTWFjaGluZSIsIlNUQVRFX0NMT1NFRCIsIlNUQVRFX0NPTk5FQ1RJTkciLCJTVEFURV9DTE9TSU5HIiwiU1RBVEVfQ09OTkVDVEVEIiwia0NhbmNlbGxlZCIsIlN5bWJvbCIsImtXYWl0UXVldWUiLCJUeXBlZEV2ZW50RW1pdHRlciIsImNvbnN0cnVjdG9yIiwiY2xpZW50Iiwic2VlZHMiLCJvcHRpb25zIiwic2VsZWN0U2VydmVyQXN5bmMiLCJwcm9taXNpZnkiLCJzZWxlY3RvciIsImNhbGxiYWNrIiwic2VsZWN0U2VydmVyIiwiaG9zdHMiLCJIb3N0QWRkcmVzcyIsImZyb21TdHJpbmciLCJmcm9tRW50cmllcyIsIkRFRkFVTFRfT1BUSU9OUyIsImVudHJpZXMiLCJGRUFUVVJFX0ZMQUdTIiwiQXJyYXkiLCJpc0FycmF5Iiwic2VlZGxpc3QiLCJzZWVkIiwicHVzaCIsIk1vbmdvUnVudGltZUVycm9yIiwiSlNPTiIsInN0cmluZ2lmeSIsInRvcG9sb2d5VHlwZSIsInRvcG9sb2d5VHlwZUZyb21PcHRpb25zIiwidG9wb2xvZ3lJZCIsInNlbGVjdGVkSG9zdHMiLCJzcnZNYXhIb3N0cyIsImxlbmd0aCIsInNodWZmbGUiLCJzZXJ2ZXJEZXNjcmlwdGlvbnMiLCJNYXAiLCJob3N0QWRkcmVzcyIsInNldCIsInRvU3RyaW5nIiwiU2VydmVyRGVzY3JpcHRpb24iLCJMaXN0IiwicyIsImlkIiwic3RhdGUiLCJkZXNjcmlwdGlvbiIsIlRvcG9sb2d5RGVzY3JpcHRpb24iLCJyZXBsaWNhU2V0IiwidW5kZWZpbmVkIiwic2VydmVyU2VsZWN0aW9uVGltZW91dE1TIiwiaGVhcnRiZWF0RnJlcXVlbmN5TVMiLCJtaW5IZWFydGJlYXRGcmVxdWVuY3lNUyIsInNlcnZlcnMiLCJjcmVkZW50aWFscyIsImNsdXN0ZXJUaW1lIiwiY29ubmVjdGlvblRpbWVycyIsIlNldCIsImRldGVjdFNoYXJkZWRUb3BvbG9neSIsImV2IiwiZGV0ZWN0U3J2UmVjb3JkcyIsInNydkhvc3QiLCJsb2FkQmFsYW5jZWQiLCJzcnZQb2xsZXIiLCJTcnZQb2xsZXIiLCJzcnZTZXJ2aWNlTmFtZSIsIm9uIiwiVE9QT0xPR1lfREVTQ1JJUFRJT05fQ0hBTkdFRCIsImV2ZW50IiwicHJldmlvdXNUeXBlIiwicHJldmlvdXNEZXNjcmlwdGlvbiIsInR5cGUiLCJuZXdUeXBlIiwibmV3RGVzY3JpcHRpb24iLCJ0cmFuc2l0aW9uVG9TaGFyZGVkIiwiVG9wb2xvZ3lUeXBlIiwiU2hhcmRlZCIsInNydkxpc3RlbmVycyIsImxpc3RlbmVycyIsIlNSVl9SRUNPUkRfRElTQ09WRVJZIiwibGlzdGVuaW5nVG9TcnZQb2xsaW5nIiwiaW5jbHVkZXMiLCJzdGFydCIsInByZXZpb3VzVG9wb2xvZ3lEZXNjcmlwdGlvbiIsInVwZGF0ZUZyb21TcnZQb2xsaW5nRXZlbnQiLCJ1cGRhdGVTZXJ2ZXJzIiwiZW1pdCIsIlRvcG9sb2d5RGVzY3JpcHRpb25DaGFuZ2VkRXZlbnQiLCJjYXBhYmlsaXRpZXMiLCJsYXN0SGVsbG8iLCJjb25uZWN0IiwiVE9QT0xPR1lfT1BFTklORyIsIlRvcG9sb2d5T3BlbmluZ0V2ZW50IiwiVW5rbm93biIsImZyb20iLCJ2YWx1ZXMiLCJtYXAiLCJzZXJ2ZXJEZXNjcmlwdGlvbiIsImFkZHJlc3MiLCJjcmVhdGVBbmRDb25uZWN0U2VydmVyIiwic2VydmVyVXBkYXRlSGFuZGxlciIsImV4aXRXaXRoRXJyb3IiLCJlcnJvciIsIkVSUk9SIiwicmVhZFByZWZlcmVuY2UiLCJSZWFkUHJlZmVyZW5jZSIsInByaW1hcnkiLCJyZWFkUHJlZmVyZW5jZVNlcnZlclNlbGVjdG9yIiwiZXJyIiwic2VydmVyIiwiY2xvc2UiLCJmb3JjZSIsInNraXBQaW5nT25Db25uZWN0IiwiZm9yIiwiY29tbWFuZCIsIm5zIiwicGluZyIsIk9QRU4iLCJDT05ORUNUIiwiZGVzdHJveWVkU2VydmVycyIsImRlc3Ryb3lTZXJ2ZXIiLCJQcm9taXNlIiwiYWxsIiwidGhlbiIsImNsZWFyIiwiZHJhaW5XYWl0UXVldWUiLCJNb25nb1RvcG9sb2d5Q2xvc2VkRXJyb3IiLCJkcmFpblRpbWVyUXVldWUiLCJzdG9wIiwicmVtb3ZlTGlzdGVuZXIiLCJUT1BPTE9HWV9DTE9TRUQiLCJUb3BvbG9neUNsb3NlZEV2ZW50IiwiZmluYWxseSIsInNlcnZlclNlbGVjdG9yIiwidHJhbnNsYXRlIiwiYXNzaWduIiwiaXNTaGFyZGVkIiwic2Vzc2lvbiIsInRyYW5zYWN0aW9uIiwid2FpdFF1ZXVlTWVtYmVyIiwidGltZW91dENvbnRyb2xsZXIiLCJUaW1lb3V0Q29udHJvbGxlciIsInNpZ25hbCIsImFkZEV2ZW50TGlzdGVuZXIiLCJ0aW1lb3V0RXJyb3IiLCJNb25nb1NlcnZlclNlbGVjdGlvbkVycm9yIiwicHJvY2Vzc1dhaXRRdWV1ZSIsImhhc1NlcnZlciIsImlzU3RhbGVTZXJ2ZXJEZXNjcmlwdGlvbiIsInByZXZpb3VzU2VydmVyRGVzY3JpcHRpb24iLCJnZXQiLCIkY2x1c3RlclRpbWUiLCJfYWR2YW5jZUNsdXN0ZXJUaW1lIiwiZXF1YWxEZXNjcmlwdGlvbnMiLCJlcXVhbHMiLCJ1cGRhdGUiLCJjb21wYXRpYmlsaXR5RXJyb3IiLCJNb25nb0NvbXBhdGliaWxpdHlFcnJvciIsIlNFUlZFUl9ERVNDUklQVElPTl9DSEFOR0VEIiwiU2VydmVyRGVzY3JpcHRpb25DaGFuZ2VkRXZlbnQiLCJhdXRoIiwiY2xpZW50TWV0YWRhdGEiLCJtZXRhZGF0YSIsImlzQ29ubmVjdGVkIiwiaXNEZXN0cm95ZWQiLCJzZCIsImZpbHRlciIsIlNlcnZlclR5cGUiLCJyZXN1bHQiLCJtYXhXaXJlVmVyc2lvbiIsImNvbW1vbldpcmVWZXJzaW9uIiwibG9naWNhbFNlc3Npb25UaW1lb3V0TWludXRlcyIsIlNFUlZFUl9PUEVOSU5HIiwiU0VSVkVSX0NMT1NFRCIsIkNMT1NFIiwiVElNRU9VVCIsInRvcG9sb2d5IiwiTE9DQUxfU0VSVkVSX0VWRU5UUyIsInJlbW92ZUFsbExpc3RlbmVycyIsImRlc3Ryb3kiLCJTZXJ2ZXJDbG9zZWRFdmVudCIsIlNFUlZFUl9SRUxBWV9FVkVOVFMiLCJkaXJlY3RDb25uZWN0aW9uIiwiU2luZ2xlIiwiUmVwbGljYVNldE5vUHJpbWFyeSIsIkxvYWRCYWxhbmNlZCIsIlNlcnZlck9wZW5pbmdFdmVudCIsIlNlcnZlciIsImUiLCJERVNDUklQVElPTl9SRUNFSVZFRCIsImluY29taW5nU2VydmVyRGVzY3JpcHRpb24iLCJoYXMiLCJNb25nb0Vycm9yIiwiaGFzRXJyb3JMYWJlbCIsIk1vbmdvRXJyb3JMYWJlbCIsIlJlc2V0UG9vbCIsImludGVycnVwdEluVXNlQ29ubmVjdGlvbnMiLCJJbnRlcnJ1cHRJblVzZUNvbm5lY3Rpb25zIiwicG9vbCIsIm5ld1RvcG9sb2d5VHlwZSIsInNob3VsZE1hcmtQb29sUmVhZHkiLCJpc0RhdGFCZWFyaW5nIiwicmVhZHkiLCJlbnRyeSIsInNlcnZlckFkZHJlc3MiLCJkZWxldGUiLCJxdWV1ZSIsInNoaWZ0IiwibWVtYmVyc1RvUHJvY2VzcyIsImkiLCJzZWxlY3RlZERlc2NyaXB0aW9ucyIsInNlbGVjdGVkU2VydmVyIiwiZGVzY3JpcHRpb25zIiwic2VydmVyMSIsInNlcnZlcjIiLCJvcGVyYXRpb25Db3VudCIsImlzQWN0aXZlIiwicGluU2VydmVyIiwicHJvY2VzcyIsIm5leHRUaWNrIiwic2NoZWR1bGVTZXJ2ZXJDaGVjayIsInJlcXVlc3RDaGVjayIsInRvcG9sb2d5RGVzY3JpcHRpb24iLCJjdXJyZW50U2VydmVyRGVzY3JpcHRpb24iLCJjdXJyZW50VG9wb2xvZ3lWZXJzaW9uIiwidG9wb2xvZ3lWZXJzaW9uIiwiY29tcGFyZVRvcG9sb2d5VmVyc2lvbiIsImhlbGxvIiwibWluV2lyZVZlcnNpb24iLCJoYXNBZ2dyZWdhdGlvbkN1cnNvciIsImhhc1dyaXRlQ29tbWFuZHMiLCJoYXNUZXh0U2VhcmNoIiwiaGFzQXV0aENvbW1hbmRzIiwiaGFzTGlzdENvbGxlY3Rpb25zQ29tbWFuZCIsImhhc0xpc3RJbmRleGVzQ29tbWFuZCIsInN1cHBvcnRzU25hcHNob3RSZWFkcyIsImNvbW1hbmRzVGFrZVdyaXRlQ29uY2VybiIsImNvbW1hbmRzVGFrZUNvbGxhdGlvbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongodb/lib/sdam/topology.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongodb/lib/sdam/topology_description.js":
/*!***************************************************************!*\
  !*** ./node_modules/mongodb/lib/sdam/topology_description.js ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.TopologyDescription = void 0;\nconst WIRE_CONSTANTS = __webpack_require__(/*! ../cmap/wire_protocol/constants */ \"(ssr)/./node_modules/mongodb/lib/cmap/wire_protocol/constants.js\");\nconst error_1 = __webpack_require__(/*! ../error */ \"(ssr)/./node_modules/mongodb/lib/error.js\");\nconst utils_1 = __webpack_require__(/*! ../utils */ \"(ssr)/./node_modules/mongodb/lib/utils.js\");\nconst common_1 = __webpack_require__(/*! ./common */ \"(ssr)/./node_modules/mongodb/lib/sdam/common.js\");\nconst server_description_1 = __webpack_require__(/*! ./server_description */ \"(ssr)/./node_modules/mongodb/lib/sdam/server_description.js\");\n// constants related to compatibility checks\nconst MIN_SUPPORTED_SERVER_VERSION = WIRE_CONSTANTS.MIN_SUPPORTED_SERVER_VERSION;\nconst MAX_SUPPORTED_SERVER_VERSION = WIRE_CONSTANTS.MAX_SUPPORTED_SERVER_VERSION;\nconst MIN_SUPPORTED_WIRE_VERSION = WIRE_CONSTANTS.MIN_SUPPORTED_WIRE_VERSION;\nconst MAX_SUPPORTED_WIRE_VERSION = WIRE_CONSTANTS.MAX_SUPPORTED_WIRE_VERSION;\nconst MONGOS_OR_UNKNOWN = new Set([\n    common_1.ServerType.Mongos,\n    common_1.ServerType.Unknown\n]);\nconst MONGOS_OR_STANDALONE = new Set([\n    common_1.ServerType.Mongos,\n    common_1.ServerType.Standalone\n]);\nconst NON_PRIMARY_RS_MEMBERS = new Set([\n    common_1.ServerType.RSSecondary,\n    common_1.ServerType.RSArbiter,\n    common_1.ServerType.RSOther\n]);\n/**\n * Representation of a deployment of servers\n * @public\n */ class TopologyDescription {\n    /**\n     * Create a TopologyDescription\n     */ constructor(topologyType, serverDescriptions = null, setName = null, maxSetVersion = null, maxElectionId = null, commonWireVersion = null, options = null){\n        options = options ?? {};\n        this.type = topologyType ?? common_1.TopologyType.Unknown;\n        this.servers = serverDescriptions ?? new Map();\n        this.stale = false;\n        this.compatible = true;\n        this.heartbeatFrequencyMS = options.heartbeatFrequencyMS ?? 0;\n        this.localThresholdMS = options.localThresholdMS ?? 15;\n        this.setName = setName ?? null;\n        this.maxElectionId = maxElectionId ?? null;\n        this.maxSetVersion = maxSetVersion ?? null;\n        this.commonWireVersion = commonWireVersion ?? 0;\n        // determine server compatibility\n        for (const serverDescription of this.servers.values()){\n            // Load balancer mode is always compatible.\n            if (serverDescription.type === common_1.ServerType.Unknown || serverDescription.type === common_1.ServerType.LoadBalancer) {\n                continue;\n            }\n            if (serverDescription.minWireVersion > MAX_SUPPORTED_WIRE_VERSION) {\n                this.compatible = false;\n                this.compatibilityError = `Server at ${serverDescription.address} requires wire version ${serverDescription.minWireVersion}, but this version of the driver only supports up to ${MAX_SUPPORTED_WIRE_VERSION} (MongoDB ${MAX_SUPPORTED_SERVER_VERSION})`;\n            }\n            if (serverDescription.maxWireVersion < MIN_SUPPORTED_WIRE_VERSION) {\n                this.compatible = false;\n                this.compatibilityError = `Server at ${serverDescription.address} reports wire version ${serverDescription.maxWireVersion}, but this version of the driver requires at least ${MIN_SUPPORTED_WIRE_VERSION} (MongoDB ${MIN_SUPPORTED_SERVER_VERSION}).`;\n                break;\n            }\n        }\n        // Whenever a client updates the TopologyDescription from a hello response, it MUST set\n        // TopologyDescription.logicalSessionTimeoutMinutes to the smallest logicalSessionTimeoutMinutes\n        // value among ServerDescriptions of all data-bearing server types. If any have a null\n        // logicalSessionTimeoutMinutes, then TopologyDescription.logicalSessionTimeoutMinutes MUST be\n        // set to null.\n        this.logicalSessionTimeoutMinutes = null;\n        for (const [, server] of this.servers){\n            if (server.isReadable) {\n                if (server.logicalSessionTimeoutMinutes == null) {\n                    // If any of the servers have a null logicalSessionsTimeout, then the whole topology does\n                    this.logicalSessionTimeoutMinutes = null;\n                    break;\n                }\n                if (this.logicalSessionTimeoutMinutes == null) {\n                    // First server with a non null logicalSessionsTimeout\n                    this.logicalSessionTimeoutMinutes = server.logicalSessionTimeoutMinutes;\n                    continue;\n                }\n                // Always select the smaller of the:\n                // current server logicalSessionsTimeout and the topologies logicalSessionsTimeout\n                this.logicalSessionTimeoutMinutes = Math.min(this.logicalSessionTimeoutMinutes, server.logicalSessionTimeoutMinutes);\n            }\n        }\n    }\n    /**\n     * Returns a new TopologyDescription based on the SrvPollingEvent\n     * @internal\n     */ updateFromSrvPollingEvent(ev, srvMaxHosts = 0) {\n        /** The SRV addresses defines the set of addresses we should be using */ const incomingHostnames = ev.hostnames();\n        const currentHostnames = new Set(this.servers.keys());\n        const hostnamesToAdd = new Set(incomingHostnames);\n        const hostnamesToRemove = new Set();\n        for (const hostname of currentHostnames){\n            // filter hostnamesToAdd (made from incomingHostnames) down to what is *not* present in currentHostnames\n            hostnamesToAdd.delete(hostname);\n            if (!incomingHostnames.has(hostname)) {\n                // If the SRV Records no longer include this hostname\n                // we have to stop using it\n                hostnamesToRemove.add(hostname);\n            }\n        }\n        if (hostnamesToAdd.size === 0 && hostnamesToRemove.size === 0) {\n            // No new hosts to add and none to remove\n            return this;\n        }\n        const serverDescriptions = new Map(this.servers);\n        for (const removedHost of hostnamesToRemove){\n            serverDescriptions.delete(removedHost);\n        }\n        if (hostnamesToAdd.size > 0) {\n            if (srvMaxHosts === 0) {\n                // Add all!\n                for (const hostToAdd of hostnamesToAdd){\n                    serverDescriptions.set(hostToAdd, new server_description_1.ServerDescription(hostToAdd));\n                }\n            } else if (serverDescriptions.size < srvMaxHosts) {\n                // Add only the amount needed to get us back to srvMaxHosts\n                const selectedHosts = (0, utils_1.shuffle)(hostnamesToAdd, srvMaxHosts - serverDescriptions.size);\n                for (const selectedHostToAdd of selectedHosts){\n                    serverDescriptions.set(selectedHostToAdd, new server_description_1.ServerDescription(selectedHostToAdd));\n                }\n            }\n        }\n        return new TopologyDescription(this.type, serverDescriptions, this.setName, this.maxSetVersion, this.maxElectionId, this.commonWireVersion, {\n            heartbeatFrequencyMS: this.heartbeatFrequencyMS,\n            localThresholdMS: this.localThresholdMS\n        });\n    }\n    /**\n     * Returns a copy of this description updated with a given ServerDescription\n     * @internal\n     */ update(serverDescription) {\n        const address = serverDescription.address;\n        // potentially mutated values\n        let { type: topologyType, setName, maxSetVersion, maxElectionId, commonWireVersion } = this;\n        const serverType = serverDescription.type;\n        const serverDescriptions = new Map(this.servers);\n        // update common wire version\n        if (serverDescription.maxWireVersion !== 0) {\n            if (commonWireVersion == null) {\n                commonWireVersion = serverDescription.maxWireVersion;\n            } else {\n                commonWireVersion = Math.min(commonWireVersion, serverDescription.maxWireVersion);\n            }\n        }\n        if (typeof serverDescription.setName === \"string\" && typeof setName === \"string\" && serverDescription.setName !== setName) {\n            if (topologyType === common_1.TopologyType.Single) {\n                // \"Single\" Topology with setName mismatch is direct connection usage, mark unknown do not remove\n                serverDescription = new server_description_1.ServerDescription(address);\n            } else {\n                serverDescriptions.delete(address);\n            }\n        }\n        // update the actual server description\n        serverDescriptions.set(address, serverDescription);\n        if (topologyType === common_1.TopologyType.Single) {\n            // once we are defined as single, that never changes\n            return new TopologyDescription(common_1.TopologyType.Single, serverDescriptions, setName, maxSetVersion, maxElectionId, commonWireVersion, {\n                heartbeatFrequencyMS: this.heartbeatFrequencyMS,\n                localThresholdMS: this.localThresholdMS\n            });\n        }\n        if (topologyType === common_1.TopologyType.Unknown) {\n            if (serverType === common_1.ServerType.Standalone && this.servers.size !== 1) {\n                serverDescriptions.delete(address);\n            } else {\n                topologyType = topologyTypeForServerType(serverType);\n            }\n        }\n        if (topologyType === common_1.TopologyType.Sharded) {\n            if (!MONGOS_OR_UNKNOWN.has(serverType)) {\n                serverDescriptions.delete(address);\n            }\n        }\n        if (topologyType === common_1.TopologyType.ReplicaSetNoPrimary) {\n            if (MONGOS_OR_STANDALONE.has(serverType)) {\n                serverDescriptions.delete(address);\n            }\n            if (serverType === common_1.ServerType.RSPrimary) {\n                const result = updateRsFromPrimary(serverDescriptions, serverDescription, setName, maxSetVersion, maxElectionId);\n                topologyType = result[0];\n                setName = result[1];\n                maxSetVersion = result[2];\n                maxElectionId = result[3];\n            } else if (NON_PRIMARY_RS_MEMBERS.has(serverType)) {\n                const result = updateRsNoPrimaryFromMember(serverDescriptions, serverDescription, setName);\n                topologyType = result[0];\n                setName = result[1];\n            }\n        }\n        if (topologyType === common_1.TopologyType.ReplicaSetWithPrimary) {\n            if (MONGOS_OR_STANDALONE.has(serverType)) {\n                serverDescriptions.delete(address);\n                topologyType = checkHasPrimary(serverDescriptions);\n            } else if (serverType === common_1.ServerType.RSPrimary) {\n                const result = updateRsFromPrimary(serverDescriptions, serverDescription, setName, maxSetVersion, maxElectionId);\n                topologyType = result[0];\n                setName = result[1];\n                maxSetVersion = result[2];\n                maxElectionId = result[3];\n            } else if (NON_PRIMARY_RS_MEMBERS.has(serverType)) {\n                topologyType = updateRsWithPrimaryFromMember(serverDescriptions, serverDescription, setName);\n            } else {\n                topologyType = checkHasPrimary(serverDescriptions);\n            }\n        }\n        return new TopologyDescription(topologyType, serverDescriptions, setName, maxSetVersion, maxElectionId, commonWireVersion, {\n            heartbeatFrequencyMS: this.heartbeatFrequencyMS,\n            localThresholdMS: this.localThresholdMS\n        });\n    }\n    get error() {\n        const descriptionsWithError = Array.from(this.servers.values()).filter((sd)=>sd.error);\n        if (descriptionsWithError.length > 0) {\n            return descriptionsWithError[0].error;\n        }\n        return null;\n    }\n    /**\n     * Determines if the topology description has any known servers\n     */ get hasKnownServers() {\n        return Array.from(this.servers.values()).some((sd)=>sd.type !== common_1.ServerType.Unknown);\n    }\n    /**\n     * Determines if this topology description has a data-bearing server available.\n     */ get hasDataBearingServers() {\n        return Array.from(this.servers.values()).some((sd)=>sd.isDataBearing);\n    }\n    /**\n     * Determines if the topology has a definition for the provided address\n     * @internal\n     */ hasServer(address) {\n        return this.servers.has(address);\n    }\n}\nexports.TopologyDescription = TopologyDescription;\nfunction topologyTypeForServerType(serverType) {\n    switch(serverType){\n        case common_1.ServerType.Standalone:\n            return common_1.TopologyType.Single;\n        case common_1.ServerType.Mongos:\n            return common_1.TopologyType.Sharded;\n        case common_1.ServerType.RSPrimary:\n            return common_1.TopologyType.ReplicaSetWithPrimary;\n        case common_1.ServerType.RSOther:\n        case common_1.ServerType.RSSecondary:\n            return common_1.TopologyType.ReplicaSetNoPrimary;\n        default:\n            return common_1.TopologyType.Unknown;\n    }\n}\nfunction updateRsFromPrimary(serverDescriptions, serverDescription, setName = null, maxSetVersion = null, maxElectionId = null) {\n    setName = setName || serverDescription.setName;\n    if (setName !== serverDescription.setName) {\n        serverDescriptions.delete(serverDescription.address);\n        return [\n            checkHasPrimary(serverDescriptions),\n            setName,\n            maxSetVersion,\n            maxElectionId\n        ];\n    }\n    if (serverDescription.maxWireVersion >= 17) {\n        const electionIdComparison = (0, utils_1.compareObjectId)(maxElectionId, serverDescription.electionId);\n        const maxElectionIdIsEqual = electionIdComparison === 0;\n        const maxElectionIdIsLess = electionIdComparison === -1;\n        const maxSetVersionIsLessOrEqual = (maxSetVersion ?? -1) <= (serverDescription.setVersion ?? -1);\n        if (maxElectionIdIsLess || maxElectionIdIsEqual && maxSetVersionIsLessOrEqual) {\n            // The reported electionId was greater\n            // or the electionId was equal and reported setVersion was greater\n            // Always update both values, they are a tuple\n            maxElectionId = serverDescription.electionId;\n            maxSetVersion = serverDescription.setVersion;\n        } else {\n            // Stale primary\n            // replace serverDescription with a default ServerDescription of type \"Unknown\"\n            serverDescriptions.set(serverDescription.address, new server_description_1.ServerDescription(serverDescription.address));\n            return [\n                checkHasPrimary(serverDescriptions),\n                setName,\n                maxSetVersion,\n                maxElectionId\n            ];\n        }\n    } else {\n        const electionId = serverDescription.electionId ? serverDescription.electionId : null;\n        if (serverDescription.setVersion && electionId) {\n            if (maxSetVersion && maxElectionId) {\n                if (maxSetVersion > serverDescription.setVersion || (0, utils_1.compareObjectId)(maxElectionId, electionId) > 0) {\n                    // this primary is stale, we must remove it\n                    serverDescriptions.set(serverDescription.address, new server_description_1.ServerDescription(serverDescription.address));\n                    return [\n                        checkHasPrimary(serverDescriptions),\n                        setName,\n                        maxSetVersion,\n                        maxElectionId\n                    ];\n                }\n            }\n            maxElectionId = serverDescription.electionId;\n        }\n        if (serverDescription.setVersion != null && (maxSetVersion == null || serverDescription.setVersion > maxSetVersion)) {\n            maxSetVersion = serverDescription.setVersion;\n        }\n    }\n    // We've heard from the primary. Is it the same primary as before?\n    for (const [address, server] of serverDescriptions){\n        if (server.type === common_1.ServerType.RSPrimary && server.address !== serverDescription.address) {\n            // Reset old primary's type to Unknown.\n            serverDescriptions.set(address, new server_description_1.ServerDescription(server.address));\n            break;\n        }\n    }\n    // Discover new hosts from this primary's response.\n    serverDescription.allHosts.forEach((address)=>{\n        if (!serverDescriptions.has(address)) {\n            serverDescriptions.set(address, new server_description_1.ServerDescription(address));\n        }\n    });\n    // Remove hosts not in the response.\n    const currentAddresses = Array.from(serverDescriptions.keys());\n    const responseAddresses = serverDescription.allHosts;\n    currentAddresses.filter((addr)=>responseAddresses.indexOf(addr) === -1).forEach((address)=>{\n        serverDescriptions.delete(address);\n    });\n    return [\n        checkHasPrimary(serverDescriptions),\n        setName,\n        maxSetVersion,\n        maxElectionId\n    ];\n}\nfunction updateRsWithPrimaryFromMember(serverDescriptions, serverDescription, setName = null) {\n    if (setName == null) {\n        // TODO(NODE-3483): should be an appropriate runtime error\n        throw new error_1.MongoRuntimeError('Argument \"setName\" is required if connected to a replica set');\n    }\n    if (setName !== serverDescription.setName || serverDescription.me && serverDescription.address !== serverDescription.me) {\n        serverDescriptions.delete(serverDescription.address);\n    }\n    return checkHasPrimary(serverDescriptions);\n}\nfunction updateRsNoPrimaryFromMember(serverDescriptions, serverDescription, setName = null) {\n    const topologyType = common_1.TopologyType.ReplicaSetNoPrimary;\n    setName = setName ?? serverDescription.setName;\n    if (setName !== serverDescription.setName) {\n        serverDescriptions.delete(serverDescription.address);\n        return [\n            topologyType,\n            setName\n        ];\n    }\n    serverDescription.allHosts.forEach((address)=>{\n        if (!serverDescriptions.has(address)) {\n            serverDescriptions.set(address, new server_description_1.ServerDescription(address));\n        }\n    });\n    if (serverDescription.me && serverDescription.address !== serverDescription.me) {\n        serverDescriptions.delete(serverDescription.address);\n    }\n    return [\n        topologyType,\n        setName\n    ];\n}\nfunction checkHasPrimary(serverDescriptions) {\n    for (const serverDescription of serverDescriptions.values()){\n        if (serverDescription.type === common_1.ServerType.RSPrimary) {\n            return common_1.TopologyType.ReplicaSetWithPrimary;\n        }\n    }\n    return common_1.TopologyType.ReplicaSetNoPrimary;\n} //# sourceMappingURL=topology_description.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongodb/lib/sdam/topology_description.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongodb/lib/sessions.js":
/*!**********************************************!*\
  !*** ./node_modules/mongodb/lib/sessions.js ***!
  \**********************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nvar _a;\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.updateSessionFromResponse = exports.applySession = exports.ServerSessionPool = exports.ServerSession = exports.maybeClearPinnedConnection = exports.ClientSession = void 0;\nconst util_1 = __webpack_require__(/*! util */ \"util\");\nconst bson_1 = __webpack_require__(/*! ./bson */ \"(ssr)/./node_modules/mongodb/lib/bson.js\");\nconst metrics_1 = __webpack_require__(/*! ./cmap/metrics */ \"(ssr)/./node_modules/mongodb/lib/cmap/metrics.js\");\nconst shared_1 = __webpack_require__(/*! ./cmap/wire_protocol/shared */ \"(ssr)/./node_modules/mongodb/lib/cmap/wire_protocol/shared.js\");\nconst constants_1 = __webpack_require__(/*! ./constants */ \"(ssr)/./node_modules/mongodb/lib/constants.js\");\nconst error_1 = __webpack_require__(/*! ./error */ \"(ssr)/./node_modules/mongodb/lib/error.js\");\nconst mongo_types_1 = __webpack_require__(/*! ./mongo_types */ \"(ssr)/./node_modules/mongodb/lib/mongo_types.js\");\nconst execute_operation_1 = __webpack_require__(/*! ./operations/execute_operation */ \"(ssr)/./node_modules/mongodb/lib/operations/execute_operation.js\");\nconst run_command_1 = __webpack_require__(/*! ./operations/run_command */ \"(ssr)/./node_modules/mongodb/lib/operations/run_command.js\");\nconst read_concern_1 = __webpack_require__(/*! ./read_concern */ \"(ssr)/./node_modules/mongodb/lib/read_concern.js\");\nconst read_preference_1 = __webpack_require__(/*! ./read_preference */ \"(ssr)/./node_modules/mongodb/lib/read_preference.js\");\nconst common_1 = __webpack_require__(/*! ./sdam/common */ \"(ssr)/./node_modules/mongodb/lib/sdam/common.js\");\nconst transactions_1 = __webpack_require__(/*! ./transactions */ \"(ssr)/./node_modules/mongodb/lib/transactions.js\");\nconst utils_1 = __webpack_require__(/*! ./utils */ \"(ssr)/./node_modules/mongodb/lib/utils.js\");\nconst write_concern_1 = __webpack_require__(/*! ./write_concern */ \"(ssr)/./node_modules/mongodb/lib/write_concern.js\");\nconst minWireVersionForShardedTransactions = 8;\n/** @internal */ const kServerSession = Symbol(\"serverSession\");\n/** @internal */ const kSnapshotTime = Symbol(\"snapshotTime\");\n/** @internal */ const kSnapshotEnabled = Symbol(\"snapshotEnabled\");\n/** @internal */ const kPinnedConnection = Symbol(\"pinnedConnection\");\n/** @internal Accumulates total number of increments to add to txnNumber when applying session to command */ const kTxnNumberIncrement = Symbol(\"txnNumberIncrement\");\n/**\n * A class representing a client session on the server\n *\n * NOTE: not meant to be instantiated directly.\n * @public\n */ class ClientSession extends mongo_types_1.TypedEventEmitter {\n    /**\n     * Create a client session.\n     * @internal\n     * @param client - The current client\n     * @param sessionPool - The server session pool (Internal Class)\n     * @param options - Optional settings\n     * @param clientOptions - Optional settings provided when creating a MongoClient\n     */ constructor(client, sessionPool, options, clientOptions){\n        super();\n        /** @internal */ this[_a] = false;\n        if (client == null) {\n            // TODO(NODE-3483)\n            throw new error_1.MongoRuntimeError(\"ClientSession requires a MongoClient\");\n        }\n        if (sessionPool == null || !(sessionPool instanceof ServerSessionPool)) {\n            // TODO(NODE-3483)\n            throw new error_1.MongoRuntimeError(\"ClientSession requires a ServerSessionPool\");\n        }\n        options = options ?? {};\n        if (options.snapshot === true) {\n            this[kSnapshotEnabled] = true;\n            if (options.causalConsistency === true) {\n                throw new error_1.MongoInvalidArgumentError('Properties \"causalConsistency\" and \"snapshot\" are mutually exclusive');\n            }\n        }\n        this.client = client;\n        this.sessionPool = sessionPool;\n        this.hasEnded = false;\n        this.clientOptions = clientOptions;\n        this.explicit = !!options.explicit;\n        this[kServerSession] = this.explicit ? this.sessionPool.acquire() : null;\n        this[kTxnNumberIncrement] = 0;\n        const defaultCausalConsistencyValue = this.explicit && options.snapshot !== true;\n        this.supports = {\n            // if we can enable causal consistency, do so by default\n            causalConsistency: options.causalConsistency ?? defaultCausalConsistencyValue\n        };\n        this.clusterTime = options.initialClusterTime;\n        this.operationTime = undefined;\n        this.owner = options.owner;\n        this.defaultTransactionOptions = Object.assign({}, options.defaultTransactionOptions);\n        this.transaction = new transactions_1.Transaction();\n    }\n    /** The server id associated with this session */ get id() {\n        return this[kServerSession]?.id;\n    }\n    get serverSession() {\n        let serverSession = this[kServerSession];\n        if (serverSession == null) {\n            if (this.explicit) {\n                throw new error_1.MongoRuntimeError(\"Unexpected null serverSession for an explicit session\");\n            }\n            if (this.hasEnded) {\n                throw new error_1.MongoRuntimeError(\"Unexpected null serverSession for an ended implicit session\");\n            }\n            serverSession = this.sessionPool.acquire();\n            this[kServerSession] = serverSession;\n        }\n        return serverSession;\n    }\n    /** Whether or not this session is configured for snapshot reads */ get snapshotEnabled() {\n        return this[kSnapshotEnabled];\n    }\n    get loadBalanced() {\n        return this.client.topology?.description.type === common_1.TopologyType.LoadBalanced;\n    }\n    /** @internal */ get pinnedConnection() {\n        return this[kPinnedConnection];\n    }\n    /** @internal */ pin(conn) {\n        if (this[kPinnedConnection]) {\n            throw TypeError(\"Cannot pin multiple connections to the same session\");\n        }\n        this[kPinnedConnection] = conn;\n        conn.emit(constants_1.PINNED, this.inTransaction() ? metrics_1.ConnectionPoolMetrics.TXN : metrics_1.ConnectionPoolMetrics.CURSOR);\n    }\n    /** @internal */ unpin(options) {\n        if (this.loadBalanced) {\n            return maybeClearPinnedConnection(this, options);\n        }\n        this.transaction.unpinServer();\n    }\n    get isPinned() {\n        return this.loadBalanced ? !!this[kPinnedConnection] : this.transaction.isPinned;\n    }\n    /**\n     * Ends this session on the server\n     *\n     * @param options - Optional settings. Currently reserved for future use\n     */ async endSession(options) {\n        try {\n            if (this.inTransaction()) {\n                await this.abortTransaction();\n            }\n            if (!this.hasEnded) {\n                const serverSession = this[kServerSession];\n                if (serverSession != null) {\n                    // release the server session back to the pool\n                    this.sessionPool.release(serverSession);\n                    // Make sure a new serverSession never makes it onto this ClientSession\n                    Object.defineProperty(this, kServerSession, {\n                        value: ServerSession.clone(serverSession),\n                        writable: false\n                    });\n                }\n                // mark the session as ended, and emit a signal\n                this.hasEnded = true;\n                this.emit(\"ended\", this);\n            }\n        } catch  {\n        // spec indicates that we should ignore all errors for `endSessions`\n        } finally{\n            maybeClearPinnedConnection(this, {\n                force: true,\n                ...options\n            });\n        }\n    }\n    /**\n     * Advances the operationTime for a ClientSession.\n     *\n     * @param operationTime - the `BSON.Timestamp` of the operation type it is desired to advance to\n     */ advanceOperationTime(operationTime) {\n        if (this.operationTime == null) {\n            this.operationTime = operationTime;\n            return;\n        }\n        if (operationTime.greaterThan(this.operationTime)) {\n            this.operationTime = operationTime;\n        }\n    }\n    /**\n     * Advances the clusterTime for a ClientSession to the provided clusterTime of another ClientSession\n     *\n     * @param clusterTime - the $clusterTime returned by the server from another session in the form of a document containing the `BSON.Timestamp` clusterTime and signature\n     */ advanceClusterTime(clusterTime) {\n        if (!clusterTime || typeof clusterTime !== \"object\") {\n            throw new error_1.MongoInvalidArgumentError(\"input cluster time must be an object\");\n        }\n        if (!clusterTime.clusterTime || clusterTime.clusterTime._bsontype !== \"Timestamp\") {\n            throw new error_1.MongoInvalidArgumentError('input cluster time \"clusterTime\" property must be a valid BSON Timestamp');\n        }\n        if (!clusterTime.signature || clusterTime.signature.hash?._bsontype !== \"Binary\" || typeof clusterTime.signature.keyId !== \"bigint\" && typeof clusterTime.signature.keyId !== \"number\" && clusterTime.signature.keyId?._bsontype !== \"Long\" // apparently we decode the key to number?\n        ) {\n            throw new error_1.MongoInvalidArgumentError('input cluster time must have a valid \"signature\" property with BSON Binary hash and BSON Long keyId');\n        }\n        (0, common_1._advanceClusterTime)(this, clusterTime);\n    }\n    /**\n     * Used to determine if this session equals another\n     *\n     * @param session - The session to compare to\n     */ equals(session) {\n        if (!(session instanceof ClientSession)) {\n            return false;\n        }\n        if (this.id == null || session.id == null) {\n            return false;\n        }\n        return utils_1.ByteUtils.equals(this.id.id.buffer, session.id.id.buffer);\n    }\n    /**\n     * Increment the transaction number on the internal ServerSession\n     *\n     * @privateRemarks\n     * This helper increments a value stored on the client session that will be\n     * added to the serverSession's txnNumber upon applying it to a command.\n     * This is because the serverSession is lazily acquired after a connection is obtained\n     */ incrementTransactionNumber() {\n        this[kTxnNumberIncrement] += 1;\n    }\n    /** @returns whether this session is currently in a transaction or not */ inTransaction() {\n        return this.transaction.isActive;\n    }\n    /**\n     * Starts a new transaction with the given options.\n     *\n     * @param options - Options for the transaction\n     */ startTransaction(options) {\n        if (this[kSnapshotEnabled]) {\n            throw new error_1.MongoCompatibilityError(\"Transactions are not supported in snapshot sessions\");\n        }\n        if (this.inTransaction()) {\n            throw new error_1.MongoTransactionError(\"Transaction already in progress\");\n        }\n        if (this.isPinned && this.transaction.isCommitted) {\n            this.unpin();\n        }\n        const topologyMaxWireVersion = (0, utils_1.maxWireVersion)(this.client.topology);\n        if ((0, shared_1.isSharded)(this.client.topology) && topologyMaxWireVersion != null && topologyMaxWireVersion < minWireVersionForShardedTransactions) {\n            throw new error_1.MongoCompatibilityError(\"Transactions are not supported on sharded clusters in MongoDB < 4.2.\");\n        }\n        // increment txnNumber\n        this.incrementTransactionNumber();\n        // create transaction state\n        this.transaction = new transactions_1.Transaction({\n            readConcern: options?.readConcern ?? this.defaultTransactionOptions.readConcern ?? this.clientOptions?.readConcern,\n            writeConcern: options?.writeConcern ?? this.defaultTransactionOptions.writeConcern ?? this.clientOptions?.writeConcern,\n            readPreference: options?.readPreference ?? this.defaultTransactionOptions.readPreference ?? this.clientOptions?.readPreference,\n            maxCommitTimeMS: options?.maxCommitTimeMS ?? this.defaultTransactionOptions.maxCommitTimeMS\n        });\n        this.transaction.transition(transactions_1.TxnState.STARTING_TRANSACTION);\n    }\n    /**\n     * Commits the currently active transaction in this session.\n     */ async commitTransaction() {\n        return endTransactionAsync(this, \"commitTransaction\");\n    }\n    /**\n     * Aborts the currently active transaction in this session.\n     */ async abortTransaction() {\n        return endTransactionAsync(this, \"abortTransaction\");\n    }\n    /**\n     * This is here to ensure that ClientSession is never serialized to BSON.\n     */ toBSON() {\n        throw new error_1.MongoRuntimeError(\"ClientSession cannot be serialized to BSON.\");\n    }\n    /**\n     * Starts a transaction and runs a provided function, ensuring the commitTransaction is always attempted when all operations run in the function have completed.\n     *\n     * **IMPORTANT:** This method requires the user to return a Promise, and `await` all operations.\n     *\n     * @remarks\n     * This function:\n     * - If all operations successfully complete and the `commitTransaction` operation is successful, then this function will return the result of the provided function.\n     * - If the transaction is unable to complete or an error is thrown from within the provided function, then this function will throw an error.\n     *   - If the transaction is manually aborted within the provided function it will not throw.\n     * - May be called multiple times if the driver needs to attempt to retry the operations.\n     *\n     * Checkout a descriptive example here:\n     * @see https://www.mongodb.com/blog/post/quick-start-nodejs--mongodb--how-to-implement-transactions\n     *\n     * @param fn - callback to run within a transaction\n     * @param options - optional settings for the transaction\n     * @returns A raw command response or undefined\n     */ async withTransaction(fn, options) {\n        const startTime = (0, utils_1.now)();\n        return attemptTransaction(this, startTime, fn, options);\n    }\n}\nexports.ClientSession = ClientSession;\n_a = kSnapshotEnabled;\nconst MAX_WITH_TRANSACTION_TIMEOUT = 120000;\nconst NON_DETERMINISTIC_WRITE_CONCERN_ERRORS = new Set([\n    \"CannotSatisfyWriteConcern\",\n    \"UnknownReplWriteConcern\",\n    \"UnsatisfiableWriteConcern\"\n]);\nfunction hasNotTimedOut(startTime, max) {\n    return (0, utils_1.calculateDurationInMs)(startTime) < max;\n}\nfunction isUnknownTransactionCommitResult(err) {\n    const isNonDeterministicWriteConcernError = err instanceof error_1.MongoServerError && err.codeName && NON_DETERMINISTIC_WRITE_CONCERN_ERRORS.has(err.codeName);\n    return isMaxTimeMSExpiredError(err) || !isNonDeterministicWriteConcernError && err.code !== error_1.MONGODB_ERROR_CODES.UnsatisfiableWriteConcern && err.code !== error_1.MONGODB_ERROR_CODES.UnknownReplWriteConcern;\n}\nfunction maybeClearPinnedConnection(session, options) {\n    // unpin a connection if it has been pinned\n    const conn = session[kPinnedConnection];\n    const error = options?.error;\n    if (session.inTransaction() && error && error instanceof error_1.MongoError && error.hasErrorLabel(error_1.MongoErrorLabel.TransientTransactionError)) {\n        return;\n    }\n    const topology = session.client.topology;\n    // NOTE: the spec talks about what to do on a network error only, but the tests seem to\n    //       to validate that we don't unpin on _all_ errors?\n    if (conn && topology != null) {\n        const servers = Array.from(topology.s.servers.values());\n        const loadBalancer = servers[0];\n        if (options?.error == null || options?.force) {\n            loadBalancer.pool.checkIn(conn);\n            conn.emit(constants_1.UNPINNED, session.transaction.state !== transactions_1.TxnState.NO_TRANSACTION ? metrics_1.ConnectionPoolMetrics.TXN : metrics_1.ConnectionPoolMetrics.CURSOR);\n            if (options?.forceClear) {\n                loadBalancer.pool.clear({\n                    serviceId: conn.serviceId\n                });\n            }\n        }\n        session[kPinnedConnection] = undefined;\n    }\n}\nexports.maybeClearPinnedConnection = maybeClearPinnedConnection;\nfunction isMaxTimeMSExpiredError(err) {\n    if (err == null || !(err instanceof error_1.MongoServerError)) {\n        return false;\n    }\n    return err.code === error_1.MONGODB_ERROR_CODES.MaxTimeMSExpired || err.writeConcernError && err.writeConcernError.code === error_1.MONGODB_ERROR_CODES.MaxTimeMSExpired;\n}\nfunction attemptTransactionCommit(session, startTime, fn, result, options) {\n    return session.commitTransaction().then(()=>result, (err)=>{\n        if (err instanceof error_1.MongoError && hasNotTimedOut(startTime, MAX_WITH_TRANSACTION_TIMEOUT) && !isMaxTimeMSExpiredError(err)) {\n            if (err.hasErrorLabel(error_1.MongoErrorLabel.UnknownTransactionCommitResult)) {\n                return attemptTransactionCommit(session, startTime, fn, result, options);\n            }\n            if (err.hasErrorLabel(error_1.MongoErrorLabel.TransientTransactionError)) {\n                return attemptTransaction(session, startTime, fn, options);\n            }\n        }\n        throw err;\n    });\n}\nconst USER_EXPLICIT_TXN_END_STATES = new Set([\n    transactions_1.TxnState.NO_TRANSACTION,\n    transactions_1.TxnState.TRANSACTION_COMMITTED,\n    transactions_1.TxnState.TRANSACTION_ABORTED\n]);\nfunction userExplicitlyEndedTransaction(session) {\n    return USER_EXPLICIT_TXN_END_STATES.has(session.transaction.state);\n}\nfunction attemptTransaction(session, startTime, fn, options = {}) {\n    session.startTransaction(options);\n    let promise;\n    try {\n        promise = fn(session);\n    } catch (err) {\n        promise = Promise.reject(err);\n    }\n    if (!(0, utils_1.isPromiseLike)(promise)) {\n        session.abortTransaction().catch(()=>null);\n        return Promise.reject(new error_1.MongoInvalidArgumentError(\"Function provided to `withTransaction` must return a Promise\"));\n    }\n    return promise.then((result)=>{\n        if (userExplicitlyEndedTransaction(session)) {\n            return result;\n        }\n        return attemptTransactionCommit(session, startTime, fn, result, options);\n    }, (err)=>{\n        function maybeRetryOrThrow(err) {\n            if (err instanceof error_1.MongoError && err.hasErrorLabel(error_1.MongoErrorLabel.TransientTransactionError) && hasNotTimedOut(startTime, MAX_WITH_TRANSACTION_TIMEOUT)) {\n                return attemptTransaction(session, startTime, fn, options);\n            }\n            if (isMaxTimeMSExpiredError(err)) {\n                err.addErrorLabel(error_1.MongoErrorLabel.UnknownTransactionCommitResult);\n            }\n            throw err;\n        }\n        if (session.inTransaction()) {\n            return session.abortTransaction().then(()=>maybeRetryOrThrow(err));\n        }\n        return maybeRetryOrThrow(err);\n    });\n}\nconst endTransactionAsync = (0, util_1.promisify)(endTransaction);\nfunction endTransaction(session, commandName, callback) {\n    // handle any initial problematic cases\n    const txnState = session.transaction.state;\n    if (txnState === transactions_1.TxnState.NO_TRANSACTION) {\n        callback(new error_1.MongoTransactionError(\"No transaction started\"));\n        return;\n    }\n    if (commandName === \"commitTransaction\") {\n        if (txnState === transactions_1.TxnState.STARTING_TRANSACTION || txnState === transactions_1.TxnState.TRANSACTION_COMMITTED_EMPTY) {\n            // the transaction was never started, we can safely exit here\n            session.transaction.transition(transactions_1.TxnState.TRANSACTION_COMMITTED_EMPTY);\n            callback();\n            return;\n        }\n        if (txnState === transactions_1.TxnState.TRANSACTION_ABORTED) {\n            callback(new error_1.MongoTransactionError(\"Cannot call commitTransaction after calling abortTransaction\"));\n            return;\n        }\n    } else {\n        if (txnState === transactions_1.TxnState.STARTING_TRANSACTION) {\n            // the transaction was never started, we can safely exit here\n            session.transaction.transition(transactions_1.TxnState.TRANSACTION_ABORTED);\n            callback();\n            return;\n        }\n        if (txnState === transactions_1.TxnState.TRANSACTION_ABORTED) {\n            callback(new error_1.MongoTransactionError(\"Cannot call abortTransaction twice\"));\n            return;\n        }\n        if (txnState === transactions_1.TxnState.TRANSACTION_COMMITTED || txnState === transactions_1.TxnState.TRANSACTION_COMMITTED_EMPTY) {\n            callback(new error_1.MongoTransactionError(\"Cannot call abortTransaction after calling commitTransaction\"));\n            return;\n        }\n    }\n    // construct and send the command\n    const command = {\n        [commandName]: 1\n    };\n    // apply a writeConcern if specified\n    let writeConcern;\n    if (session.transaction.options.writeConcern) {\n        writeConcern = Object.assign({}, session.transaction.options.writeConcern);\n    } else if (session.clientOptions && session.clientOptions.writeConcern) {\n        writeConcern = {\n            w: session.clientOptions.writeConcern.w\n        };\n    }\n    if (txnState === transactions_1.TxnState.TRANSACTION_COMMITTED) {\n        writeConcern = Object.assign({\n            wtimeoutMS: 10000\n        }, writeConcern, {\n            w: \"majority\"\n        });\n    }\n    if (writeConcern) {\n        write_concern_1.WriteConcern.apply(command, writeConcern);\n    }\n    if (commandName === \"commitTransaction\" && session.transaction.options.maxTimeMS) {\n        Object.assign(command, {\n            maxTimeMS: session.transaction.options.maxTimeMS\n        });\n    }\n    function commandHandler(error) {\n        if (commandName !== \"commitTransaction\") {\n            session.transaction.transition(transactions_1.TxnState.TRANSACTION_ABORTED);\n            if (session.loadBalanced) {\n                maybeClearPinnedConnection(session, {\n                    force: false\n                });\n            }\n            // The spec indicates that we should ignore all errors on `abortTransaction`\n            return callback();\n        }\n        session.transaction.transition(transactions_1.TxnState.TRANSACTION_COMMITTED);\n        if (error instanceof error_1.MongoError) {\n            if ((0, error_1.isRetryableWriteError)(error) || error instanceof error_1.MongoWriteConcernError || isMaxTimeMSExpiredError(error)) {\n                if (isUnknownTransactionCommitResult(error)) {\n                    error.addErrorLabel(error_1.MongoErrorLabel.UnknownTransactionCommitResult);\n                    // per txns spec, must unpin session in this case\n                    session.unpin({\n                        error\n                    });\n                }\n            } else if (error.hasErrorLabel(error_1.MongoErrorLabel.TransientTransactionError)) {\n                session.unpin({\n                    error\n                });\n            }\n        }\n        callback(error);\n    }\n    if (session.transaction.recoveryToken) {\n        command.recoveryToken = session.transaction.recoveryToken;\n    }\n    // send the command\n    (0, execute_operation_1.executeOperation)(session.client, new run_command_1.RunAdminCommandOperation(command, {\n        session,\n        readPreference: read_preference_1.ReadPreference.primary,\n        bypassPinningCheck: true\n    }), (error)=>{\n        if (command.abortTransaction) {\n            // always unpin on abort regardless of command outcome\n            session.unpin();\n        }\n        if (error instanceof error_1.MongoError && (0, error_1.isRetryableWriteError)(error)) {\n            // SPEC-1185: apply majority write concern when retrying commitTransaction\n            if (command.commitTransaction) {\n                // per txns spec, must unpin session in this case\n                session.unpin({\n                    force: true\n                });\n                command.writeConcern = Object.assign({\n                    wtimeout: 10000\n                }, command.writeConcern, {\n                    w: \"majority\"\n                });\n            }\n            return (0, execute_operation_1.executeOperation)(session.client, new run_command_1.RunAdminCommandOperation(command, {\n                session,\n                readPreference: read_preference_1.ReadPreference.primary,\n                bypassPinningCheck: true\n            }), commandHandler);\n        }\n        commandHandler(error);\n    });\n}\n/**\n * Reflects the existence of a session on the server. Can be reused by the session pool.\n * WARNING: not meant to be instantiated directly. For internal use only.\n * @public\n */ class ServerSession {\n    /** @internal */ constructor(){\n        this.id = {\n            id: new bson_1.Binary((0, utils_1.uuidV4)(), bson_1.Binary.SUBTYPE_UUID)\n        };\n        this.lastUse = (0, utils_1.now)();\n        this.txnNumber = 0;\n        this.isDirty = false;\n    }\n    /**\n     * Determines if the server session has timed out.\n     *\n     * @param sessionTimeoutMinutes - The server's \"logicalSessionTimeoutMinutes\"\n     */ hasTimedOut(sessionTimeoutMinutes) {\n        // Take the difference of the lastUse timestamp and now, which will result in a value in\n        // milliseconds, and then convert milliseconds to minutes to compare to `sessionTimeoutMinutes`\n        const idleTimeMinutes = Math.round((0, utils_1.calculateDurationInMs)(this.lastUse) % 86400000 % 3600000 / 60000);\n        return idleTimeMinutes > sessionTimeoutMinutes - 1;\n    }\n    /**\n     * @internal\n     * Cloning meant to keep a readable reference to the server session data\n     * after ClientSession has ended\n     */ static clone(serverSession) {\n        const arrayBuffer = new ArrayBuffer(16);\n        const idBytes = Buffer.from(arrayBuffer);\n        idBytes.set(serverSession.id.id.buffer);\n        const id = new bson_1.Binary(idBytes, serverSession.id.id.sub_type);\n        // Manual prototype construction to avoid modifying the constructor of this class\n        return Object.setPrototypeOf({\n            id: {\n                id\n            },\n            lastUse: serverSession.lastUse,\n            txnNumber: serverSession.txnNumber,\n            isDirty: serverSession.isDirty\n        }, ServerSession.prototype);\n    }\n}\nexports.ServerSession = ServerSession;\n/**\n * Maintains a pool of Server Sessions.\n * For internal use only\n * @internal\n */ class ServerSessionPool {\n    constructor(client){\n        if (client == null) {\n            throw new error_1.MongoRuntimeError(\"ServerSessionPool requires a MongoClient\");\n        }\n        this.client = client;\n        this.sessions = new utils_1.List();\n    }\n    /**\n     * Acquire a Server Session from the pool.\n     * Iterates through each session in the pool, removing any stale sessions\n     * along the way. The first non-stale session found is removed from the\n     * pool and returned. If no non-stale session is found, a new ServerSession is created.\n     */ acquire() {\n        const sessionTimeoutMinutes = this.client.topology?.logicalSessionTimeoutMinutes ?? 10;\n        let session = null;\n        // Try to obtain from session pool\n        while(this.sessions.length > 0){\n            const potentialSession = this.sessions.shift();\n            if (potentialSession != null && (!!this.client.topology?.loadBalanced || !potentialSession.hasTimedOut(sessionTimeoutMinutes))) {\n                session = potentialSession;\n                break;\n            }\n        }\n        // If nothing valid came from the pool make a new one\n        if (session == null) {\n            session = new ServerSession();\n        }\n        return session;\n    }\n    /**\n     * Release a session to the session pool\n     * Adds the session back to the session pool if the session has not timed out yet.\n     * This method also removes any stale sessions from the pool.\n     *\n     * @param session - The session to release to the pool\n     */ release(session) {\n        const sessionTimeoutMinutes = this.client.topology?.logicalSessionTimeoutMinutes ?? 10;\n        if (this.client.topology?.loadBalanced && !sessionTimeoutMinutes) {\n            this.sessions.unshift(session);\n        }\n        if (!sessionTimeoutMinutes) {\n            return;\n        }\n        this.sessions.prune((session)=>session.hasTimedOut(sessionTimeoutMinutes));\n        if (!session.hasTimedOut(sessionTimeoutMinutes)) {\n            if (session.isDirty) {\n                return;\n            }\n            // otherwise, readd this session to the session pool\n            this.sessions.unshift(session);\n        }\n    }\n}\nexports.ServerSessionPool = ServerSessionPool;\n/**\n * Optionally decorate a command with sessions specific keys\n *\n * @param session - the session tracking transaction state\n * @param command - the command to decorate\n * @param options - Optional settings passed to calling operation\n *\n * @internal\n */ function applySession(session, command, options) {\n    if (session.hasEnded) {\n        return new error_1.MongoExpiredSessionError();\n    }\n    // May acquire serverSession here\n    const serverSession = session.serverSession;\n    if (serverSession == null) {\n        return new error_1.MongoRuntimeError(\"Unable to acquire server session\");\n    }\n    if (options.writeConcern?.w === 0) {\n        if (session && session.explicit) {\n            // Error if user provided an explicit session to an unacknowledged write (SPEC-1019)\n            return new error_1.MongoAPIError(\"Cannot have explicit session with unacknowledged writes\");\n        }\n        return;\n    }\n    // mark the last use of this session, and apply the `lsid`\n    serverSession.lastUse = (0, utils_1.now)();\n    command.lsid = serverSession.id;\n    const inTxnOrTxnCommand = session.inTransaction() || (0, transactions_1.isTransactionCommand)(command);\n    const isRetryableWrite = !!options.willRetryWrite;\n    if (isRetryableWrite || inTxnOrTxnCommand) {\n        serverSession.txnNumber += session[kTxnNumberIncrement];\n        session[kTxnNumberIncrement] = 0;\n        // TODO(NODE-2674): Preserve int64 sent from MongoDB\n        command.txnNumber = bson_1.Long.fromNumber(serverSession.txnNumber);\n    }\n    if (!inTxnOrTxnCommand) {\n        if (session.transaction.state !== transactions_1.TxnState.NO_TRANSACTION) {\n            session.transaction.transition(transactions_1.TxnState.NO_TRANSACTION);\n        }\n        if (session.supports.causalConsistency && session.operationTime && (0, utils_1.commandSupportsReadConcern)(command)) {\n            command.readConcern = command.readConcern || {};\n            Object.assign(command.readConcern, {\n                afterClusterTime: session.operationTime\n            });\n        } else if (session[kSnapshotEnabled]) {\n            command.readConcern = command.readConcern || {\n                level: read_concern_1.ReadConcernLevel.snapshot\n            };\n            if (session[kSnapshotTime] != null) {\n                Object.assign(command.readConcern, {\n                    atClusterTime: session[kSnapshotTime]\n                });\n            }\n        }\n        return;\n    }\n    // now attempt to apply transaction-specific sessions data\n    // `autocommit` must always be false to differentiate from retryable writes\n    command.autocommit = false;\n    if (session.transaction.state === transactions_1.TxnState.STARTING_TRANSACTION) {\n        session.transaction.transition(transactions_1.TxnState.TRANSACTION_IN_PROGRESS);\n        command.startTransaction = true;\n        const readConcern = session.transaction.options.readConcern || session?.clientOptions?.readConcern;\n        if (readConcern) {\n            command.readConcern = readConcern;\n        }\n        if (session.supports.causalConsistency && session.operationTime) {\n            command.readConcern = command.readConcern || {};\n            Object.assign(command.readConcern, {\n                afterClusterTime: session.operationTime\n            });\n        }\n    }\n    return;\n}\nexports.applySession = applySession;\nfunction updateSessionFromResponse(session, document) {\n    if (document.$clusterTime) {\n        (0, common_1._advanceClusterTime)(session, document.$clusterTime);\n    }\n    if (document.operationTime && session && session.supports.causalConsistency) {\n        session.advanceOperationTime(document.operationTime);\n    }\n    if (document.recoveryToken && session && session.inTransaction()) {\n        session.transaction._recoveryToken = document.recoveryToken;\n    }\n    if (session?.[kSnapshotEnabled] && session[kSnapshotTime] == null) {\n        // find and aggregate commands return atClusterTime on the cursor\n        // distinct includes it in the response body\n        const atClusterTime = document.cursor?.atClusterTime || document.atClusterTime;\n        if (atClusterTime) {\n            session[kSnapshotTime] = atClusterTime;\n        }\n    }\n}\nexports.updateSessionFromResponse = updateSessionFromResponse; //# sourceMappingURL=sessions.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongodb/lib/sessions.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongodb/lib/sort.js":
/*!******************************************!*\
  !*** ./node_modules/mongodb/lib/sort.js ***!
  \******************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.formatSort = void 0;\nconst error_1 = __webpack_require__(/*! ./error */ \"(ssr)/./node_modules/mongodb/lib/error.js\");\n/** @internal */ function prepareDirection(direction = 1) {\n    const value = `${direction}`.toLowerCase();\n    if (isMeta(direction)) return direction;\n    switch(value){\n        case \"ascending\":\n        case \"asc\":\n        case \"1\":\n            return 1;\n        case \"descending\":\n        case \"desc\":\n        case \"-1\":\n            return -1;\n        default:\n            throw new error_1.MongoInvalidArgumentError(`Invalid sort direction: ${JSON.stringify(direction)}`);\n    }\n}\n/** @internal */ function isMeta(t) {\n    return typeof t === \"object\" && t != null && \"$meta\" in t && typeof t.$meta === \"string\";\n}\n/** @internal */ function isPair(t) {\n    if (Array.isArray(t) && t.length === 2) {\n        try {\n            prepareDirection(t[1]);\n            return true;\n        } catch (e) {\n            return false;\n        }\n    }\n    return false;\n}\nfunction isDeep(t) {\n    return Array.isArray(t) && Array.isArray(t[0]);\n}\nfunction isMap(t) {\n    return t instanceof Map && t.size > 0;\n}\n/** @internal */ function pairToMap(v) {\n    return new Map([\n        [\n            `${v[0]}`,\n            prepareDirection([\n                v[1]\n            ])\n        ]\n    ]);\n}\n/** @internal */ function deepToMap(t) {\n    const sortEntries = t.map(([k, v])=>[\n            `${k}`,\n            prepareDirection(v)\n        ]);\n    return new Map(sortEntries);\n}\n/** @internal */ function stringsToMap(t) {\n    const sortEntries = t.map((key)=>[\n            `${key}`,\n            1\n        ]);\n    return new Map(sortEntries);\n}\n/** @internal */ function objectToMap(t) {\n    const sortEntries = Object.entries(t).map(([k, v])=>[\n            `${k}`,\n            prepareDirection(v)\n        ]);\n    return new Map(sortEntries);\n}\n/** @internal */ function mapToMap(t) {\n    const sortEntries = Array.from(t).map(([k, v])=>[\n            `${k}`,\n            prepareDirection(v)\n        ]);\n    return new Map(sortEntries);\n}\n/** converts a Sort type into a type that is valid for the server (SortForCmd) */ function formatSort(sort, direction) {\n    if (sort == null) return undefined;\n    if (typeof sort === \"string\") return new Map([\n        [\n            sort,\n            prepareDirection(direction)\n        ]\n    ]);\n    if (typeof sort !== \"object\") {\n        throw new error_1.MongoInvalidArgumentError(`Invalid sort format: ${JSON.stringify(sort)} Sort must be a valid object`);\n    }\n    if (!Array.isArray(sort)) {\n        return isMap(sort) ? mapToMap(sort) : Object.keys(sort).length ? objectToMap(sort) : undefined;\n    }\n    if (!sort.length) return undefined;\n    if (isDeep(sort)) return deepToMap(sort);\n    if (isPair(sort)) return pairToMap(sort);\n    return stringsToMap(sort);\n}\nexports.formatSort = formatSort; //# sourceMappingURL=sort.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbW9uZ29kYi9saWIvc29ydC5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiQSw4Q0FBNkM7SUFBRUcsT0FBTztBQUFLLENBQUMsRUFBQztBQUM3REQsa0JBQWtCLEdBQUcsS0FBSztBQUMxQixNQUFNRyxVQUFVQyxtQkFBT0EsQ0FBQywwREFBUztBQUNqQyxjQUFjLEdBQ2QsU0FBU0MsaUJBQWlCQyxZQUFZLENBQUM7SUFDbkMsTUFBTUwsUUFBUSxDQUFDLEVBQUVLLFVBQVUsQ0FBQyxDQUFDQyxXQUFXO0lBQ3hDLElBQUlDLE9BQU9GLFlBQ1AsT0FBT0E7SUFDWCxPQUFRTDtRQUNKLEtBQUs7UUFDTCxLQUFLO1FBQ0wsS0FBSztZQUNELE9BQU87UUFDWCxLQUFLO1FBQ0wsS0FBSztRQUNMLEtBQUs7WUFDRCxPQUFPLENBQUM7UUFDWjtZQUNJLE1BQU0sSUFBSUUsUUFBUU0seUJBQXlCLENBQUMsQ0FBQyx3QkFBd0IsRUFBRUMsS0FBS0MsU0FBUyxDQUFDTCxXQUFXLENBQUM7SUFDMUc7QUFDSjtBQUNBLGNBQWMsR0FDZCxTQUFTRSxPQUFPSSxDQUFDO0lBQ2IsT0FBTyxPQUFPQSxNQUFNLFlBQVlBLEtBQUssUUFBUSxXQUFXQSxLQUFLLE9BQU9BLEVBQUVDLEtBQUssS0FBSztBQUNwRjtBQUNBLGNBQWMsR0FDZCxTQUFTQyxPQUFPRixDQUFDO0lBQ2IsSUFBSUcsTUFBTUMsT0FBTyxDQUFDSixNQUFNQSxFQUFFSyxNQUFNLEtBQUssR0FBRztRQUNwQyxJQUFJO1lBQ0FaLGlCQUFpQk8sQ0FBQyxDQUFDLEVBQUU7WUFDckIsT0FBTztRQUNYLEVBQ0EsT0FBT00sR0FBRztZQUNOLE9BQU87UUFDWDtJQUNKO0lBQ0EsT0FBTztBQUNYO0FBQ0EsU0FBU0MsT0FBT1AsQ0FBQztJQUNiLE9BQU9HLE1BQU1DLE9BQU8sQ0FBQ0osTUFBTUcsTUFBTUMsT0FBTyxDQUFDSixDQUFDLENBQUMsRUFBRTtBQUNqRDtBQUNBLFNBQVNRLE1BQU1SLENBQUM7SUFDWixPQUFPQSxhQUFhUyxPQUFPVCxFQUFFVSxJQUFJLEdBQUc7QUFDeEM7QUFDQSxjQUFjLEdBQ2QsU0FBU0MsVUFBVUMsQ0FBQztJQUNoQixPQUFPLElBQUlILElBQUk7UUFBQztZQUFDLENBQUMsRUFBRUcsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDO1lBQUVuQixpQkFBaUI7Z0JBQUNtQixDQUFDLENBQUMsRUFBRTthQUFDO1NBQUU7S0FBQztBQUMxRDtBQUNBLGNBQWMsR0FDZCxTQUFTQyxVQUFVYixDQUFDO0lBQ2hCLE1BQU1jLGNBQWNkLEVBQUVlLEdBQUcsQ0FBQyxDQUFDLENBQUNDLEdBQUdKLEVBQUUsR0FBSztZQUFDLENBQUMsRUFBRUksRUFBRSxDQUFDO1lBQUV2QixpQkFBaUJtQjtTQUFHO0lBQ25FLE9BQU8sSUFBSUgsSUFBSUs7QUFDbkI7QUFDQSxjQUFjLEdBQ2QsU0FBU0csYUFBYWpCLENBQUM7SUFDbkIsTUFBTWMsY0FBY2QsRUFBRWUsR0FBRyxDQUFDRyxDQUFBQSxNQUFPO1lBQUMsQ0FBQyxFQUFFQSxJQUFJLENBQUM7WUFBRTtTQUFFO0lBQzlDLE9BQU8sSUFBSVQsSUFBSUs7QUFDbkI7QUFDQSxjQUFjLEdBQ2QsU0FBU0ssWUFBWW5CLENBQUM7SUFDbEIsTUFBTWMsY0FBYzVCLE9BQU9rQyxPQUFPLENBQUNwQixHQUFHZSxHQUFHLENBQUMsQ0FBQyxDQUFDQyxHQUFHSixFQUFFLEdBQUs7WUFDbEQsQ0FBQyxFQUFFSSxFQUFFLENBQUM7WUFDTnZCLGlCQUFpQm1CO1NBQ3BCO0lBQ0QsT0FBTyxJQUFJSCxJQUFJSztBQUNuQjtBQUNBLGNBQWMsR0FDZCxTQUFTTyxTQUFTckIsQ0FBQztJQUNmLE1BQU1jLGNBQWNYLE1BQU1tQixJQUFJLENBQUN0QixHQUFHZSxHQUFHLENBQUMsQ0FBQyxDQUFDQyxHQUFHSixFQUFFLEdBQUs7WUFDOUMsQ0FBQyxFQUFFSSxFQUFFLENBQUM7WUFDTnZCLGlCQUFpQm1CO1NBQ3BCO0lBQ0QsT0FBTyxJQUFJSCxJQUFJSztBQUNuQjtBQUNBLCtFQUErRSxHQUMvRSxTQUFTeEIsV0FBV2lDLElBQUksRUFBRTdCLFNBQVM7SUFDL0IsSUFBSTZCLFFBQVEsTUFDUixPQUFPQztJQUNYLElBQUksT0FBT0QsU0FBUyxVQUNoQixPQUFPLElBQUlkLElBQUk7UUFBQztZQUFDYztZQUFNOUIsaUJBQWlCQztTQUFXO0tBQUM7SUFDeEQsSUFBSSxPQUFPNkIsU0FBUyxVQUFVO1FBQzFCLE1BQU0sSUFBSWhDLFFBQVFNLHlCQUF5QixDQUFDLENBQUMscUJBQXFCLEVBQUVDLEtBQUtDLFNBQVMsQ0FBQ3dCLE1BQU0sNEJBQTRCLENBQUM7SUFDMUg7SUFDQSxJQUFJLENBQUNwQixNQUFNQyxPQUFPLENBQUNtQixPQUFPO1FBQ3RCLE9BQU9mLE1BQU1lLFFBQVFGLFNBQVNFLFFBQVFyQyxPQUFPdUMsSUFBSSxDQUFDRixNQUFNbEIsTUFBTSxHQUFHYyxZQUFZSSxRQUFRQztJQUN6RjtJQUNBLElBQUksQ0FBQ0QsS0FBS2xCLE1BQU0sRUFDWixPQUFPbUI7SUFDWCxJQUFJakIsT0FBT2dCLE9BQ1AsT0FBT1YsVUFBVVU7SUFDckIsSUFBSXJCLE9BQU9xQixPQUNQLE9BQU9aLFVBQVVZO0lBQ3JCLE9BQU9OLGFBQWFNO0FBQ3hCO0FBQ0FuQyxrQkFBa0IsR0FBR0UsWUFDckIsZ0NBQWdDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYmxvZy1hcHBsaWNhdGlvbi8uL25vZGVfbW9kdWxlcy9tb25nb2RiL2xpYi9zb3J0LmpzP2Y3NmQiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLmZvcm1hdFNvcnQgPSB2b2lkIDA7XG5jb25zdCBlcnJvcl8xID0gcmVxdWlyZShcIi4vZXJyb3JcIik7XG4vKiogQGludGVybmFsICovXG5mdW5jdGlvbiBwcmVwYXJlRGlyZWN0aW9uKGRpcmVjdGlvbiA9IDEpIHtcbiAgICBjb25zdCB2YWx1ZSA9IGAke2RpcmVjdGlvbn1gLnRvTG93ZXJDYXNlKCk7XG4gICAgaWYgKGlzTWV0YShkaXJlY3Rpb24pKVxuICAgICAgICByZXR1cm4gZGlyZWN0aW9uO1xuICAgIHN3aXRjaCAodmFsdWUpIHtcbiAgICAgICAgY2FzZSAnYXNjZW5kaW5nJzpcbiAgICAgICAgY2FzZSAnYXNjJzpcbiAgICAgICAgY2FzZSAnMSc6XG4gICAgICAgICAgICByZXR1cm4gMTtcbiAgICAgICAgY2FzZSAnZGVzY2VuZGluZyc6XG4gICAgICAgIGNhc2UgJ2Rlc2MnOlxuICAgICAgICBjYXNlICctMSc6XG4gICAgICAgICAgICByZXR1cm4gLTE7XG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICB0aHJvdyBuZXcgZXJyb3JfMS5Nb25nb0ludmFsaWRBcmd1bWVudEVycm9yKGBJbnZhbGlkIHNvcnQgZGlyZWN0aW9uOiAke0pTT04uc3RyaW5naWZ5KGRpcmVjdGlvbil9YCk7XG4gICAgfVxufVxuLyoqIEBpbnRlcm5hbCAqL1xuZnVuY3Rpb24gaXNNZXRhKHQpIHtcbiAgICByZXR1cm4gdHlwZW9mIHQgPT09ICdvYmplY3QnICYmIHQgIT0gbnVsbCAmJiAnJG1ldGEnIGluIHQgJiYgdHlwZW9mIHQuJG1ldGEgPT09ICdzdHJpbmcnO1xufVxuLyoqIEBpbnRlcm5hbCAqL1xuZnVuY3Rpb24gaXNQYWlyKHQpIHtcbiAgICBpZiAoQXJyYXkuaXNBcnJheSh0KSAmJiB0Lmxlbmd0aCA9PT0gMikge1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgcHJlcGFyZURpcmVjdGlvbih0WzFdKTtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIGNhdGNoIChlKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGZhbHNlO1xufVxuZnVuY3Rpb24gaXNEZWVwKHQpIHtcbiAgICByZXR1cm4gQXJyYXkuaXNBcnJheSh0KSAmJiBBcnJheS5pc0FycmF5KHRbMF0pO1xufVxuZnVuY3Rpb24gaXNNYXAodCkge1xuICAgIHJldHVybiB0IGluc3RhbmNlb2YgTWFwICYmIHQuc2l6ZSA+IDA7XG59XG4vKiogQGludGVybmFsICovXG5mdW5jdGlvbiBwYWlyVG9NYXAodikge1xuICAgIHJldHVybiBuZXcgTWFwKFtbYCR7dlswXX1gLCBwcmVwYXJlRGlyZWN0aW9uKFt2WzFdXSldXSk7XG59XG4vKiogQGludGVybmFsICovXG5mdW5jdGlvbiBkZWVwVG9NYXAodCkge1xuICAgIGNvbnN0IHNvcnRFbnRyaWVzID0gdC5tYXAoKFtrLCB2XSkgPT4gW2Ake2t9YCwgcHJlcGFyZURpcmVjdGlvbih2KV0pO1xuICAgIHJldHVybiBuZXcgTWFwKHNvcnRFbnRyaWVzKTtcbn1cbi8qKiBAaW50ZXJuYWwgKi9cbmZ1bmN0aW9uIHN0cmluZ3NUb01hcCh0KSB7XG4gICAgY29uc3Qgc29ydEVudHJpZXMgPSB0Lm1hcChrZXkgPT4gW2Ake2tleX1gLCAxXSk7XG4gICAgcmV0dXJuIG5ldyBNYXAoc29ydEVudHJpZXMpO1xufVxuLyoqIEBpbnRlcm5hbCAqL1xuZnVuY3Rpb24gb2JqZWN0VG9NYXAodCkge1xuICAgIGNvbnN0IHNvcnRFbnRyaWVzID0gT2JqZWN0LmVudHJpZXModCkubWFwKChbaywgdl0pID0+IFtcbiAgICAgICAgYCR7a31gLFxuICAgICAgICBwcmVwYXJlRGlyZWN0aW9uKHYpXG4gICAgXSk7XG4gICAgcmV0dXJuIG5ldyBNYXAoc29ydEVudHJpZXMpO1xufVxuLyoqIEBpbnRlcm5hbCAqL1xuZnVuY3Rpb24gbWFwVG9NYXAodCkge1xuICAgIGNvbnN0IHNvcnRFbnRyaWVzID0gQXJyYXkuZnJvbSh0KS5tYXAoKFtrLCB2XSkgPT4gW1xuICAgICAgICBgJHtrfWAsXG4gICAgICAgIHByZXBhcmVEaXJlY3Rpb24odilcbiAgICBdKTtcbiAgICByZXR1cm4gbmV3IE1hcChzb3J0RW50cmllcyk7XG59XG4vKiogY29udmVydHMgYSBTb3J0IHR5cGUgaW50byBhIHR5cGUgdGhhdCBpcyB2YWxpZCBmb3IgdGhlIHNlcnZlciAoU29ydEZvckNtZCkgKi9cbmZ1bmN0aW9uIGZvcm1hdFNvcnQoc29ydCwgZGlyZWN0aW9uKSB7XG4gICAgaWYgKHNvcnQgPT0gbnVsbClcbiAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICBpZiAodHlwZW9mIHNvcnQgPT09ICdzdHJpbmcnKVxuICAgICAgICByZXR1cm4gbmV3IE1hcChbW3NvcnQsIHByZXBhcmVEaXJlY3Rpb24oZGlyZWN0aW9uKV1dKTtcbiAgICBpZiAodHlwZW9mIHNvcnQgIT09ICdvYmplY3QnKSB7XG4gICAgICAgIHRocm93IG5ldyBlcnJvcl8xLk1vbmdvSW52YWxpZEFyZ3VtZW50RXJyb3IoYEludmFsaWQgc29ydCBmb3JtYXQ6ICR7SlNPTi5zdHJpbmdpZnkoc29ydCl9IFNvcnQgbXVzdCBiZSBhIHZhbGlkIG9iamVjdGApO1xuICAgIH1cbiAgICBpZiAoIUFycmF5LmlzQXJyYXkoc29ydCkpIHtcbiAgICAgICAgcmV0dXJuIGlzTWFwKHNvcnQpID8gbWFwVG9NYXAoc29ydCkgOiBPYmplY3Qua2V5cyhzb3J0KS5sZW5ndGggPyBvYmplY3RUb01hcChzb3J0KSA6IHVuZGVmaW5lZDtcbiAgICB9XG4gICAgaWYgKCFzb3J0Lmxlbmd0aClcbiAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICBpZiAoaXNEZWVwKHNvcnQpKVxuICAgICAgICByZXR1cm4gZGVlcFRvTWFwKHNvcnQpO1xuICAgIGlmIChpc1BhaXIoc29ydCkpXG4gICAgICAgIHJldHVybiBwYWlyVG9NYXAoc29ydCk7XG4gICAgcmV0dXJuIHN0cmluZ3NUb01hcChzb3J0KTtcbn1cbmV4cG9ydHMuZm9ybWF0U29ydCA9IGZvcm1hdFNvcnQ7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1zb3J0LmpzLm1hcCJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsImZvcm1hdFNvcnQiLCJlcnJvcl8xIiwicmVxdWlyZSIsInByZXBhcmVEaXJlY3Rpb24iLCJkaXJlY3Rpb24iLCJ0b0xvd2VyQ2FzZSIsImlzTWV0YSIsIk1vbmdvSW52YWxpZEFyZ3VtZW50RXJyb3IiLCJKU09OIiwic3RyaW5naWZ5IiwidCIsIiRtZXRhIiwiaXNQYWlyIiwiQXJyYXkiLCJpc0FycmF5IiwibGVuZ3RoIiwiZSIsImlzRGVlcCIsImlzTWFwIiwiTWFwIiwic2l6ZSIsInBhaXJUb01hcCIsInYiLCJkZWVwVG9NYXAiLCJzb3J0RW50cmllcyIsIm1hcCIsImsiLCJzdHJpbmdzVG9NYXAiLCJrZXkiLCJvYmplY3RUb01hcCIsImVudHJpZXMiLCJtYXBUb01hcCIsImZyb20iLCJzb3J0IiwidW5kZWZpbmVkIiwia2V5cyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongodb/lib/sort.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongodb/lib/transactions.js":
/*!**************************************************!*\
  !*** ./node_modules/mongodb/lib/transactions.js ***!
  \**************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.isTransactionCommand = exports.Transaction = exports.TxnState = void 0;\nconst error_1 = __webpack_require__(/*! ./error */ \"(ssr)/./node_modules/mongodb/lib/error.js\");\nconst read_concern_1 = __webpack_require__(/*! ./read_concern */ \"(ssr)/./node_modules/mongodb/lib/read_concern.js\");\nconst read_preference_1 = __webpack_require__(/*! ./read_preference */ \"(ssr)/./node_modules/mongodb/lib/read_preference.js\");\nconst write_concern_1 = __webpack_require__(/*! ./write_concern */ \"(ssr)/./node_modules/mongodb/lib/write_concern.js\");\n/** @internal */ exports.TxnState = Object.freeze({\n    NO_TRANSACTION: \"NO_TRANSACTION\",\n    STARTING_TRANSACTION: \"STARTING_TRANSACTION\",\n    TRANSACTION_IN_PROGRESS: \"TRANSACTION_IN_PROGRESS\",\n    TRANSACTION_COMMITTED: \"TRANSACTION_COMMITTED\",\n    TRANSACTION_COMMITTED_EMPTY: \"TRANSACTION_COMMITTED_EMPTY\",\n    TRANSACTION_ABORTED: \"TRANSACTION_ABORTED\"\n});\nconst stateMachine = {\n    [exports.TxnState.NO_TRANSACTION]: [\n        exports.TxnState.NO_TRANSACTION,\n        exports.TxnState.STARTING_TRANSACTION\n    ],\n    [exports.TxnState.STARTING_TRANSACTION]: [\n        exports.TxnState.TRANSACTION_IN_PROGRESS,\n        exports.TxnState.TRANSACTION_COMMITTED,\n        exports.TxnState.TRANSACTION_COMMITTED_EMPTY,\n        exports.TxnState.TRANSACTION_ABORTED\n    ],\n    [exports.TxnState.TRANSACTION_IN_PROGRESS]: [\n        exports.TxnState.TRANSACTION_IN_PROGRESS,\n        exports.TxnState.TRANSACTION_COMMITTED,\n        exports.TxnState.TRANSACTION_ABORTED\n    ],\n    [exports.TxnState.TRANSACTION_COMMITTED]: [\n        exports.TxnState.TRANSACTION_COMMITTED,\n        exports.TxnState.TRANSACTION_COMMITTED_EMPTY,\n        exports.TxnState.STARTING_TRANSACTION,\n        exports.TxnState.NO_TRANSACTION\n    ],\n    [exports.TxnState.TRANSACTION_ABORTED]: [\n        exports.TxnState.STARTING_TRANSACTION,\n        exports.TxnState.NO_TRANSACTION\n    ],\n    [exports.TxnState.TRANSACTION_COMMITTED_EMPTY]: [\n        exports.TxnState.TRANSACTION_COMMITTED_EMPTY,\n        exports.TxnState.NO_TRANSACTION\n    ]\n};\nconst ACTIVE_STATES = new Set([\n    exports.TxnState.STARTING_TRANSACTION,\n    exports.TxnState.TRANSACTION_IN_PROGRESS\n]);\nconst COMMITTED_STATES = new Set([\n    exports.TxnState.TRANSACTION_COMMITTED,\n    exports.TxnState.TRANSACTION_COMMITTED_EMPTY,\n    exports.TxnState.TRANSACTION_ABORTED\n]);\n/**\n * @public\n * A class maintaining state related to a server transaction. Internal Only\n */ class Transaction {\n    /** Create a transaction @internal */ constructor(options){\n        options = options ?? {};\n        this.state = exports.TxnState.NO_TRANSACTION;\n        this.options = {};\n        const writeConcern = write_concern_1.WriteConcern.fromOptions(options);\n        if (writeConcern) {\n            if (writeConcern.w === 0) {\n                throw new error_1.MongoTransactionError(\"Transactions do not support unacknowledged write concern\");\n            }\n            this.options.writeConcern = writeConcern;\n        }\n        if (options.readConcern) {\n            this.options.readConcern = read_concern_1.ReadConcern.fromOptions(options);\n        }\n        if (options.readPreference) {\n            this.options.readPreference = read_preference_1.ReadPreference.fromOptions(options);\n        }\n        if (options.maxCommitTimeMS) {\n            this.options.maxTimeMS = options.maxCommitTimeMS;\n        }\n        // TODO: This isn't technically necessary\n        this._pinnedServer = undefined;\n        this._recoveryToken = undefined;\n    }\n    /** @internal */ get server() {\n        return this._pinnedServer;\n    }\n    get recoveryToken() {\n        return this._recoveryToken;\n    }\n    get isPinned() {\n        return !!this.server;\n    }\n    /** @returns Whether the transaction has started */ get isStarting() {\n        return this.state === exports.TxnState.STARTING_TRANSACTION;\n    }\n    /**\n     * @returns Whether this session is presently in a transaction\n     */ get isActive() {\n        return ACTIVE_STATES.has(this.state);\n    }\n    get isCommitted() {\n        return COMMITTED_STATES.has(this.state);\n    }\n    /**\n     * Transition the transaction in the state machine\n     * @internal\n     * @param nextState - The new state to transition to\n     */ transition(nextState) {\n        const nextStates = stateMachine[this.state];\n        if (nextStates && nextStates.includes(nextState)) {\n            this.state = nextState;\n            if (this.state === exports.TxnState.NO_TRANSACTION || this.state === exports.TxnState.STARTING_TRANSACTION || this.state === exports.TxnState.TRANSACTION_ABORTED) {\n                this.unpinServer();\n            }\n            return;\n        }\n        throw new error_1.MongoRuntimeError(`Attempted illegal state transition from [${this.state}] to [${nextState}]`);\n    }\n    /** @internal */ pinServer(server) {\n        if (this.isActive) {\n            this._pinnedServer = server;\n        }\n    }\n    /** @internal */ unpinServer() {\n        this._pinnedServer = undefined;\n    }\n}\nexports.Transaction = Transaction;\nfunction isTransactionCommand(command) {\n    return !!(command.commitTransaction || command.abortTransaction);\n}\nexports.isTransactionCommand = isTransactionCommand; //# sourceMappingURL=transactions.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongodb/lib/transactions.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongodb/lib/utils.js":
/*!*******************************************!*\
  !*** ./node_modules/mongodb/lib/utils.js ***!
  \*******************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.DOCUMENT_DB_CHECK = exports.TimeoutController = exports.request = exports.matchesParentDomain = exports.parseUnsignedInteger = exports.parseInteger = exports.compareObjectId = exports.commandSupportsReadConcern = exports.shuffle = exports.supportsRetryableWrites = exports.enumToString = exports.emitWarningOnce = exports.emitWarning = exports.MONGODB_WARNING_CODE = exports.DEFAULT_PK_FACTORY = exports.HostAddress = exports.BufferPool = exports.List = exports.deepCopy = exports.isRecord = exports.setDifference = exports.isHello = exports.isSuperset = exports.resolveOptions = exports.hasAtomicOperators = exports.calculateDurationInMs = exports.now = exports.makeStateMachine = exports.errorStrictEqual = exports.arrayStrictEqual = exports.eachAsync = exports.maxWireVersion = exports.uuidV4 = exports.maybeCallback = exports.makeCounter = exports.MongoDBCollectionNamespace = exports.MongoDBNamespace = exports.ns = exports.getTopology = exports.decorateWithExplain = exports.decorateWithReadConcern = exports.decorateWithCollation = exports.isPromiseLike = exports.applyRetryableWrites = exports.filterOptions = exports.mergeOptions = exports.isObject = exports.normalizeHintField = exports.hostMatchesWildcards = exports.ByteUtils = void 0;\nexports.isHostMatch = exports.COSMOS_DB_MSG = exports.DOCUMENT_DB_MSG = exports.COSMOS_DB_CHECK = void 0;\nconst crypto = __webpack_require__(/*! crypto */ \"crypto\");\nconst http = __webpack_require__(/*! http */ \"http\");\nconst timers_1 = __webpack_require__(/*! timers */ \"timers\");\nconst url = __webpack_require__(/*! url */ \"url\");\nconst url_1 = __webpack_require__(/*! url */ \"url\");\nconst bson_1 = __webpack_require__(/*! ./bson */ \"(ssr)/./node_modules/mongodb/lib/bson.js\");\nconst constants_1 = __webpack_require__(/*! ./cmap/wire_protocol/constants */ \"(ssr)/./node_modules/mongodb/lib/cmap/wire_protocol/constants.js\");\nconst constants_2 = __webpack_require__(/*! ./constants */ \"(ssr)/./node_modules/mongodb/lib/constants.js\");\nconst error_1 = __webpack_require__(/*! ./error */ \"(ssr)/./node_modules/mongodb/lib/error.js\");\nconst read_concern_1 = __webpack_require__(/*! ./read_concern */ \"(ssr)/./node_modules/mongodb/lib/read_concern.js\");\nconst read_preference_1 = __webpack_require__(/*! ./read_preference */ \"(ssr)/./node_modules/mongodb/lib/read_preference.js\");\nconst common_1 = __webpack_require__(/*! ./sdam/common */ \"(ssr)/./node_modules/mongodb/lib/sdam/common.js\");\nconst write_concern_1 = __webpack_require__(/*! ./write_concern */ \"(ssr)/./node_modules/mongodb/lib/write_concern.js\");\nexports.ByteUtils = {\n    toLocalBufferType (buffer) {\n        return Buffer.isBuffer(buffer) ? buffer : Buffer.from(buffer.buffer, buffer.byteOffset, buffer.byteLength);\n    },\n    equals (seqA, seqB) {\n        return exports.ByteUtils.toLocalBufferType(seqA).equals(seqB);\n    },\n    compare (seqA, seqB) {\n        return exports.ByteUtils.toLocalBufferType(seqA).compare(seqB);\n    },\n    toBase64 (uint8array) {\n        return exports.ByteUtils.toLocalBufferType(uint8array).toString(\"base64\");\n    }\n};\n/**\n * Determines if a connection's address matches a user provided list\n * of domain wildcards.\n */ function hostMatchesWildcards(host, wildcards) {\n    for (const wildcard of wildcards){\n        if (host === wildcard || wildcard.startsWith(\"*.\") && host?.endsWith(wildcard.substring(2, wildcard.length)) || wildcard.startsWith(\"*/\") && host?.endsWith(wildcard.substring(2, wildcard.length))) {\n            return true;\n        }\n    }\n    return false;\n}\nexports.hostMatchesWildcards = hostMatchesWildcards;\n/**\n * Ensure Hint field is in a shape we expect:\n * - object of index names mapping to 1 or -1\n * - just an index name\n * @internal\n */ function normalizeHintField(hint) {\n    let finalHint = undefined;\n    if (typeof hint === \"string\") {\n        finalHint = hint;\n    } else if (Array.isArray(hint)) {\n        finalHint = {};\n        hint.forEach((param)=>{\n            finalHint[param] = 1;\n        });\n    } else if (hint != null && typeof hint === \"object\") {\n        finalHint = {};\n        for(const name in hint){\n            finalHint[name] = hint[name];\n        }\n    }\n    return finalHint;\n}\nexports.normalizeHintField = normalizeHintField;\nconst TO_STRING = (object)=>Object.prototype.toString.call(object);\n/**\n * Checks if arg is an Object:\n * - **NOTE**: the check is based on the `[Symbol.toStringTag]() === 'Object'`\n * @internal\n */ function isObject(arg) {\n    return \"[object Object]\" === TO_STRING(arg);\n}\nexports.isObject = isObject;\n/** @internal */ function mergeOptions(target, source) {\n    return {\n        ...target,\n        ...source\n    };\n}\nexports.mergeOptions = mergeOptions;\n/** @internal */ function filterOptions(options, names) {\n    const filterOptions = {};\n    for(const name in options){\n        if (names.includes(name)) {\n            filterOptions[name] = options[name];\n        }\n    }\n    // Filtered options\n    return filterOptions;\n}\nexports.filterOptions = filterOptions;\n/**\n * Applies retryWrites: true to a command if retryWrites is set on the command's database.\n * @internal\n *\n * @param target - The target command to which we will apply retryWrites.\n * @param db - The database from which we can inherit a retryWrites value.\n */ function applyRetryableWrites(target, db) {\n    if (db && db.s.options?.retryWrites) {\n        target.retryWrites = true;\n    }\n    return target;\n}\nexports.applyRetryableWrites = applyRetryableWrites;\n/**\n * Applies a write concern to a command based on well defined inheritance rules, optionally\n * detecting support for the write concern in the first place.\n * @internal\n *\n * @param target - the target command we will be applying the write concern to\n * @param sources - sources where we can inherit default write concerns from\n * @param options - optional settings passed into a command for write concern overrides\n */ /**\n * Checks if a given value is a Promise\n *\n * @typeParam T - The resolution type of the possible promise\n * @param value - An object that could be a promise\n * @returns true if the provided value is a Promise\n */ function isPromiseLike(value) {\n    return !!value && typeof value.then === \"function\";\n}\nexports.isPromiseLike = isPromiseLike;\n/**\n * Applies collation to a given command.\n * @internal\n *\n * @param command - the command on which to apply collation\n * @param target - target of command\n * @param options - options containing collation settings\n */ function decorateWithCollation(command, target, options) {\n    const capabilities = getTopology(target).capabilities;\n    if (options.collation && typeof options.collation === \"object\") {\n        if (capabilities && capabilities.commandsTakeCollation) {\n            command.collation = options.collation;\n        } else {\n            throw new error_1.MongoCompatibilityError(`Current topology does not support collation`);\n        }\n    }\n}\nexports.decorateWithCollation = decorateWithCollation;\n/**\n * Applies a read concern to a given command.\n * @internal\n *\n * @param command - the command on which to apply the read concern\n * @param coll - the parent collection of the operation calling this method\n */ function decorateWithReadConcern(command, coll, options) {\n    if (options && options.session && options.session.inTransaction()) {\n        return;\n    }\n    const readConcern = Object.assign({}, command.readConcern || {});\n    if (coll.s.readConcern) {\n        Object.assign(readConcern, coll.s.readConcern);\n    }\n    if (Object.keys(readConcern).length > 0) {\n        Object.assign(command, {\n            readConcern: readConcern\n        });\n    }\n}\nexports.decorateWithReadConcern = decorateWithReadConcern;\n/**\n * Applies an explain to a given command.\n * @internal\n *\n * @param command - the command on which to apply the explain\n * @param options - the options containing the explain verbosity\n */ function decorateWithExplain(command, explain) {\n    if (command.explain) {\n        return command;\n    }\n    return {\n        explain: command,\n        verbosity: explain.verbosity\n    };\n}\nexports.decorateWithExplain = decorateWithExplain;\n/**\n * A helper function to get the topology from a given provider. Throws\n * if the topology cannot be found.\n * @throws MongoNotConnectedError\n * @internal\n */ function getTopology(provider) {\n    // MongoClient or ClientSession or AbstractCursor\n    if (\"topology\" in provider && provider.topology) {\n        return provider.topology;\n    } else if (\"client\" in provider && provider.client.topology) {\n        return provider.client.topology;\n    }\n    throw new error_1.MongoNotConnectedError(\"MongoClient must be connected to perform this operation\");\n}\nexports.getTopology = getTopology;\n/** @internal */ function ns(ns) {\n    return MongoDBNamespace.fromString(ns);\n}\nexports.ns = ns;\n/** @public */ class MongoDBNamespace {\n    /**\n     * Create a namespace object\n     *\n     * @param db - database name\n     * @param collection - collection name\n     */ constructor(db, collection){\n        this.db = db;\n        this.collection = collection;\n        this.collection = collection === \"\" ? undefined : collection;\n    }\n    toString() {\n        return this.collection ? `${this.db}.${this.collection}` : this.db;\n    }\n    withCollection(collection) {\n        return new MongoDBCollectionNamespace(this.db, collection);\n    }\n    static fromString(namespace) {\n        if (typeof namespace !== \"string\" || namespace === \"\") {\n            // TODO(NODE-3483): Replace with MongoNamespaceError\n            throw new error_1.MongoRuntimeError(`Cannot parse namespace from \"${namespace}\"`);\n        }\n        const [db, ...collectionParts] = namespace.split(\".\");\n        const collection = collectionParts.join(\".\");\n        return new MongoDBNamespace(db, collection === \"\" ? undefined : collection);\n    }\n}\nexports.MongoDBNamespace = MongoDBNamespace;\n/**\n * @public\n *\n * A class representing a collection's namespace.  This class enforces (through Typescript) that\n * the `collection` portion of the namespace is defined and should only be\n * used in scenarios where this can be guaranteed.\n */ class MongoDBCollectionNamespace extends MongoDBNamespace {\n    constructor(db, collection){\n        super(db, collection);\n        this.collection = collection;\n    }\n    static fromString(namespace) {\n        return super.fromString(namespace);\n    }\n}\nexports.MongoDBCollectionNamespace = MongoDBCollectionNamespace;\n/** @internal */ function* makeCounter(seed = 0) {\n    let count = seed;\n    while(true){\n        const newCount = count;\n        count += 1;\n        yield newCount;\n    }\n}\nexports.makeCounter = makeCounter;\nfunction maybeCallback(promiseFn, callback) {\n    const promise = promiseFn();\n    if (callback == null) {\n        return promise;\n    }\n    promise.then((result)=>callback(undefined, result), (error)=>callback(error));\n    return;\n}\nexports.maybeCallback = maybeCallback;\n/**\n * Synchronously Generate a UUIDv4\n * @internal\n */ function uuidV4() {\n    const result = crypto.randomBytes(16);\n    result[6] = result[6] & 0x0f | 0x40;\n    result[8] = result[8] & 0x3f | 0x80;\n    return result;\n}\nexports.uuidV4 = uuidV4;\n/**\n * A helper function for determining `maxWireVersion` between legacy and new topology instances\n * @internal\n */ function maxWireVersion(topologyOrServer) {\n    if (topologyOrServer) {\n        if (topologyOrServer.loadBalanced) {\n            // Since we do not have a monitor, we assume the load balanced server is always\n            // pointed at the latest mongodb version. There is a risk that for on-prem\n            // deployments that don't upgrade immediately that this could alert to the\n            // application that a feature is available that is actually not.\n            return constants_1.MAX_SUPPORTED_WIRE_VERSION;\n        }\n        if (topologyOrServer.hello) {\n            return topologyOrServer.hello.maxWireVersion;\n        }\n        if (\"lastHello\" in topologyOrServer && typeof topologyOrServer.lastHello === \"function\") {\n            const lastHello = topologyOrServer.lastHello();\n            if (lastHello) {\n                return lastHello.maxWireVersion;\n            }\n        }\n        if (topologyOrServer.description && \"maxWireVersion\" in topologyOrServer.description && topologyOrServer.description.maxWireVersion != null) {\n            return topologyOrServer.description.maxWireVersion;\n        }\n    }\n    return 0;\n}\nexports.maxWireVersion = maxWireVersion;\n/**\n * Applies the function `eachFn` to each item in `arr`, in parallel.\n * @internal\n *\n * @param arr - An array of items to asynchronously iterate over\n * @param eachFn - A function to call on each item of the array. The callback signature is `(item, callback)`, where the callback indicates iteration is complete.\n * @param callback - The callback called after every item has been iterated\n */ function eachAsync(arr, eachFn, callback) {\n    arr = arr || [];\n    let idx = 0;\n    let awaiting = 0;\n    for(idx = 0; idx < arr.length; ++idx){\n        awaiting++;\n        eachFn(arr[idx], eachCallback);\n    }\n    if (awaiting === 0) {\n        callback();\n        return;\n    }\n    function eachCallback(err) {\n        awaiting--;\n        if (err) {\n            callback(err);\n            return;\n        }\n        if (idx === arr.length && awaiting <= 0) {\n            callback();\n        }\n    }\n}\nexports.eachAsync = eachAsync;\n/** @internal */ function arrayStrictEqual(arr, arr2) {\n    if (!Array.isArray(arr) || !Array.isArray(arr2)) {\n        return false;\n    }\n    return arr.length === arr2.length && arr.every((elt, idx)=>elt === arr2[idx]);\n}\nexports.arrayStrictEqual = arrayStrictEqual;\n/** @internal */ function errorStrictEqual(lhs, rhs) {\n    if (lhs === rhs) {\n        return true;\n    }\n    if (!lhs || !rhs) {\n        return lhs === rhs;\n    }\n    if (lhs == null && rhs != null || lhs != null && rhs == null) {\n        return false;\n    }\n    if (lhs.constructor.name !== rhs.constructor.name) {\n        return false;\n    }\n    if (lhs.message !== rhs.message) {\n        return false;\n    }\n    return true;\n}\nexports.errorStrictEqual = errorStrictEqual;\n/** @internal */ function makeStateMachine(stateTable) {\n    return function stateTransition(target, newState) {\n        const legalStates = stateTable[target.s.state];\n        if (legalStates && legalStates.indexOf(newState) < 0) {\n            throw new error_1.MongoRuntimeError(`illegal state transition from [${target.s.state}] => [${newState}], allowed: [${legalStates}]`);\n        }\n        target.emit(\"stateChanged\", target.s.state, newState);\n        target.s.state = newState;\n    };\n}\nexports.makeStateMachine = makeStateMachine;\n/** @internal */ function now() {\n    const hrtime = process.hrtime();\n    return Math.floor(hrtime[0] * 1000 + hrtime[1] / 1000000);\n}\nexports.now = now;\n/** @internal */ function calculateDurationInMs(started) {\n    if (typeof started !== \"number\") {\n        throw new error_1.MongoInvalidArgumentError(\"Numeric value required to calculate duration\");\n    }\n    const elapsed = now() - started;\n    return elapsed < 0 ? 0 : elapsed;\n}\nexports.calculateDurationInMs = calculateDurationInMs;\n/** @internal */ function hasAtomicOperators(doc) {\n    if (Array.isArray(doc)) {\n        for (const document of doc){\n            if (hasAtomicOperators(document)) {\n                return true;\n            }\n        }\n        return false;\n    }\n    const keys = Object.keys(doc);\n    return keys.length > 0 && keys[0][0] === \"$\";\n}\nexports.hasAtomicOperators = hasAtomicOperators;\n/**\n * Merge inherited properties from parent into options, prioritizing values from options,\n * then values from parent.\n * @internal\n */ function resolveOptions(parent, options) {\n    const result = Object.assign({}, options, (0, bson_1.resolveBSONOptions)(options, parent));\n    // Users cannot pass a readConcern/writeConcern to operations in a transaction\n    const session = options?.session;\n    if (!session?.inTransaction()) {\n        const readConcern = read_concern_1.ReadConcern.fromOptions(options) ?? parent?.readConcern;\n        if (readConcern) {\n            result.readConcern = readConcern;\n        }\n        const writeConcern = write_concern_1.WriteConcern.fromOptions(options) ?? parent?.writeConcern;\n        if (writeConcern) {\n            result.writeConcern = writeConcern;\n        }\n    }\n    const readPreference = read_preference_1.ReadPreference.fromOptions(options) ?? parent?.readPreference;\n    if (readPreference) {\n        result.readPreference = readPreference;\n    }\n    return result;\n}\nexports.resolveOptions = resolveOptions;\nfunction isSuperset(set, subset) {\n    set = Array.isArray(set) ? new Set(set) : set;\n    subset = Array.isArray(subset) ? new Set(subset) : subset;\n    for (const elem of subset){\n        if (!set.has(elem)) {\n            return false;\n        }\n    }\n    return true;\n}\nexports.isSuperset = isSuperset;\n/**\n * Checks if the document is a Hello request\n * @internal\n */ function isHello(doc) {\n    return doc[constants_2.LEGACY_HELLO_COMMAND] || doc.hello ? true : false;\n}\nexports.isHello = isHello;\n/** Returns the items that are uniquely in setA */ function setDifference(setA, setB) {\n    const difference = new Set(setA);\n    for (const elem of setB){\n        difference.delete(elem);\n    }\n    return difference;\n}\nexports.setDifference = setDifference;\nconst HAS_OWN = (object, prop)=>Object.prototype.hasOwnProperty.call(object, prop);\nfunction isRecord(value, requiredKeys = undefined) {\n    if (!isObject(value)) {\n        return false;\n    }\n    const ctor = value.constructor;\n    if (ctor && ctor.prototype) {\n        if (!isObject(ctor.prototype)) {\n            return false;\n        }\n        // Check to see if some method exists from the Object exists\n        if (!HAS_OWN(ctor.prototype, \"isPrototypeOf\")) {\n            return false;\n        }\n    }\n    if (requiredKeys) {\n        const keys = Object.keys(value);\n        return isSuperset(keys, requiredKeys);\n    }\n    return true;\n}\nexports.isRecord = isRecord;\n/**\n * Make a deep copy of an object\n *\n * NOTE: This is not meant to be the perfect implementation of a deep copy,\n * but instead something that is good enough for the purposes of\n * command monitoring.\n */ function deepCopy(value) {\n    if (value == null) {\n        return value;\n    } else if (Array.isArray(value)) {\n        return value.map((item)=>deepCopy(item));\n    } else if (isRecord(value)) {\n        const res = {};\n        for(const key in value){\n            res[key] = deepCopy(value[key]);\n        }\n        return res;\n    }\n    const ctor = value.constructor;\n    if (ctor) {\n        switch(ctor.name.toLowerCase()){\n            case \"date\":\n                return new ctor(Number(value));\n            case \"map\":\n                return new Map(value);\n            case \"set\":\n                return new Set(value);\n            case \"buffer\":\n                return Buffer.from(value);\n        }\n    }\n    return value;\n}\nexports.deepCopy = deepCopy;\n/**\n * A sequential list of items in a circularly linked list\n * @remarks\n * The head node is special, it is always defined and has a value of null.\n * It is never \"included\" in the list, in that, it is not returned by pop/shift or yielded by the iterator.\n * The circular linkage and always defined head node are to reduce checks for null next/prev references to zero.\n * New nodes are declared as object literals with keys always in the same order: next, prev, value.\n * @internal\n */ class List {\n    get length() {\n        return this.count;\n    }\n    get [Symbol.toStringTag]() {\n        return \"List\";\n    }\n    constructor(){\n        this.count = 0;\n        // this is carefully crafted:\n        // declaring a complete and consistently key ordered\n        // object is beneficial to the runtime optimizations\n        this.head = {\n            next: null,\n            prev: null,\n            value: null\n        };\n        this.head.next = this.head;\n        this.head.prev = this.head;\n    }\n    toArray() {\n        return Array.from(this);\n    }\n    toString() {\n        return `head <=> ${this.toArray().join(\" <=> \")} <=> head`;\n    }\n    *[Symbol.iterator]() {\n        for (const node of this.nodes()){\n            yield node.value;\n        }\n    }\n    *nodes() {\n        let ptr = this.head.next;\n        while(ptr !== this.head){\n            // Save next before yielding so that we make removing within iteration safe\n            const { next } = ptr;\n            yield ptr;\n            ptr = next;\n        }\n    }\n    /** Insert at end of list */ push(value) {\n        this.count += 1;\n        const newNode = {\n            next: this.head,\n            prev: this.head.prev,\n            value\n        };\n        this.head.prev.next = newNode;\n        this.head.prev = newNode;\n    }\n    /** Inserts every item inside an iterable instead of the iterable itself */ pushMany(iterable) {\n        for (const value of iterable){\n            this.push(value);\n        }\n    }\n    /** Insert at front of list */ unshift(value) {\n        this.count += 1;\n        const newNode = {\n            next: this.head.next,\n            prev: this.head,\n            value\n        };\n        this.head.next.prev = newNode;\n        this.head.next = newNode;\n    }\n    remove(node) {\n        if (node === this.head || this.length === 0) {\n            return null;\n        }\n        this.count -= 1;\n        const prevNode = node.prev;\n        const nextNode = node.next;\n        prevNode.next = nextNode;\n        nextNode.prev = prevNode;\n        return node.value;\n    }\n    /** Removes the first node at the front of the list */ shift() {\n        return this.remove(this.head.next);\n    }\n    /** Removes the last node at the end of the list */ pop() {\n        return this.remove(this.head.prev);\n    }\n    /** Iterates through the list and removes nodes where filter returns true */ prune(filter) {\n        for (const node of this.nodes()){\n            if (filter(node.value)) {\n                this.remove(node);\n            }\n        }\n    }\n    clear() {\n        this.count = 0;\n        this.head.next = this.head;\n        this.head.prev = this.head;\n    }\n    /** Returns the first item in the list, does not remove */ first() {\n        // If the list is empty, value will be the head's null\n        return this.head.next.value;\n    }\n    /** Returns the last item in the list, does not remove */ last() {\n        // If the list is empty, value will be the head's null\n        return this.head.prev.value;\n    }\n}\nexports.List = List;\n/**\n * A pool of Buffers which allow you to read them as if they were one\n * @internal\n */ class BufferPool {\n    constructor(){\n        this.buffers = new List();\n        this.totalByteLength = 0;\n    }\n    get length() {\n        return this.totalByteLength;\n    }\n    /** Adds a buffer to the internal buffer pool list */ append(buffer) {\n        this.buffers.push(buffer);\n        this.totalByteLength += buffer.length;\n    }\n    /**\n     * If BufferPool contains 4 bytes or more construct an int32 from the leading bytes,\n     * otherwise return null. Size can be negative, caller should error check.\n     */ getInt32() {\n        if (this.totalByteLength < 4) {\n            return null;\n        }\n        const firstBuffer = this.buffers.first();\n        if (firstBuffer != null && firstBuffer.byteLength >= 4) {\n            return firstBuffer.readInt32LE(0);\n        }\n        // Unlikely case: an int32 is split across buffers.\n        // Use read and put the returned buffer back on top\n        const top4Bytes = this.read(4);\n        const value = top4Bytes.readInt32LE(0);\n        // Put it back.\n        this.totalByteLength += 4;\n        this.buffers.unshift(top4Bytes);\n        return value;\n    }\n    /** Reads the requested number of bytes, optionally consuming them */ read(size) {\n        if (typeof size !== \"number\" || size < 0) {\n            throw new error_1.MongoInvalidArgumentError('Argument \"size\" must be a non-negative number');\n        }\n        // oversized request returns empty buffer\n        if (size > this.totalByteLength) {\n            return Buffer.alloc(0);\n        }\n        // We know we have enough, we just don't know how it is spread across chunks\n        // TODO(NODE-4732): alloc API should change based on raw option\n        const result = Buffer.allocUnsafe(size);\n        for(let bytesRead = 0; bytesRead < size;){\n            const buffer = this.buffers.shift();\n            if (buffer == null) {\n                break;\n            }\n            const bytesRemaining = size - bytesRead;\n            const bytesReadable = Math.min(bytesRemaining, buffer.byteLength);\n            const bytes = buffer.subarray(0, bytesReadable);\n            result.set(bytes, bytesRead);\n            bytesRead += bytesReadable;\n            this.totalByteLength -= bytesReadable;\n            if (bytesReadable < buffer.byteLength) {\n                this.buffers.unshift(buffer.subarray(bytesReadable));\n            }\n        }\n        return result;\n    }\n}\nexports.BufferPool = BufferPool;\n/** @public */ class HostAddress {\n    constructor(hostString){\n        this.host = undefined;\n        this.port = undefined;\n        this.socketPath = undefined;\n        this.isIPv6 = false;\n        const escapedHost = hostString.split(\" \").join(\"%20\"); // escape spaces, for socket path hosts\n        if (escapedHost.endsWith(\".sock\")) {\n            // heuristically determine if we're working with a domain socket\n            this.socketPath = decodeURIComponent(escapedHost);\n            return;\n        }\n        const urlString = `iLoveJS://${escapedHost}`;\n        let url;\n        try {\n            url = new url_1.URL(urlString);\n        } catch (urlError) {\n            const runtimeError = new error_1.MongoRuntimeError(`Unable to parse ${escapedHost} with URL`);\n            runtimeError.cause = urlError;\n            throw runtimeError;\n        }\n        const hostname = url.hostname;\n        const port = url.port;\n        let normalized = decodeURIComponent(hostname).toLowerCase();\n        if (normalized.startsWith(\"[\") && normalized.endsWith(\"]\")) {\n            this.isIPv6 = true;\n            normalized = normalized.substring(1, hostname.length - 1);\n        }\n        this.host = normalized.toLowerCase();\n        if (typeof port === \"number\") {\n            this.port = port;\n        } else if (typeof port === \"string\" && port !== \"\") {\n            this.port = Number.parseInt(port, 10);\n        } else {\n            this.port = 27017;\n        }\n        if (this.port === 0) {\n            throw new error_1.MongoParseError(\"Invalid port (zero) with hostname\");\n        }\n        Object.freeze(this);\n    }\n    [Symbol.for(\"nodejs.util.inspect.custom\")]() {\n        return this.inspect();\n    }\n    inspect() {\n        return `new HostAddress('${this.toString()}')`;\n    }\n    toString() {\n        if (typeof this.host === \"string\") {\n            if (this.isIPv6) {\n                return `[${this.host}]:${this.port}`;\n            }\n            return `${this.host}:${this.port}`;\n        }\n        return `${this.socketPath}`;\n    }\n    static fromString(s) {\n        return new HostAddress(s);\n    }\n    static fromHostPort(host, port) {\n        if (host.includes(\":\")) {\n            host = `[${host}]`; // IPv6 address\n        }\n        return HostAddress.fromString(`${host}:${port}`);\n    }\n    static fromSrvRecord({ name, port }) {\n        return HostAddress.fromHostPort(name, port);\n    }\n    toHostPort() {\n        if (this.socketPath) {\n            return {\n                host: this.socketPath,\n                port: 0\n            };\n        }\n        const host = this.host ?? \"\";\n        const port = this.port ?? 0;\n        return {\n            host,\n            port\n        };\n    }\n}\nexports.HostAddress = HostAddress;\nexports.DEFAULT_PK_FACTORY = {\n    // We prefer not to rely on ObjectId having a createPk method\n    createPk () {\n        return new bson_1.ObjectId();\n    }\n};\n/**\n * When the driver used emitWarning the code will be equal to this.\n * @public\n *\n * @example\n * ```ts\n * process.on('warning', (warning) => {\n *  if (warning.code === MONGODB_WARNING_CODE) console.error('Ah an important warning! :)')\n * })\n * ```\n */ exports.MONGODB_WARNING_CODE = \"MONGODB DRIVER\";\n/** @internal */ function emitWarning(message) {\n    return process.emitWarning(message, {\n        code: exports.MONGODB_WARNING_CODE\n    });\n}\nexports.emitWarning = emitWarning;\nconst emittedWarnings = new Set();\n/**\n * Will emit a warning once for the duration of the application.\n * Uses the message to identify if it has already been emitted\n * so using string interpolation can cause multiple emits\n * @internal\n */ function emitWarningOnce(message) {\n    if (!emittedWarnings.has(message)) {\n        emittedWarnings.add(message);\n        return emitWarning(message);\n    }\n}\nexports.emitWarningOnce = emitWarningOnce;\n/**\n * Takes a JS object and joins the values into a string separated by ', '\n */ function enumToString(en) {\n    return Object.values(en).join(\", \");\n}\nexports.enumToString = enumToString;\n/**\n * Determine if a server supports retryable writes.\n *\n * @internal\n */ function supportsRetryableWrites(server) {\n    if (!server) {\n        return false;\n    }\n    if (server.loadBalanced) {\n        // Loadbalanced topologies will always support retry writes\n        return true;\n    }\n    if (server.description.logicalSessionTimeoutMinutes != null) {\n        // that supports sessions\n        if (server.description.type !== common_1.ServerType.Standalone) {\n            // and that is not a standalone\n            return true;\n        }\n    }\n    return false;\n}\nexports.supportsRetryableWrites = supportsRetryableWrites;\n/**\n * Fisher–Yates Shuffle\n *\n * Reference: https://bost.ocks.org/mike/shuffle/\n * @param sequence - items to be shuffled\n * @param limit - Defaults to `0`. If nonzero shuffle will slice the randomized array e.g, `.slice(0, limit)` otherwise will return the entire randomized array.\n */ function shuffle(sequence, limit = 0) {\n    const items = Array.from(sequence); // shallow copy in order to never shuffle the input\n    if (limit > items.length) {\n        throw new error_1.MongoRuntimeError(\"Limit must be less than the number of items\");\n    }\n    let remainingItemsToShuffle = items.length;\n    const lowerBound = limit % items.length === 0 ? 1 : items.length - limit;\n    while(remainingItemsToShuffle > lowerBound){\n        // Pick a remaining element\n        const randomIndex = Math.floor(Math.random() * remainingItemsToShuffle);\n        remainingItemsToShuffle -= 1;\n        // And swap it with the current element\n        const swapHold = items[remainingItemsToShuffle];\n        items[remainingItemsToShuffle] = items[randomIndex];\n        items[randomIndex] = swapHold;\n    }\n    return limit % items.length === 0 ? items : items.slice(lowerBound);\n}\nexports.shuffle = shuffle;\n// TODO(NODE-4936): read concern eligibility for commands should be codified in command construction\n// @see https://github.com/mongodb/specifications/blob/master/source/read-write-concern/read-write-concern.rst#read-concern\nfunction commandSupportsReadConcern(command) {\n    if (command.aggregate || command.count || command.distinct || command.find || command.geoNear) {\n        return true;\n    }\n    return false;\n}\nexports.commandSupportsReadConcern = commandSupportsReadConcern;\n/**\n * Compare objectIds. `null` is always less\n * - `+1 = oid1 is greater than oid2`\n * - `-1 = oid1 is less than oid2`\n * - `+0 = oid1 is equal oid2`\n */ function compareObjectId(oid1, oid2) {\n    if (oid1 == null && oid2 == null) {\n        return 0;\n    }\n    if (oid1 == null) {\n        return -1;\n    }\n    if (oid2 == null) {\n        return 1;\n    }\n    return exports.ByteUtils.compare(oid1.id, oid2.id);\n}\nexports.compareObjectId = compareObjectId;\nfunction parseInteger(value) {\n    if (typeof value === \"number\") return Math.trunc(value);\n    const parsedValue = Number.parseInt(String(value), 10);\n    return Number.isNaN(parsedValue) ? null : parsedValue;\n}\nexports.parseInteger = parseInteger;\nfunction parseUnsignedInteger(value) {\n    const parsedInt = parseInteger(value);\n    return parsedInt != null && parsedInt >= 0 ? parsedInt : null;\n}\nexports.parseUnsignedInteger = parseUnsignedInteger;\n/**\n * Determines whether a provided address matches the provided parent domain.\n *\n * If a DNS server were to become compromised SRV records would still need to\n * advertise addresses that are under the same domain as the srvHost.\n *\n * @param address - The address to check against a domain\n * @param srvHost - The domain to check the provided address against\n * @returns Whether the provided address matches the parent domain\n */ function matchesParentDomain(address, srvHost) {\n    // Remove trailing dot if exists on either the resolved address or the srv hostname\n    const normalizedAddress = address.endsWith(\".\") ? address.slice(0, address.length - 1) : address;\n    const normalizedSrvHost = srvHost.endsWith(\".\") ? srvHost.slice(0, srvHost.length - 1) : srvHost;\n    const allCharacterBeforeFirstDot = /^.*?\\./;\n    // Remove all characters before first dot\n    // Add leading dot back to string so\n    //   an srvHostDomain = '.trusted.site'\n    //   will not satisfy an addressDomain that endsWith '.fake-trusted.site'\n    const addressDomain = `.${normalizedAddress.replace(allCharacterBeforeFirstDot, \"\")}`;\n    const srvHostDomain = `.${normalizedSrvHost.replace(allCharacterBeforeFirstDot, \"\")}`;\n    return addressDomain.endsWith(srvHostDomain);\n}\nexports.matchesParentDomain = matchesParentDomain;\nasync function request(uri, options = {}) {\n    return new Promise((resolve, reject)=>{\n        const requestOptions = {\n            method: \"GET\",\n            timeout: 10000,\n            json: true,\n            ...url.parse(uri),\n            ...options\n        };\n        const req = http.request(requestOptions, (res)=>{\n            res.setEncoding(\"utf8\");\n            let data = \"\";\n            res.on(\"data\", (d)=>{\n                data += d;\n            });\n            res.once(\"end\", ()=>{\n                if (options.json === false) {\n                    resolve(data);\n                    return;\n                }\n                try {\n                    const parsed = JSON.parse(data);\n                    resolve(parsed);\n                } catch  {\n                    // TODO(NODE-3483)\n                    reject(new error_1.MongoRuntimeError(`Invalid JSON response: \"${data}\"`));\n                }\n            });\n        });\n        req.once(\"timeout\", ()=>req.destroy(new error_1.MongoNetworkTimeoutError(`Network request to ${uri} timed out after ${options.timeout} ms`)));\n        req.once(\"error\", (error)=>reject(error));\n        req.end();\n    });\n}\nexports.request = request;\n/**\n * A custom AbortController that aborts after a specified timeout.\n *\n * If `timeout` is undefined or \\<=0, the abort controller never aborts.\n *\n * This class provides two benefits over the built-in AbortSignal.timeout() method.\n * - This class provides a mechanism for cancelling the timeout\n * - This class supports infinite timeouts by interpreting a timeout of 0 as infinite.  This is\n *    consistent with existing timeout options in the Node driver (serverSelectionTimeoutMS, for example).\n * @internal\n */ class TimeoutController extends AbortController {\n    constructor(timeout = 0, timeoutId = timeout > 0 ? (0, timers_1.setTimeout)(()=>this.abort(), timeout) : null){\n        super();\n        this.timeoutId = timeoutId;\n    }\n    clear() {\n        if (this.timeoutId != null) {\n            (0, timers_1.clearTimeout)(this.timeoutId);\n        }\n        this.timeoutId = null;\n    }\n}\nexports.TimeoutController = TimeoutController;\n/** @internal */ exports.DOCUMENT_DB_CHECK = /(\\.docdb\\.amazonaws\\.com$)|(\\.docdb-elastic\\.amazonaws\\.com$)/;\n/** @internal */ exports.COSMOS_DB_CHECK = /\\.cosmos\\.azure\\.com$/;\n/** @internal */ exports.DOCUMENT_DB_MSG = \"You appear to be connected to a DocumentDB cluster. For more information regarding feature compatibility and support please visit https://www.mongodb.com/supportability/documentdb\";\n/** @internal */ exports.COSMOS_DB_MSG = \"You appear to be connected to a CosmosDB cluster. For more information regarding feature compatibility and support please visit https://www.mongodb.com/supportability/cosmosdb\";\n/** @internal */ function isHostMatch(match, host) {\n    return host && match.test(host.toLowerCase()) ? true : false;\n}\nexports.isHostMatch = isHostMatch; //# sourceMappingURL=utils.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongodb/lib/utils.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongodb/lib/write_concern.js":
/*!***************************************************!*\
  !*** ./node_modules/mongodb/lib/write_concern.js ***!
  \***************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.WriteConcern = exports.WRITE_CONCERN_KEYS = void 0;\nexports.WRITE_CONCERN_KEYS = [\n    \"w\",\n    \"wtimeout\",\n    \"j\",\n    \"journal\",\n    \"fsync\"\n];\n/**\n * A MongoDB WriteConcern, which describes the level of acknowledgement\n * requested from MongoDB for write operations.\n * @public\n *\n * @see https://www.mongodb.com/docs/manual/reference/write-concern/\n */ class WriteConcern {\n    /**\n     * Constructs a WriteConcern from the write concern properties.\n     * @param w - request acknowledgment that the write operation has propagated to a specified number of mongod instances or to mongod instances with specified tags.\n     * @param wtimeoutMS - specify a time limit to prevent write operations from blocking indefinitely\n     * @param journal - request acknowledgment that the write operation has been written to the on-disk journal\n     * @param fsync - equivalent to the j option. Is deprecated and will be removed in the next major version.\n     */ constructor(w, wtimeoutMS, journal, fsync){\n        if (w != null) {\n            if (!Number.isNaN(Number(w))) {\n                this.w = Number(w);\n            } else {\n                this.w = w;\n            }\n        }\n        if (wtimeoutMS != null) {\n            this.wtimeoutMS = this.wtimeout = wtimeoutMS;\n        }\n        if (journal != null) {\n            this.journal = this.j = journal;\n        }\n        if (fsync != null) {\n            this.journal = this.j = fsync ? true : false;\n        }\n    }\n    /**\n     * Apply a write concern to a command document. Will modify and return the command.\n     */ static apply(command, writeConcern) {\n        const wc = {};\n        // The write concern document sent to the server has w/wtimeout/j fields.\n        if (writeConcern.w != null) wc.w = writeConcern.w;\n        if (writeConcern.wtimeoutMS != null) wc.wtimeout = writeConcern.wtimeoutMS;\n        if (writeConcern.journal != null) wc.j = writeConcern.j;\n        command.writeConcern = wc;\n        return command;\n    }\n    /** Construct a WriteConcern given an options object. */ static fromOptions(options, inherit) {\n        if (options == null) return undefined;\n        inherit = inherit ?? {};\n        let opts;\n        if (typeof options === \"string\" || typeof options === \"number\") {\n            opts = {\n                w: options\n            };\n        } else if (options instanceof WriteConcern) {\n            opts = options;\n        } else {\n            opts = options.writeConcern;\n        }\n        const parentOpts = inherit instanceof WriteConcern ? inherit : inherit.writeConcern;\n        const { w = undefined, wtimeout = undefined, j = undefined, fsync = undefined, journal = undefined, wtimeoutMS = undefined } = {\n            ...parentOpts,\n            ...opts\n        };\n        if (w != null || wtimeout != null || wtimeoutMS != null || j != null || journal != null || fsync != null) {\n            return new WriteConcern(w, wtimeout ?? wtimeoutMS, j ?? journal, fsync);\n        }\n        return undefined;\n    }\n}\nexports.WriteConcern = WriteConcern; //# sourceMappingURL=write_concern.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbW9uZ29kYi9saWIvd3JpdGVfY29uY2Vybi5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiQSw4Q0FBNkM7SUFBRUcsT0FBTztBQUFLLENBQUMsRUFBQztBQUM3REQsb0JBQW9CLEdBQUdBLDBCQUEwQixHQUFHLEtBQUs7QUFDekRBLDBCQUEwQixHQUFHO0lBQUM7SUFBSztJQUFZO0lBQUs7SUFBVztDQUFRO0FBQ3ZFOzs7Ozs7Q0FNQyxHQUNELE1BQU1FO0lBQ0Y7Ozs7OztLQU1DLEdBQ0RFLFlBQVlDLENBQUMsRUFBRUMsVUFBVSxFQUFFQyxPQUFPLEVBQUVDLEtBQUssQ0FBRTtRQUN2QyxJQUFJSCxLQUFLLE1BQU07WUFDWCxJQUFJLENBQUNJLE9BQU9DLEtBQUssQ0FBQ0QsT0FBT0osS0FBSztnQkFDMUIsSUFBSSxDQUFDQSxDQUFDLEdBQUdJLE9BQU9KO1lBQ3BCLE9BQ0s7Z0JBQ0QsSUFBSSxDQUFDQSxDQUFDLEdBQUdBO1lBQ2I7UUFDSjtRQUNBLElBQUlDLGNBQWMsTUFBTTtZQUNwQixJQUFJLENBQUNBLFVBQVUsR0FBRyxJQUFJLENBQUNLLFFBQVEsR0FBR0w7UUFDdEM7UUFDQSxJQUFJQyxXQUFXLE1BQU07WUFDakIsSUFBSSxDQUFDQSxPQUFPLEdBQUcsSUFBSSxDQUFDSyxDQUFDLEdBQUdMO1FBQzVCO1FBQ0EsSUFBSUMsU0FBUyxNQUFNO1lBQ2YsSUFBSSxDQUFDRCxPQUFPLEdBQUcsSUFBSSxDQUFDSyxDQUFDLEdBQUdKLFFBQVEsT0FBTztRQUMzQztJQUNKO0lBQ0E7O0tBRUMsR0FDRCxPQUFPSyxNQUFNQyxPQUFPLEVBQUVDLFlBQVksRUFBRTtRQUNoQyxNQUFNQyxLQUFLLENBQUM7UUFDWix5RUFBeUU7UUFDekUsSUFBSUQsYUFBYVYsQ0FBQyxJQUFJLE1BQ2xCVyxHQUFHWCxDQUFDLEdBQUdVLGFBQWFWLENBQUM7UUFDekIsSUFBSVUsYUFBYVQsVUFBVSxJQUFJLE1BQzNCVSxHQUFHTCxRQUFRLEdBQUdJLGFBQWFULFVBQVU7UUFDekMsSUFBSVMsYUFBYVIsT0FBTyxJQUFJLE1BQ3hCUyxHQUFHSixDQUFDLEdBQUdHLGFBQWFILENBQUM7UUFDekJFLFFBQVFDLFlBQVksR0FBR0M7UUFDdkIsT0FBT0Y7SUFDWDtJQUNBLHNEQUFzRCxHQUN0RCxPQUFPRyxZQUFZQyxPQUFPLEVBQUVDLE9BQU8sRUFBRTtRQUNqQyxJQUFJRCxXQUFXLE1BQ1gsT0FBT0U7UUFDWEQsVUFBVUEsV0FBVyxDQUFDO1FBQ3RCLElBQUlFO1FBQ0osSUFBSSxPQUFPSCxZQUFZLFlBQVksT0FBT0EsWUFBWSxVQUFVO1lBQzVERyxPQUFPO2dCQUFFaEIsR0FBR2E7WUFBUTtRQUN4QixPQUNLLElBQUlBLG1CQUFtQmhCLGNBQWM7WUFDdENtQixPQUFPSDtRQUNYLE9BQ0s7WUFDREcsT0FBT0gsUUFBUUgsWUFBWTtRQUMvQjtRQUNBLE1BQU1PLGFBQWFILG1CQUFtQmpCLGVBQWVpQixVQUFVQSxRQUFRSixZQUFZO1FBQ25GLE1BQU0sRUFBRVYsSUFBSWUsU0FBUyxFQUFFVCxXQUFXUyxTQUFTLEVBQUVSLElBQUlRLFNBQVMsRUFBRVosUUFBUVksU0FBUyxFQUFFYixVQUFVYSxTQUFTLEVBQUVkLGFBQWFjLFNBQVMsRUFBRSxHQUFHO1lBQzNILEdBQUdFLFVBQVU7WUFDYixHQUFHRCxJQUFJO1FBQ1g7UUFDQSxJQUFJaEIsS0FBSyxRQUNMTSxZQUFZLFFBQ1pMLGNBQWMsUUFDZE0sS0FBSyxRQUNMTCxXQUFXLFFBQ1hDLFNBQVMsTUFBTTtZQUNmLE9BQU8sSUFBSU4sYUFBYUcsR0FBR00sWUFBWUwsWUFBWU0sS0FBS0wsU0FBU0M7UUFDckU7UUFDQSxPQUFPWTtJQUNYO0FBQ0o7QUFDQXBCLG9CQUFvQixHQUFHRSxjQUN2Qix5Q0FBeUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9ibG9nLWFwcGxpY2F0aW9uLy4vbm9kZV9tb2R1bGVzL21vbmdvZGIvbGliL3dyaXRlX2NvbmNlcm4uanM/MjNiMCJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuV3JpdGVDb25jZXJuID0gZXhwb3J0cy5XUklURV9DT05DRVJOX0tFWVMgPSB2b2lkIDA7XG5leHBvcnRzLldSSVRFX0NPTkNFUk5fS0VZUyA9IFsndycsICd3dGltZW91dCcsICdqJywgJ2pvdXJuYWwnLCAnZnN5bmMnXTtcbi8qKlxuICogQSBNb25nb0RCIFdyaXRlQ29uY2Vybiwgd2hpY2ggZGVzY3JpYmVzIHRoZSBsZXZlbCBvZiBhY2tub3dsZWRnZW1lbnRcbiAqIHJlcXVlc3RlZCBmcm9tIE1vbmdvREIgZm9yIHdyaXRlIG9wZXJhdGlvbnMuXG4gKiBAcHVibGljXG4gKlxuICogQHNlZSBodHRwczovL3d3dy5tb25nb2RiLmNvbS9kb2NzL21hbnVhbC9yZWZlcmVuY2Uvd3JpdGUtY29uY2Vybi9cbiAqL1xuY2xhc3MgV3JpdGVDb25jZXJuIHtcbiAgICAvKipcbiAgICAgKiBDb25zdHJ1Y3RzIGEgV3JpdGVDb25jZXJuIGZyb20gdGhlIHdyaXRlIGNvbmNlcm4gcHJvcGVydGllcy5cbiAgICAgKiBAcGFyYW0gdyAtIHJlcXVlc3QgYWNrbm93bGVkZ21lbnQgdGhhdCB0aGUgd3JpdGUgb3BlcmF0aW9uIGhhcyBwcm9wYWdhdGVkIHRvIGEgc3BlY2lmaWVkIG51bWJlciBvZiBtb25nb2QgaW5zdGFuY2VzIG9yIHRvIG1vbmdvZCBpbnN0YW5jZXMgd2l0aCBzcGVjaWZpZWQgdGFncy5cbiAgICAgKiBAcGFyYW0gd3RpbWVvdXRNUyAtIHNwZWNpZnkgYSB0aW1lIGxpbWl0IHRvIHByZXZlbnQgd3JpdGUgb3BlcmF0aW9ucyBmcm9tIGJsb2NraW5nIGluZGVmaW5pdGVseVxuICAgICAqIEBwYXJhbSBqb3VybmFsIC0gcmVxdWVzdCBhY2tub3dsZWRnbWVudCB0aGF0IHRoZSB3cml0ZSBvcGVyYXRpb24gaGFzIGJlZW4gd3JpdHRlbiB0byB0aGUgb24tZGlzayBqb3VybmFsXG4gICAgICogQHBhcmFtIGZzeW5jIC0gZXF1aXZhbGVudCB0byB0aGUgaiBvcHRpb24uIElzIGRlcHJlY2F0ZWQgYW5kIHdpbGwgYmUgcmVtb3ZlZCBpbiB0aGUgbmV4dCBtYWpvciB2ZXJzaW9uLlxuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKHcsIHd0aW1lb3V0TVMsIGpvdXJuYWwsIGZzeW5jKSB7XG4gICAgICAgIGlmICh3ICE9IG51bGwpIHtcbiAgICAgICAgICAgIGlmICghTnVtYmVyLmlzTmFOKE51bWJlcih3KSkpIHtcbiAgICAgICAgICAgICAgICB0aGlzLncgPSBOdW1iZXIodyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICB0aGlzLncgPSB3O1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmICh3dGltZW91dE1TICE9IG51bGwpIHtcbiAgICAgICAgICAgIHRoaXMud3RpbWVvdXRNUyA9IHRoaXMud3RpbWVvdXQgPSB3dGltZW91dE1TO1xuICAgICAgICB9XG4gICAgICAgIGlmIChqb3VybmFsICE9IG51bGwpIHtcbiAgICAgICAgICAgIHRoaXMuam91cm5hbCA9IHRoaXMuaiA9IGpvdXJuYWw7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGZzeW5jICE9IG51bGwpIHtcbiAgICAgICAgICAgIHRoaXMuam91cm5hbCA9IHRoaXMuaiA9IGZzeW5jID8gdHJ1ZSA6IGZhbHNlO1xuICAgICAgICB9XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEFwcGx5IGEgd3JpdGUgY29uY2VybiB0byBhIGNvbW1hbmQgZG9jdW1lbnQuIFdpbGwgbW9kaWZ5IGFuZCByZXR1cm4gdGhlIGNvbW1hbmQuXG4gICAgICovXG4gICAgc3RhdGljIGFwcGx5KGNvbW1hbmQsIHdyaXRlQ29uY2Vybikge1xuICAgICAgICBjb25zdCB3YyA9IHt9O1xuICAgICAgICAvLyBUaGUgd3JpdGUgY29uY2VybiBkb2N1bWVudCBzZW50IHRvIHRoZSBzZXJ2ZXIgaGFzIHcvd3RpbWVvdXQvaiBmaWVsZHMuXG4gICAgICAgIGlmICh3cml0ZUNvbmNlcm4udyAhPSBudWxsKVxuICAgICAgICAgICAgd2MudyA9IHdyaXRlQ29uY2Vybi53O1xuICAgICAgICBpZiAod3JpdGVDb25jZXJuLnd0aW1lb3V0TVMgIT0gbnVsbClcbiAgICAgICAgICAgIHdjLnd0aW1lb3V0ID0gd3JpdGVDb25jZXJuLnd0aW1lb3V0TVM7XG4gICAgICAgIGlmICh3cml0ZUNvbmNlcm4uam91cm5hbCAhPSBudWxsKVxuICAgICAgICAgICAgd2MuaiA9IHdyaXRlQ29uY2Vybi5qO1xuICAgICAgICBjb21tYW5kLndyaXRlQ29uY2VybiA9IHdjO1xuICAgICAgICByZXR1cm4gY29tbWFuZDtcbiAgICB9XG4gICAgLyoqIENvbnN0cnVjdCBhIFdyaXRlQ29uY2VybiBnaXZlbiBhbiBvcHRpb25zIG9iamVjdC4gKi9cbiAgICBzdGF0aWMgZnJvbU9wdGlvbnMob3B0aW9ucywgaW5oZXJpdCkge1xuICAgICAgICBpZiAob3B0aW9ucyA9PSBudWxsKVxuICAgICAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICAgICAgaW5oZXJpdCA9IGluaGVyaXQgPz8ge307XG4gICAgICAgIGxldCBvcHRzO1xuICAgICAgICBpZiAodHlwZW9mIG9wdGlvbnMgPT09ICdzdHJpbmcnIHx8IHR5cGVvZiBvcHRpb25zID09PSAnbnVtYmVyJykge1xuICAgICAgICAgICAgb3B0cyA9IHsgdzogb3B0aW9ucyB9O1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKG9wdGlvbnMgaW5zdGFuY2VvZiBXcml0ZUNvbmNlcm4pIHtcbiAgICAgICAgICAgIG9wdHMgPSBvcHRpb25zO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgb3B0cyA9IG9wdGlvbnMud3JpdGVDb25jZXJuO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHBhcmVudE9wdHMgPSBpbmhlcml0IGluc3RhbmNlb2YgV3JpdGVDb25jZXJuID8gaW5oZXJpdCA6IGluaGVyaXQud3JpdGVDb25jZXJuO1xuICAgICAgICBjb25zdCB7IHcgPSB1bmRlZmluZWQsIHd0aW1lb3V0ID0gdW5kZWZpbmVkLCBqID0gdW5kZWZpbmVkLCBmc3luYyA9IHVuZGVmaW5lZCwgam91cm5hbCA9IHVuZGVmaW5lZCwgd3RpbWVvdXRNUyA9IHVuZGVmaW5lZCB9ID0ge1xuICAgICAgICAgICAgLi4ucGFyZW50T3B0cyxcbiAgICAgICAgICAgIC4uLm9wdHNcbiAgICAgICAgfTtcbiAgICAgICAgaWYgKHcgIT0gbnVsbCB8fFxuICAgICAgICAgICAgd3RpbWVvdXQgIT0gbnVsbCB8fFxuICAgICAgICAgICAgd3RpbWVvdXRNUyAhPSBudWxsIHx8XG4gICAgICAgICAgICBqICE9IG51bGwgfHxcbiAgICAgICAgICAgIGpvdXJuYWwgIT0gbnVsbCB8fFxuICAgICAgICAgICAgZnN5bmMgIT0gbnVsbCkge1xuICAgICAgICAgICAgcmV0dXJuIG5ldyBXcml0ZUNvbmNlcm4odywgd3RpbWVvdXQgPz8gd3RpbWVvdXRNUywgaiA/PyBqb3VybmFsLCBmc3luYyk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICB9XG59XG5leHBvcnRzLldyaXRlQ29uY2VybiA9IFdyaXRlQ29uY2Vybjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXdyaXRlX2NvbmNlcm4uanMubWFwIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiV3JpdGVDb25jZXJuIiwiV1JJVEVfQ09OQ0VSTl9LRVlTIiwiY29uc3RydWN0b3IiLCJ3Iiwid3RpbWVvdXRNUyIsImpvdXJuYWwiLCJmc3luYyIsIk51bWJlciIsImlzTmFOIiwid3RpbWVvdXQiLCJqIiwiYXBwbHkiLCJjb21tYW5kIiwid3JpdGVDb25jZXJuIiwid2MiLCJmcm9tT3B0aW9ucyIsIm9wdGlvbnMiLCJpbmhlcml0IiwidW5kZWZpbmVkIiwib3B0cyIsInBhcmVudE9wdHMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongodb/lib/write_concern.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongodb/package.json":
/*!*******************************************!*\
  !*** ./node_modules/mongodb/package.json ***!
  \*******************************************/
/***/ ((module) => {

module.exports = JSON.parse('{"name":"mongodb","version":"6.3.0","description":"The official MongoDB driver for Node.js","main":"lib/index.js","files":["lib","src","etc/prepare.js","mongodb.d.ts","tsconfig.json"],"types":"mongodb.d.ts","repository":{"type":"git","url":"git@github.com:mongodb/node-mongodb-native.git"},"keywords":["mongodb","driver","official"],"author":{"name":"The MongoDB NodeJS Team","email":"dbx-node@mongodb.com"},"dependencies":{"@mongodb-js/saslprep":"^1.1.0","bson":"^6.2.0","mongodb-connection-string-url":"^3.0.0"},"peerDependencies":{"@aws-sdk/credential-providers":"^3.188.0","@mongodb-js/zstd":"^1.1.0","gcp-metadata":"^5.2.0","kerberos":"^2.0.1","mongodb-client-encryption":">=6.0.0 <7","snappy":"^7.2.2","socks":"^2.7.1"},"peerDependenciesMeta":{"@aws-sdk/credential-providers":{"optional":true},"@mongodb-js/zstd":{"optional":true},"kerberos":{"optional":true},"snappy":{"optional":true},"mongodb-client-encryption":{"optional":true},"gcp-metadata":{"optional":true},"socks":{"optional":true}},"devDependencies":{"@iarna/toml":"^2.2.5","@istanbuljs/nyc-config-typescript":"^1.0.2","@microsoft/api-extractor":"^7.36.4","@microsoft/tsdoc-config":"^0.16.2","@mongodb-js/zstd":"^1.1.0","@octokit/core":"^4.2.4","@types/chai":"^4.3.5","@types/chai-subset":"^1.3.3","@types/express":"^4.17.17","@types/kerberos":"^1.1.2","@types/mocha":"^10.0.1","@types/node":"^20.5.9","@types/saslprep":"^1.0.1","@types/semver":"^7.5.0","@types/sinon":"^10.0.16","@types/sinon-chai":"^3.2.9","@types/whatwg-url":"^11.0.0","@typescript-eslint/eslint-plugin":"^5.62.0","@typescript-eslint/parser":"^5.62.0","chai":"^4.3.7","chai-subset":"^1.6.0","chalk":"^4.1.2","eslint":"^8.48.0","eslint-config-prettier":"^8.10.0","eslint-plugin-import":"^2.28.1","eslint-plugin-prettier":"^4.2.1","eslint-plugin-simple-import-sort":"^10.0.0","eslint-plugin-tsdoc":"^0.2.17","eslint-plugin-unused-imports":"^2.0.0","express":"^4.18.2","gcp-metadata":"^5.2.0","js-yaml":"^4.1.0","mocha":"^10.2.0","mocha-sinon":"^2.1.2","mongodb-client-encryption":"^6.0.0","mongodb-legacy":"^6.0.0","nyc":"^15.1.0","prettier":"^2.8.8","semver":"^7.5.4","sinon":"^15.2.0","sinon-chai":"^3.7.0","snappy":"^7.2.2","socks":"^2.7.1","source-map-support":"^0.5.21","ts-node":"^10.9.1","tsd":"^0.28.1","typescript":"^5.0.4","typescript-cached-transpile":"^0.0.6","v8-heapsnapshot":"^1.3.1","yargs":"^17.7.2"},"license":"Apache-2.0","engines":{"node":">=16.20.1"},"bugs":{"url":"https://jira.mongodb.org/projects/NODE/issues/"},"homepage":"https://github.com/mongodb/node-mongodb-native","scripts":{"build:evergreen":"node .evergreen/generate_evergreen_tasks.js","build:ts":"node ./node_modules/typescript/bin/tsc","build:dts":"npm run build:ts && api-extractor run && node etc/clean_definition_files.cjs && eslint mongodb.d.ts --fix","build:docs":"./etc/docs/build.ts","build:typedoc":"typedoc","build:nightly":"node ./.github/scripts/nightly.mjs","check:bench":"node test/benchmarks/driverBench","check:coverage":"nyc npm run test:all","check:integration-coverage":"nyc npm run check:test","check:lambda":"mocha --config test/mocha_lambda.json test/integration/node-specific/examples/handler.test.js","check:lambda:aws":"mocha --config test/mocha_lambda.json test/integration/node-specific/examples/aws_handler.test.js","check:lint":"npm run build:dts && npm run check:dts && npm run check:eslint && npm run check:tsd","check:eslint":"eslint -v && eslint --max-warnings=0 --ext \'.js,.ts\' src test","check:tsd":"tsd --version && tsd","check:dependencies":"mocha test/action/dependency.test.ts","check:dts":"node ./node_modules/typescript/bin/tsc --noEmit mongodb.d.ts && tsd","check:search-indexes":"nyc mocha --config test/mocha_mongodb.json test/manual/search-index-management.prose.test.ts","check:test":"mocha --config test/mocha_mongodb.json test/integration","check:unit":"mocha test/unit","check:ts":"node ./node_modules/typescript/bin/tsc -v && node ./node_modules/typescript/bin/tsc --noEmit","check:atlas":"mocha --config test/manual/mocharc.json test/manual/atlas_connectivity.test.js","check:drivers-atlas-testing":"mocha --config test/mocha_mongodb.json test/atlas/drivers_atlas_testing.test.ts","check:adl":"mocha --config test/mocha_mongodb.json test/manual/atlas-data-lake-testing","check:aws":"nyc mocha --config test/mocha_mongodb.json test/integration/auth/mongodb_aws.test.ts","check:oidc":"mocha --config test/mocha_mongodb.json test/manual/mongodb_oidc.prose.test.ts","check:oidc-azure":"mocha --config test/mocha_mongodb.json test/integration/auth/mongodb_oidc_azure.prose.test.ts","check:ocsp":"mocha --config test/manual/mocharc.json test/manual/ocsp_support.test.js","check:kerberos":"nyc mocha --config test/manual/mocharc.json test/manual/kerberos.test.ts","check:tls":"mocha --config test/manual/mocharc.json test/manual/tls_support.test.ts","check:ldap":"nyc mocha --config test/manual/mocharc.json test/manual/ldap.test.js","check:socks5":"mocha --config test/manual/mocharc.json test/manual/socks5.test.ts","check:csfle":"mocha --config test/mocha_mongodb.json test/integration/client-side-encryption","check:snappy":"mocha test/unit/assorted/snappy.test.js","fix:eslint":"npm run check:eslint -- --fix","prepare":"node etc/prepare.js","preview:docs":"ts-node etc/docs/preview.ts","test":"npm run check:lint && npm run test:all","test:all":"npm run check:unit && npm run check:test","update:docs":"npm run build:docs -- --yes"},"tsd":{"directory":"test/types","compilerOptions":{"strict":true,"target":"esnext","module":"commonjs","moduleResolution":"node"}}}');

/***/ })

};
;