"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/whatwg-url";
exports.ids = ["vendor-chunks/whatwg-url"];
exports.modules = {

/***/ "(ssr)/./node_modules/whatwg-url/index.js":
/*!******************************************!*\
  !*** ./node_modules/whatwg-url/index.js ***!
  \******************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nconst { URL, URLSearchParams } = __webpack_require__(/*! ./webidl2js-wrapper */ \"(ssr)/./node_modules/whatwg-url/webidl2js-wrapper.js\");\nconst urlStateMachine = __webpack_require__(/*! ./lib/url-state-machine */ \"(ssr)/./node_modules/whatwg-url/lib/url-state-machine.js\");\nconst percentEncoding = __webpack_require__(/*! ./lib/percent-encoding */ \"(ssr)/./node_modules/whatwg-url/lib/percent-encoding.js\");\nconst sharedGlobalObject = {\n    Array,\n    Object,\n    Promise,\n    String,\n    TypeError\n};\nURL.install(sharedGlobalObject, [\n    \"Window\"\n]);\nURLSearchParams.install(sharedGlobalObject, [\n    \"Window\"\n]);\nexports.URL = sharedGlobalObject.URL;\nexports.URLSearchParams = sharedGlobalObject.URLSearchParams;\nexports.parseURL = urlStateMachine.parseURL;\nexports.basicURLParse = urlStateMachine.basicURLParse;\nexports.serializeURL = urlStateMachine.serializeURL;\nexports.serializePath = urlStateMachine.serializePath;\nexports.serializeHost = urlStateMachine.serializeHost;\nexports.serializeInteger = urlStateMachine.serializeInteger;\nexports.serializeURLOrigin = urlStateMachine.serializeURLOrigin;\nexports.setTheUsername = urlStateMachine.setTheUsername;\nexports.setThePassword = urlStateMachine.setThePassword;\nexports.cannotHaveAUsernamePasswordPort = urlStateMachine.cannotHaveAUsernamePasswordPort;\nexports.hasAnOpaquePath = urlStateMachine.hasAnOpaquePath;\nexports.percentDecodeString = percentEncoding.percentDecodeString;\nexports.percentDecodeBytes = percentEncoding.percentDecodeBytes;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvd2hhdHdnLXVybC9pbmRleC5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUViLE1BQU0sRUFBRUEsR0FBRyxFQUFFQyxlQUFlLEVBQUUsR0FBR0MsbUJBQU9BLENBQUMsaUZBQXFCO0FBQzlELE1BQU1DLGtCQUFrQkQsbUJBQU9BLENBQUMseUZBQXlCO0FBQ3pELE1BQU1FLGtCQUFrQkYsbUJBQU9BLENBQUMsdUZBQXdCO0FBRXhELE1BQU1HLHFCQUFxQjtJQUFFQztJQUFPQztJQUFRQztJQUFTQztJQUFRQztBQUFVO0FBQ3ZFVixJQUFJVyxPQUFPLENBQUNOLG9CQUFvQjtJQUFDO0NBQVM7QUFDMUNKLGdCQUFnQlUsT0FBTyxDQUFDTixvQkFBb0I7SUFBQztDQUFTO0FBRXRETyxXQUFXLEdBQUdQLG1CQUFtQkwsR0FBRztBQUNwQ1ksdUJBQXVCLEdBQUdQLG1CQUFtQkosZUFBZTtBQUU1RFcsZ0JBQWdCLEdBQUdULGdCQUFnQlUsUUFBUTtBQUMzQ0QscUJBQXFCLEdBQUdULGdCQUFnQlcsYUFBYTtBQUNyREYsb0JBQW9CLEdBQUdULGdCQUFnQlksWUFBWTtBQUNuREgscUJBQXFCLEdBQUdULGdCQUFnQmEsYUFBYTtBQUNyREoscUJBQXFCLEdBQUdULGdCQUFnQmMsYUFBYTtBQUNyREwsd0JBQXdCLEdBQUdULGdCQUFnQmUsZ0JBQWdCO0FBQzNETiwwQkFBMEIsR0FBR1QsZ0JBQWdCZ0Isa0JBQWtCO0FBQy9EUCxzQkFBc0IsR0FBR1QsZ0JBQWdCaUIsY0FBYztBQUN2RFIsc0JBQXNCLEdBQUdULGdCQUFnQmtCLGNBQWM7QUFDdkRULHVDQUF1QyxHQUFHVCxnQkFBZ0JtQiwrQkFBK0I7QUFDekZWLHVCQUF1QixHQUFHVCxnQkFBZ0JvQixlQUFlO0FBRXpEWCwyQkFBMkIsR0FBR1IsZ0JBQWdCb0IsbUJBQW1CO0FBQ2pFWiwwQkFBMEIsR0FBR1IsZ0JBQWdCcUIsa0JBQWtCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYmxvZy1hcHBsaWNhdGlvbi8uL25vZGVfbW9kdWxlcy93aGF0d2ctdXJsL2luZGV4LmpzPzZjNzgiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbmNvbnN0IHsgVVJMLCBVUkxTZWFyY2hQYXJhbXMgfSA9IHJlcXVpcmUoXCIuL3dlYmlkbDJqcy13cmFwcGVyXCIpO1xuY29uc3QgdXJsU3RhdGVNYWNoaW5lID0gcmVxdWlyZShcIi4vbGliL3VybC1zdGF0ZS1tYWNoaW5lXCIpO1xuY29uc3QgcGVyY2VudEVuY29kaW5nID0gcmVxdWlyZShcIi4vbGliL3BlcmNlbnQtZW5jb2RpbmdcIik7XG5cbmNvbnN0IHNoYXJlZEdsb2JhbE9iamVjdCA9IHsgQXJyYXksIE9iamVjdCwgUHJvbWlzZSwgU3RyaW5nLCBUeXBlRXJyb3IgfTtcblVSTC5pbnN0YWxsKHNoYXJlZEdsb2JhbE9iamVjdCwgW1wiV2luZG93XCJdKTtcblVSTFNlYXJjaFBhcmFtcy5pbnN0YWxsKHNoYXJlZEdsb2JhbE9iamVjdCwgW1wiV2luZG93XCJdKTtcblxuZXhwb3J0cy5VUkwgPSBzaGFyZWRHbG9iYWxPYmplY3QuVVJMO1xuZXhwb3J0cy5VUkxTZWFyY2hQYXJhbXMgPSBzaGFyZWRHbG9iYWxPYmplY3QuVVJMU2VhcmNoUGFyYW1zO1xuXG5leHBvcnRzLnBhcnNlVVJMID0gdXJsU3RhdGVNYWNoaW5lLnBhcnNlVVJMO1xuZXhwb3J0cy5iYXNpY1VSTFBhcnNlID0gdXJsU3RhdGVNYWNoaW5lLmJhc2ljVVJMUGFyc2U7XG5leHBvcnRzLnNlcmlhbGl6ZVVSTCA9IHVybFN0YXRlTWFjaGluZS5zZXJpYWxpemVVUkw7XG5leHBvcnRzLnNlcmlhbGl6ZVBhdGggPSB1cmxTdGF0ZU1hY2hpbmUuc2VyaWFsaXplUGF0aDtcbmV4cG9ydHMuc2VyaWFsaXplSG9zdCA9IHVybFN0YXRlTWFjaGluZS5zZXJpYWxpemVIb3N0O1xuZXhwb3J0cy5zZXJpYWxpemVJbnRlZ2VyID0gdXJsU3RhdGVNYWNoaW5lLnNlcmlhbGl6ZUludGVnZXI7XG5leHBvcnRzLnNlcmlhbGl6ZVVSTE9yaWdpbiA9IHVybFN0YXRlTWFjaGluZS5zZXJpYWxpemVVUkxPcmlnaW47XG5leHBvcnRzLnNldFRoZVVzZXJuYW1lID0gdXJsU3RhdGVNYWNoaW5lLnNldFRoZVVzZXJuYW1lO1xuZXhwb3J0cy5zZXRUaGVQYXNzd29yZCA9IHVybFN0YXRlTWFjaGluZS5zZXRUaGVQYXNzd29yZDtcbmV4cG9ydHMuY2Fubm90SGF2ZUFVc2VybmFtZVBhc3N3b3JkUG9ydCA9IHVybFN0YXRlTWFjaGluZS5jYW5ub3RIYXZlQVVzZXJuYW1lUGFzc3dvcmRQb3J0O1xuZXhwb3J0cy5oYXNBbk9wYXF1ZVBhdGggPSB1cmxTdGF0ZU1hY2hpbmUuaGFzQW5PcGFxdWVQYXRoO1xuXG5leHBvcnRzLnBlcmNlbnREZWNvZGVTdHJpbmcgPSBwZXJjZW50RW5jb2RpbmcucGVyY2VudERlY29kZVN0cmluZztcbmV4cG9ydHMucGVyY2VudERlY29kZUJ5dGVzID0gcGVyY2VudEVuY29kaW5nLnBlcmNlbnREZWNvZGVCeXRlcztcbiJdLCJuYW1lcyI6WyJVUkwiLCJVUkxTZWFyY2hQYXJhbXMiLCJyZXF1aXJlIiwidXJsU3RhdGVNYWNoaW5lIiwicGVyY2VudEVuY29kaW5nIiwic2hhcmVkR2xvYmFsT2JqZWN0IiwiQXJyYXkiLCJPYmplY3QiLCJQcm9taXNlIiwiU3RyaW5nIiwiVHlwZUVycm9yIiwiaW5zdGFsbCIsImV4cG9ydHMiLCJwYXJzZVVSTCIsImJhc2ljVVJMUGFyc2UiLCJzZXJpYWxpemVVUkwiLCJzZXJpYWxpemVQYXRoIiwic2VyaWFsaXplSG9zdCIsInNlcmlhbGl6ZUludGVnZXIiLCJzZXJpYWxpemVVUkxPcmlnaW4iLCJzZXRUaGVVc2VybmFtZSIsInNldFRoZVBhc3N3b3JkIiwiY2Fubm90SGF2ZUFVc2VybmFtZVBhc3N3b3JkUG9ydCIsImhhc0FuT3BhcXVlUGF0aCIsInBlcmNlbnREZWNvZGVTdHJpbmciLCJwZXJjZW50RGVjb2RlQnl0ZXMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/whatwg-url/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/whatwg-url/lib/Function.js":
/*!*************************************************!*\
  !*** ./node_modules/whatwg-url/lib/Function.js ***!
  \*************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nconst conversions = __webpack_require__(/*! webidl-conversions */ \"(ssr)/./node_modules/whatwg-url/node_modules/webidl-conversions/lib/index.js\");\nconst utils = __webpack_require__(/*! ./utils.js */ \"(ssr)/./node_modules/whatwg-url/lib/utils.js\");\nexports.convert = (globalObject, value, { context = \"The provided value\" } = {})=>{\n    if (typeof value !== \"function\") {\n        throw new globalObject.TypeError(context + \" is not a function\");\n    }\n    function invokeTheCallbackFunction(...args) {\n        const thisArg = utils.tryWrapperForImpl(this);\n        let callResult;\n        for(let i = 0; i < args.length; i++){\n            args[i] = utils.tryWrapperForImpl(args[i]);\n        }\n        callResult = Reflect.apply(value, thisArg, args);\n        callResult = conversions[\"any\"](callResult, {\n            context: context,\n            globals: globalObject\n        });\n        return callResult;\n    }\n    invokeTheCallbackFunction.construct = (...args)=>{\n        for(let i = 0; i < args.length; i++){\n            args[i] = utils.tryWrapperForImpl(args[i]);\n        }\n        let callResult = Reflect.construct(value, args);\n        callResult = conversions[\"any\"](callResult, {\n            context: context,\n            globals: globalObject\n        });\n        return callResult;\n    };\n    invokeTheCallbackFunction[utils.wrapperSymbol] = value;\n    invokeTheCallbackFunction.objectReference = value;\n    return invokeTheCallbackFunction;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvd2hhdHdnLXVybC9saWIvRnVuY3Rpb24uanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFFYixNQUFNQSxjQUFjQyxtQkFBT0EsQ0FBQyx3R0FBb0I7QUFDaEQsTUFBTUMsUUFBUUQsbUJBQU9BLENBQUMsZ0VBQVk7QUFFbENFLGVBQWUsR0FBRyxDQUFDRSxjQUFjQyxPQUFPLEVBQUVDLFVBQVUsb0JBQW9CLEVBQUUsR0FBRyxDQUFDLENBQUM7SUFDN0UsSUFBSSxPQUFPRCxVQUFVLFlBQVk7UUFDL0IsTUFBTSxJQUFJRCxhQUFhRyxTQUFTLENBQUNELFVBQVU7SUFDN0M7SUFFQSxTQUFTRSwwQkFBMEIsR0FBR0MsSUFBSTtRQUN4QyxNQUFNQyxVQUFVVCxNQUFNVSxpQkFBaUIsQ0FBQyxJQUFJO1FBQzVDLElBQUlDO1FBRUosSUFBSyxJQUFJQyxJQUFJLEdBQUdBLElBQUlKLEtBQUtLLE1BQU0sRUFBRUQsSUFBSztZQUNwQ0osSUFBSSxDQUFDSSxFQUFFLEdBQUdaLE1BQU1VLGlCQUFpQixDQUFDRixJQUFJLENBQUNJLEVBQUU7UUFDM0M7UUFFQUQsYUFBYUcsUUFBUUMsS0FBSyxDQUFDWCxPQUFPSyxTQUFTRDtRQUUzQ0csYUFBYWIsV0FBVyxDQUFDLE1BQU0sQ0FBQ2EsWUFBWTtZQUFFTixTQUFTQTtZQUFTVyxTQUFTYjtRQUFhO1FBRXRGLE9BQU9RO0lBQ1Q7SUFFQUosMEJBQTBCVSxTQUFTLEdBQUcsQ0FBQyxHQUFHVDtRQUN4QyxJQUFLLElBQUlJLElBQUksR0FBR0EsSUFBSUosS0FBS0ssTUFBTSxFQUFFRCxJQUFLO1lBQ3BDSixJQUFJLENBQUNJLEVBQUUsR0FBR1osTUFBTVUsaUJBQWlCLENBQUNGLElBQUksQ0FBQ0ksRUFBRTtRQUMzQztRQUVBLElBQUlELGFBQWFHLFFBQVFHLFNBQVMsQ0FBQ2IsT0FBT0k7UUFFMUNHLGFBQWFiLFdBQVcsQ0FBQyxNQUFNLENBQUNhLFlBQVk7WUFBRU4sU0FBU0E7WUFBU1csU0FBU2I7UUFBYTtRQUV0RixPQUFPUTtJQUNUO0lBRUFKLHlCQUF5QixDQUFDUCxNQUFNa0IsYUFBYSxDQUFDLEdBQUdkO0lBQ2pERywwQkFBMEJZLGVBQWUsR0FBR2Y7SUFFNUMsT0FBT0c7QUFDVCIsInNvdXJjZXMiOlsid2VicGFjazovL2Jsb2ctYXBwbGljYXRpb24vLi9ub2RlX21vZHVsZXMvd2hhdHdnLXVybC9saWIvRnVuY3Rpb24uanM/MGU3YyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuY29uc3QgY29udmVyc2lvbnMgPSByZXF1aXJlKFwid2ViaWRsLWNvbnZlcnNpb25zXCIpO1xuY29uc3QgdXRpbHMgPSByZXF1aXJlKFwiLi91dGlscy5qc1wiKTtcblxuZXhwb3J0cy5jb252ZXJ0ID0gKGdsb2JhbE9iamVjdCwgdmFsdWUsIHsgY29udGV4dCA9IFwiVGhlIHByb3ZpZGVkIHZhbHVlXCIgfSA9IHt9KSA9PiB7XG4gIGlmICh0eXBlb2YgdmFsdWUgIT09IFwiZnVuY3Rpb25cIikge1xuICAgIHRocm93IG5ldyBnbG9iYWxPYmplY3QuVHlwZUVycm9yKGNvbnRleHQgKyBcIiBpcyBub3QgYSBmdW5jdGlvblwiKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGludm9rZVRoZUNhbGxiYWNrRnVuY3Rpb24oLi4uYXJncykge1xuICAgIGNvbnN0IHRoaXNBcmcgPSB1dGlscy50cnlXcmFwcGVyRm9ySW1wbCh0aGlzKTtcbiAgICBsZXQgY2FsbFJlc3VsdDtcblxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgYXJncy5sZW5ndGg7IGkrKykge1xuICAgICAgYXJnc1tpXSA9IHV0aWxzLnRyeVdyYXBwZXJGb3JJbXBsKGFyZ3NbaV0pO1xuICAgIH1cblxuICAgIGNhbGxSZXN1bHQgPSBSZWZsZWN0LmFwcGx5KHZhbHVlLCB0aGlzQXJnLCBhcmdzKTtcblxuICAgIGNhbGxSZXN1bHQgPSBjb252ZXJzaW9uc1tcImFueVwiXShjYWxsUmVzdWx0LCB7IGNvbnRleHQ6IGNvbnRleHQsIGdsb2JhbHM6IGdsb2JhbE9iamVjdCB9KTtcblxuICAgIHJldHVybiBjYWxsUmVzdWx0O1xuICB9XG5cbiAgaW52b2tlVGhlQ2FsbGJhY2tGdW5jdGlvbi5jb25zdHJ1Y3QgPSAoLi4uYXJncykgPT4ge1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgYXJncy5sZW5ndGg7IGkrKykge1xuICAgICAgYXJnc1tpXSA9IHV0aWxzLnRyeVdyYXBwZXJGb3JJbXBsKGFyZ3NbaV0pO1xuICAgIH1cblxuICAgIGxldCBjYWxsUmVzdWx0ID0gUmVmbGVjdC5jb25zdHJ1Y3QodmFsdWUsIGFyZ3MpO1xuXG4gICAgY2FsbFJlc3VsdCA9IGNvbnZlcnNpb25zW1wiYW55XCJdKGNhbGxSZXN1bHQsIHsgY29udGV4dDogY29udGV4dCwgZ2xvYmFsczogZ2xvYmFsT2JqZWN0IH0pO1xuXG4gICAgcmV0dXJuIGNhbGxSZXN1bHQ7XG4gIH07XG5cbiAgaW52b2tlVGhlQ2FsbGJhY2tGdW5jdGlvblt1dGlscy53cmFwcGVyU3ltYm9sXSA9IHZhbHVlO1xuICBpbnZva2VUaGVDYWxsYmFja0Z1bmN0aW9uLm9iamVjdFJlZmVyZW5jZSA9IHZhbHVlO1xuXG4gIHJldHVybiBpbnZva2VUaGVDYWxsYmFja0Z1bmN0aW9uO1xufTtcbiJdLCJuYW1lcyI6WyJjb252ZXJzaW9ucyIsInJlcXVpcmUiLCJ1dGlscyIsImV4cG9ydHMiLCJjb252ZXJ0IiwiZ2xvYmFsT2JqZWN0IiwidmFsdWUiLCJjb250ZXh0IiwiVHlwZUVycm9yIiwiaW52b2tlVGhlQ2FsbGJhY2tGdW5jdGlvbiIsImFyZ3MiLCJ0aGlzQXJnIiwidHJ5V3JhcHBlckZvckltcGwiLCJjYWxsUmVzdWx0IiwiaSIsImxlbmd0aCIsIlJlZmxlY3QiLCJhcHBseSIsImdsb2JhbHMiLCJjb25zdHJ1Y3QiLCJ3cmFwcGVyU3ltYm9sIiwib2JqZWN0UmVmZXJlbmNlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/whatwg-url/lib/Function.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/whatwg-url/lib/URL-impl.js":
/*!*************************************************!*\
  !*** ./node_modules/whatwg-url/lib/URL-impl.js ***!
  \*************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nconst usm = __webpack_require__(/*! ./url-state-machine */ \"(ssr)/./node_modules/whatwg-url/lib/url-state-machine.js\");\nconst urlencoded = __webpack_require__(/*! ./urlencoded */ \"(ssr)/./node_modules/whatwg-url/lib/urlencoded.js\");\nconst URLSearchParams = __webpack_require__(/*! ./URLSearchParams */ \"(ssr)/./node_modules/whatwg-url/lib/URLSearchParams.js\");\nexports.implementation = class URLImpl {\n    // Unlike the spec, we duplicate some code between the constructor and canParse, because we want to give useful error\n    // messages in the constructor that distinguish between the different causes of failure.\n    constructor(globalObject, constructorArgs){\n        const url = constructorArgs[0];\n        const base = constructorArgs[1];\n        let parsedBase = null;\n        if (base !== undefined) {\n            parsedBase = usm.basicURLParse(base);\n            if (parsedBase === null) {\n                throw new TypeError(`Invalid base URL: ${base}`);\n            }\n        }\n        const parsedURL = usm.basicURLParse(url, {\n            baseURL: parsedBase\n        });\n        if (parsedURL === null) {\n            throw new TypeError(`Invalid URL: ${url}`);\n        }\n        const query = parsedURL.query !== null ? parsedURL.query : \"\";\n        this._url = parsedURL;\n        // We cannot invoke the \"new URLSearchParams object\" algorithm without going through the constructor, which strips\n        // question mark by default. Therefore the doNotStripQMark hack is used.\n        this._query = URLSearchParams.createImpl(globalObject, [\n            query\n        ], {\n            doNotStripQMark: true\n        });\n        this._query._url = this;\n    }\n    static canParse(url, base) {\n        let parsedBase = null;\n        if (base !== undefined) {\n            parsedBase = usm.basicURLParse(base);\n            if (parsedBase === null) {\n                return false;\n            }\n        }\n        const parsedURL = usm.basicURLParse(url, {\n            baseURL: parsedBase\n        });\n        if (parsedURL === null) {\n            return false;\n        }\n        return true;\n    }\n    get href() {\n        return usm.serializeURL(this._url);\n    }\n    set href(v) {\n        const parsedURL = usm.basicURLParse(v);\n        if (parsedURL === null) {\n            throw new TypeError(`Invalid URL: ${v}`);\n        }\n        this._url = parsedURL;\n        this._query._list.splice(0);\n        const { query } = parsedURL;\n        if (query !== null) {\n            this._query._list = urlencoded.parseUrlencodedString(query);\n        }\n    }\n    get origin() {\n        return usm.serializeURLOrigin(this._url);\n    }\n    get protocol() {\n        return `${this._url.scheme}:`;\n    }\n    set protocol(v) {\n        usm.basicURLParse(`${v}:`, {\n            url: this._url,\n            stateOverride: \"scheme start\"\n        });\n    }\n    get username() {\n        return this._url.username;\n    }\n    set username(v) {\n        if (usm.cannotHaveAUsernamePasswordPort(this._url)) {\n            return;\n        }\n        usm.setTheUsername(this._url, v);\n    }\n    get password() {\n        return this._url.password;\n    }\n    set password(v) {\n        if (usm.cannotHaveAUsernamePasswordPort(this._url)) {\n            return;\n        }\n        usm.setThePassword(this._url, v);\n    }\n    get host() {\n        const url = this._url;\n        if (url.host === null) {\n            return \"\";\n        }\n        if (url.port === null) {\n            return usm.serializeHost(url.host);\n        }\n        return `${usm.serializeHost(url.host)}:${usm.serializeInteger(url.port)}`;\n    }\n    set host(v) {\n        if (usm.hasAnOpaquePath(this._url)) {\n            return;\n        }\n        usm.basicURLParse(v, {\n            url: this._url,\n            stateOverride: \"host\"\n        });\n    }\n    get hostname() {\n        if (this._url.host === null) {\n            return \"\";\n        }\n        return usm.serializeHost(this._url.host);\n    }\n    set hostname(v) {\n        if (usm.hasAnOpaquePath(this._url)) {\n            return;\n        }\n        usm.basicURLParse(v, {\n            url: this._url,\n            stateOverride: \"hostname\"\n        });\n    }\n    get port() {\n        if (this._url.port === null) {\n            return \"\";\n        }\n        return usm.serializeInteger(this._url.port);\n    }\n    set port(v) {\n        if (usm.cannotHaveAUsernamePasswordPort(this._url)) {\n            return;\n        }\n        if (v === \"\") {\n            this._url.port = null;\n        } else {\n            usm.basicURLParse(v, {\n                url: this._url,\n                stateOverride: \"port\"\n            });\n        }\n    }\n    get pathname() {\n        return usm.serializePath(this._url);\n    }\n    set pathname(v) {\n        if (usm.hasAnOpaquePath(this._url)) {\n            return;\n        }\n        this._url.path = [];\n        usm.basicURLParse(v, {\n            url: this._url,\n            stateOverride: \"path start\"\n        });\n    }\n    get search() {\n        if (this._url.query === null || this._url.query === \"\") {\n            return \"\";\n        }\n        return `?${this._url.query}`;\n    }\n    set search(v) {\n        const url = this._url;\n        if (v === \"\") {\n            url.query = null;\n            this._query._list = [];\n            this._potentiallyStripTrailingSpacesFromAnOpaquePath();\n            return;\n        }\n        const input = v[0] === \"?\" ? v.substring(1) : v;\n        url.query = \"\";\n        usm.basicURLParse(input, {\n            url,\n            stateOverride: \"query\"\n        });\n        this._query._list = urlencoded.parseUrlencodedString(input);\n    }\n    get searchParams() {\n        return this._query;\n    }\n    get hash() {\n        if (this._url.fragment === null || this._url.fragment === \"\") {\n            return \"\";\n        }\n        return `#${this._url.fragment}`;\n    }\n    set hash(v) {\n        if (v === \"\") {\n            this._url.fragment = null;\n            this._potentiallyStripTrailingSpacesFromAnOpaquePath();\n            return;\n        }\n        const input = v[0] === \"#\" ? v.substring(1) : v;\n        this._url.fragment = \"\";\n        usm.basicURLParse(input, {\n            url: this._url,\n            stateOverride: \"fragment\"\n        });\n    }\n    toJSON() {\n        return this.href;\n    }\n    _potentiallyStripTrailingSpacesFromAnOpaquePath() {\n        if (!usm.hasAnOpaquePath(this._url)) {\n            return;\n        }\n        if (this._url.fragment !== null) {\n            return;\n        }\n        if (this._url.query !== null) {\n            return;\n        }\n        this._url.path = this._url.path.replace(/\\u0020+$/u, \"\");\n    }\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/whatwg-url/lib/URL-impl.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/whatwg-url/lib/URL.js":
/*!********************************************!*\
  !*** ./node_modules/whatwg-url/lib/URL.js ***!
  \********************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nconst conversions = __webpack_require__(/*! webidl-conversions */ \"(ssr)/./node_modules/whatwg-url/node_modules/webidl-conversions/lib/index.js\");\nconst utils = __webpack_require__(/*! ./utils.js */ \"(ssr)/./node_modules/whatwg-url/lib/utils.js\");\nconst implSymbol = utils.implSymbol;\nconst ctorRegistrySymbol = utils.ctorRegistrySymbol;\nconst interfaceName = \"URL\";\nexports.is = (value)=>{\n    return utils.isObject(value) && utils.hasOwn(value, implSymbol) && value[implSymbol] instanceof Impl.implementation;\n};\nexports.isImpl = (value)=>{\n    return utils.isObject(value) && value instanceof Impl.implementation;\n};\nexports.convert = (globalObject, value, { context = \"The provided value\" } = {})=>{\n    if (exports.is(value)) {\n        return utils.implForWrapper(value);\n    }\n    throw new globalObject.TypeError(`${context} is not of type 'URL'.`);\n};\nfunction makeWrapper(globalObject, newTarget) {\n    let proto;\n    if (newTarget !== undefined) {\n        proto = newTarget.prototype;\n    }\n    if (!utils.isObject(proto)) {\n        proto = globalObject[ctorRegistrySymbol][\"URL\"].prototype;\n    }\n    return Object.create(proto);\n}\nexports.create = (globalObject, constructorArgs, privateData)=>{\n    const wrapper = makeWrapper(globalObject);\n    return exports.setup(wrapper, globalObject, constructorArgs, privateData);\n};\nexports.createImpl = (globalObject, constructorArgs, privateData)=>{\n    const wrapper = exports.create(globalObject, constructorArgs, privateData);\n    return utils.implForWrapper(wrapper);\n};\nexports._internalSetup = (wrapper, globalObject)=>{};\nexports.setup = (wrapper, globalObject, constructorArgs = [], privateData = {})=>{\n    privateData.wrapper = wrapper;\n    exports._internalSetup(wrapper, globalObject);\n    Object.defineProperty(wrapper, implSymbol, {\n        value: new Impl.implementation(globalObject, constructorArgs, privateData),\n        configurable: true\n    });\n    wrapper[implSymbol][utils.wrapperSymbol] = wrapper;\n    if (Impl.init) {\n        Impl.init(wrapper[implSymbol]);\n    }\n    return wrapper;\n};\nexports[\"new\"] = (globalObject, newTarget)=>{\n    const wrapper = makeWrapper(globalObject, newTarget);\n    exports._internalSetup(wrapper, globalObject);\n    Object.defineProperty(wrapper, implSymbol, {\n        value: Object.create(Impl.implementation.prototype),\n        configurable: true\n    });\n    wrapper[implSymbol][utils.wrapperSymbol] = wrapper;\n    if (Impl.init) {\n        Impl.init(wrapper[implSymbol]);\n    }\n    return wrapper[implSymbol];\n};\nconst exposed = new Set([\n    \"Window\",\n    \"Worker\"\n]);\nexports.install = (globalObject, globalNames)=>{\n    if (!globalNames.some((globalName)=>exposed.has(globalName))) {\n        return;\n    }\n    const ctorRegistry = utils.initCtorRegistry(globalObject);\n    class URL {\n        constructor(url){\n            if (arguments.length < 1) {\n                throw new globalObject.TypeError(`Failed to construct 'URL': 1 argument required, but only ${arguments.length} present.`);\n            }\n            const args = [];\n            {\n                let curArg = arguments[0];\n                curArg = conversions[\"USVString\"](curArg, {\n                    context: \"Failed to construct 'URL': parameter 1\",\n                    globals: globalObject\n                });\n                args.push(curArg);\n            }\n            {\n                let curArg = arguments[1];\n                if (curArg !== undefined) {\n                    curArg = conversions[\"USVString\"](curArg, {\n                        context: \"Failed to construct 'URL': parameter 2\",\n                        globals: globalObject\n                    });\n                }\n                args.push(curArg);\n            }\n            return exports.setup(Object.create(new.target.prototype), globalObject, args);\n        }\n        toJSON() {\n            const esValue = this !== null && this !== undefined ? this : globalObject;\n            if (!exports.is(esValue)) {\n                throw new globalObject.TypeError(\"'toJSON' called on an object that is not a valid instance of URL.\");\n            }\n            return esValue[implSymbol].toJSON();\n        }\n        get href() {\n            const esValue = this !== null && this !== undefined ? this : globalObject;\n            if (!exports.is(esValue)) {\n                throw new globalObject.TypeError(\"'get href' called on an object that is not a valid instance of URL.\");\n            }\n            return esValue[implSymbol][\"href\"];\n        }\n        set href(V) {\n            const esValue = this !== null && this !== undefined ? this : globalObject;\n            if (!exports.is(esValue)) {\n                throw new globalObject.TypeError(\"'set href' called on an object that is not a valid instance of URL.\");\n            }\n            V = conversions[\"USVString\"](V, {\n                context: \"Failed to set the 'href' property on 'URL': The provided value\",\n                globals: globalObject\n            });\n            esValue[implSymbol][\"href\"] = V;\n        }\n        toString() {\n            const esValue = this;\n            if (!exports.is(esValue)) {\n                throw new globalObject.TypeError(\"'toString' called on an object that is not a valid instance of URL.\");\n            }\n            return esValue[implSymbol][\"href\"];\n        }\n        get origin() {\n            const esValue = this !== null && this !== undefined ? this : globalObject;\n            if (!exports.is(esValue)) {\n                throw new globalObject.TypeError(\"'get origin' called on an object that is not a valid instance of URL.\");\n            }\n            return esValue[implSymbol][\"origin\"];\n        }\n        get protocol() {\n            const esValue = this !== null && this !== undefined ? this : globalObject;\n            if (!exports.is(esValue)) {\n                throw new globalObject.TypeError(\"'get protocol' called on an object that is not a valid instance of URL.\");\n            }\n            return esValue[implSymbol][\"protocol\"];\n        }\n        set protocol(V) {\n            const esValue = this !== null && this !== undefined ? this : globalObject;\n            if (!exports.is(esValue)) {\n                throw new globalObject.TypeError(\"'set protocol' called on an object that is not a valid instance of URL.\");\n            }\n            V = conversions[\"USVString\"](V, {\n                context: \"Failed to set the 'protocol' property on 'URL': The provided value\",\n                globals: globalObject\n            });\n            esValue[implSymbol][\"protocol\"] = V;\n        }\n        get username() {\n            const esValue = this !== null && this !== undefined ? this : globalObject;\n            if (!exports.is(esValue)) {\n                throw new globalObject.TypeError(\"'get username' called on an object that is not a valid instance of URL.\");\n            }\n            return esValue[implSymbol][\"username\"];\n        }\n        set username(V) {\n            const esValue = this !== null && this !== undefined ? this : globalObject;\n            if (!exports.is(esValue)) {\n                throw new globalObject.TypeError(\"'set username' called on an object that is not a valid instance of URL.\");\n            }\n            V = conversions[\"USVString\"](V, {\n                context: \"Failed to set the 'username' property on 'URL': The provided value\",\n                globals: globalObject\n            });\n            esValue[implSymbol][\"username\"] = V;\n        }\n        get password() {\n            const esValue = this !== null && this !== undefined ? this : globalObject;\n            if (!exports.is(esValue)) {\n                throw new globalObject.TypeError(\"'get password' called on an object that is not a valid instance of URL.\");\n            }\n            return esValue[implSymbol][\"password\"];\n        }\n        set password(V) {\n            const esValue = this !== null && this !== undefined ? this : globalObject;\n            if (!exports.is(esValue)) {\n                throw new globalObject.TypeError(\"'set password' called on an object that is not a valid instance of URL.\");\n            }\n            V = conversions[\"USVString\"](V, {\n                context: \"Failed to set the 'password' property on 'URL': The provided value\",\n                globals: globalObject\n            });\n            esValue[implSymbol][\"password\"] = V;\n        }\n        get host() {\n            const esValue = this !== null && this !== undefined ? this : globalObject;\n            if (!exports.is(esValue)) {\n                throw new globalObject.TypeError(\"'get host' called on an object that is not a valid instance of URL.\");\n            }\n            return esValue[implSymbol][\"host\"];\n        }\n        set host(V) {\n            const esValue = this !== null && this !== undefined ? this : globalObject;\n            if (!exports.is(esValue)) {\n                throw new globalObject.TypeError(\"'set host' called on an object that is not a valid instance of URL.\");\n            }\n            V = conversions[\"USVString\"](V, {\n                context: \"Failed to set the 'host' property on 'URL': The provided value\",\n                globals: globalObject\n            });\n            esValue[implSymbol][\"host\"] = V;\n        }\n        get hostname() {\n            const esValue = this !== null && this !== undefined ? this : globalObject;\n            if (!exports.is(esValue)) {\n                throw new globalObject.TypeError(\"'get hostname' called on an object that is not a valid instance of URL.\");\n            }\n            return esValue[implSymbol][\"hostname\"];\n        }\n        set hostname(V) {\n            const esValue = this !== null && this !== undefined ? this : globalObject;\n            if (!exports.is(esValue)) {\n                throw new globalObject.TypeError(\"'set hostname' called on an object that is not a valid instance of URL.\");\n            }\n            V = conversions[\"USVString\"](V, {\n                context: \"Failed to set the 'hostname' property on 'URL': The provided value\",\n                globals: globalObject\n            });\n            esValue[implSymbol][\"hostname\"] = V;\n        }\n        get port() {\n            const esValue = this !== null && this !== undefined ? this : globalObject;\n            if (!exports.is(esValue)) {\n                throw new globalObject.TypeError(\"'get port' called on an object that is not a valid instance of URL.\");\n            }\n            return esValue[implSymbol][\"port\"];\n        }\n        set port(V) {\n            const esValue = this !== null && this !== undefined ? this : globalObject;\n            if (!exports.is(esValue)) {\n                throw new globalObject.TypeError(\"'set port' called on an object that is not a valid instance of URL.\");\n            }\n            V = conversions[\"USVString\"](V, {\n                context: \"Failed to set the 'port' property on 'URL': The provided value\",\n                globals: globalObject\n            });\n            esValue[implSymbol][\"port\"] = V;\n        }\n        get pathname() {\n            const esValue = this !== null && this !== undefined ? this : globalObject;\n            if (!exports.is(esValue)) {\n                throw new globalObject.TypeError(\"'get pathname' called on an object that is not a valid instance of URL.\");\n            }\n            return esValue[implSymbol][\"pathname\"];\n        }\n        set pathname(V) {\n            const esValue = this !== null && this !== undefined ? this : globalObject;\n            if (!exports.is(esValue)) {\n                throw new globalObject.TypeError(\"'set pathname' called on an object that is not a valid instance of URL.\");\n            }\n            V = conversions[\"USVString\"](V, {\n                context: \"Failed to set the 'pathname' property on 'URL': The provided value\",\n                globals: globalObject\n            });\n            esValue[implSymbol][\"pathname\"] = V;\n        }\n        get search() {\n            const esValue = this !== null && this !== undefined ? this : globalObject;\n            if (!exports.is(esValue)) {\n                throw new globalObject.TypeError(\"'get search' called on an object that is not a valid instance of URL.\");\n            }\n            return esValue[implSymbol][\"search\"];\n        }\n        set search(V) {\n            const esValue = this !== null && this !== undefined ? this : globalObject;\n            if (!exports.is(esValue)) {\n                throw new globalObject.TypeError(\"'set search' called on an object that is not a valid instance of URL.\");\n            }\n            V = conversions[\"USVString\"](V, {\n                context: \"Failed to set the 'search' property on 'URL': The provided value\",\n                globals: globalObject\n            });\n            esValue[implSymbol][\"search\"] = V;\n        }\n        get searchParams() {\n            const esValue = this !== null && this !== undefined ? this : globalObject;\n            if (!exports.is(esValue)) {\n                throw new globalObject.TypeError(\"'get searchParams' called on an object that is not a valid instance of URL.\");\n            }\n            return utils.getSameObject(this, \"searchParams\", ()=>{\n                return utils.tryWrapperForImpl(esValue[implSymbol][\"searchParams\"]);\n            });\n        }\n        get hash() {\n            const esValue = this !== null && this !== undefined ? this : globalObject;\n            if (!exports.is(esValue)) {\n                throw new globalObject.TypeError(\"'get hash' called on an object that is not a valid instance of URL.\");\n            }\n            return esValue[implSymbol][\"hash\"];\n        }\n        set hash(V) {\n            const esValue = this !== null && this !== undefined ? this : globalObject;\n            if (!exports.is(esValue)) {\n                throw new globalObject.TypeError(\"'set hash' called on an object that is not a valid instance of URL.\");\n            }\n            V = conversions[\"USVString\"](V, {\n                context: \"Failed to set the 'hash' property on 'URL': The provided value\",\n                globals: globalObject\n            });\n            esValue[implSymbol][\"hash\"] = V;\n        }\n        static canParse(url) {\n            if (arguments.length < 1) {\n                throw new globalObject.TypeError(`Failed to execute 'canParse' on 'URL': 1 argument required, but only ${arguments.length} present.`);\n            }\n            const args = [];\n            {\n                let curArg = arguments[0];\n                curArg = conversions[\"USVString\"](curArg, {\n                    context: \"Failed to execute 'canParse' on 'URL': parameter 1\",\n                    globals: globalObject\n                });\n                args.push(curArg);\n            }\n            {\n                let curArg = arguments[1];\n                if (curArg !== undefined) {\n                    curArg = conversions[\"USVString\"](curArg, {\n                        context: \"Failed to execute 'canParse' on 'URL': parameter 2\",\n                        globals: globalObject\n                    });\n                }\n                args.push(curArg);\n            }\n            return Impl.implementation.canParse(...args);\n        }\n    }\n    Object.defineProperties(URL.prototype, {\n        toJSON: {\n            enumerable: true\n        },\n        href: {\n            enumerable: true\n        },\n        toString: {\n            enumerable: true\n        },\n        origin: {\n            enumerable: true\n        },\n        protocol: {\n            enumerable: true\n        },\n        username: {\n            enumerable: true\n        },\n        password: {\n            enumerable: true\n        },\n        host: {\n            enumerable: true\n        },\n        hostname: {\n            enumerable: true\n        },\n        port: {\n            enumerable: true\n        },\n        pathname: {\n            enumerable: true\n        },\n        search: {\n            enumerable: true\n        },\n        searchParams: {\n            enumerable: true\n        },\n        hash: {\n            enumerable: true\n        },\n        [Symbol.toStringTag]: {\n            value: \"URL\",\n            configurable: true\n        }\n    });\n    Object.defineProperties(URL, {\n        canParse: {\n            enumerable: true\n        }\n    });\n    ctorRegistry[interfaceName] = URL;\n    Object.defineProperty(globalObject, interfaceName, {\n        configurable: true,\n        writable: true,\n        value: URL\n    });\n    if (globalNames.includes(\"Window\")) {\n        Object.defineProperty(globalObject, \"webkitURL\", {\n            configurable: true,\n            writable: true,\n            value: URL\n        });\n    }\n};\nconst Impl = __webpack_require__(/*! ./URL-impl.js */ \"(ssr)/./node_modules/whatwg-url/lib/URL-impl.js\");\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/whatwg-url/lib/URL.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/whatwg-url/lib/URLSearchParams-impl.js":
/*!*************************************************************!*\
  !*** ./node_modules/whatwg-url/lib/URLSearchParams-impl.js ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nconst urlencoded = __webpack_require__(/*! ./urlencoded */ \"(ssr)/./node_modules/whatwg-url/lib/urlencoded.js\");\nexports.implementation = class URLSearchParamsImpl {\n    constructor(globalObject, constructorArgs, { doNotStripQMark = false }){\n        let init = constructorArgs[0];\n        this._list = [];\n        this._url = null;\n        if (!doNotStripQMark && typeof init === \"string\" && init[0] === \"?\") {\n            init = init.slice(1);\n        }\n        if (Array.isArray(init)) {\n            for (const pair of init){\n                if (pair.length !== 2) {\n                    throw new TypeError(\"Failed to construct 'URLSearchParams': parameter 1 sequence's element does not \" + \"contain exactly two elements.\");\n                }\n                this._list.push([\n                    pair[0],\n                    pair[1]\n                ]);\n            }\n        } else if (typeof init === \"object\" && Object.getPrototypeOf(init) === null) {\n            for (const name of Object.keys(init)){\n                const value = init[name];\n                this._list.push([\n                    name,\n                    value\n                ]);\n            }\n        } else {\n            this._list = urlencoded.parseUrlencodedString(init);\n        }\n    }\n    _updateSteps() {\n        if (this._url !== null) {\n            let serializedQuery = urlencoded.serializeUrlencoded(this._list);\n            if (serializedQuery === \"\") {\n                serializedQuery = null;\n            }\n            this._url._url.query = serializedQuery;\n            if (serializedQuery === null) {\n                this._url._potentiallyStripTrailingSpacesFromAnOpaquePath();\n            }\n        }\n    }\n    get size() {\n        return this._list.length;\n    }\n    append(name, value) {\n        this._list.push([\n            name,\n            value\n        ]);\n        this._updateSteps();\n    }\n    delete(name, value) {\n        let i = 0;\n        while(i < this._list.length){\n            if (this._list[i][0] === name && (value === undefined || this._list[i][1] === value)) {\n                this._list.splice(i, 1);\n            } else {\n                i++;\n            }\n        }\n        this._updateSteps();\n    }\n    get(name) {\n        for (const tuple of this._list){\n            if (tuple[0] === name) {\n                return tuple[1];\n            }\n        }\n        return null;\n    }\n    getAll(name) {\n        const output = [];\n        for (const tuple of this._list){\n            if (tuple[0] === name) {\n                output.push(tuple[1]);\n            }\n        }\n        return output;\n    }\n    has(name, value) {\n        for (const tuple of this._list){\n            if (tuple[0] === name && (value === undefined || tuple[1] === value)) {\n                return true;\n            }\n        }\n        return false;\n    }\n    set(name, value) {\n        let found = false;\n        let i = 0;\n        while(i < this._list.length){\n            if (this._list[i][0] === name) {\n                if (found) {\n                    this._list.splice(i, 1);\n                } else {\n                    found = true;\n                    this._list[i][1] = value;\n                    i++;\n                }\n            } else {\n                i++;\n            }\n        }\n        if (!found) {\n            this._list.push([\n                name,\n                value\n            ]);\n        }\n        this._updateSteps();\n    }\n    sort() {\n        this._list.sort((a, b)=>{\n            if (a[0] < b[0]) {\n                return -1;\n            }\n            if (a[0] > b[0]) {\n                return 1;\n            }\n            return 0;\n        });\n        this._updateSteps();\n    }\n    [Symbol.iterator]() {\n        return this._list[Symbol.iterator]();\n    }\n    toString() {\n        return urlencoded.serializeUrlencoded(this._list);\n    }\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/whatwg-url/lib/URLSearchParams-impl.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/whatwg-url/lib/URLSearchParams.js":
/*!********************************************************!*\
  !*** ./node_modules/whatwg-url/lib/URLSearchParams.js ***!
  \********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nconst conversions = __webpack_require__(/*! webidl-conversions */ \"(ssr)/./node_modules/whatwg-url/node_modules/webidl-conversions/lib/index.js\");\nconst utils = __webpack_require__(/*! ./utils.js */ \"(ssr)/./node_modules/whatwg-url/lib/utils.js\");\nconst Function = __webpack_require__(/*! ./Function.js */ \"(ssr)/./node_modules/whatwg-url/lib/Function.js\");\nconst newObjectInRealm = utils.newObjectInRealm;\nconst implSymbol = utils.implSymbol;\nconst ctorRegistrySymbol = utils.ctorRegistrySymbol;\nconst interfaceName = \"URLSearchParams\";\nexports.is = (value)=>{\n    return utils.isObject(value) && utils.hasOwn(value, implSymbol) && value[implSymbol] instanceof Impl.implementation;\n};\nexports.isImpl = (value)=>{\n    return utils.isObject(value) && value instanceof Impl.implementation;\n};\nexports.convert = (globalObject, value, { context = \"The provided value\" } = {})=>{\n    if (exports.is(value)) {\n        return utils.implForWrapper(value);\n    }\n    throw new globalObject.TypeError(`${context} is not of type 'URLSearchParams'.`);\n};\nexports.createDefaultIterator = (globalObject, target, kind)=>{\n    const ctorRegistry = globalObject[ctorRegistrySymbol];\n    const iteratorPrototype = ctorRegistry[\"URLSearchParams Iterator\"];\n    const iterator = Object.create(iteratorPrototype);\n    Object.defineProperty(iterator, utils.iterInternalSymbol, {\n        value: {\n            target,\n            kind,\n            index: 0\n        },\n        configurable: true\n    });\n    return iterator;\n};\nfunction makeWrapper(globalObject, newTarget) {\n    let proto;\n    if (newTarget !== undefined) {\n        proto = newTarget.prototype;\n    }\n    if (!utils.isObject(proto)) {\n        proto = globalObject[ctorRegistrySymbol][\"URLSearchParams\"].prototype;\n    }\n    return Object.create(proto);\n}\nexports.create = (globalObject, constructorArgs, privateData)=>{\n    const wrapper = makeWrapper(globalObject);\n    return exports.setup(wrapper, globalObject, constructorArgs, privateData);\n};\nexports.createImpl = (globalObject, constructorArgs, privateData)=>{\n    const wrapper = exports.create(globalObject, constructorArgs, privateData);\n    return utils.implForWrapper(wrapper);\n};\nexports._internalSetup = (wrapper, globalObject)=>{};\nexports.setup = (wrapper, globalObject, constructorArgs = [], privateData = {})=>{\n    privateData.wrapper = wrapper;\n    exports._internalSetup(wrapper, globalObject);\n    Object.defineProperty(wrapper, implSymbol, {\n        value: new Impl.implementation(globalObject, constructorArgs, privateData),\n        configurable: true\n    });\n    wrapper[implSymbol][utils.wrapperSymbol] = wrapper;\n    if (Impl.init) {\n        Impl.init(wrapper[implSymbol]);\n    }\n    return wrapper;\n};\nexports[\"new\"] = (globalObject, newTarget)=>{\n    const wrapper = makeWrapper(globalObject, newTarget);\n    exports._internalSetup(wrapper, globalObject);\n    Object.defineProperty(wrapper, implSymbol, {\n        value: Object.create(Impl.implementation.prototype),\n        configurable: true\n    });\n    wrapper[implSymbol][utils.wrapperSymbol] = wrapper;\n    if (Impl.init) {\n        Impl.init(wrapper[implSymbol]);\n    }\n    return wrapper[implSymbol];\n};\nconst exposed = new Set([\n    \"Window\",\n    \"Worker\"\n]);\nexports.install = (globalObject, globalNames)=>{\n    if (!globalNames.some((globalName)=>exposed.has(globalName))) {\n        return;\n    }\n    const ctorRegistry = utils.initCtorRegistry(globalObject);\n    class URLSearchParams {\n        constructor(){\n            const args = [];\n            {\n                let curArg = arguments[0];\n                if (curArg !== undefined) {\n                    if (utils.isObject(curArg)) {\n                        if (curArg[Symbol.iterator] !== undefined) {\n                            if (!utils.isObject(curArg)) {\n                                throw new globalObject.TypeError(\"Failed to construct 'URLSearchParams': parameter 1\" + \" sequence\" + \" is not an iterable object.\");\n                            } else {\n                                const V = [];\n                                const tmp = curArg;\n                                for (let nextItem of tmp){\n                                    if (!utils.isObject(nextItem)) {\n                                        throw new globalObject.TypeError(\"Failed to construct 'URLSearchParams': parameter 1\" + \" sequence\" + \"'s element\" + \" is not an iterable object.\");\n                                    } else {\n                                        const V = [];\n                                        const tmp = nextItem;\n                                        for (let nextItem of tmp){\n                                            nextItem = conversions[\"USVString\"](nextItem, {\n                                                context: \"Failed to construct 'URLSearchParams': parameter 1\" + \" sequence\" + \"'s element\" + \"'s element\",\n                                                globals: globalObject\n                                            });\n                                            V.push(nextItem);\n                                        }\n                                        nextItem = V;\n                                    }\n                                    V.push(nextItem);\n                                }\n                                curArg = V;\n                            }\n                        } else {\n                            if (!utils.isObject(curArg)) {\n                                throw new globalObject.TypeError(\"Failed to construct 'URLSearchParams': parameter 1\" + \" record\" + \" is not an object.\");\n                            } else {\n                                const result = Object.create(null);\n                                for (const key of Reflect.ownKeys(curArg)){\n                                    const desc = Object.getOwnPropertyDescriptor(curArg, key);\n                                    if (desc && desc.enumerable) {\n                                        let typedKey = key;\n                                        typedKey = conversions[\"USVString\"](typedKey, {\n                                            context: \"Failed to construct 'URLSearchParams': parameter 1\" + \" record\" + \"'s key\",\n                                            globals: globalObject\n                                        });\n                                        let typedValue = curArg[key];\n                                        typedValue = conversions[\"USVString\"](typedValue, {\n                                            context: \"Failed to construct 'URLSearchParams': parameter 1\" + \" record\" + \"'s value\",\n                                            globals: globalObject\n                                        });\n                                        result[typedKey] = typedValue;\n                                    }\n                                }\n                                curArg = result;\n                            }\n                        }\n                    } else {\n                        curArg = conversions[\"USVString\"](curArg, {\n                            context: \"Failed to construct 'URLSearchParams': parameter 1\",\n                            globals: globalObject\n                        });\n                    }\n                } else {\n                    curArg = \"\";\n                }\n                args.push(curArg);\n            }\n            return exports.setup(Object.create(new.target.prototype), globalObject, args);\n        }\n        append(name, value) {\n            const esValue = this !== null && this !== undefined ? this : globalObject;\n            if (!exports.is(esValue)) {\n                throw new globalObject.TypeError(\"'append' called on an object that is not a valid instance of URLSearchParams.\");\n            }\n            if (arguments.length < 2) {\n                throw new globalObject.TypeError(`Failed to execute 'append' on 'URLSearchParams': 2 arguments required, but only ${arguments.length} present.`);\n            }\n            const args = [];\n            {\n                let curArg = arguments[0];\n                curArg = conversions[\"USVString\"](curArg, {\n                    context: \"Failed to execute 'append' on 'URLSearchParams': parameter 1\",\n                    globals: globalObject\n                });\n                args.push(curArg);\n            }\n            {\n                let curArg = arguments[1];\n                curArg = conversions[\"USVString\"](curArg, {\n                    context: \"Failed to execute 'append' on 'URLSearchParams': parameter 2\",\n                    globals: globalObject\n                });\n                args.push(curArg);\n            }\n            return utils.tryWrapperForImpl(esValue[implSymbol].append(...args));\n        }\n        delete(name) {\n            const esValue = this !== null && this !== undefined ? this : globalObject;\n            if (!exports.is(esValue)) {\n                throw new globalObject.TypeError(\"'delete' called on an object that is not a valid instance of URLSearchParams.\");\n            }\n            if (arguments.length < 1) {\n                throw new globalObject.TypeError(`Failed to execute 'delete' on 'URLSearchParams': 1 argument required, but only ${arguments.length} present.`);\n            }\n            const args = [];\n            {\n                let curArg = arguments[0];\n                curArg = conversions[\"USVString\"](curArg, {\n                    context: \"Failed to execute 'delete' on 'URLSearchParams': parameter 1\",\n                    globals: globalObject\n                });\n                args.push(curArg);\n            }\n            {\n                let curArg = arguments[1];\n                if (curArg !== undefined) {\n                    curArg = conversions[\"USVString\"](curArg, {\n                        context: \"Failed to execute 'delete' on 'URLSearchParams': parameter 2\",\n                        globals: globalObject\n                    });\n                }\n                args.push(curArg);\n            }\n            return utils.tryWrapperForImpl(esValue[implSymbol].delete(...args));\n        }\n        get(name) {\n            const esValue = this !== null && this !== undefined ? this : globalObject;\n            if (!exports.is(esValue)) {\n                throw new globalObject.TypeError(\"'get' called on an object that is not a valid instance of URLSearchParams.\");\n            }\n            if (arguments.length < 1) {\n                throw new globalObject.TypeError(`Failed to execute 'get' on 'URLSearchParams': 1 argument required, but only ${arguments.length} present.`);\n            }\n            const args = [];\n            {\n                let curArg = arguments[0];\n                curArg = conversions[\"USVString\"](curArg, {\n                    context: \"Failed to execute 'get' on 'URLSearchParams': parameter 1\",\n                    globals: globalObject\n                });\n                args.push(curArg);\n            }\n            return esValue[implSymbol].get(...args);\n        }\n        getAll(name) {\n            const esValue = this !== null && this !== undefined ? this : globalObject;\n            if (!exports.is(esValue)) {\n                throw new globalObject.TypeError(\"'getAll' called on an object that is not a valid instance of URLSearchParams.\");\n            }\n            if (arguments.length < 1) {\n                throw new globalObject.TypeError(`Failed to execute 'getAll' on 'URLSearchParams': 1 argument required, but only ${arguments.length} present.`);\n            }\n            const args = [];\n            {\n                let curArg = arguments[0];\n                curArg = conversions[\"USVString\"](curArg, {\n                    context: \"Failed to execute 'getAll' on 'URLSearchParams': parameter 1\",\n                    globals: globalObject\n                });\n                args.push(curArg);\n            }\n            return utils.tryWrapperForImpl(esValue[implSymbol].getAll(...args));\n        }\n        has(name) {\n            const esValue = this !== null && this !== undefined ? this : globalObject;\n            if (!exports.is(esValue)) {\n                throw new globalObject.TypeError(\"'has' called on an object that is not a valid instance of URLSearchParams.\");\n            }\n            if (arguments.length < 1) {\n                throw new globalObject.TypeError(`Failed to execute 'has' on 'URLSearchParams': 1 argument required, but only ${arguments.length} present.`);\n            }\n            const args = [];\n            {\n                let curArg = arguments[0];\n                curArg = conversions[\"USVString\"](curArg, {\n                    context: \"Failed to execute 'has' on 'URLSearchParams': parameter 1\",\n                    globals: globalObject\n                });\n                args.push(curArg);\n            }\n            {\n                let curArg = arguments[1];\n                if (curArg !== undefined) {\n                    curArg = conversions[\"USVString\"](curArg, {\n                        context: \"Failed to execute 'has' on 'URLSearchParams': parameter 2\",\n                        globals: globalObject\n                    });\n                }\n                args.push(curArg);\n            }\n            return esValue[implSymbol].has(...args);\n        }\n        set(name, value) {\n            const esValue = this !== null && this !== undefined ? this : globalObject;\n            if (!exports.is(esValue)) {\n                throw new globalObject.TypeError(\"'set' called on an object that is not a valid instance of URLSearchParams.\");\n            }\n            if (arguments.length < 2) {\n                throw new globalObject.TypeError(`Failed to execute 'set' on 'URLSearchParams': 2 arguments required, but only ${arguments.length} present.`);\n            }\n            const args = [];\n            {\n                let curArg = arguments[0];\n                curArg = conversions[\"USVString\"](curArg, {\n                    context: \"Failed to execute 'set' on 'URLSearchParams': parameter 1\",\n                    globals: globalObject\n                });\n                args.push(curArg);\n            }\n            {\n                let curArg = arguments[1];\n                curArg = conversions[\"USVString\"](curArg, {\n                    context: \"Failed to execute 'set' on 'URLSearchParams': parameter 2\",\n                    globals: globalObject\n                });\n                args.push(curArg);\n            }\n            return utils.tryWrapperForImpl(esValue[implSymbol].set(...args));\n        }\n        sort() {\n            const esValue = this !== null && this !== undefined ? this : globalObject;\n            if (!exports.is(esValue)) {\n                throw new globalObject.TypeError(\"'sort' called on an object that is not a valid instance of URLSearchParams.\");\n            }\n            return utils.tryWrapperForImpl(esValue[implSymbol].sort());\n        }\n        toString() {\n            const esValue = this !== null && this !== undefined ? this : globalObject;\n            if (!exports.is(esValue)) {\n                throw new globalObject.TypeError(\"'toString' called on an object that is not a valid instance of URLSearchParams.\");\n            }\n            return esValue[implSymbol].toString();\n        }\n        keys() {\n            if (!exports.is(this)) {\n                throw new globalObject.TypeError(\"'keys' called on an object that is not a valid instance of URLSearchParams.\");\n            }\n            return exports.createDefaultIterator(globalObject, this, \"key\");\n        }\n        values() {\n            if (!exports.is(this)) {\n                throw new globalObject.TypeError(\"'values' called on an object that is not a valid instance of URLSearchParams.\");\n            }\n            return exports.createDefaultIterator(globalObject, this, \"value\");\n        }\n        entries() {\n            if (!exports.is(this)) {\n                throw new globalObject.TypeError(\"'entries' called on an object that is not a valid instance of URLSearchParams.\");\n            }\n            return exports.createDefaultIterator(globalObject, this, \"key+value\");\n        }\n        forEach(callback) {\n            if (!exports.is(this)) {\n                throw new globalObject.TypeError(\"'forEach' called on an object that is not a valid instance of URLSearchParams.\");\n            }\n            if (arguments.length < 1) {\n                throw new globalObject.TypeError(\"Failed to execute 'forEach' on 'iterable': 1 argument required, but only 0 present.\");\n            }\n            callback = Function.convert(globalObject, callback, {\n                context: \"Failed to execute 'forEach' on 'iterable': The callback provided as parameter 1\"\n            });\n            const thisArg = arguments[1];\n            let pairs = Array.from(this[implSymbol]);\n            let i = 0;\n            while(i < pairs.length){\n                const [key, value] = pairs[i].map(utils.tryWrapperForImpl);\n                callback.call(thisArg, value, key, this);\n                pairs = Array.from(this[implSymbol]);\n                i++;\n            }\n        }\n        get size() {\n            const esValue = this !== null && this !== undefined ? this : globalObject;\n            if (!exports.is(esValue)) {\n                throw new globalObject.TypeError(\"'get size' called on an object that is not a valid instance of URLSearchParams.\");\n            }\n            return esValue[implSymbol][\"size\"];\n        }\n    }\n    Object.defineProperties(URLSearchParams.prototype, {\n        append: {\n            enumerable: true\n        },\n        delete: {\n            enumerable: true\n        },\n        get: {\n            enumerable: true\n        },\n        getAll: {\n            enumerable: true\n        },\n        has: {\n            enumerable: true\n        },\n        set: {\n            enumerable: true\n        },\n        sort: {\n            enumerable: true\n        },\n        toString: {\n            enumerable: true\n        },\n        keys: {\n            enumerable: true\n        },\n        values: {\n            enumerable: true\n        },\n        entries: {\n            enumerable: true\n        },\n        forEach: {\n            enumerable: true\n        },\n        size: {\n            enumerable: true\n        },\n        [Symbol.toStringTag]: {\n            value: \"URLSearchParams\",\n            configurable: true\n        },\n        [Symbol.iterator]: {\n            value: URLSearchParams.prototype.entries,\n            configurable: true,\n            writable: true\n        }\n    });\n    ctorRegistry[interfaceName] = URLSearchParams;\n    ctorRegistry[\"URLSearchParams Iterator\"] = Object.create(ctorRegistry[\"%IteratorPrototype%\"], {\n        [Symbol.toStringTag]: {\n            configurable: true,\n            value: \"URLSearchParams Iterator\"\n        }\n    });\n    utils.define(ctorRegistry[\"URLSearchParams Iterator\"], {\n        next () {\n            const internal = this && this[utils.iterInternalSymbol];\n            if (!internal) {\n                throw new globalObject.TypeError(\"next() called on a value that is not a URLSearchParams iterator object\");\n            }\n            const { target, kind, index } = internal;\n            const values = Array.from(target[implSymbol]);\n            const len = values.length;\n            if (index >= len) {\n                return newObjectInRealm(globalObject, {\n                    value: undefined,\n                    done: true\n                });\n            }\n            const pair = values[index];\n            internal.index = index + 1;\n            return newObjectInRealm(globalObject, utils.iteratorResult(pair.map(utils.tryWrapperForImpl), kind));\n        }\n    });\n    Object.defineProperty(globalObject, interfaceName, {\n        configurable: true,\n        writable: true,\n        value: URLSearchParams\n    });\n};\nconst Impl = __webpack_require__(/*! ./URLSearchParams-impl.js */ \"(ssr)/./node_modules/whatwg-url/lib/URLSearchParams-impl.js\");\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/whatwg-url/lib/URLSearchParams.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/whatwg-url/lib/encoding.js":
/*!*************************************************!*\
  !*** ./node_modules/whatwg-url/lib/encoding.js ***!
  \*************************************************/
/***/ ((module) => {

eval("\nconst utf8Encoder = new TextEncoder();\nconst utf8Decoder = new TextDecoder(\"utf-8\", {\n    ignoreBOM: true\n});\nfunction utf8Encode(string) {\n    return utf8Encoder.encode(string);\n}\nfunction utf8DecodeWithoutBOM(bytes) {\n    return utf8Decoder.decode(bytes);\n}\nmodule.exports = {\n    utf8Encode,\n    utf8DecodeWithoutBOM\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvd2hhdHdnLXVybC9saWIvZW5jb2RpbmcuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYixNQUFNQSxjQUFjLElBQUlDO0FBQ3hCLE1BQU1DLGNBQWMsSUFBSUMsWUFBWSxTQUFTO0lBQUVDLFdBQVc7QUFBSztBQUUvRCxTQUFTQyxXQUFXQyxNQUFNO0lBQ3hCLE9BQU9OLFlBQVlPLE1BQU0sQ0FBQ0Q7QUFDNUI7QUFFQSxTQUFTRSxxQkFBcUJDLEtBQUs7SUFDakMsT0FBT1AsWUFBWVEsTUFBTSxDQUFDRDtBQUM1QjtBQUVBRSxPQUFPQyxPQUFPLEdBQUc7SUFDZlA7SUFDQUc7QUFDRiIsInNvdXJjZXMiOlsid2VicGFjazovL2Jsb2ctYXBwbGljYXRpb24vLi9ub2RlX21vZHVsZXMvd2hhdHdnLXVybC9saWIvZW5jb2RpbmcuanM/ZjY2NCJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbmNvbnN0IHV0ZjhFbmNvZGVyID0gbmV3IFRleHRFbmNvZGVyKCk7XG5jb25zdCB1dGY4RGVjb2RlciA9IG5ldyBUZXh0RGVjb2RlcihcInV0Zi04XCIsIHsgaWdub3JlQk9NOiB0cnVlIH0pO1xuXG5mdW5jdGlvbiB1dGY4RW5jb2RlKHN0cmluZykge1xuICByZXR1cm4gdXRmOEVuY29kZXIuZW5jb2RlKHN0cmluZyk7XG59XG5cbmZ1bmN0aW9uIHV0ZjhEZWNvZGVXaXRob3V0Qk9NKGJ5dGVzKSB7XG4gIHJldHVybiB1dGY4RGVjb2Rlci5kZWNvZGUoYnl0ZXMpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgdXRmOEVuY29kZSxcbiAgdXRmOERlY29kZVdpdGhvdXRCT01cbn07XG4iXSwibmFtZXMiOlsidXRmOEVuY29kZXIiLCJUZXh0RW5jb2RlciIsInV0ZjhEZWNvZGVyIiwiVGV4dERlY29kZXIiLCJpZ25vcmVCT00iLCJ1dGY4RW5jb2RlIiwic3RyaW5nIiwiZW5jb2RlIiwidXRmOERlY29kZVdpdGhvdXRCT00iLCJieXRlcyIsImRlY29kZSIsIm1vZHVsZSIsImV4cG9ydHMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/whatwg-url/lib/encoding.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/whatwg-url/lib/infra.js":
/*!**********************************************!*\
  !*** ./node_modules/whatwg-url/lib/infra.js ***!
  \**********************************************/
/***/ ((module) => {

eval("\n// Note that we take code points as JS numbers, not JS strings.\nfunction isASCIIDigit(c) {\n    return c >= 0x30 && c <= 0x39;\n}\nfunction isASCIIAlpha(c) {\n    return c >= 0x41 && c <= 0x5A || c >= 0x61 && c <= 0x7A;\n}\nfunction isASCIIAlphanumeric(c) {\n    return isASCIIAlpha(c) || isASCIIDigit(c);\n}\nfunction isASCIIHex(c) {\n    return isASCIIDigit(c) || c >= 0x41 && c <= 0x46 || c >= 0x61 && c <= 0x66;\n}\nmodule.exports = {\n    isASCIIDigit,\n    isASCIIAlpha,\n    isASCIIAlphanumeric,\n    isASCIIHex\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvd2hhdHdnLXVybC9saWIvaW5mcmEuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFFYiwrREFBK0Q7QUFFL0QsU0FBU0EsYUFBYUMsQ0FBQztJQUNyQixPQUFPQSxLQUFLLFFBQVFBLEtBQUs7QUFDM0I7QUFFQSxTQUFTQyxhQUFhRCxDQUFDO0lBQ3JCLE9BQU8sS0FBTSxRQUFRQSxLQUFLLFFBQVVBLEtBQUssUUFBUUEsS0FBSztBQUN4RDtBQUVBLFNBQVNFLG9CQUFvQkYsQ0FBQztJQUM1QixPQUFPQyxhQUFhRCxNQUFNRCxhQUFhQztBQUN6QztBQUVBLFNBQVNHLFdBQVdILENBQUM7SUFDbkIsT0FBT0QsYUFBYUMsTUFBT0EsS0FBSyxRQUFRQSxLQUFLLFFBQVVBLEtBQUssUUFBUUEsS0FBSztBQUMzRTtBQUVBSSxPQUFPQyxPQUFPLEdBQUc7SUFDZk47SUFDQUU7SUFDQUM7SUFDQUM7QUFDRiIsInNvdXJjZXMiOlsid2VicGFjazovL2Jsb2ctYXBwbGljYXRpb24vLi9ub2RlX21vZHVsZXMvd2hhdHdnLXVybC9saWIvaW5mcmEuanM/NzAzOCJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuLy8gTm90ZSB0aGF0IHdlIHRha2UgY29kZSBwb2ludHMgYXMgSlMgbnVtYmVycywgbm90IEpTIHN0cmluZ3MuXG5cbmZ1bmN0aW9uIGlzQVNDSUlEaWdpdChjKSB7XG4gIHJldHVybiBjID49IDB4MzAgJiYgYyA8PSAweDM5O1xufVxuXG5mdW5jdGlvbiBpc0FTQ0lJQWxwaGEoYykge1xuICByZXR1cm4gKGMgPj0gMHg0MSAmJiBjIDw9IDB4NUEpIHx8IChjID49IDB4NjEgJiYgYyA8PSAweDdBKTtcbn1cblxuZnVuY3Rpb24gaXNBU0NJSUFscGhhbnVtZXJpYyhjKSB7XG4gIHJldHVybiBpc0FTQ0lJQWxwaGEoYykgfHwgaXNBU0NJSURpZ2l0KGMpO1xufVxuXG5mdW5jdGlvbiBpc0FTQ0lJSGV4KGMpIHtcbiAgcmV0dXJuIGlzQVNDSUlEaWdpdChjKSB8fCAoYyA+PSAweDQxICYmIGMgPD0gMHg0NikgfHwgKGMgPj0gMHg2MSAmJiBjIDw9IDB4NjYpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgaXNBU0NJSURpZ2l0LFxuICBpc0FTQ0lJQWxwaGEsXG4gIGlzQVNDSUlBbHBoYW51bWVyaWMsXG4gIGlzQVNDSUlIZXhcbn07XG4iXSwibmFtZXMiOlsiaXNBU0NJSURpZ2l0IiwiYyIsImlzQVNDSUlBbHBoYSIsImlzQVNDSUlBbHBoYW51bWVyaWMiLCJpc0FTQ0lJSGV4IiwibW9kdWxlIiwiZXhwb3J0cyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/whatwg-url/lib/infra.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/whatwg-url/lib/percent-encoding.js":
/*!*********************************************************!*\
  !*** ./node_modules/whatwg-url/lib/percent-encoding.js ***!
  \*********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nconst { isASCIIHex } = __webpack_require__(/*! ./infra */ \"(ssr)/./node_modules/whatwg-url/lib/infra.js\");\nconst { utf8Encode } = __webpack_require__(/*! ./encoding */ \"(ssr)/./node_modules/whatwg-url/lib/encoding.js\");\nfunction p(char) {\n    return char.codePointAt(0);\n}\n// https://url.spec.whatwg.org/#percent-encode\nfunction percentEncode(c) {\n    let hex = c.toString(16).toUpperCase();\n    if (hex.length === 1) {\n        hex = `0${hex}`;\n    }\n    return `%${hex}`;\n}\n// https://url.spec.whatwg.org/#percent-decode\nfunction percentDecodeBytes(input) {\n    const output = new Uint8Array(input.byteLength);\n    let outputIndex = 0;\n    for(let i = 0; i < input.byteLength; ++i){\n        const byte = input[i];\n        if (byte !== 0x25) {\n            output[outputIndex++] = byte;\n        } else if (byte === 0x25 && (!isASCIIHex(input[i + 1]) || !isASCIIHex(input[i + 2]))) {\n            output[outputIndex++] = byte;\n        } else {\n            const bytePoint = parseInt(String.fromCodePoint(input[i + 1], input[i + 2]), 16);\n            output[outputIndex++] = bytePoint;\n            i += 2;\n        }\n    }\n    return output.slice(0, outputIndex);\n}\n// https://url.spec.whatwg.org/#string-percent-decode\nfunction percentDecodeString(input) {\n    const bytes = utf8Encode(input);\n    return percentDecodeBytes(bytes);\n}\n// https://url.spec.whatwg.org/#c0-control-percent-encode-set\nfunction isC0ControlPercentEncode(c) {\n    return c <= 0x1F || c > 0x7E;\n}\n// https://url.spec.whatwg.org/#fragment-percent-encode-set\nconst extraFragmentPercentEncodeSet = new Set([\n    p(\" \"),\n    p('\"'),\n    p(\"<\"),\n    p(\">\"),\n    p(\"`\")\n]);\nfunction isFragmentPercentEncode(c) {\n    return isC0ControlPercentEncode(c) || extraFragmentPercentEncodeSet.has(c);\n}\n// https://url.spec.whatwg.org/#query-percent-encode-set\nconst extraQueryPercentEncodeSet = new Set([\n    p(\" \"),\n    p('\"'),\n    p(\"#\"),\n    p(\"<\"),\n    p(\">\")\n]);\nfunction isQueryPercentEncode(c) {\n    return isC0ControlPercentEncode(c) || extraQueryPercentEncodeSet.has(c);\n}\n// https://url.spec.whatwg.org/#special-query-percent-encode-set\nfunction isSpecialQueryPercentEncode(c) {\n    return isQueryPercentEncode(c) || c === p(\"'\");\n}\n// https://url.spec.whatwg.org/#path-percent-encode-set\nconst extraPathPercentEncodeSet = new Set([\n    p(\"?\"),\n    p(\"`\"),\n    p(\"{\"),\n    p(\"}\")\n]);\nfunction isPathPercentEncode(c) {\n    return isQueryPercentEncode(c) || extraPathPercentEncodeSet.has(c);\n}\n// https://url.spec.whatwg.org/#userinfo-percent-encode-set\nconst extraUserinfoPercentEncodeSet = new Set([\n    p(\"/\"),\n    p(\":\"),\n    p(\";\"),\n    p(\"=\"),\n    p(\"@\"),\n    p(\"[\"),\n    p(\"\\\\\"),\n    p(\"]\"),\n    p(\"^\"),\n    p(\"|\")\n]);\nfunction isUserinfoPercentEncode(c) {\n    return isPathPercentEncode(c) || extraUserinfoPercentEncodeSet.has(c);\n}\n// https://url.spec.whatwg.org/#component-percent-encode-set\nconst extraComponentPercentEncodeSet = new Set([\n    p(\"$\"),\n    p(\"%\"),\n    p(\"&\"),\n    p(\"+\"),\n    p(\",\")\n]);\nfunction isComponentPercentEncode(c) {\n    return isUserinfoPercentEncode(c) || extraComponentPercentEncodeSet.has(c);\n}\n// https://url.spec.whatwg.org/#application-x-www-form-urlencoded-percent-encode-set\nconst extraURLEncodedPercentEncodeSet = new Set([\n    p(\"!\"),\n    p(\"'\"),\n    p(\"(\"),\n    p(\")\"),\n    p(\"~\")\n]);\nfunction isURLEncodedPercentEncode(c) {\n    return isComponentPercentEncode(c) || extraURLEncodedPercentEncodeSet.has(c);\n}\n// https://url.spec.whatwg.org/#code-point-percent-encode-after-encoding\n// https://url.spec.whatwg.org/#utf-8-percent-encode\n// Assuming encoding is always utf-8 allows us to trim one of the logic branches. TODO: support encoding.\n// The \"-Internal\" variant here has code points as JS strings. The external version used by other files has code points\n// as JS numbers, like the rest of the codebase.\nfunction utf8PercentEncodeCodePointInternal(codePoint, percentEncodePredicate) {\n    const bytes = utf8Encode(codePoint);\n    let output = \"\";\n    for (const byte of bytes){\n        // Our percentEncodePredicate operates on bytes, not code points, so this is slightly different from the spec.\n        if (!percentEncodePredicate(byte)) {\n            output += String.fromCharCode(byte);\n        } else {\n            output += percentEncode(byte);\n        }\n    }\n    return output;\n}\nfunction utf8PercentEncodeCodePoint(codePoint, percentEncodePredicate) {\n    return utf8PercentEncodeCodePointInternal(String.fromCodePoint(codePoint), percentEncodePredicate);\n}\n// https://url.spec.whatwg.org/#string-percent-encode-after-encoding\n// https://url.spec.whatwg.org/#string-utf-8-percent-encode\nfunction utf8PercentEncodeString(input, percentEncodePredicate, spaceAsPlus = false) {\n    let output = \"\";\n    for (const codePoint of input){\n        if (spaceAsPlus && codePoint === \" \") {\n            output += \"+\";\n        } else {\n            output += utf8PercentEncodeCodePointInternal(codePoint, percentEncodePredicate);\n        }\n    }\n    return output;\n}\nmodule.exports = {\n    isC0ControlPercentEncode,\n    isFragmentPercentEncode,\n    isQueryPercentEncode,\n    isSpecialQueryPercentEncode,\n    isPathPercentEncode,\n    isUserinfoPercentEncode,\n    isURLEncodedPercentEncode,\n    percentDecodeString,\n    percentDecodeBytes,\n    utf8PercentEncodeString,\n    utf8PercentEncodeCodePoint\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/whatwg-url/lib/percent-encoding.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/whatwg-url/lib/url-state-machine.js":
/*!**********************************************************!*\
  !*** ./node_modules/whatwg-url/lib/url-state-machine.js ***!
  \**********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nconst tr46 = __webpack_require__(/*! tr46 */ \"(ssr)/./node_modules/tr46/index.js\");\nconst infra = __webpack_require__(/*! ./infra */ \"(ssr)/./node_modules/whatwg-url/lib/infra.js\");\nconst { utf8DecodeWithoutBOM } = __webpack_require__(/*! ./encoding */ \"(ssr)/./node_modules/whatwg-url/lib/encoding.js\");\nconst { percentDecodeString, utf8PercentEncodeCodePoint, utf8PercentEncodeString, isC0ControlPercentEncode, isFragmentPercentEncode, isQueryPercentEncode, isSpecialQueryPercentEncode, isPathPercentEncode, isUserinfoPercentEncode } = __webpack_require__(/*! ./percent-encoding */ \"(ssr)/./node_modules/whatwg-url/lib/percent-encoding.js\");\nfunction p(char) {\n    return char.codePointAt(0);\n}\nconst specialSchemes = {\n    ftp: 21,\n    file: null,\n    http: 80,\n    https: 443,\n    ws: 80,\n    wss: 443\n};\nconst failure = Symbol(\"failure\");\nfunction countSymbols(str) {\n    return [\n        ...str\n    ].length;\n}\nfunction at(input, idx) {\n    const c = input[idx];\n    return isNaN(c) ? undefined : String.fromCodePoint(c);\n}\nfunction isSingleDot(buffer) {\n    return buffer === \".\" || buffer.toLowerCase() === \"%2e\";\n}\nfunction isDoubleDot(buffer) {\n    buffer = buffer.toLowerCase();\n    return buffer === \"..\" || buffer === \"%2e.\" || buffer === \".%2e\" || buffer === \"%2e%2e\";\n}\nfunction isWindowsDriveLetterCodePoints(cp1, cp2) {\n    return infra.isASCIIAlpha(cp1) && (cp2 === p(\":\") || cp2 === p(\"|\"));\n}\nfunction isWindowsDriveLetterString(string) {\n    return string.length === 2 && infra.isASCIIAlpha(string.codePointAt(0)) && (string[1] === \":\" || string[1] === \"|\");\n}\nfunction isNormalizedWindowsDriveLetterString(string) {\n    return string.length === 2 && infra.isASCIIAlpha(string.codePointAt(0)) && string[1] === \":\";\n}\nfunction containsForbiddenHostCodePoint(string) {\n    return string.search(/\\u0000|\\u0009|\\u000A|\\u000D|\\u0020|#|\\/|:|<|>|\\?|@|\\[|\\\\|\\]|\\^|\\|/u) !== -1;\n}\nfunction containsForbiddenDomainCodePoint(string) {\n    return containsForbiddenHostCodePoint(string) || string.search(/[\\u0000-\\u001F]|%|\\u007F/u) !== -1;\n}\nfunction isSpecialScheme(scheme) {\n    return specialSchemes[scheme] !== undefined;\n}\nfunction isSpecial(url) {\n    return isSpecialScheme(url.scheme);\n}\nfunction isNotSpecial(url) {\n    return !isSpecialScheme(url.scheme);\n}\nfunction defaultPort(scheme) {\n    return specialSchemes[scheme];\n}\nfunction parseIPv4Number(input) {\n    if (input === \"\") {\n        return failure;\n    }\n    let R = 10;\n    if (input.length >= 2 && input.charAt(0) === \"0\" && input.charAt(1).toLowerCase() === \"x\") {\n        input = input.substring(2);\n        R = 16;\n    } else if (input.length >= 2 && input.charAt(0) === \"0\") {\n        input = input.substring(1);\n        R = 8;\n    }\n    if (input === \"\") {\n        return 0;\n    }\n    let regex = /[^0-7]/u;\n    if (R === 10) {\n        regex = /[^0-9]/u;\n    }\n    if (R === 16) {\n        regex = /[^0-9A-Fa-f]/u;\n    }\n    if (regex.test(input)) {\n        return failure;\n    }\n    return parseInt(input, R);\n}\nfunction parseIPv4(input) {\n    const parts = input.split(\".\");\n    if (parts[parts.length - 1] === \"\") {\n        if (parts.length > 1) {\n            parts.pop();\n        }\n    }\n    if (parts.length > 4) {\n        return failure;\n    }\n    const numbers = [];\n    for (const part of parts){\n        const n = parseIPv4Number(part);\n        if (n === failure) {\n            return failure;\n        }\n        numbers.push(n);\n    }\n    for(let i = 0; i < numbers.length - 1; ++i){\n        if (numbers[i] > 255) {\n            return failure;\n        }\n    }\n    if (numbers[numbers.length - 1] >= 256 ** (5 - numbers.length)) {\n        return failure;\n    }\n    let ipv4 = numbers.pop();\n    let counter = 0;\n    for (const n of numbers){\n        ipv4 += n * 256 ** (3 - counter);\n        ++counter;\n    }\n    return ipv4;\n}\nfunction serializeIPv4(address) {\n    let output = \"\";\n    let n = address;\n    for(let i = 1; i <= 4; ++i){\n        output = String(n % 256) + output;\n        if (i !== 4) {\n            output = `.${output}`;\n        }\n        n = Math.floor(n / 256);\n    }\n    return output;\n}\nfunction parseIPv6(input) {\n    const address = [\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0\n    ];\n    let pieceIndex = 0;\n    let compress = null;\n    let pointer = 0;\n    input = Array.from(input, (c)=>c.codePointAt(0));\n    if (input[pointer] === p(\":\")) {\n        if (input[pointer + 1] !== p(\":\")) {\n            return failure;\n        }\n        pointer += 2;\n        ++pieceIndex;\n        compress = pieceIndex;\n    }\n    while(pointer < input.length){\n        if (pieceIndex === 8) {\n            return failure;\n        }\n        if (input[pointer] === p(\":\")) {\n            if (compress !== null) {\n                return failure;\n            }\n            ++pointer;\n            ++pieceIndex;\n            compress = pieceIndex;\n            continue;\n        }\n        let value = 0;\n        let length = 0;\n        while(length < 4 && infra.isASCIIHex(input[pointer])){\n            value = value * 0x10 + parseInt(at(input, pointer), 16);\n            ++pointer;\n            ++length;\n        }\n        if (input[pointer] === p(\".\")) {\n            if (length === 0) {\n                return failure;\n            }\n            pointer -= length;\n            if (pieceIndex > 6) {\n                return failure;\n            }\n            let numbersSeen = 0;\n            while(input[pointer] !== undefined){\n                let ipv4Piece = null;\n                if (numbersSeen > 0) {\n                    if (input[pointer] === p(\".\") && numbersSeen < 4) {\n                        ++pointer;\n                    } else {\n                        return failure;\n                    }\n                }\n                if (!infra.isASCIIDigit(input[pointer])) {\n                    return failure;\n                }\n                while(infra.isASCIIDigit(input[pointer])){\n                    const number = parseInt(at(input, pointer));\n                    if (ipv4Piece === null) {\n                        ipv4Piece = number;\n                    } else if (ipv4Piece === 0) {\n                        return failure;\n                    } else {\n                        ipv4Piece = ipv4Piece * 10 + number;\n                    }\n                    if (ipv4Piece > 255) {\n                        return failure;\n                    }\n                    ++pointer;\n                }\n                address[pieceIndex] = address[pieceIndex] * 0x100 + ipv4Piece;\n                ++numbersSeen;\n                if (numbersSeen === 2 || numbersSeen === 4) {\n                    ++pieceIndex;\n                }\n            }\n            if (numbersSeen !== 4) {\n                return failure;\n            }\n            break;\n        } else if (input[pointer] === p(\":\")) {\n            ++pointer;\n            if (input[pointer] === undefined) {\n                return failure;\n            }\n        } else if (input[pointer] !== undefined) {\n            return failure;\n        }\n        address[pieceIndex] = value;\n        ++pieceIndex;\n    }\n    if (compress !== null) {\n        let swaps = pieceIndex - compress;\n        pieceIndex = 7;\n        while(pieceIndex !== 0 && swaps > 0){\n            const temp = address[compress + swaps - 1];\n            address[compress + swaps - 1] = address[pieceIndex];\n            address[pieceIndex] = temp;\n            --pieceIndex;\n            --swaps;\n        }\n    } else if (compress === null && pieceIndex !== 8) {\n        return failure;\n    }\n    return address;\n}\nfunction serializeIPv6(address) {\n    let output = \"\";\n    const compress = findLongestZeroSequence(address);\n    let ignore0 = false;\n    for(let pieceIndex = 0; pieceIndex <= 7; ++pieceIndex){\n        if (ignore0 && address[pieceIndex] === 0) {\n            continue;\n        } else if (ignore0) {\n            ignore0 = false;\n        }\n        if (compress === pieceIndex) {\n            const separator = pieceIndex === 0 ? \"::\" : \":\";\n            output += separator;\n            ignore0 = true;\n            continue;\n        }\n        output += address[pieceIndex].toString(16);\n        if (pieceIndex !== 7) {\n            output += \":\";\n        }\n    }\n    return output;\n}\nfunction parseHost(input, isNotSpecialArg = false) {\n    if (input[0] === \"[\") {\n        if (input[input.length - 1] !== \"]\") {\n            return failure;\n        }\n        return parseIPv6(input.substring(1, input.length - 1));\n    }\n    if (isNotSpecialArg) {\n        return parseOpaqueHost(input);\n    }\n    const domain = utf8DecodeWithoutBOM(percentDecodeString(input));\n    const asciiDomain = domainToASCII(domain);\n    if (asciiDomain === failure) {\n        return failure;\n    }\n    if (containsForbiddenDomainCodePoint(asciiDomain)) {\n        return failure;\n    }\n    if (endsInANumber(asciiDomain)) {\n        return parseIPv4(asciiDomain);\n    }\n    return asciiDomain;\n}\nfunction endsInANumber(input) {\n    const parts = input.split(\".\");\n    if (parts[parts.length - 1] === \"\") {\n        if (parts.length === 1) {\n            return false;\n        }\n        parts.pop();\n    }\n    const last = parts[parts.length - 1];\n    if (parseIPv4Number(last) !== failure) {\n        return true;\n    }\n    if (/^[0-9]+$/u.test(last)) {\n        return true;\n    }\n    return false;\n}\nfunction parseOpaqueHost(input) {\n    if (containsForbiddenHostCodePoint(input)) {\n        return failure;\n    }\n    return utf8PercentEncodeString(input, isC0ControlPercentEncode);\n}\nfunction findLongestZeroSequence(arr) {\n    let maxIdx = null;\n    let maxLen = 1; // only find elements > 1\n    let currStart = null;\n    let currLen = 0;\n    for(let i = 0; i < arr.length; ++i){\n        if (arr[i] !== 0) {\n            if (currLen > maxLen) {\n                maxIdx = currStart;\n                maxLen = currLen;\n            }\n            currStart = null;\n            currLen = 0;\n        } else {\n            if (currStart === null) {\n                currStart = i;\n            }\n            ++currLen;\n        }\n    }\n    // if trailing zeros\n    if (currLen > maxLen) {\n        return currStart;\n    }\n    return maxIdx;\n}\nfunction serializeHost(host) {\n    if (typeof host === \"number\") {\n        return serializeIPv4(host);\n    }\n    // IPv6 serializer\n    if (host instanceof Array) {\n        return `[${serializeIPv6(host)}]`;\n    }\n    return host;\n}\nfunction domainToASCII(domain, beStrict = false) {\n    const result = tr46.toASCII(domain, {\n        checkBidi: true,\n        checkHyphens: false,\n        checkJoiners: true,\n        useSTD3ASCIIRules: beStrict,\n        verifyDNSLength: beStrict\n    });\n    if (result === null || result === \"\") {\n        return failure;\n    }\n    return result;\n}\nfunction trimControlChars(url) {\n    return url.replace(/^[\\u0000-\\u001F\\u0020]+|[\\u0000-\\u001F\\u0020]+$/ug, \"\");\n}\nfunction trimTabAndNewline(url) {\n    return url.replace(/\\u0009|\\u000A|\\u000D/ug, \"\");\n}\nfunction shortenPath(url) {\n    const { path } = url;\n    if (path.length === 0) {\n        return;\n    }\n    if (url.scheme === \"file\" && path.length === 1 && isNormalizedWindowsDriveLetter(path[0])) {\n        return;\n    }\n    path.pop();\n}\nfunction includesCredentials(url) {\n    return url.username !== \"\" || url.password !== \"\";\n}\nfunction cannotHaveAUsernamePasswordPort(url) {\n    return url.host === null || url.host === \"\" || url.scheme === \"file\";\n}\nfunction hasAnOpaquePath(url) {\n    return typeof url.path === \"string\";\n}\nfunction isNormalizedWindowsDriveLetter(string) {\n    return /^[A-Za-z]:$/u.test(string);\n}\nfunction URLStateMachine(input, base, encodingOverride, url, stateOverride) {\n    this.pointer = 0;\n    this.input = input;\n    this.base = base || null;\n    this.encodingOverride = encodingOverride || \"utf-8\";\n    this.stateOverride = stateOverride;\n    this.url = url;\n    this.failure = false;\n    this.parseError = false;\n    if (!this.url) {\n        this.url = {\n            scheme: \"\",\n            username: \"\",\n            password: \"\",\n            host: null,\n            port: null,\n            path: [],\n            query: null,\n            fragment: null\n        };\n        const res = trimControlChars(this.input);\n        if (res !== this.input) {\n            this.parseError = true;\n        }\n        this.input = res;\n    }\n    const res = trimTabAndNewline(this.input);\n    if (res !== this.input) {\n        this.parseError = true;\n    }\n    this.input = res;\n    this.state = stateOverride || \"scheme start\";\n    this.buffer = \"\";\n    this.atFlag = false;\n    this.arrFlag = false;\n    this.passwordTokenSeenFlag = false;\n    this.input = Array.from(this.input, (c)=>c.codePointAt(0));\n    for(; this.pointer <= this.input.length; ++this.pointer){\n        const c = this.input[this.pointer];\n        const cStr = isNaN(c) ? undefined : String.fromCodePoint(c);\n        // exec state machine\n        const ret = this[`parse ${this.state}`](c, cStr);\n        if (!ret) {\n            break; // terminate algorithm\n        } else if (ret === failure) {\n            this.failure = true;\n            break;\n        }\n    }\n}\nURLStateMachine.prototype[\"parse scheme start\"] = function parseSchemeStart(c, cStr) {\n    if (infra.isASCIIAlpha(c)) {\n        this.buffer += cStr.toLowerCase();\n        this.state = \"scheme\";\n    } else if (!this.stateOverride) {\n        this.state = \"no scheme\";\n        --this.pointer;\n    } else {\n        this.parseError = true;\n        return failure;\n    }\n    return true;\n};\nURLStateMachine.prototype[\"parse scheme\"] = function parseScheme(c, cStr) {\n    if (infra.isASCIIAlphanumeric(c) || c === p(\"+\") || c === p(\"-\") || c === p(\".\")) {\n        this.buffer += cStr.toLowerCase();\n    } else if (c === p(\":\")) {\n        if (this.stateOverride) {\n            if (isSpecial(this.url) && !isSpecialScheme(this.buffer)) {\n                return false;\n            }\n            if (!isSpecial(this.url) && isSpecialScheme(this.buffer)) {\n                return false;\n            }\n            if ((includesCredentials(this.url) || this.url.port !== null) && this.buffer === \"file\") {\n                return false;\n            }\n            if (this.url.scheme === \"file\" && this.url.host === \"\") {\n                return false;\n            }\n        }\n        this.url.scheme = this.buffer;\n        if (this.stateOverride) {\n            if (this.url.port === defaultPort(this.url.scheme)) {\n                this.url.port = null;\n            }\n            return false;\n        }\n        this.buffer = \"\";\n        if (this.url.scheme === \"file\") {\n            if (this.input[this.pointer + 1] !== p(\"/\") || this.input[this.pointer + 2] !== p(\"/\")) {\n                this.parseError = true;\n            }\n            this.state = \"file\";\n        } else if (isSpecial(this.url) && this.base !== null && this.base.scheme === this.url.scheme) {\n            this.state = \"special relative or authority\";\n        } else if (isSpecial(this.url)) {\n            this.state = \"special authority slashes\";\n        } else if (this.input[this.pointer + 1] === p(\"/\")) {\n            this.state = \"path or authority\";\n            ++this.pointer;\n        } else {\n            this.url.path = \"\";\n            this.state = \"opaque path\";\n        }\n    } else if (!this.stateOverride) {\n        this.buffer = \"\";\n        this.state = \"no scheme\";\n        this.pointer = -1;\n    } else {\n        this.parseError = true;\n        return failure;\n    }\n    return true;\n};\nURLStateMachine.prototype[\"parse no scheme\"] = function parseNoScheme(c) {\n    if (this.base === null || hasAnOpaquePath(this.base) && c !== p(\"#\")) {\n        return failure;\n    } else if (hasAnOpaquePath(this.base) && c === p(\"#\")) {\n        this.url.scheme = this.base.scheme;\n        this.url.path = this.base.path;\n        this.url.query = this.base.query;\n        this.url.fragment = \"\";\n        this.state = \"fragment\";\n    } else if (this.base.scheme === \"file\") {\n        this.state = \"file\";\n        --this.pointer;\n    } else {\n        this.state = \"relative\";\n        --this.pointer;\n    }\n    return true;\n};\nURLStateMachine.prototype[\"parse special relative or authority\"] = function parseSpecialRelativeOrAuthority(c) {\n    if (c === p(\"/\") && this.input[this.pointer + 1] === p(\"/\")) {\n        this.state = \"special authority ignore slashes\";\n        ++this.pointer;\n    } else {\n        this.parseError = true;\n        this.state = \"relative\";\n        --this.pointer;\n    }\n    return true;\n};\nURLStateMachine.prototype[\"parse path or authority\"] = function parsePathOrAuthority(c) {\n    if (c === p(\"/\")) {\n        this.state = \"authority\";\n    } else {\n        this.state = \"path\";\n        --this.pointer;\n    }\n    return true;\n};\nURLStateMachine.prototype[\"parse relative\"] = function parseRelative(c) {\n    this.url.scheme = this.base.scheme;\n    if (c === p(\"/\")) {\n        this.state = \"relative slash\";\n    } else if (isSpecial(this.url) && c === p(\"\\\\\")) {\n        this.parseError = true;\n        this.state = \"relative slash\";\n    } else {\n        this.url.username = this.base.username;\n        this.url.password = this.base.password;\n        this.url.host = this.base.host;\n        this.url.port = this.base.port;\n        this.url.path = this.base.path.slice();\n        this.url.query = this.base.query;\n        if (c === p(\"?\")) {\n            this.url.query = \"\";\n            this.state = \"query\";\n        } else if (c === p(\"#\")) {\n            this.url.fragment = \"\";\n            this.state = \"fragment\";\n        } else if (!isNaN(c)) {\n            this.url.query = null;\n            this.url.path.pop();\n            this.state = \"path\";\n            --this.pointer;\n        }\n    }\n    return true;\n};\nURLStateMachine.prototype[\"parse relative slash\"] = function parseRelativeSlash(c) {\n    if (isSpecial(this.url) && (c === p(\"/\") || c === p(\"\\\\\"))) {\n        if (c === p(\"\\\\\")) {\n            this.parseError = true;\n        }\n        this.state = \"special authority ignore slashes\";\n    } else if (c === p(\"/\")) {\n        this.state = \"authority\";\n    } else {\n        this.url.username = this.base.username;\n        this.url.password = this.base.password;\n        this.url.host = this.base.host;\n        this.url.port = this.base.port;\n        this.state = \"path\";\n        --this.pointer;\n    }\n    return true;\n};\nURLStateMachine.prototype[\"parse special authority slashes\"] = function parseSpecialAuthoritySlashes(c) {\n    if (c === p(\"/\") && this.input[this.pointer + 1] === p(\"/\")) {\n        this.state = \"special authority ignore slashes\";\n        ++this.pointer;\n    } else {\n        this.parseError = true;\n        this.state = \"special authority ignore slashes\";\n        --this.pointer;\n    }\n    return true;\n};\nURLStateMachine.prototype[\"parse special authority ignore slashes\"] = function parseSpecialAuthorityIgnoreSlashes(c) {\n    if (c !== p(\"/\") && c !== p(\"\\\\\")) {\n        this.state = \"authority\";\n        --this.pointer;\n    } else {\n        this.parseError = true;\n    }\n    return true;\n};\nURLStateMachine.prototype[\"parse authority\"] = function parseAuthority(c, cStr) {\n    if (c === p(\"@\")) {\n        this.parseError = true;\n        if (this.atFlag) {\n            this.buffer = `%40${this.buffer}`;\n        }\n        this.atFlag = true;\n        // careful, this is based on buffer and has its own pointer (this.pointer != pointer) and inner chars\n        const len = countSymbols(this.buffer);\n        for(let pointer = 0; pointer < len; ++pointer){\n            const codePoint = this.buffer.codePointAt(pointer);\n            if (codePoint === p(\":\") && !this.passwordTokenSeenFlag) {\n                this.passwordTokenSeenFlag = true;\n                continue;\n            }\n            const encodedCodePoints = utf8PercentEncodeCodePoint(codePoint, isUserinfoPercentEncode);\n            if (this.passwordTokenSeenFlag) {\n                this.url.password += encodedCodePoints;\n            } else {\n                this.url.username += encodedCodePoints;\n            }\n        }\n        this.buffer = \"\";\n    } else if (isNaN(c) || c === p(\"/\") || c === p(\"?\") || c === p(\"#\") || isSpecial(this.url) && c === p(\"\\\\\")) {\n        if (this.atFlag && this.buffer === \"\") {\n            this.parseError = true;\n            return failure;\n        }\n        this.pointer -= countSymbols(this.buffer) + 1;\n        this.buffer = \"\";\n        this.state = \"host\";\n    } else {\n        this.buffer += cStr;\n    }\n    return true;\n};\nURLStateMachine.prototype[\"parse hostname\"] = URLStateMachine.prototype[\"parse host\"] = function parseHostName(c, cStr) {\n    if (this.stateOverride && this.url.scheme === \"file\") {\n        --this.pointer;\n        this.state = \"file host\";\n    } else if (c === p(\":\") && !this.arrFlag) {\n        if (this.buffer === \"\") {\n            this.parseError = true;\n            return failure;\n        }\n        if (this.stateOverride === \"hostname\") {\n            return false;\n        }\n        const host = parseHost(this.buffer, isNotSpecial(this.url));\n        if (host === failure) {\n            return failure;\n        }\n        this.url.host = host;\n        this.buffer = \"\";\n        this.state = \"port\";\n    } else if (isNaN(c) || c === p(\"/\") || c === p(\"?\") || c === p(\"#\") || isSpecial(this.url) && c === p(\"\\\\\")) {\n        --this.pointer;\n        if (isSpecial(this.url) && this.buffer === \"\") {\n            this.parseError = true;\n            return failure;\n        } else if (this.stateOverride && this.buffer === \"\" && (includesCredentials(this.url) || this.url.port !== null)) {\n            this.parseError = true;\n            return false;\n        }\n        const host = parseHost(this.buffer, isNotSpecial(this.url));\n        if (host === failure) {\n            return failure;\n        }\n        this.url.host = host;\n        this.buffer = \"\";\n        this.state = \"path start\";\n        if (this.stateOverride) {\n            return false;\n        }\n    } else {\n        if (c === p(\"[\")) {\n            this.arrFlag = true;\n        } else if (c === p(\"]\")) {\n            this.arrFlag = false;\n        }\n        this.buffer += cStr;\n    }\n    return true;\n};\nURLStateMachine.prototype[\"parse port\"] = function parsePort(c, cStr) {\n    if (infra.isASCIIDigit(c)) {\n        this.buffer += cStr;\n    } else if (isNaN(c) || c === p(\"/\") || c === p(\"?\") || c === p(\"#\") || isSpecial(this.url) && c === p(\"\\\\\") || this.stateOverride) {\n        if (this.buffer !== \"\") {\n            const port = parseInt(this.buffer);\n            if (port > 2 ** 16 - 1) {\n                this.parseError = true;\n                return failure;\n            }\n            this.url.port = port === defaultPort(this.url.scheme) ? null : port;\n            this.buffer = \"\";\n        }\n        if (this.stateOverride) {\n            return false;\n        }\n        this.state = \"path start\";\n        --this.pointer;\n    } else {\n        this.parseError = true;\n        return failure;\n    }\n    return true;\n};\nconst fileOtherwiseCodePoints = new Set([\n    p(\"/\"),\n    p(\"\\\\\"),\n    p(\"?\"),\n    p(\"#\")\n]);\nfunction startsWithWindowsDriveLetter(input, pointer) {\n    const length = input.length - pointer;\n    return length >= 2 && isWindowsDriveLetterCodePoints(input[pointer], input[pointer + 1]) && (length === 2 || fileOtherwiseCodePoints.has(input[pointer + 2]));\n}\nURLStateMachine.prototype[\"parse file\"] = function parseFile(c) {\n    this.url.scheme = \"file\";\n    this.url.host = \"\";\n    if (c === p(\"/\") || c === p(\"\\\\\")) {\n        if (c === p(\"\\\\\")) {\n            this.parseError = true;\n        }\n        this.state = \"file slash\";\n    } else if (this.base !== null && this.base.scheme === \"file\") {\n        this.url.host = this.base.host;\n        this.url.path = this.base.path.slice();\n        this.url.query = this.base.query;\n        if (c === p(\"?\")) {\n            this.url.query = \"\";\n            this.state = \"query\";\n        } else if (c === p(\"#\")) {\n            this.url.fragment = \"\";\n            this.state = \"fragment\";\n        } else if (!isNaN(c)) {\n            this.url.query = null;\n            if (!startsWithWindowsDriveLetter(this.input, this.pointer)) {\n                shortenPath(this.url);\n            } else {\n                this.parseError = true;\n                this.url.path = [];\n            }\n            this.state = \"path\";\n            --this.pointer;\n        }\n    } else {\n        this.state = \"path\";\n        --this.pointer;\n    }\n    return true;\n};\nURLStateMachine.prototype[\"parse file slash\"] = function parseFileSlash(c) {\n    if (c === p(\"/\") || c === p(\"\\\\\")) {\n        if (c === p(\"\\\\\")) {\n            this.parseError = true;\n        }\n        this.state = \"file host\";\n    } else {\n        if (this.base !== null && this.base.scheme === \"file\") {\n            if (!startsWithWindowsDriveLetter(this.input, this.pointer) && isNormalizedWindowsDriveLetterString(this.base.path[0])) {\n                this.url.path.push(this.base.path[0]);\n            }\n            this.url.host = this.base.host;\n        }\n        this.state = \"path\";\n        --this.pointer;\n    }\n    return true;\n};\nURLStateMachine.prototype[\"parse file host\"] = function parseFileHost(c, cStr) {\n    if (isNaN(c) || c === p(\"/\") || c === p(\"\\\\\") || c === p(\"?\") || c === p(\"#\")) {\n        --this.pointer;\n        if (!this.stateOverride && isWindowsDriveLetterString(this.buffer)) {\n            this.parseError = true;\n            this.state = \"path\";\n        } else if (this.buffer === \"\") {\n            this.url.host = \"\";\n            if (this.stateOverride) {\n                return false;\n            }\n            this.state = \"path start\";\n        } else {\n            let host = parseHost(this.buffer, isNotSpecial(this.url));\n            if (host === failure) {\n                return failure;\n            }\n            if (host === \"localhost\") {\n                host = \"\";\n            }\n            this.url.host = host;\n            if (this.stateOverride) {\n                return false;\n            }\n            this.buffer = \"\";\n            this.state = \"path start\";\n        }\n    } else {\n        this.buffer += cStr;\n    }\n    return true;\n};\nURLStateMachine.prototype[\"parse path start\"] = function parsePathStart(c) {\n    if (isSpecial(this.url)) {\n        if (c === p(\"\\\\\")) {\n            this.parseError = true;\n        }\n        this.state = \"path\";\n        if (c !== p(\"/\") && c !== p(\"\\\\\")) {\n            --this.pointer;\n        }\n    } else if (!this.stateOverride && c === p(\"?\")) {\n        this.url.query = \"\";\n        this.state = \"query\";\n    } else if (!this.stateOverride && c === p(\"#\")) {\n        this.url.fragment = \"\";\n        this.state = \"fragment\";\n    } else if (c !== undefined) {\n        this.state = \"path\";\n        if (c !== p(\"/\")) {\n            --this.pointer;\n        }\n    } else if (this.stateOverride && this.url.host === null) {\n        this.url.path.push(\"\");\n    }\n    return true;\n};\nURLStateMachine.prototype[\"parse path\"] = function parsePath(c) {\n    if (isNaN(c) || c === p(\"/\") || isSpecial(this.url) && c === p(\"\\\\\") || !this.stateOverride && (c === p(\"?\") || c === p(\"#\"))) {\n        if (isSpecial(this.url) && c === p(\"\\\\\")) {\n            this.parseError = true;\n        }\n        if (isDoubleDot(this.buffer)) {\n            shortenPath(this.url);\n            if (c !== p(\"/\") && !(isSpecial(this.url) && c === p(\"\\\\\"))) {\n                this.url.path.push(\"\");\n            }\n        } else if (isSingleDot(this.buffer) && c !== p(\"/\") && !(isSpecial(this.url) && c === p(\"\\\\\"))) {\n            this.url.path.push(\"\");\n        } else if (!isSingleDot(this.buffer)) {\n            if (this.url.scheme === \"file\" && this.url.path.length === 0 && isWindowsDriveLetterString(this.buffer)) {\n                this.buffer = `${this.buffer[0]}:`;\n            }\n            this.url.path.push(this.buffer);\n        }\n        this.buffer = \"\";\n        if (c === p(\"?\")) {\n            this.url.query = \"\";\n            this.state = \"query\";\n        }\n        if (c === p(\"#\")) {\n            this.url.fragment = \"\";\n            this.state = \"fragment\";\n        }\n    } else {\n        // TODO: If c is not a URL code point and not \"%\", parse error.\n        if (c === p(\"%\") && (!infra.isASCIIHex(this.input[this.pointer + 1]) || !infra.isASCIIHex(this.input[this.pointer + 2]))) {\n            this.parseError = true;\n        }\n        this.buffer += utf8PercentEncodeCodePoint(c, isPathPercentEncode);\n    }\n    return true;\n};\nURLStateMachine.prototype[\"parse opaque path\"] = function parseOpaquePath(c) {\n    if (c === p(\"?\")) {\n        this.url.query = \"\";\n        this.state = \"query\";\n    } else if (c === p(\"#\")) {\n        this.url.fragment = \"\";\n        this.state = \"fragment\";\n    } else {\n        // TODO: Add: not a URL code point\n        if (!isNaN(c) && c !== p(\"%\")) {\n            this.parseError = true;\n        }\n        if (c === p(\"%\") && (!infra.isASCIIHex(this.input[this.pointer + 1]) || !infra.isASCIIHex(this.input[this.pointer + 2]))) {\n            this.parseError = true;\n        }\n        if (!isNaN(c)) {\n            this.url.path += utf8PercentEncodeCodePoint(c, isC0ControlPercentEncode);\n        }\n    }\n    return true;\n};\nURLStateMachine.prototype[\"parse query\"] = function parseQuery(c, cStr) {\n    if (!isSpecial(this.url) || this.url.scheme === \"ws\" || this.url.scheme === \"wss\") {\n        this.encodingOverride = \"utf-8\";\n    }\n    if (!this.stateOverride && c === p(\"#\") || isNaN(c)) {\n        const queryPercentEncodePredicate = isSpecial(this.url) ? isSpecialQueryPercentEncode : isQueryPercentEncode;\n        this.url.query += utf8PercentEncodeString(this.buffer, queryPercentEncodePredicate);\n        this.buffer = \"\";\n        if (c === p(\"#\")) {\n            this.url.fragment = \"\";\n            this.state = \"fragment\";\n        }\n    } else if (!isNaN(c)) {\n        // TODO: If c is not a URL code point and not \"%\", parse error.\n        if (c === p(\"%\") && (!infra.isASCIIHex(this.input[this.pointer + 1]) || !infra.isASCIIHex(this.input[this.pointer + 2]))) {\n            this.parseError = true;\n        }\n        this.buffer += cStr;\n    }\n    return true;\n};\nURLStateMachine.prototype[\"parse fragment\"] = function parseFragment(c) {\n    if (!isNaN(c)) {\n        // TODO: If c is not a URL code point and not \"%\", parse error.\n        if (c === p(\"%\") && (!infra.isASCIIHex(this.input[this.pointer + 1]) || !infra.isASCIIHex(this.input[this.pointer + 2]))) {\n            this.parseError = true;\n        }\n        this.url.fragment += utf8PercentEncodeCodePoint(c, isFragmentPercentEncode);\n    }\n    return true;\n};\nfunction serializeURL(url, excludeFragment) {\n    let output = `${url.scheme}:`;\n    if (url.host !== null) {\n        output += \"//\";\n        if (url.username !== \"\" || url.password !== \"\") {\n            output += url.username;\n            if (url.password !== \"\") {\n                output += `:${url.password}`;\n            }\n            output += \"@\";\n        }\n        output += serializeHost(url.host);\n        if (url.port !== null) {\n            output += `:${url.port}`;\n        }\n    }\n    if (url.host === null && !hasAnOpaquePath(url) && url.path.length > 1 && url.path[0] === \"\") {\n        output += \"/.\";\n    }\n    output += serializePath(url);\n    if (url.query !== null) {\n        output += `?${url.query}`;\n    }\n    if (!excludeFragment && url.fragment !== null) {\n        output += `#${url.fragment}`;\n    }\n    return output;\n}\nfunction serializeOrigin(tuple) {\n    let result = `${tuple.scheme}://`;\n    result += serializeHost(tuple.host);\n    if (tuple.port !== null) {\n        result += `:${tuple.port}`;\n    }\n    return result;\n}\nfunction serializePath(url) {\n    if (hasAnOpaquePath(url)) {\n        return url.path;\n    }\n    let output = \"\";\n    for (const segment of url.path){\n        output += `/${segment}`;\n    }\n    return output;\n}\nmodule.exports.serializeURL = serializeURL;\nmodule.exports.serializePath = serializePath;\nmodule.exports.serializeURLOrigin = function(url) {\n    // https://url.spec.whatwg.org/#concept-url-origin\n    switch(url.scheme){\n        case \"blob\":\n            {\n                const pathURL = module.exports.parseURL(serializePath(url));\n                if (pathURL === null) {\n                    return \"null\";\n                }\n                if (pathURL.scheme !== \"http\" && pathURL.scheme !== \"https\") {\n                    return \"null\";\n                }\n                return module.exports.serializeURLOrigin(pathURL);\n            }\n        case \"ftp\":\n        case \"http\":\n        case \"https\":\n        case \"ws\":\n        case \"wss\":\n            return serializeOrigin({\n                scheme: url.scheme,\n                host: url.host,\n                port: url.port\n            });\n        case \"file\":\n            // The spec says:\n            // > Unfortunate as it is, this is left as an exercise to the reader. When in doubt, return a new opaque origin.\n            // Browsers tested so far:\n            // - Chrome says \"file://\", but treats file: URLs as cross-origin for most (all?) purposes; see e.g.\n            //   https://bugs.chromium.org/p/chromium/issues/detail?id=37586\n            // - Firefox says \"null\", but treats file: URLs as same-origin sometimes based on directory stuff; see\n            //   https://developer.mozilla.org/en-US/docs/Archive/Misc_top_level/Same-origin_policy_for_file:_URIs\n            return \"null\";\n        default:\n            // serializing an opaque origin returns \"null\"\n            return \"null\";\n    }\n};\nmodule.exports.basicURLParse = function(input, options) {\n    if (options === undefined) {\n        options = {};\n    }\n    const usm = new URLStateMachine(input, options.baseURL, options.encodingOverride, options.url, options.stateOverride);\n    if (usm.failure) {\n        return null;\n    }\n    return usm.url;\n};\nmodule.exports.setTheUsername = function(url, username) {\n    url.username = utf8PercentEncodeString(username, isUserinfoPercentEncode);\n};\nmodule.exports.setThePassword = function(url, password) {\n    url.password = utf8PercentEncodeString(password, isUserinfoPercentEncode);\n};\nmodule.exports.serializeHost = serializeHost;\nmodule.exports.cannotHaveAUsernamePasswordPort = cannotHaveAUsernamePasswordPort;\nmodule.exports.hasAnOpaquePath = hasAnOpaquePath;\nmodule.exports.serializeInteger = function(integer) {\n    return String(integer);\n};\nmodule.exports.parseURL = function(input, options) {\n    if (options === undefined) {\n        options = {};\n    }\n    // We don't handle blobs, so this just delegates:\n    return module.exports.basicURLParse(input, {\n        baseURL: options.baseURL,\n        encodingOverride: options.encodingOverride\n    });\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/whatwg-url/lib/url-state-machine.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/whatwg-url/lib/urlencoded.js":
/*!***************************************************!*\
  !*** ./node_modules/whatwg-url/lib/urlencoded.js ***!
  \***************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nconst { utf8Encode, utf8DecodeWithoutBOM } = __webpack_require__(/*! ./encoding */ \"(ssr)/./node_modules/whatwg-url/lib/encoding.js\");\nconst { percentDecodeBytes, utf8PercentEncodeString, isURLEncodedPercentEncode } = __webpack_require__(/*! ./percent-encoding */ \"(ssr)/./node_modules/whatwg-url/lib/percent-encoding.js\");\nfunction p(char) {\n    return char.codePointAt(0);\n}\n// https://url.spec.whatwg.org/#concept-urlencoded-parser\nfunction parseUrlencoded(input) {\n    const sequences = strictlySplitByteSequence(input, p(\"&\"));\n    const output = [];\n    for (const bytes of sequences){\n        if (bytes.length === 0) {\n            continue;\n        }\n        let name, value;\n        const indexOfEqual = bytes.indexOf(p(\"=\"));\n        if (indexOfEqual >= 0) {\n            name = bytes.slice(0, indexOfEqual);\n            value = bytes.slice(indexOfEqual + 1);\n        } else {\n            name = bytes;\n            value = new Uint8Array(0);\n        }\n        name = replaceByteInByteSequence(name, 0x2B, 0x20);\n        value = replaceByteInByteSequence(value, 0x2B, 0x20);\n        const nameString = utf8DecodeWithoutBOM(percentDecodeBytes(name));\n        const valueString = utf8DecodeWithoutBOM(percentDecodeBytes(value));\n        output.push([\n            nameString,\n            valueString\n        ]);\n    }\n    return output;\n}\n// https://url.spec.whatwg.org/#concept-urlencoded-string-parser\nfunction parseUrlencodedString(input) {\n    return parseUrlencoded(utf8Encode(input));\n}\n// https://url.spec.whatwg.org/#concept-urlencoded-serializer\nfunction serializeUrlencoded(tuples, encodingOverride = undefined) {\n    let encoding = \"utf-8\";\n    if (encodingOverride !== undefined) {\n        // TODO \"get the output encoding\", i.e. handle encoding labels vs. names.\n        encoding = encodingOverride;\n    }\n    let output = \"\";\n    for (const [i, tuple] of tuples.entries()){\n        // TODO: handle encoding override\n        const name = utf8PercentEncodeString(tuple[0], isURLEncodedPercentEncode, true);\n        let value = tuple[1];\n        if (tuple.length > 2 && tuple[2] !== undefined) {\n            if (tuple[2] === \"hidden\" && name === \"_charset_\") {\n                value = encoding;\n            } else if (tuple[2] === \"file\") {\n                // value is a File object\n                value = value.name;\n            }\n        }\n        value = utf8PercentEncodeString(value, isURLEncodedPercentEncode, true);\n        if (i !== 0) {\n            output += \"&\";\n        }\n        output += `${name}=${value}`;\n    }\n    return output;\n}\nfunction strictlySplitByteSequence(buf, cp) {\n    const list = [];\n    let last = 0;\n    let i = buf.indexOf(cp);\n    while(i >= 0){\n        list.push(buf.slice(last, i));\n        last = i + 1;\n        i = buf.indexOf(cp, last);\n    }\n    if (last !== buf.length) {\n        list.push(buf.slice(last));\n    }\n    return list;\n}\nfunction replaceByteInByteSequence(buf, from, to) {\n    let i = buf.indexOf(from);\n    while(i >= 0){\n        buf[i] = to;\n        i = buf.indexOf(from, i + 1);\n    }\n    return buf;\n}\nmodule.exports = {\n    parseUrlencodedString,\n    serializeUrlencoded\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvd2hhdHdnLXVybC9saWIvdXJsZW5jb2RlZC5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLE1BQU0sRUFBRUEsVUFBVSxFQUFFQyxvQkFBb0IsRUFBRSxHQUFHQyxtQkFBT0EsQ0FBQyxtRUFBWTtBQUNqRSxNQUFNLEVBQUVDLGtCQUFrQixFQUFFQyx1QkFBdUIsRUFBRUMseUJBQXlCLEVBQUUsR0FBR0gsbUJBQU9BLENBQUMsbUZBQW9CO0FBRS9HLFNBQVNJLEVBQUVDLElBQUk7SUFDYixPQUFPQSxLQUFLQyxXQUFXLENBQUM7QUFDMUI7QUFFQSx5REFBeUQ7QUFDekQsU0FBU0MsZ0JBQWdCQyxLQUFLO0lBQzVCLE1BQU1DLFlBQVlDLDBCQUEwQkYsT0FBT0osRUFBRTtJQUNyRCxNQUFNTyxTQUFTLEVBQUU7SUFDakIsS0FBSyxNQUFNQyxTQUFTSCxVQUFXO1FBQzdCLElBQUlHLE1BQU1DLE1BQU0sS0FBSyxHQUFHO1lBQ3RCO1FBQ0Y7UUFFQSxJQUFJQyxNQUFNQztRQUNWLE1BQU1DLGVBQWVKLE1BQU1LLE9BQU8sQ0FBQ2IsRUFBRTtRQUVyQyxJQUFJWSxnQkFBZ0IsR0FBRztZQUNyQkYsT0FBT0YsTUFBTU0sS0FBSyxDQUFDLEdBQUdGO1lBQ3RCRCxRQUFRSCxNQUFNTSxLQUFLLENBQUNGLGVBQWU7UUFDckMsT0FBTztZQUNMRixPQUFPRjtZQUNQRyxRQUFRLElBQUlJLFdBQVc7UUFDekI7UUFFQUwsT0FBT00sMEJBQTBCTixNQUFNLE1BQU07UUFDN0NDLFFBQVFLLDBCQUEwQkwsT0FBTyxNQUFNO1FBRS9DLE1BQU1NLGFBQWF0QixxQkFBcUJFLG1CQUFtQmE7UUFDM0QsTUFBTVEsY0FBY3ZCLHFCQUFxQkUsbUJBQW1CYztRQUU1REosT0FBT1ksSUFBSSxDQUFDO1lBQUNGO1lBQVlDO1NBQVk7SUFDdkM7SUFDQSxPQUFPWDtBQUNUO0FBRUEsZ0VBQWdFO0FBQ2hFLFNBQVNhLHNCQUFzQmhCLEtBQUs7SUFDbEMsT0FBT0QsZ0JBQWdCVCxXQUFXVTtBQUNwQztBQUVBLDZEQUE2RDtBQUM3RCxTQUFTaUIsb0JBQW9CQyxNQUFNLEVBQUVDLG1CQUFtQkMsU0FBUztJQUMvRCxJQUFJQyxXQUFXO0lBQ2YsSUFBSUYscUJBQXFCQyxXQUFXO1FBQ2xDLHlFQUF5RTtRQUN6RUMsV0FBV0Y7SUFDYjtJQUVBLElBQUloQixTQUFTO0lBQ2IsS0FBSyxNQUFNLENBQUNtQixHQUFHQyxNQUFNLElBQUlMLE9BQU9NLE9BQU8sR0FBSTtRQUN6QyxpQ0FBaUM7UUFFakMsTUFBTWxCLE9BQU9aLHdCQUF3QjZCLEtBQUssQ0FBQyxFQUFFLEVBQUU1QiwyQkFBMkI7UUFFMUUsSUFBSVksUUFBUWdCLEtBQUssQ0FBQyxFQUFFO1FBQ3BCLElBQUlBLE1BQU1sQixNQUFNLEdBQUcsS0FBS2tCLEtBQUssQ0FBQyxFQUFFLEtBQUtILFdBQVc7WUFDOUMsSUFBSUcsS0FBSyxDQUFDLEVBQUUsS0FBSyxZQUFZakIsU0FBUyxhQUFhO2dCQUNqREMsUUFBUWM7WUFDVixPQUFPLElBQUlFLEtBQUssQ0FBQyxFQUFFLEtBQUssUUFBUTtnQkFDOUIseUJBQXlCO2dCQUN6QmhCLFFBQVFBLE1BQU1ELElBQUk7WUFDcEI7UUFDRjtRQUVBQyxRQUFRYix3QkFBd0JhLE9BQU9aLDJCQUEyQjtRQUVsRSxJQUFJMkIsTUFBTSxHQUFHO1lBQ1huQixVQUFVO1FBQ1o7UUFDQUEsVUFBVSxDQUFDLEVBQUVHLEtBQUssQ0FBQyxFQUFFQyxNQUFNLENBQUM7SUFDOUI7SUFDQSxPQUFPSjtBQUNUO0FBRUEsU0FBU0QsMEJBQTBCdUIsR0FBRyxFQUFFQyxFQUFFO0lBQ3hDLE1BQU1DLE9BQU8sRUFBRTtJQUNmLElBQUlDLE9BQU87SUFDWCxJQUFJTixJQUFJRyxJQUFJaEIsT0FBTyxDQUFDaUI7SUFDcEIsTUFBT0osS0FBSyxFQUFHO1FBQ2JLLEtBQUtaLElBQUksQ0FBQ1UsSUFBSWYsS0FBSyxDQUFDa0IsTUFBTU47UUFDMUJNLE9BQU9OLElBQUk7UUFDWEEsSUFBSUcsSUFBSWhCLE9BQU8sQ0FBQ2lCLElBQUlFO0lBQ3RCO0lBQ0EsSUFBSUEsU0FBU0gsSUFBSXBCLE1BQU0sRUFBRTtRQUN2QnNCLEtBQUtaLElBQUksQ0FBQ1UsSUFBSWYsS0FBSyxDQUFDa0I7SUFDdEI7SUFDQSxPQUFPRDtBQUNUO0FBRUEsU0FBU2YsMEJBQTBCYSxHQUFHLEVBQUVJLElBQUksRUFBRUMsRUFBRTtJQUM5QyxJQUFJUixJQUFJRyxJQUFJaEIsT0FBTyxDQUFDb0I7SUFDcEIsTUFBT1AsS0FBSyxFQUFHO1FBQ2JHLEdBQUcsQ0FBQ0gsRUFBRSxHQUFHUTtRQUNUUixJQUFJRyxJQUFJaEIsT0FBTyxDQUFDb0IsTUFBTVAsSUFBSTtJQUM1QjtJQUNBLE9BQU9HO0FBQ1Q7QUFFQU0sT0FBT0MsT0FBTyxHQUFHO0lBQ2ZoQjtJQUNBQztBQUNGIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYmxvZy1hcHBsaWNhdGlvbi8uL25vZGVfbW9kdWxlcy93aGF0d2ctdXJsL2xpYi91cmxlbmNvZGVkLmpzPzZiYWQiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5jb25zdCB7IHV0ZjhFbmNvZGUsIHV0ZjhEZWNvZGVXaXRob3V0Qk9NIH0gPSByZXF1aXJlKFwiLi9lbmNvZGluZ1wiKTtcbmNvbnN0IHsgcGVyY2VudERlY29kZUJ5dGVzLCB1dGY4UGVyY2VudEVuY29kZVN0cmluZywgaXNVUkxFbmNvZGVkUGVyY2VudEVuY29kZSB9ID0gcmVxdWlyZShcIi4vcGVyY2VudC1lbmNvZGluZ1wiKTtcblxuZnVuY3Rpb24gcChjaGFyKSB7XG4gIHJldHVybiBjaGFyLmNvZGVQb2ludEF0KDApO1xufVxuXG4vLyBodHRwczovL3VybC5zcGVjLndoYXR3Zy5vcmcvI2NvbmNlcHQtdXJsZW5jb2RlZC1wYXJzZXJcbmZ1bmN0aW9uIHBhcnNlVXJsZW5jb2RlZChpbnB1dCkge1xuICBjb25zdCBzZXF1ZW5jZXMgPSBzdHJpY3RseVNwbGl0Qnl0ZVNlcXVlbmNlKGlucHV0LCBwKFwiJlwiKSk7XG4gIGNvbnN0IG91dHB1dCA9IFtdO1xuICBmb3IgKGNvbnN0IGJ5dGVzIG9mIHNlcXVlbmNlcykge1xuICAgIGlmIChieXRlcy5sZW5ndGggPT09IDApIHtcbiAgICAgIGNvbnRpbnVlO1xuICAgIH1cblxuICAgIGxldCBuYW1lLCB2YWx1ZTtcbiAgICBjb25zdCBpbmRleE9mRXF1YWwgPSBieXRlcy5pbmRleE9mKHAoXCI9XCIpKTtcblxuICAgIGlmIChpbmRleE9mRXF1YWwgPj0gMCkge1xuICAgICAgbmFtZSA9IGJ5dGVzLnNsaWNlKDAsIGluZGV4T2ZFcXVhbCk7XG4gICAgICB2YWx1ZSA9IGJ5dGVzLnNsaWNlKGluZGV4T2ZFcXVhbCArIDEpO1xuICAgIH0gZWxzZSB7XG4gICAgICBuYW1lID0gYnl0ZXM7XG4gICAgICB2YWx1ZSA9IG5ldyBVaW50OEFycmF5KDApO1xuICAgIH1cblxuICAgIG5hbWUgPSByZXBsYWNlQnl0ZUluQnl0ZVNlcXVlbmNlKG5hbWUsIDB4MkIsIDB4MjApO1xuICAgIHZhbHVlID0gcmVwbGFjZUJ5dGVJbkJ5dGVTZXF1ZW5jZSh2YWx1ZSwgMHgyQiwgMHgyMCk7XG5cbiAgICBjb25zdCBuYW1lU3RyaW5nID0gdXRmOERlY29kZVdpdGhvdXRCT00ocGVyY2VudERlY29kZUJ5dGVzKG5hbWUpKTtcbiAgICBjb25zdCB2YWx1ZVN0cmluZyA9IHV0ZjhEZWNvZGVXaXRob3V0Qk9NKHBlcmNlbnREZWNvZGVCeXRlcyh2YWx1ZSkpO1xuXG4gICAgb3V0cHV0LnB1c2goW25hbWVTdHJpbmcsIHZhbHVlU3RyaW5nXSk7XG4gIH1cbiAgcmV0dXJuIG91dHB1dDtcbn1cblxuLy8gaHR0cHM6Ly91cmwuc3BlYy53aGF0d2cub3JnLyNjb25jZXB0LXVybGVuY29kZWQtc3RyaW5nLXBhcnNlclxuZnVuY3Rpb24gcGFyc2VVcmxlbmNvZGVkU3RyaW5nKGlucHV0KSB7XG4gIHJldHVybiBwYXJzZVVybGVuY29kZWQodXRmOEVuY29kZShpbnB1dCkpO1xufVxuXG4vLyBodHRwczovL3VybC5zcGVjLndoYXR3Zy5vcmcvI2NvbmNlcHQtdXJsZW5jb2RlZC1zZXJpYWxpemVyXG5mdW5jdGlvbiBzZXJpYWxpemVVcmxlbmNvZGVkKHR1cGxlcywgZW5jb2RpbmdPdmVycmlkZSA9IHVuZGVmaW5lZCkge1xuICBsZXQgZW5jb2RpbmcgPSBcInV0Zi04XCI7XG4gIGlmIChlbmNvZGluZ092ZXJyaWRlICE9PSB1bmRlZmluZWQpIHtcbiAgICAvLyBUT0RPIFwiZ2V0IHRoZSBvdXRwdXQgZW5jb2RpbmdcIiwgaS5lLiBoYW5kbGUgZW5jb2RpbmcgbGFiZWxzIHZzLiBuYW1lcy5cbiAgICBlbmNvZGluZyA9IGVuY29kaW5nT3ZlcnJpZGU7XG4gIH1cblxuICBsZXQgb3V0cHV0ID0gXCJcIjtcbiAgZm9yIChjb25zdCBbaSwgdHVwbGVdIG9mIHR1cGxlcy5lbnRyaWVzKCkpIHtcbiAgICAvLyBUT0RPOiBoYW5kbGUgZW5jb2Rpbmcgb3ZlcnJpZGVcblxuICAgIGNvbnN0IG5hbWUgPSB1dGY4UGVyY2VudEVuY29kZVN0cmluZyh0dXBsZVswXSwgaXNVUkxFbmNvZGVkUGVyY2VudEVuY29kZSwgdHJ1ZSk7XG5cbiAgICBsZXQgdmFsdWUgPSB0dXBsZVsxXTtcbiAgICBpZiAodHVwbGUubGVuZ3RoID4gMiAmJiB0dXBsZVsyXSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICBpZiAodHVwbGVbMl0gPT09IFwiaGlkZGVuXCIgJiYgbmFtZSA9PT0gXCJfY2hhcnNldF9cIikge1xuICAgICAgICB2YWx1ZSA9IGVuY29kaW5nO1xuICAgICAgfSBlbHNlIGlmICh0dXBsZVsyXSA9PT0gXCJmaWxlXCIpIHtcbiAgICAgICAgLy8gdmFsdWUgaXMgYSBGaWxlIG9iamVjdFxuICAgICAgICB2YWx1ZSA9IHZhbHVlLm5hbWU7XG4gICAgICB9XG4gICAgfVxuXG4gICAgdmFsdWUgPSB1dGY4UGVyY2VudEVuY29kZVN0cmluZyh2YWx1ZSwgaXNVUkxFbmNvZGVkUGVyY2VudEVuY29kZSwgdHJ1ZSk7XG5cbiAgICBpZiAoaSAhPT0gMCkge1xuICAgICAgb3V0cHV0ICs9IFwiJlwiO1xuICAgIH1cbiAgICBvdXRwdXQgKz0gYCR7bmFtZX09JHt2YWx1ZX1gO1xuICB9XG4gIHJldHVybiBvdXRwdXQ7XG59XG5cbmZ1bmN0aW9uIHN0cmljdGx5U3BsaXRCeXRlU2VxdWVuY2UoYnVmLCBjcCkge1xuICBjb25zdCBsaXN0ID0gW107XG4gIGxldCBsYXN0ID0gMDtcbiAgbGV0IGkgPSBidWYuaW5kZXhPZihjcCk7XG4gIHdoaWxlIChpID49IDApIHtcbiAgICBsaXN0LnB1c2goYnVmLnNsaWNlKGxhc3QsIGkpKTtcbiAgICBsYXN0ID0gaSArIDE7XG4gICAgaSA9IGJ1Zi5pbmRleE9mKGNwLCBsYXN0KTtcbiAgfVxuICBpZiAobGFzdCAhPT0gYnVmLmxlbmd0aCkge1xuICAgIGxpc3QucHVzaChidWYuc2xpY2UobGFzdCkpO1xuICB9XG4gIHJldHVybiBsaXN0O1xufVxuXG5mdW5jdGlvbiByZXBsYWNlQnl0ZUluQnl0ZVNlcXVlbmNlKGJ1ZiwgZnJvbSwgdG8pIHtcbiAgbGV0IGkgPSBidWYuaW5kZXhPZihmcm9tKTtcbiAgd2hpbGUgKGkgPj0gMCkge1xuICAgIGJ1ZltpXSA9IHRvO1xuICAgIGkgPSBidWYuaW5kZXhPZihmcm9tLCBpICsgMSk7XG4gIH1cbiAgcmV0dXJuIGJ1Zjtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIHBhcnNlVXJsZW5jb2RlZFN0cmluZyxcbiAgc2VyaWFsaXplVXJsZW5jb2RlZFxufTtcbiJdLCJuYW1lcyI6WyJ1dGY4RW5jb2RlIiwidXRmOERlY29kZVdpdGhvdXRCT00iLCJyZXF1aXJlIiwicGVyY2VudERlY29kZUJ5dGVzIiwidXRmOFBlcmNlbnRFbmNvZGVTdHJpbmciLCJpc1VSTEVuY29kZWRQZXJjZW50RW5jb2RlIiwicCIsImNoYXIiLCJjb2RlUG9pbnRBdCIsInBhcnNlVXJsZW5jb2RlZCIsImlucHV0Iiwic2VxdWVuY2VzIiwic3RyaWN0bHlTcGxpdEJ5dGVTZXF1ZW5jZSIsIm91dHB1dCIsImJ5dGVzIiwibGVuZ3RoIiwibmFtZSIsInZhbHVlIiwiaW5kZXhPZkVxdWFsIiwiaW5kZXhPZiIsInNsaWNlIiwiVWludDhBcnJheSIsInJlcGxhY2VCeXRlSW5CeXRlU2VxdWVuY2UiLCJuYW1lU3RyaW5nIiwidmFsdWVTdHJpbmciLCJwdXNoIiwicGFyc2VVcmxlbmNvZGVkU3RyaW5nIiwic2VyaWFsaXplVXJsZW5jb2RlZCIsInR1cGxlcyIsImVuY29kaW5nT3ZlcnJpZGUiLCJ1bmRlZmluZWQiLCJlbmNvZGluZyIsImkiLCJ0dXBsZSIsImVudHJpZXMiLCJidWYiLCJjcCIsImxpc3QiLCJsYXN0IiwiZnJvbSIsInRvIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/whatwg-url/lib/urlencoded.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/whatwg-url/lib/utils.js":
/*!**********************************************!*\
  !*** ./node_modules/whatwg-url/lib/utils.js ***!
  \**********************************************/
/***/ ((module, exports) => {

eval("\n// Returns \"Type(value) is Object\" in ES terminology.\nfunction isObject(value) {\n    return typeof value === \"object\" && value !== null || typeof value === \"function\";\n}\nconst hasOwn = Function.prototype.call.bind(Object.prototype.hasOwnProperty);\n// Like `Object.assign`, but using `[[GetOwnProperty]]` and `[[DefineOwnProperty]]`\n// instead of `[[Get]]` and `[[Set]]` and only allowing objects\nfunction define(target, source) {\n    for (const key of Reflect.ownKeys(source)){\n        const descriptor = Reflect.getOwnPropertyDescriptor(source, key);\n        if (descriptor && !Reflect.defineProperty(target, key, descriptor)) {\n            throw new TypeError(`Cannot redefine property: ${String(key)}`);\n        }\n    }\n}\nfunction newObjectInRealm(globalObject, object) {\n    const ctorRegistry = initCtorRegistry(globalObject);\n    return Object.defineProperties(Object.create(ctorRegistry[\"%Object.prototype%\"]), Object.getOwnPropertyDescriptors(object));\n}\nconst wrapperSymbol = Symbol(\"wrapper\");\nconst implSymbol = Symbol(\"impl\");\nconst sameObjectCaches = Symbol(\"SameObject caches\");\nconst ctorRegistrySymbol = Symbol.for(\"[webidl2js] constructor registry\");\nconst AsyncIteratorPrototype = Object.getPrototypeOf(Object.getPrototypeOf(async function*() {}).prototype);\nfunction initCtorRegistry(globalObject) {\n    if (hasOwn(globalObject, ctorRegistrySymbol)) {\n        return globalObject[ctorRegistrySymbol];\n    }\n    const ctorRegistry = Object.create(null);\n    // In addition to registering all the WebIDL2JS-generated types in the constructor registry,\n    // we also register a few intrinsics that we make use of in generated code, since they are not\n    // easy to grab from the globalObject variable.\n    ctorRegistry[\"%Object.prototype%\"] = globalObject.Object.prototype;\n    ctorRegistry[\"%IteratorPrototype%\"] = Object.getPrototypeOf(Object.getPrototypeOf(new globalObject.Array()[Symbol.iterator]()));\n    try {\n        ctorRegistry[\"%AsyncIteratorPrototype%\"] = Object.getPrototypeOf(Object.getPrototypeOf(globalObject.eval(\"(async function* () {})\").prototype));\n    } catch  {\n        ctorRegistry[\"%AsyncIteratorPrototype%\"] = AsyncIteratorPrototype;\n    }\n    globalObject[ctorRegistrySymbol] = ctorRegistry;\n    return ctorRegistry;\n}\nfunction getSameObject(wrapper, prop, creator) {\n    if (!wrapper[sameObjectCaches]) {\n        wrapper[sameObjectCaches] = Object.create(null);\n    }\n    if (prop in wrapper[sameObjectCaches]) {\n        return wrapper[sameObjectCaches][prop];\n    }\n    wrapper[sameObjectCaches][prop] = creator();\n    return wrapper[sameObjectCaches][prop];\n}\nfunction wrapperForImpl(impl) {\n    return impl ? impl[wrapperSymbol] : null;\n}\nfunction implForWrapper(wrapper) {\n    return wrapper ? wrapper[implSymbol] : null;\n}\nfunction tryWrapperForImpl(impl) {\n    const wrapper = wrapperForImpl(impl);\n    return wrapper ? wrapper : impl;\n}\nfunction tryImplForWrapper(wrapper) {\n    const impl = implForWrapper(wrapper);\n    return impl ? impl : wrapper;\n}\nconst iterInternalSymbol = Symbol(\"internal\");\nfunction isArrayIndexPropName(P) {\n    if (typeof P !== \"string\") {\n        return false;\n    }\n    const i = P >>> 0;\n    if (i === 2 ** 32 - 1) {\n        return false;\n    }\n    const s = `${i}`;\n    if (P !== s) {\n        return false;\n    }\n    return true;\n}\nconst byteLengthGetter = Object.getOwnPropertyDescriptor(ArrayBuffer.prototype, \"byteLength\").get;\nfunction isArrayBuffer(value) {\n    try {\n        byteLengthGetter.call(value);\n        return true;\n    } catch (e) {\n        return false;\n    }\n}\nfunction iteratorResult([key, value], kind) {\n    let result;\n    switch(kind){\n        case \"key\":\n            result = key;\n            break;\n        case \"value\":\n            result = value;\n            break;\n        case \"key+value\":\n            result = [\n                key,\n                value\n            ];\n            break;\n    }\n    return {\n        value: result,\n        done: false\n    };\n}\nconst supportsPropertyIndex = Symbol(\"supports property index\");\nconst supportedPropertyIndices = Symbol(\"supported property indices\");\nconst supportsPropertyName = Symbol(\"supports property name\");\nconst supportedPropertyNames = Symbol(\"supported property names\");\nconst indexedGet = Symbol(\"indexed property get\");\nconst indexedSetNew = Symbol(\"indexed property set new\");\nconst indexedSetExisting = Symbol(\"indexed property set existing\");\nconst namedGet = Symbol(\"named property get\");\nconst namedSetNew = Symbol(\"named property set new\");\nconst namedSetExisting = Symbol(\"named property set existing\");\nconst namedDelete = Symbol(\"named property delete\");\nconst asyncIteratorNext = Symbol(\"async iterator get the next iteration result\");\nconst asyncIteratorReturn = Symbol(\"async iterator return steps\");\nconst asyncIteratorInit = Symbol(\"async iterator initialization steps\");\nconst asyncIteratorEOI = Symbol(\"async iterator end of iteration\");\nmodule.exports = exports = {\n    isObject,\n    hasOwn,\n    define,\n    newObjectInRealm,\n    wrapperSymbol,\n    implSymbol,\n    getSameObject,\n    ctorRegistrySymbol,\n    initCtorRegistry,\n    wrapperForImpl,\n    implForWrapper,\n    tryWrapperForImpl,\n    tryImplForWrapper,\n    iterInternalSymbol,\n    isArrayBuffer,\n    isArrayIndexPropName,\n    supportsPropertyIndex,\n    supportedPropertyIndices,\n    supportsPropertyName,\n    supportedPropertyNames,\n    indexedGet,\n    indexedSetNew,\n    indexedSetExisting,\n    namedGet,\n    namedSetNew,\n    namedSetExisting,\n    namedDelete,\n    asyncIteratorNext,\n    asyncIteratorReturn,\n    asyncIteratorInit,\n    asyncIteratorEOI,\n    iteratorResult\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/whatwg-url/lib/utils.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/whatwg-url/node_modules/webidl-conversions/lib/index.js":
/*!******************************************************************************!*\
  !*** ./node_modules/whatwg-url/node_modules/webidl-conversions/lib/index.js ***!
  \******************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nfunction makeException(ErrorType, message, options) {\n    if (options.globals) {\n        ErrorType = options.globals[ErrorType.name];\n    }\n    return new ErrorType(`${options.context ? options.context : \"Value\"} ${message}.`);\n}\nfunction toNumber(value, options) {\n    if (typeof value === \"bigint\") {\n        throw makeException(TypeError, \"is a BigInt which cannot be converted to a number\", options);\n    }\n    if (!options.globals) {\n        return Number(value);\n    }\n    return options.globals.Number(value);\n}\n// Round x to the nearest integer, choosing the even integer if it lies halfway between two.\nfunction evenRound(x) {\n    // There are four cases for numbers with fractional part being .5:\n    //\n    // case |     x     | floor(x) | round(x) | expected | x <> 0 | x % 1 | x & 1 |   example\n    //   1  |  2n + 0.5 |  2n      |  2n + 1  |  2n      |   >    |  0.5  |   0   |  0.5 ->  0\n    //   2  |  2n + 1.5 |  2n + 1  |  2n + 2  |  2n + 2  |   >    |  0.5  |   1   |  1.5 ->  2\n    //   3  | -2n - 0.5 | -2n - 1  | -2n      | -2n      |   <    | -0.5  |   0   | -0.5 ->  0\n    //   4  | -2n - 1.5 | -2n - 2  | -2n - 1  | -2n - 2  |   <    | -0.5  |   1   | -1.5 -> -2\n    // (where n is a non-negative integer)\n    //\n    // Branch here for cases 1 and 4\n    if (x > 0 && x % 1 === +0.5 && (x & 1) === 0 || x < 0 && x % 1 === -0.5 && (x & 1) === 1) {\n        return censorNegativeZero(Math.floor(x));\n    }\n    return censorNegativeZero(Math.round(x));\n}\nfunction integerPart(n) {\n    return censorNegativeZero(Math.trunc(n));\n}\nfunction sign(x) {\n    return x < 0 ? -1 : 1;\n}\nfunction modulo(x, y) {\n    // https://tc39.github.io/ecma262/#eqn-modulo\n    // Note that http://stackoverflow.com/a/4467559/3191 does NOT work for large modulos\n    const signMightNotMatch = x % y;\n    if (sign(y) !== sign(signMightNotMatch)) {\n        return signMightNotMatch + y;\n    }\n    return signMightNotMatch;\n}\nfunction censorNegativeZero(x) {\n    return x === 0 ? 0 : x;\n}\nfunction createIntegerConversion(bitLength, { unsigned }) {\n    let lowerBound, upperBound;\n    if (unsigned) {\n        lowerBound = 0;\n        upperBound = 2 ** bitLength - 1;\n    } else {\n        lowerBound = -(2 ** (bitLength - 1));\n        upperBound = 2 ** (bitLength - 1) - 1;\n    }\n    const twoToTheBitLength = 2 ** bitLength;\n    const twoToOneLessThanTheBitLength = 2 ** (bitLength - 1);\n    return (value, options = {})=>{\n        let x = toNumber(value, options);\n        x = censorNegativeZero(x);\n        if (options.enforceRange) {\n            if (!Number.isFinite(x)) {\n                throw makeException(TypeError, \"is not a finite number\", options);\n            }\n            x = integerPart(x);\n            if (x < lowerBound || x > upperBound) {\n                throw makeException(TypeError, `is outside the accepted range of ${lowerBound} to ${upperBound}, inclusive`, options);\n            }\n            return x;\n        }\n        if (!Number.isNaN(x) && options.clamp) {\n            x = Math.min(Math.max(x, lowerBound), upperBound);\n            x = evenRound(x);\n            return x;\n        }\n        if (!Number.isFinite(x) || x === 0) {\n            return 0;\n        }\n        x = integerPart(x);\n        // Math.pow(2, 64) is not accurately representable in JavaScript, so try to avoid these per-spec operations if\n        // possible. Hopefully it's an optimization for the non-64-bitLength cases too.\n        if (x >= lowerBound && x <= upperBound) {\n            return x;\n        }\n        // These will not work great for bitLength of 64, but oh well. See the README for more details.\n        x = modulo(x, twoToTheBitLength);\n        if (!unsigned && x >= twoToOneLessThanTheBitLength) {\n            return x - twoToTheBitLength;\n        }\n        return x;\n    };\n}\nfunction createLongLongConversion(bitLength, { unsigned }) {\n    const upperBound = Number.MAX_SAFE_INTEGER;\n    const lowerBound = unsigned ? 0 : Number.MIN_SAFE_INTEGER;\n    const asBigIntN = unsigned ? BigInt.asUintN : BigInt.asIntN;\n    return (value, options = {})=>{\n        let x = toNumber(value, options);\n        x = censorNegativeZero(x);\n        if (options.enforceRange) {\n            if (!Number.isFinite(x)) {\n                throw makeException(TypeError, \"is not a finite number\", options);\n            }\n            x = integerPart(x);\n            if (x < lowerBound || x > upperBound) {\n                throw makeException(TypeError, `is outside the accepted range of ${lowerBound} to ${upperBound}, inclusive`, options);\n            }\n            return x;\n        }\n        if (!Number.isNaN(x) && options.clamp) {\n            x = Math.min(Math.max(x, lowerBound), upperBound);\n            x = evenRound(x);\n            return x;\n        }\n        if (!Number.isFinite(x) || x === 0) {\n            return 0;\n        }\n        let xBigInt = BigInt(integerPart(x));\n        xBigInt = asBigIntN(bitLength, xBigInt);\n        return Number(xBigInt);\n    };\n}\nexports.any = (value)=>{\n    return value;\n};\nexports.undefined = ()=>{\n    return undefined;\n};\nexports.boolean = (value)=>{\n    return Boolean(value);\n};\nexports.byte = createIntegerConversion(8, {\n    unsigned: false\n});\nexports.octet = createIntegerConversion(8, {\n    unsigned: true\n});\nexports.short = createIntegerConversion(16, {\n    unsigned: false\n});\nexports[\"unsigned short\"] = createIntegerConversion(16, {\n    unsigned: true\n});\nexports.long = createIntegerConversion(32, {\n    unsigned: false\n});\nexports[\"unsigned long\"] = createIntegerConversion(32, {\n    unsigned: true\n});\nexports[\"long long\"] = createLongLongConversion(64, {\n    unsigned: false\n});\nexports[\"unsigned long long\"] = createLongLongConversion(64, {\n    unsigned: true\n});\nexports.double = (value, options = {})=>{\n    const x = toNumber(value, options);\n    if (!Number.isFinite(x)) {\n        throw makeException(TypeError, \"is not a finite floating-point value\", options);\n    }\n    return x;\n};\nexports[\"unrestricted double\"] = (value, options = {})=>{\n    const x = toNumber(value, options);\n    return x;\n};\nexports.float = (value, options = {})=>{\n    const x = toNumber(value, options);\n    if (!Number.isFinite(x)) {\n        throw makeException(TypeError, \"is not a finite floating-point value\", options);\n    }\n    if (Object.is(x, -0)) {\n        return x;\n    }\n    const y = Math.fround(x);\n    if (!Number.isFinite(y)) {\n        throw makeException(TypeError, \"is outside the range of a single-precision floating-point value\", options);\n    }\n    return y;\n};\nexports[\"unrestricted float\"] = (value, options = {})=>{\n    const x = toNumber(value, options);\n    if (isNaN(x)) {\n        return x;\n    }\n    if (Object.is(x, -0)) {\n        return x;\n    }\n    return Math.fround(x);\n};\nexports.DOMString = (value, options = {})=>{\n    if (options.treatNullAsEmptyString && value === null) {\n        return \"\";\n    }\n    if (typeof value === \"symbol\") {\n        throw makeException(TypeError, \"is a symbol, which cannot be converted to a string\", options);\n    }\n    const StringCtor = options.globals ? options.globals.String : String;\n    return StringCtor(value);\n};\nexports.ByteString = (value, options = {})=>{\n    const x = exports.DOMString(value, options);\n    let c;\n    for(let i = 0; (c = x.codePointAt(i)) !== undefined; ++i){\n        if (c > 255) {\n            throw makeException(TypeError, \"is not a valid ByteString\", options);\n        }\n    }\n    return x;\n};\nexports.USVString = (value, options = {})=>{\n    const S = exports.DOMString(value, options);\n    const n = S.length;\n    const U = [];\n    for(let i = 0; i < n; ++i){\n        const c = S.charCodeAt(i);\n        if (c < 0xD800 || c > 0xDFFF) {\n            U.push(String.fromCodePoint(c));\n        } else if (0xDC00 <= c && c <= 0xDFFF) {\n            U.push(String.fromCodePoint(0xFFFD));\n        } else if (i === n - 1) {\n            U.push(String.fromCodePoint(0xFFFD));\n        } else {\n            const d = S.charCodeAt(i + 1);\n            if (0xDC00 <= d && d <= 0xDFFF) {\n                const a = c & 0x3FF;\n                const b = d & 0x3FF;\n                U.push(String.fromCodePoint((2 << 15) + (2 << 9) * a + b));\n                ++i;\n            } else {\n                U.push(String.fromCodePoint(0xFFFD));\n            }\n        }\n    }\n    return U.join(\"\");\n};\nexports.object = (value, options = {})=>{\n    if (value === null || typeof value !== \"object\" && typeof value !== \"function\") {\n        throw makeException(TypeError, \"is not an object\", options);\n    }\n    return value;\n};\nconst abByteLengthGetter = Object.getOwnPropertyDescriptor(ArrayBuffer.prototype, \"byteLength\").get;\nconst sabByteLengthGetter = typeof SharedArrayBuffer === \"function\" ? Object.getOwnPropertyDescriptor(SharedArrayBuffer.prototype, \"byteLength\").get : null;\nfunction isNonSharedArrayBuffer(value) {\n    try {\n        // This will throw on SharedArrayBuffers, but not detached ArrayBuffers.\n        // (The spec says it should throw, but the spec conflicts with implementations: https://github.com/tc39/ecma262/issues/678)\n        abByteLengthGetter.call(value);\n        return true;\n    } catch  {\n        return false;\n    }\n}\nfunction isSharedArrayBuffer(value) {\n    try {\n        sabByteLengthGetter.call(value);\n        return true;\n    } catch  {\n        return false;\n    }\n}\nfunction isArrayBufferDetached(value) {\n    try {\n        // eslint-disable-next-line no-new\n        new Uint8Array(value);\n        return false;\n    } catch  {\n        return true;\n    }\n}\nexports.ArrayBuffer = (value, options = {})=>{\n    if (!isNonSharedArrayBuffer(value)) {\n        if (options.allowShared && !isSharedArrayBuffer(value)) {\n            throw makeException(TypeError, \"is not an ArrayBuffer or SharedArrayBuffer\", options);\n        }\n        throw makeException(TypeError, \"is not an ArrayBuffer\", options);\n    }\n    if (isArrayBufferDetached(value)) {\n        throw makeException(TypeError, \"is a detached ArrayBuffer\", options);\n    }\n    return value;\n};\nconst dvByteLengthGetter = Object.getOwnPropertyDescriptor(DataView.prototype, \"byteLength\").get;\nexports.DataView = (value, options = {})=>{\n    try {\n        dvByteLengthGetter.call(value);\n    } catch (e) {\n        throw makeException(TypeError, \"is not a DataView\", options);\n    }\n    if (!options.allowShared && isSharedArrayBuffer(value.buffer)) {\n        throw makeException(TypeError, \"is backed by a SharedArrayBuffer, which is not allowed\", options);\n    }\n    if (isArrayBufferDetached(value.buffer)) {\n        throw makeException(TypeError, \"is backed by a detached ArrayBuffer\", options);\n    }\n    return value;\n};\n// Returns the unforgeable `TypedArray` constructor name or `undefined`,\n// if the `this` value isn't a valid `TypedArray` object.\n//\n// https://tc39.es/ecma262/#sec-get-%typedarray%.prototype-@@tostringtag\nconst typedArrayNameGetter = Object.getOwnPropertyDescriptor(Object.getPrototypeOf(Uint8Array).prototype, Symbol.toStringTag).get;\n[\n    Int8Array,\n    Int16Array,\n    Int32Array,\n    Uint8Array,\n    Uint16Array,\n    Uint32Array,\n    Uint8ClampedArray,\n    Float32Array,\n    Float64Array\n].forEach((func)=>{\n    const { name } = func;\n    const article = /^[AEIOU]/u.test(name) ? \"an\" : \"a\";\n    exports[name] = (value, options = {})=>{\n        if (!ArrayBuffer.isView(value) || typedArrayNameGetter.call(value) !== name) {\n            throw makeException(TypeError, `is not ${article} ${name} object`, options);\n        }\n        if (!options.allowShared && isSharedArrayBuffer(value.buffer)) {\n            throw makeException(TypeError, \"is a view on a SharedArrayBuffer, which is not allowed\", options);\n        }\n        if (isArrayBufferDetached(value.buffer)) {\n            throw makeException(TypeError, \"is a view on a detached ArrayBuffer\", options);\n        }\n        return value;\n    };\n});\n// Common definitions\nexports.ArrayBufferView = (value, options = {})=>{\n    if (!ArrayBuffer.isView(value)) {\n        throw makeException(TypeError, \"is not a view on an ArrayBuffer or SharedArrayBuffer\", options);\n    }\n    if (!options.allowShared && isSharedArrayBuffer(value.buffer)) {\n        throw makeException(TypeError, \"is a view on a SharedArrayBuffer, which is not allowed\", options);\n    }\n    if (isArrayBufferDetached(value.buffer)) {\n        throw makeException(TypeError, \"is a view on a detached ArrayBuffer\", options);\n    }\n    return value;\n};\nexports.BufferSource = (value, options = {})=>{\n    if (ArrayBuffer.isView(value)) {\n        if (!options.allowShared && isSharedArrayBuffer(value.buffer)) {\n            throw makeException(TypeError, \"is a view on a SharedArrayBuffer, which is not allowed\", options);\n        }\n        if (isArrayBufferDetached(value.buffer)) {\n            throw makeException(TypeError, \"is a view on a detached ArrayBuffer\", options);\n        }\n        return value;\n    }\n    if (!options.allowShared && !isNonSharedArrayBuffer(value)) {\n        throw makeException(TypeError, \"is not an ArrayBuffer or a view on one\", options);\n    }\n    if (options.allowShared && !isSharedArrayBuffer(value) && !isNonSharedArrayBuffer(value)) {\n        throw makeException(TypeError, \"is not an ArrayBuffer, SharedArrayBuffer, or a view on one\", options);\n    }\n    if (isArrayBufferDetached(value)) {\n        throw makeException(TypeError, \"is a detached ArrayBuffer\", options);\n    }\n    return value;\n};\nexports.DOMTimeStamp = exports[\"unsigned long long\"];\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/whatwg-url/node_modules/webidl-conversions/lib/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/whatwg-url/webidl2js-wrapper.js":
/*!******************************************************!*\
  !*** ./node_modules/whatwg-url/webidl2js-wrapper.js ***!
  \******************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nconst URL = __webpack_require__(/*! ./lib/URL */ \"(ssr)/./node_modules/whatwg-url/lib/URL.js\");\nconst URLSearchParams = __webpack_require__(/*! ./lib/URLSearchParams */ \"(ssr)/./node_modules/whatwg-url/lib/URLSearchParams.js\");\nexports.URL = URL;\nexports.URLSearchParams = URLSearchParams;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvd2hhdHdnLXVybC93ZWJpZGwyanMtd3JhcHBlci5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUViLE1BQU1BLE1BQU1DLG1CQUFPQSxDQUFDLDZEQUFXO0FBQy9CLE1BQU1DLGtCQUFrQkQsbUJBQU9BLENBQUMscUZBQXVCO0FBRXZERSxXQUFXLEdBQUdIO0FBQ2RHLHVCQUF1QixHQUFHRCIsInNvdXJjZXMiOlsid2VicGFjazovL2Jsb2ctYXBwbGljYXRpb24vLi9ub2RlX21vZHVsZXMvd2hhdHdnLXVybC93ZWJpZGwyanMtd3JhcHBlci5qcz9jZGI4Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG5jb25zdCBVUkwgPSByZXF1aXJlKFwiLi9saWIvVVJMXCIpO1xuY29uc3QgVVJMU2VhcmNoUGFyYW1zID0gcmVxdWlyZShcIi4vbGliL1VSTFNlYXJjaFBhcmFtc1wiKTtcblxuZXhwb3J0cy5VUkwgPSBVUkw7XG5leHBvcnRzLlVSTFNlYXJjaFBhcmFtcyA9IFVSTFNlYXJjaFBhcmFtcztcbiJdLCJuYW1lcyI6WyJVUkwiLCJyZXF1aXJlIiwiVVJMU2VhcmNoUGFyYW1zIiwiZXhwb3J0cyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/whatwg-url/webidl2js-wrapper.js\n");

/***/ })

};
;