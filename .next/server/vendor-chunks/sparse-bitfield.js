"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/sparse-bitfield";
exports.ids = ["vendor-chunks/sparse-bitfield"];
exports.modules = {

/***/ "(ssr)/./node_modules/sparse-bitfield/index.js":
/*!***********************************************!*\
  !*** ./node_modules/sparse-bitfield/index.js ***!
  \***********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar pager = __webpack_require__(/*! memory-pager */ \"(ssr)/./node_modules/memory-pager/index.js\");\nmodule.exports = Bitfield;\nfunction Bitfield(opts) {\n    if (!(this instanceof Bitfield)) return new Bitfield(opts);\n    if (!opts) opts = {};\n    if (Buffer.isBuffer(opts)) opts = {\n        buffer: opts\n    };\n    this.pageOffset = opts.pageOffset || 0;\n    this.pageSize = opts.pageSize || 1024;\n    this.pages = opts.pages || pager(this.pageSize);\n    this.byteLength = this.pages.length * this.pageSize;\n    this.length = 8 * this.byteLength;\n    if (!powerOfTwo(this.pageSize)) throw new Error(\"The page size should be a power of two\");\n    this._trackUpdates = !!opts.trackUpdates;\n    this._pageMask = this.pageSize - 1;\n    if (opts.buffer) {\n        for(var i = 0; i < opts.buffer.length; i += this.pageSize){\n            this.pages.set(i / this.pageSize, opts.buffer.slice(i, i + this.pageSize));\n        }\n        this.byteLength = opts.buffer.length;\n        this.length = 8 * this.byteLength;\n    }\n}\nBitfield.prototype.get = function(i) {\n    var o = i & 7;\n    var j = (i - o) / 8;\n    return !!(this.getByte(j) & 128 >> o);\n};\nBitfield.prototype.getByte = function(i) {\n    var o = i & this._pageMask;\n    var j = (i - o) / this.pageSize;\n    var page = this.pages.get(j, true);\n    return page ? page.buffer[o + this.pageOffset] : 0;\n};\nBitfield.prototype.set = function(i, v) {\n    var o = i & 7;\n    var j = (i - o) / 8;\n    var b = this.getByte(j);\n    return this.setByte(j, v ? b | 128 >> o : b & (255 ^ 128 >> o));\n};\nBitfield.prototype.toBuffer = function() {\n    var all = alloc(this.pages.length * this.pageSize);\n    for(var i = 0; i < this.pages.length; i++){\n        var next = this.pages.get(i, true);\n        var allOffset = i * this.pageSize;\n        if (next) next.buffer.copy(all, allOffset, this.pageOffset, this.pageOffset + this.pageSize);\n    }\n    return all;\n};\nBitfield.prototype.setByte = function(i, b) {\n    var o = i & this._pageMask;\n    var j = (i - o) / this.pageSize;\n    var page = this.pages.get(j, false);\n    o += this.pageOffset;\n    if (page.buffer[o] === b) return false;\n    page.buffer[o] = b;\n    if (i >= this.byteLength) {\n        this.byteLength = i + 1;\n        this.length = this.byteLength * 8;\n    }\n    if (this._trackUpdates) this.pages.updated(page);\n    return true;\n};\nfunction alloc(n) {\n    if (Buffer.alloc) return Buffer.alloc(n);\n    var b = new Buffer(n);\n    b.fill(0);\n    return b;\n}\nfunction powerOfTwo(x) {\n    return !(x & x - 1);\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvc3BhcnNlLWJpdGZpZWxkL2luZGV4LmpzIiwibWFwcGluZ3MiOiI7QUFBQSxJQUFJQSxRQUFRQyxtQkFBT0EsQ0FBQztBQUVwQkMsT0FBT0MsT0FBTyxHQUFHQztBQUVqQixTQUFTQSxTQUFVQyxJQUFJO0lBQ3JCLElBQUksQ0FBRSxLQUFJLFlBQVlELFFBQU8sR0FBSSxPQUFPLElBQUlBLFNBQVNDO0lBQ3JELElBQUksQ0FBQ0EsTUFBTUEsT0FBTyxDQUFDO0lBQ25CLElBQUlDLE9BQU9DLFFBQVEsQ0FBQ0YsT0FBT0EsT0FBTztRQUFDRyxRQUFRSDtJQUFJO0lBRS9DLElBQUksQ0FBQ0ksVUFBVSxHQUFHSixLQUFLSSxVQUFVLElBQUk7SUFDckMsSUFBSSxDQUFDQyxRQUFRLEdBQUdMLEtBQUtLLFFBQVEsSUFBSTtJQUNqQyxJQUFJLENBQUNDLEtBQUssR0FBR04sS0FBS00sS0FBSyxJQUFJWCxNQUFNLElBQUksQ0FBQ1UsUUFBUTtJQUU5QyxJQUFJLENBQUNFLFVBQVUsR0FBRyxJQUFJLENBQUNELEtBQUssQ0FBQ0UsTUFBTSxHQUFHLElBQUksQ0FBQ0gsUUFBUTtJQUNuRCxJQUFJLENBQUNHLE1BQU0sR0FBRyxJQUFJLElBQUksQ0FBQ0QsVUFBVTtJQUVqQyxJQUFJLENBQUNFLFdBQVcsSUFBSSxDQUFDSixRQUFRLEdBQUcsTUFBTSxJQUFJSyxNQUFNO0lBRWhELElBQUksQ0FBQ0MsYUFBYSxHQUFHLENBQUMsQ0FBQ1gsS0FBS1ksWUFBWTtJQUN4QyxJQUFJLENBQUNDLFNBQVMsR0FBRyxJQUFJLENBQUNSLFFBQVEsR0FBRztJQUVqQyxJQUFJTCxLQUFLRyxNQUFNLEVBQUU7UUFDZixJQUFLLElBQUlXLElBQUksR0FBR0EsSUFBSWQsS0FBS0csTUFBTSxDQUFDSyxNQUFNLEVBQUVNLEtBQUssSUFBSSxDQUFDVCxRQUFRLENBQUU7WUFDMUQsSUFBSSxDQUFDQyxLQUFLLENBQUNTLEdBQUcsQ0FBQ0QsSUFBSSxJQUFJLENB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TyxDQUFDVjtJQUUzQyxPQUFPO0FBQ1Q7QUFFQSxTQUFTTSxNQUFPSyxDQUFDO0lBQ2YsSUFBSWhDLE9BQU8yQixLQUFLLEVBQUUsT0FBTzNCLE9BQU8yQixLQUFLLENBQUNLO0lBQ3RDLElBQUlULElBQUksSUFBSXZCLE9BQU9nQztJQUNuQlQsRUFBRVUsSUFBSSxDQUFDO0lBQ1AsT0FBT1Y7QUFDVDtBQUVBLFNBQVNmLFdBQVkwQixDQUFDO0lBQ3BCLE9BQU8sQ0FBRUEsQ0FBQUEsSUFBS0EsSUFBSSxDQUFDO0FBQ3JCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYmxvZy1hcHBsaWNhdGlvbi8uL25vZGVfbW9kdWxlcy9zcGFyc2UtYml0ZmllbGQvaW5kZXguanM/MGQ1ZSJdLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgcGFnZXIgPSByZXF1aXJlKCdtZW1vcnktcGFnZXInKVxuXG5tb2R1bGUuZXhwb3J0cyA9IEJpdGZpZWxkXG5cbmZ1bmN0aW9uIEJpdGZpZWxkIChvcHRzKSB7XG4gIGlmICghKHRoaXMgaW5zdGFuY2VvZiBCaXRmaWVsZCkpIHJldHVybiBuZXcgQml0ZmllbGQob3B0cylcbiAgaWYgKCFvcHRzKSBvcHRzID0ge31cbiAgaWYgKEJ1ZmZlci5pc0J1ZmZlcihvcHRzKSkgb3B0cyA9IHtidWZmZXI6IG9wdHN9XG5cbiAgdGhpcy5wYWdlT2Zmc2V0ID0gb3B0cy5wYWdlT2Zmc2V0IHx8IDBcbiAgdGhpcy5wYWdlU2l6ZSA9IG9wdHMucGFnZVNpemUgfHwgMTAyNFxuICB0aGlzLnBhZ2VzID0gb3B0cy5wYWdlcyB8fCBwYWdlcih0aGlzLnBhZ2VTaXplKVxuXG4gIHRoaXMuYnl0ZUxlbmd0aCA9IHRoaXMucGFnZXMubGVuZ3RoICogdGhpcy5wYWdlU2l6ZVxuICB0aGlzLmxlbmd0aCA9IDggKiB0aGlzLmJ5dGVMZW5ndGhcblxuICBpZiAoIXBvd2VyT2ZUd28odGhpcy5wYWdlU2l6ZSkpIHRocm93IG5ldyBFcnJvcignVGhlIHBhZ2Ugc2l6ZSBzaG91bGQgYmUgYSBwb3dlciBvZiB0d28nKVxuXG4gIHRoaXMuX3RyYWNrVXBkYXRlcyA9ICEhb3B0cy50cmFja1VwZGF0ZXNcbiAgdGhpcy5fcGFnZU1hc2sgPSB0aGlzLnBhZ2VTaXplIC0gMVxuXG4gIGlmIChvcHRzLmJ1ZmZlcikge1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgb3B0cy5idWZmZXIubGVuZ3RoOyBpICs9IHRoaXMucGFnZVNpemUpIHtcbiAgICAgIHRoaXMucGFnZXMuc2V0KGkgLyB0aGlzLnBhZ2VTaXplLCBvcHRzLmJ1ZmZlci5zbGljZShpLCBpICsgdGhpcy5wYWdlU2l6ZSkpXG4gICAgfVxuICAgIHRoaXMuYnl0ZUxlbmd0aCA9IG9wdHMuYnVmZmVyLmxlbmd0aFxuICAgIHRoaXMubGVuZ3RoID0gOCAqIHRoaXMuYnl0ZUxlbmd0aFxuICB9XG59XG5cbkJpdGZpZWxkLnByb3RvdHlwZS5nZXQgPSBmdW5jdGlvbiAoaSkge1xuICB2YXIgbyA9IGkgJiA3XG4gIHZhciBqID0gKGkgLSBvKSAvIDhcblxuICByZXR1cm4gISEodGhpcy5nZXRCeXRlKGopICYgKDEyOCA+PiBvKSlcbn1cblxuQml0ZmllbGQucHJvdG90eXBlLmdldEJ5dGUgPSBmdW5jdGlvbiAoaSkge1xuICB2YXIgbyA9IGkgJiB0aGlzLl9wYWdlTWFza1xuICB2YXIgaiA9IChpIC0gbykgLyB0aGlzLnBhZ2VTaXplXG4gIHZhciBwYWdlID0gdGhpcy5wYWdlcy5nZXQoaiwgdHJ1ZSlcblxuICByZXR1cm4gcGFnZSA/IHBhZ2UuYnVmZmVyW28gKyB0aGlzLnBhZ2VPZmZzZXRdIDogMFxufVxuXG5CaXRmaWVsZC5wcm90b3R5cGUuc2V0ID0gZnVuY3Rpb24gKGksIHYpIHtcbiAgdmFyIG8gPSBpICYgN1xuICB2YXIgaiA9IChpIC0gbykgLyA4XG4gIHZhciBiID0gdGhpcy5nZXRCeXRlKGopXG5cbiAgcmV0dXJuIHRoaXMuc2V0Qnl0ZShqLCB2ID8gYiB8ICgxMjggPj4gbykgOiBiICYgKDI1NSBeICgxMjggPj4gbykpKVxufVxuXG5CaXRmaWVsZC5wcm90b3R5cGUudG9CdWZmZXIgPSBmdW5jdGlvbiAoKSB7XG4gIHZhciBhbGwgPSBhbGxvYyh0aGlzLnBhZ2VzLmxlbmd0aCAqIHRoaXMucGFnZVNpemUpXG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLnBhZ2VzLmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIG5leHQgPSB0aGlzLnBhZ2VzLmdldChpLCB0cnVlKVxuICAgIHZhciBhbGxPZmZzZXQgPSBpICogdGhpcy5wYWdlU2l6ZVxuICAgIGlmIChuZXh0KSBuZXh0LmJ1ZmZlci5jb3B5KGFsbCwgYWxsT2Zmc2V0LCB0aGlzLnBhZ2VPZmZzZXQsIHRoaXMucGFnZU9mZnNldCArIHRoaXMucGFnZVNpemUpXG4gIH1cblxuICByZXR1cm4gYWxsXG59XG5cbkJpdGZpZWxkLnByb3RvdHlwZS5zZXRCeXRlID0gZnVuY3Rpb24gKGksIGIpIHtcbiAgdmFyIG8gPSBpICYgdGhpcy5fcGFnZU1hc2tcbiAgdmFyIGogPSAoaSAtIG8pIC8gdGhpcy5wYWdlU2l6ZVxuICB2YXIgcGFnZSA9IHRoaXMucGFnZXMuZ2V0KGosIGZhbHNlKVxuXG4gIG8gKz0gdGhpcy5wYWdlT2Zmc2V0XG5cbiAgaWYgKHBhZ2UuYnVmZmVyW29dID09PSBiKSByZXR1cm4gZmFsc2VcbiAgcGFnZS5idWZmZXJbb10gPSBiXG5cbiAgaWYgKGkgPj0gdGhpcy5ieXRlTGVuZ3RoKSB7XG4gICAgdGhpcy5ieXRlTGVuZ3RoID0gaSArIDFcbiAgICB0aGlzLmxlbmd0aCA9IHRoaXMuYnl0ZUxlbmd0aCAqIDhcbiAgfVxuXG4gIGlmICh0aGlzLl90cmFja1VwZGF0ZXMpIHRoaXMucGFnZXMudXBkYXRlZChwYWdlKVxuXG4gIHJldHVybiB0cnVlXG59XG5cbmZ1bmN0aW9uIGFsbG9jIChuKSB7XG4gIGlmIChCdWZmZXIuYWxsb2MpIHJldHVybiBCdWZmZXIuYWxsb2MobilcbiAgdmFyIGIgPSBuZXcgQnVmZmVyKG4pXG4gIGIuZmlsbCgwKVxuICByZXR1cm4gYlxufVxuXG5mdW5jdGlvbiBwb3dlck9mVHdvICh4KSB7XG4gIHJldHVybiAhKHggJiAoeCAtIDEpKVxufVxuIl0sIm5hbWVzIjpbInBhZ2VyIiwicmVxdWlyZSIsIm1vZHVsZSIsImV4cG9ydHMiLCJCaXRmaWVsZCIsIm9wdHMiLCJCdWZmZXIiLCJpc0J1ZmZlciIsImJ1ZmZlciIsInBhZ2VPZmZzZXQiLCJwYWdlU2l6ZSIsInBhZ2VzIiwiYnl0ZUxlbmd0aCIsImxlbmd0aCIsInBvd2VyT2ZUd28iLCJFcnJvciIsIl90cmFja1VwZGF0ZXMiLCJ0cmFja1VwZGF0ZXMiLCJfcGFnZU1hc2siLCJpIiwic2V0Iiwic2xpY2UiLCJwcm90b3R5cGUiLCJnZXQiLCJvIiwiaiIsImdldEJ5dGUiLCJwYWdlIiwidiIsImIiLCJzZXRCeXRlIiwidG9CdWZmZXIiLCJhbGwiLCJhbGxvYyIsIm5leHQiLCJhbGxPZmZzZXQiLCJjb3B5IiwidXBkYXRlZCIsIm4iLCJmaWxsIiwieCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/sparse-bitfield/index.js\n");

/***/ })

};
;