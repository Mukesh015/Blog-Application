"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/mquery";
exports.ids = ["vendor-chunks/mquery"];
exports.modules = {

/***/ "(ssr)/./node_modules/mquery/lib/collection/collection.js":
/*!**********************************************************!*\
  !*** ./node_modules/mquery/lib/collection/collection.js ***!
  \**********************************************************/
/***/ ((module, exports) => {

eval("\n/**\n * methods a collection must implement\n */ const methods = [\n    \"find\",\n    \"findOne\",\n    \"updateMany\",\n    \"updateOne\",\n    \"replaceOne\",\n    \"count\",\n    \"distinct\",\n    \"findOneAndDelete\",\n    \"findOneAndUpdate\",\n    \"aggregate\",\n    \"findCursor\",\n    \"deleteOne\",\n    \"deleteMany\"\n];\n/**\n * Collection base class from which implementations inherit\n */ function Collection() {}\nfor(let i = 0, len = methods.length; i < len; ++i){\n    const method = methods[i];\n    Collection.prototype[method] = notImplemented(method);\n}\nmodule.exports = exports = Collection;\nCollection.methods = methods;\n/**\n * creates a function which throws an implementation error\n */ function notImplemented(method) {\n    return function() {\n        throw new Error(\"collection.\" + method + \" not implemented\");\n    };\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbXF1ZXJ5L2xpYi9jb2xsZWN0aW9uL2NvbGxlY3Rpb24uanMiLCJtYXBwaW5ncyI6IkFBQUE7QUFFQTs7Q0FFQyxHQUVELE1BQU1BLFVBQVU7SUFDZDtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtDQUNEO0FBRUQ7O0NBRUMsR0FFRCxTQUFTQyxjQUFjO0FBRXZCLElBQUssSUFBSUMsSUFBSSxHQUFHQyxNQUFNSCxRQUFRSSxNQUFNLEVBQUVGLElBQUlDLEtBQUssRUFBRUQsRUFBRztJQUNsRCxNQUFNRyxTQUFTTCxPQUFPLENBQUNFLEVBQUU7SUFDekJELFdBQVdLLFNBQVMsQ0FBQ0QsT0FBTyxHQUFHRSxlQUFlRjtBQUNoRDtBQUVBRyxPQUFPQyxPQUFPLEdBQUdBLFVBQVVSO0FBQzNCQSxXQUFXRCxPQUFPLEdBQUdBO0FBRXJCOztDQUVDLEdBRUQsU0FBU08sZUFBZUYsTUFBTTtJQUM1QixPQUFPO1FBQ0wsTUFBTSxJQUFJSyxNQUFNLGdCQUFnQkwsU0FBUztJQUMzQztBQUNGIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYmxvZy1hcHBsaWNhdGlvbi8uL25vZGVfbW9kdWxlcy9tcXVlcnkvbGliL2NvbGxlY3Rpb24vY29sbGVjdGlvbi5qcz82NTZmIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuLyoqXG4gKiBtZXRob2RzIGEgY29sbGVjdGlvbiBtdXN0IGltcGxlbWVudFxuICovXG5cbmNvbnN0IG1ldGhvZHMgPSBbXG4gICdmaW5kJyxcbiAgJ2ZpbmRPbmUnLFxuICAndXBkYXRlTWFueScsXG4gICd1cGRhdGVPbmUnLFxuICAncmVwbGFjZU9uZScsXG4gICdjb3VudCcsXG4gICdkaXN0aW5jdCcsXG4gICdmaW5kT25lQW5kRGVsZXRlJyxcbiAgJ2ZpbmRPbmVBbmRVcGRhdGUnLFxuICAnYWdncmVnYXRlJyxcbiAgJ2ZpbmRDdXJzb3InLFxuICAnZGVsZXRlT25lJyxcbiAgJ2RlbGV0ZU1hbnknXG5dO1xuXG4vKipcbiAqIENvbGxlY3Rpb24gYmFzZSBjbGFzcyBmcm9tIHdoaWNoIGltcGxlbWVudGF0aW9ucyBpbmhlcml0XG4gKi9cblxuZnVuY3Rpb24gQ29sbGVjdGlvbigpIHt9XG5cbmZvciAobGV0IGkgPSAwLCBsZW4gPSBtZXRob2RzLmxlbmd0aDsgaSA8IGxlbjsgKytpKSB7XG4gIGNvbnN0IG1ldGhvZCA9IG1ldGhvZHNbaV07XG4gIENvbGxlY3Rpb24ucHJvdG90eXBlW21ldGhvZF0gPSBub3RJbXBsZW1lbnRlZChtZXRob2QpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHMgPSBDb2xsZWN0aW9uO1xuQ29sbGVjdGlvbi5tZXRob2RzID0gbWV0aG9kcztcblxuLyoqXG4gKiBjcmVhdGVzIGEgZnVuY3Rpb24gd2hpY2ggdGhyb3dzIGFuIGltcGxlbWVudGF0aW9uIGVycm9yXG4gKi9cblxuZnVuY3Rpb24gbm90SW1wbGVtZW50ZWQobWV0aG9kKSB7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ2NvbGxlY3Rpb24uJyArIG1ldGhvZCArICcgbm90IGltcGxlbWVudGVkJyk7XG4gIH07XG59XG4iXSwibmFtZXMiOlsibWV0aG9kcyIsIkNvbGxlY3Rpb24iLCJpIiwibGVuIiwibGVuZ3RoIiwibWV0aG9kIiwicHJvdG90eXBlIiwibm90SW1wbGVtZW50ZWQiLCJtb2R1bGUiLCJleHBvcnRzIiwiRXJyb3IiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mquery/lib/collection/collection.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mquery/lib/collection/index.js":
/*!*****************************************************!*\
  !*** ./node_modules/mquery/lib/collection/index.js ***!
  \*****************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nconst env = __webpack_require__(/*! ../env */ \"(ssr)/./node_modules/mquery/lib/env.js\");\nif (\"unknown\" == env.type) {\n    throw new Error(\"Unknown environment\");\n}\nmodule.exports = env.isNode ? __webpack_require__(/*! ./node */ \"(ssr)/./node_modules/mquery/lib/collection/node.js\") : env.isMongo ? __webpack_require__(/*! ./collection */ \"(ssr)/./node_modules/mquery/lib/collection/collection.js\") : __webpack_require__(/*! ./collection */ \"(ssr)/./node_modules/mquery/lib/collection/collection.js\");\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbXF1ZXJ5L2xpYi9jb2xsZWN0aW9uL2luZGV4LmpzIiwibWFwcGluZ3MiOiJBQUFBO0FBRUEsTUFBTUEsTUFBTUMsbUJBQU9BLENBQUM7QUFFcEIsSUFBSSxhQUFhRCxJQUFJRSxJQUFJLEVBQUU7SUFDekIsTUFBTSxJQUFJQyxNQUFNO0FBQ2xCO0FBRUFDLE9BQU9DLE9BQU8sR0FDWkwsSUFBSU0sTUFBTSxHQUFHTCxtQkFBT0EsQ0FBQyxzRUFDbkJELElBQUlPLE9BQU8sR0FBR04sbUJBQU9BLENBQUMsa0ZBQ3BCQSxtQkFBT0EsQ0FBQyIsInNvdXJjZXMiOlsid2VicGFjazovL2Jsb2ctYXBwbGljYXRpb24vLi9ub2RlX21vZHVsZXMvbXF1ZXJ5L2xpYi9jb2xsZWN0aW9uL2luZGV4LmpzPzdiZTQiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG5jb25zdCBlbnYgPSByZXF1aXJlKCcuLi9lbnYnKTtcblxuaWYgKCd1bmtub3duJyA9PSBlbnYudHlwZSkge1xuICB0aHJvdyBuZXcgRXJyb3IoJ1Vua25vd24gZW52aXJvbm1lbnQnKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPVxuICBlbnYuaXNOb2RlID8gcmVxdWlyZSgnLi9ub2RlJykgOlxuICAgIGVudi5pc01vbmdvID8gcmVxdWlyZSgnLi9jb2xsZWN0aW9uJykgOlxuICAgICAgcmVxdWlyZSgnLi9jb2xsZWN0aW9uJyk7XG5cbiJdLCJuYW1lcyI6WyJlbnYiLCJyZXF1aXJlIiwidHlwZSIsIkVycm9yIiwibW9kdWxlIiwiZXhwb3J0cyIsImlzTm9kZSIsImlzTW9uZ28iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mquery/lib/collection/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mquery/lib/collection/node.js":
/*!****************************************************!*\
  !*** ./node_modules/mquery/lib/collection/node.js ***!
  \****************************************************/
/***/ ((module, exports, __webpack_require__) => {

eval("\n/**\n * Module dependencies\n */ const Collection = __webpack_require__(/*! ./collection */ \"(ssr)/./node_modules/mquery/lib/collection/collection.js\");\nclass NodeCollection extends Collection {\n    constructor(col){\n        super();\n        this.collection = col;\n        this.collectionName = col.collectionName;\n    }\n    /**\n   * find(match, options)\n   */ async find(match, options) {\n        const cursor = this.collection.find(match, options);\n        return cursor.toArray();\n    }\n    /**\n   * findOne(match, options)\n   */ async findOne(match, options) {\n        return this.collection.findOne(match, options);\n    }\n    /**\n   * count(match, options)\n   */ async count(match, options) {\n        return this.collection.count(match, options);\n    }\n    /**\n   * distinct(prop, match, options)\n   */ async distinct(prop, match, options) {\n        return this.collection.distinct(prop, match, options);\n    }\n    /**\n   * updateMany(match, update, options)\n   */ async updateMany(match, update, options) {\n        return this.collection.updateMany(match, update, options);\n    }\n    /**\n   * updateOne(match, update, options)\n   */ async updateOne(match, update, options) {\n        return this.collection.updateOne(match, update, options);\n    }\n    /**\n   * replaceOne(match, update, options)\n   */ async replaceOne(match, update, options) {\n        return this.collection.replaceOne(match, update, options);\n    }\n    /**\n   * deleteOne(match, options)\n   */ async deleteOne(match, options) {\n        return this.collection.deleteOne(match, options);\n    }\n    /**\n   * deleteMany(match, options)\n   */ async deleteMany(match, options) {\n        return this.collection.deleteMany(match, options);\n    }\n    /**\n   * findOneAndDelete(match, options, function(err[, result])\n   */ async findOneAndDelete(match, options) {\n        return this.collection.findOneAndDelete(match, options);\n    }\n    /**\n   * findOneAndUpdate(match, update, options)\n   */ async findOneAndUpdate(match, update, options) {\n        return this.collection.findOneAndUpdate(match, update, options);\n    }\n    /**\n   * var cursor = findCursor(match, options)\n   */ findCursor(match, options) {\n        return this.collection.find(match, options);\n    }\n}\n/**\n * Expose\n */ module.exports = exports = NodeCollection;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbXF1ZXJ5L2xpYi9jb2xsZWN0aW9uL25vZGUuanMiLCJtYXBwaW5ncyI6IkFBQUE7QUFFQTs7Q0FFQyxHQUVELE1BQU1BLGFBQWFDLG1CQUFPQSxDQUFDO0FBRTNCLE1BQU1DLHVCQUF1QkY7SUFDM0JHLFlBQVlDLEdBQUcsQ0FBRTtRQUNmLEtBQUs7UUFFTCxJQUFJLENBQUNDLFVBQVUsR0FBR0Q7UUFDbEIsSUFBSSxDQUFDRSxjQUFjLEdBQUdGLElBQUlFLGNBQWM7SUFDMUM7SUFFQTs7R0FFQyxHQUNELE1BQU1DLEtBQUtDLEtBQUssRUFBRUMsT0FBTyxFQUFFO1FBQ3pCLE1BQU1DLFNBQVMsSUFBSSxDQUFDTCxVQUFVLENBQUNFLElBQUksQ0FBQ0MsT0FBT0M7UUFFM0MsT0FBT0MsT0FBT0MsT0FBTztJQUN2QjtJQUVBOztHQUVDLEdBQ0QsTUFBTUMsUUFBUUosS0FBSyxFQUFFQyxPQUFPLEVBQUU7UUFDNUIsT0FBTyxJQUFJLENBQUNKLFVBQVUsQ0FBQ08sT0FBTyxDQUFDSixPQUFPQztJQUN4QztJQUVBOztHQUVDLEdBQ0QsTUFBTUksTUFBTUwsS0FBSyxFQUFFQyxPQUFPLEVBQUU7UUFDMUIsT0FBTyxJQUFJLENBQUNKLFVBQVUsQ0FBQ1EsS0FBSyxDQUFDTCxPQUFPQztJQUN0QztJQUVBOztHQUVDLEdBQ0QsTUFBTUssU0FBU0MsSUFBSSxFQUFFUCxLQUFLLEVBQUVDLE9BQU8sRUFBRTtRQUNuQyxPQUFPLElBQUksQ0FBQ0osVUFBVSxDQUFDUyxRQUFRLENBQUNDLE1BQU1QLE9BQU9DO0lBQy9DO0lBRUE7O0dBRUMsR0FDRCxNQUFNTyxXQUFXUixLQUFLLEVBQUVTLE1BQU0sRUFBRVIsT0FBTyxFQUFFO1FBQ3ZDLE9BQU8sSUFBSSxDQUFDSixVQUFVLENBQUNXLFVBQVUsQ0FBQ1IsT0FBT1MsUUFBUVI7SUFDbkQ7SUFFQTs7R0FFQyxHQUNELE1BQU1TLFVBQVVWLEtBQUssRUFBRVMsTUFBTSxFQUFFUixPQUFPLEVBQUU7UUFDdEMsT0FBTyxJQUFJLENBQUNKLFVBQVUsQ0FBQ2EsU0FBUyxDQUFDVixPQUFPUyxRQUFRUjtJQUNsRDtJQUVBOztHQUVDLEdBQ0QsTUFBTVUsV0FBV1gsS0FBSyxFQUFFUyxNQUFNLEVBQUVSLE9BQU8sRUFBRTtRQUN2QyxPQUFPLElBQUksQ0FBQ0osVUFBVSxDQUFDYyxVQUFVLENBQUNYLE9BQU9TLFFBQVFSO0lBQ25EO0lBRUE7O0dBRUMsR0FDRCxNQUFNVyxVQUFVWixLQUFLLEVBQUVDLE9BQU8sRUFBRTtRQUM5QixPQUFPLElBQUksQ0FBQ0osVUFBVSxDQUFDZSxTQUFTLENBQUNaLE9BQU9DO0lBQzFDO0lBRUE7O0dBRUMsR0FDRCxNQUFNWSxXQUFXYixLQUFLLEVBQUVDLE9BQU8sRUFBRTtRQUMvQixPQUFPLElBQUksQ0FBQ0osVUFBVSxDQUFDZ0IsVUFBVSxDQUFDYixPQUFPQztJQUMzQztJQUVBOztHQUVDLEdBQ0QsTUFBTWEsaUJBQWlCZCxLQUFLLEVBQUVDLE9BQU8sRUFBRTtRQUNyQyxPQUFPLElBQUksQ0FBQ0osVUFBVSxDQUFDaUIsZ0JBQWdCLENBQUNkLE9BQU9DO0lBQ2pEO0lBRUE7O0dBRUMsR0FDRCxNQUFNYyxpQkFBaUJmLEtBQUssRUFBRVMsTUFBTSxFQUFFUixPQUFPLEVBQUU7UUFDN0MsT0FBTyxJQUFJLENBQUNKLFVBQVUsQ0FBQ2tCLGdCQUFnQixDQUFDZixPQUFPUyxRQUFRUjtJQUN6RDtJQUVBOztHQUVDLEdBQ0RlLFdBQVdoQixLQUFLLEVBQUVDLE9BQU8sRUFBRTtRQUN6QixPQUFPLElBQUksQ0FBQ0osVUFBVSxDQUFDRSxJQUFJLENBQUNDLE9BQU9DO0lBQ3JDO0FBTUY7QUFHQTs7Q0FFQyxHQUVEZ0IsT0FBT0MsT0FBTyxHQUFHQSxVQUFVeEIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9ibG9nLWFwcGxpY2F0aW9uLy4vbm9kZV9tb2R1bGVzL21xdWVyeS9saWIvY29sbGVjdGlvbi9ub2RlLmpzPzQzMzYiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG4vKipcbiAqIE1vZHVsZSBkZXBlbmRlbmNpZXNcbiAqL1xuXG5jb25zdCBDb2xsZWN0aW9uID0gcmVxdWlyZSgnLi9jb2xsZWN0aW9uJyk7XG5cbmNsYXNzIE5vZGVDb2xsZWN0aW9uIGV4dGVuZHMgQ29sbGVjdGlvbiB7XG4gIGNvbnN0cnVjdG9yKGNvbCkge1xuICAgIHN1cGVyKCk7XG5cbiAgICB0aGlzLmNvbGxlY3Rpb24gPSBjb2w7XG4gICAgdGhpcy5jb2xsZWN0aW9uTmFtZSA9IGNvbC5jb2xsZWN0aW9uTmFtZTtcbiAgfVxuXG4gIC8qKlxuICAgKiBmaW5kKG1hdGNoLCBvcHRpb25zKVxuICAgKi9cbiAgYXN5bmMgZmluZChtYXRjaCwgb3B0aW9ucykge1xuICAgIGNvbnN0IGN1cnNvciA9IHRoaXMuY29sbGVjdGlvbi5maW5kKG1hdGNoLCBvcHRpb25zKTtcblxuICAgIHJldHVybiBjdXJzb3IudG9BcnJheSgpO1xuICB9XG5cbiAgLyoqXG4gICAqIGZpbmRPbmUobWF0Y2gsIG9wdGlvbnMpXG4gICAqL1xuICBhc3luYyBmaW5kT25lKG1hdGNoLCBvcHRpb25zKSB7XG4gICAgcmV0dXJuIHRoaXMuY29sbGVjdGlvbi5maW5kT25lKG1hdGNoLCBvcHRpb25zKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBjb3VudChtYXRjaCwgb3B0aW9ucylcbiAgICovXG4gIGFzeW5jIGNvdW50KG1hdGNoLCBvcHRpb25zKSB7XG4gICAgcmV0dXJuIHRoaXMuY29sbGVjdGlvbi5jb3VudChtYXRjaCwgb3B0aW9ucyk7XG4gIH1cblxuICAvKipcbiAgICogZGlzdGluY3QocHJvcCwgbWF0Y2gsIG9wdGlvbnMpXG4gICAqL1xuICBhc3luYyBkaXN0aW5jdChwcm9wLCBtYXRjaCwgb3B0aW9ucykge1xuICAgIHJldHVybiB0aGlzLmNvbGxlY3Rpb24uZGlzdGluY3QocHJvcCwgbWF0Y2gsIG9wdGlvbnMpO1xuICB9XG5cbiAgLyoqXG4gICAqIHVwZGF0ZU1hbnkobWF0Y2gsIHVwZGF0ZSwgb3B0aW9ucylcbiAgICovXG4gIGFzeW5jIHVwZGF0ZU1hbnkobWF0Y2gsIHVwZGF0ZSwgb3B0aW9ucykge1xuICAgIHJldHVybiB0aGlzLmNvbGxlY3Rpb24udXBkYXRlTWFueShtYXRjaCwgdXBkYXRlLCBvcHRpb25zKTtcbiAgfVxuXG4gIC8qKlxuICAgKiB1cGRhdGVPbmUobWF0Y2gsIHVwZGF0ZSwgb3B0aW9ucylcbiAgICovXG4gIGFzeW5jIHVwZGF0ZU9uZShtYXRjaCwgdXBkYXRlLCBvcHRpb25zKSB7XG4gICAgcmV0dXJuIHRoaXMuY29sbGVjdGlvbi51cGRhdGVPbmUobWF0Y2gsIHVwZGF0ZSwgb3B0aW9ucyk7XG4gIH1cblxuICAvKipcbiAgICogcmVwbGFjZU9uZShtYXRjaCwgdXBkYXRlLCBvcHRpb25zKVxuICAgKi9cbiAgYXN5bmMgcmVwbGFjZU9uZShtYXRjaCwgdXBkYXRlLCBvcHRpb25zKSB7XG4gICAgcmV0dXJuIHRoaXMuY29sbGVjdGlvbi5yZXBsYWNlT25lKG1hdGNoLCB1cGRhdGUsIG9wdGlvbnMpO1xuICB9XG5cbiAgLyoqXG4gICAqIGRlbGV0ZU9uZShtYXRjaCwgb3B0aW9ucylcbiAgICovXG4gIGFzeW5jIGRlbGV0ZU9uZShtYXRjaCwgb3B0aW9ucykge1xuICAgIHJldHVybiB0aGlzLmNvbGxlY3Rpb24uZGVsZXRlT25lKG1hdGNoLCBvcHRpb25zKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBkZWxldGVNYW55KG1hdGNoLCBvcHRpb25zKVxuICAgKi9cbiAgYXN5bmMgZGVsZXRlTWFueShtYXRjaCwgb3B0aW9ucykge1xuICAgIHJldHVybiB0aGlzLmNvbGxlY3Rpb24uZGVsZXRlTWFueShtYXRjaCwgb3B0aW9ucyk7XG4gIH1cblxuICAvKipcbiAgICogZmluZE9uZUFuZERlbGV0ZShtYXRjaCwgb3B0aW9ucywgZnVuY3Rpb24oZXJyWywgcmVzdWx0XSlcbiAgICovXG4gIGFzeW5jIGZpbmRPbmVBbmREZWxldGUobWF0Y2gsIG9wdGlvbnMpIHtcbiAgICByZXR1cm4gdGhpcy5jb2xsZWN0aW9uLmZpbmRPbmVBbmREZWxldGUobWF0Y2gsIG9wdGlvbnMpO1xuICB9XG5cbiAgLyoqXG4gICAqIGZpbmRPbmVBbmRVcGRhdGUobWF0Y2gsIHVwZGF0ZSwgb3B0aW9ucylcbiAgICovXG4gIGFzeW5jIGZpbmRPbmVBbmRVcGRhdGUobWF0Y2gsIHVwZGF0ZSwgb3B0aW9ucykge1xuICAgIHJldHVybiB0aGlzLmNvbGxlY3Rpb24uZmluZE9uZUFuZFVwZGF0ZShtYXRjaCwgdXBkYXRlLCBvcHRpb25zKTtcbiAgfVxuXG4gIC8qKlxuICAgKiB2YXIgY3Vyc29yID0gZmluZEN1cnNvcihtYXRjaCwgb3B0aW9ucylcbiAgICovXG4gIGZpbmRDdXJzb3IobWF0Y2gsIG9wdGlvbnMpIHtcbiAgICByZXR1cm4gdGhpcy5jb2xsZWN0aW9uLmZpbmQobWF0Y2gsIG9wdGlvbnMpO1xuICB9XG5cbiAgLyoqXG4gICAqIGFnZ3JlZ2F0aW9uKG9wZXJhdG9ycy4uLilcbiAgICogVE9ET1xuICAgKi9cbn1cblxuXG4vKipcbiAqIEV4cG9zZVxuICovXG5cbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0cyA9IE5vZGVDb2xsZWN0aW9uO1xuIl0sIm5hbWVzIjpbIkNvbGxlY3Rpb24iLCJyZXF1aXJlIiwiTm9kZUNvbGxlY3Rpb24iLCJjb25zdHJ1Y3RvciIsImNvbCIsImNvbGxlY3Rpb24iLCJjb2xsZWN0aW9uTmFtZSIsImZpbmQiLCJtYXRjaCIsIm9wdGlvbnMiLCJjdXJzb3IiLCJ0b0FycmF5IiwiZmluZE9uZSIsImNvdW50IiwiZGlzdGluY3QiLCJwcm9wIiwidXBkYXRlTWFueSIsInVwZGF0ZSIsInVwZGF0ZU9uZSIsInJlcGxhY2VPbmUiLCJkZWxldGVPbmUiLCJkZWxldGVNYW55IiwiZmluZE9uZUFuZERlbGV0ZSIsImZpbmRPbmVBbmRVcGRhdGUiLCJmaW5kQ3Vyc29yIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mquery/lib/collection/node.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mquery/lib/env.js":
/*!****************************************!*\
  !*** ./node_modules/mquery/lib/env.js ***!
  \****************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nexports.isNode = \"undefined\" != typeof process && \"object\" == \"object\" && \"object\" == typeof global && \"function\" == typeof Buffer && process.argv;\nexports.isMongo = !exports.isNode && \"function\" == typeof printjson && \"function\" == typeof ObjectId && \"function\" == typeof rs && \"function\" == typeof sh;\nexports.isBrowser = !exports.isNode && !exports.isMongo && \"undefined\" != \"undefined\";\nexports.type = exports.isNode ? \"node\" : exports.isMongo ? \"mongo\" : exports.isBrowser ? \"browser\" : \"unknown\";\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbXF1ZXJ5L2xpYi9lbnYuanMiLCJtYXBwaW5ncyI6IkFBQUE7QUFFQUEsY0FBYyxHQUFHLGVBQWUsT0FBT0UsV0FDekIsWUFBWSxRQUFhQyxJQUN6QixZQUFZLE9BQU9DLFVBQ25CLGNBQWMsT0FBT0MsVUFDckJILFFBQVFJLElBQUk7QUFFMUJOLGVBQWUsR0FBRyxDQUFDQSxRQUFRQyxNQUFNLElBQ25CLGNBQWMsT0FBT08sYUFDckIsY0FBYyxPQUFPQyxZQUNyQixjQUFjLE9BQU9DLE1BQ3JCLGNBQWMsT0FBT0M7QUFFbkNYLGlCQUFpQixHQUFHLENBQUNBLFFBQVFDLE1BQU0sSUFDZixDQUFDRCxRQUFRTyxPQUFPLElBQ2hCLGVBQWU7QUFFbkNQLFlBQVksR0FBR0EsUUFBUUMsTUFBTSxHQUFHLFNBQzVCRCxRQUFRTyxPQUFPLEdBQUcsVUFDaEJQLFFBQVFZLFNBQVMsR0FBRyxZQUNsQiIsInNvdXJjZXMiOlsid2VicGFjazovL2Jsb2ctYXBwbGljYXRpb24vLi9ub2RlX21vZHVsZXMvbXF1ZXJ5L2xpYi9lbnYuanM/MWVlNyJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbmV4cG9ydHMuaXNOb2RlID0gJ3VuZGVmaW5lZCcgIT0gdHlwZW9mIHByb2Nlc3NcbiAgICAgICAgICAgJiYgJ29iamVjdCcgPT0gdHlwZW9mIG1vZHVsZVxuICAgICAgICAgICAmJiAnb2JqZWN0JyA9PSB0eXBlb2YgZ2xvYmFsXG4gICAgICAgICAgICYmICdmdW5jdGlvbicgPT0gdHlwZW9mIEJ1ZmZlclxuICAgICAgICAgICAmJiBwcm9jZXNzLmFyZ3Y7XG5cbmV4cG9ydHMuaXNNb25nbyA9ICFleHBvcnRzLmlzTm9kZVxuICAgICAgICAgICAmJiAnZnVuY3Rpb24nID09IHR5cGVvZiBwcmludGpzb25cbiAgICAgICAgICAgJiYgJ2Z1bmN0aW9uJyA9PSB0eXBlb2YgT2JqZWN0SWRcbiAgICAgICAgICAgJiYgJ2Z1bmN0aW9uJyA9PSB0eXBlb2YgcnNcbiAgICAgICAgICAgJiYgJ2Z1bmN0aW9uJyA9PSB0eXBlb2Ygc2g7XG5cbmV4cG9ydHMuaXNCcm93c2VyID0gIWV4cG9ydHMuaXNOb2RlXG4gICAgICAgICAgICAgICAgICYmICFleHBvcnRzLmlzTW9uZ29cbiAgICAgICAgICAgICAgICAgJiYgJ3VuZGVmaW5lZCcgIT0gdHlwZW9mIHdpbmRvdztcblxuZXhwb3J0cy50eXBlID0gZXhwb3J0cy5pc05vZGUgPyAnbm9kZSdcbiAgOiBleHBvcnRzLmlzTW9uZ28gPyAnbW9uZ28nXG4gICAgOiBleHBvcnRzLmlzQnJvd3NlciA/ICdicm93c2VyJ1xuICAgICAgOiAndW5rbm93bic7XG4iXSwibmFtZXMiOlsiZXhwb3J0cyIsImlzTm9kZSIsInByb2Nlc3MiLCJtb2R1bGUiLCJnbG9iYWwiLCJCdWZmZXIiLCJhcmd2IiwiaXNNb25nbyIsInByaW50anNvbiIsIk9iamVjdElkIiwicnMiLCJzaCIsImlzQnJvd3NlciIsInR5cGUiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mquery/lib/env.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mquery/lib/mquery.js":
/*!*******************************************!*\
  !*** ./node_modules/mquery/lib/mquery.js ***!
  \*******************************************/
/***/ ((module, exports, __webpack_require__) => {

eval("\n/**\n * Dependencies\n */ const assert = __webpack_require__(/*! assert */ \"assert\");\nconst util = __webpack_require__(/*! util */ \"util\");\nconst utils = __webpack_require__(/*! ./utils */ \"(ssr)/./node_modules/mquery/lib/utils.js\");\nconst debug = __webpack_require__(/*! debug */ \"(ssr)/./node_modules/debug/src/index.js\")(\"mquery\");\n/**\n * Query constructor used for building queries.\n *\n * #### Example:\n *\n *     var query = new Query({ name: 'mquery' });\n *     query.setOptions({ collection: moduleCollection })\n *     await query.where('age').gte(21).exec();\n *\n * @param {Object} [criteria] criteria for the query OR the collection instance to use\n * @param {Object} [options]\n * @api public\n */ function Query(criteria, options) {\n    if (!(this instanceof Query)) return new Query(criteria, options);\n    const proto = this.constructor.prototype;\n    this.op = proto.op || undefined;\n    this.options = Object.assign({}, proto.options);\n    this._conditions = proto._conditions ? utils.clone(proto._conditions) : {};\n    this._fields = proto._fields ? utils.clone(proto._fields) : undefined;\n    this._updateDoc = proto._updateDoc ? utils.clone(proto._updateDoc) : undefined;\n    this._path = proto._path || undefined;\n    this._distinctDoc = proto._distinctDoc || undefined;\n    this._collection = proto._collection || undefined;\n    this._traceFunction = proto._traceFunction || undefined;\n    if (options) {\n        this.setOptions(options);\n    }\n    if (criteria) {\n        this.find(criteria);\n    }\n}\n/**\n * This is a parameter that the user can set which determines if mquery\n * uses $within or $geoWithin for queries. It defaults to true which\n * means $geoWithin will be used. If using MongoDB < 2.4 you should\n * set this to false.\n *\n * @api public\n * @property use$geoWithin\n */ let $withinCmd = \"$geoWithin\";\nObject.defineProperty(Query, \"use$geoWithin\", {\n    get: function() {\n        return $withinCmd == \"$geoWithin\";\n    },\n    set: function(v) {\n        if (true === v) {\n            // mongodb >= 2.4\n            $withinCmd = \"$geoWithin\";\n        } else {\n            $withinCmd = \"$within\";\n        }\n    }\n});\n/**\n * Converts this query to a constructor function with all arguments and options retained.\n *\n * #### Example:\n *\n *     // Create a query that will read documents with a \"video\" category from\n *     // `aCollection` on the primary node in the replica-set unless it is down,\n *     // in which case we'll read from a secondary node.\n *     var query = mquery({ category: 'video' })\n *     query.setOptions({ collection: aCollection, read: 'primaryPreferred' });\n *\n *     // create a constructor based off these settings\n *     var Video = query.toConstructor();\n *\n *     // Video is now a subclass of mquery() and works the same way but with the\n *     // default query parameters and options set.\n *\n *     // run a query with the previous settings but filter for movies with names\n *     // that start with \"Life\".\n *     Video().where({ name: /^Life/ }).exec(cb);\n *\n * @return {Query} new Query\n * @api public\n */ Query.prototype.toConstructor = function toConstructor() {\n    function CustomQuery(criteria, options) {\n        if (!(this instanceof CustomQuery)) return new CustomQuery(criteria, options);\n        Query.call(this, criteria, options);\n    }\n    utils.inherits(CustomQuery, Query);\n    // set inherited defaults\n    const p = CustomQuery.prototype;\n    p.options = {};\n    p.setOptions(this.options);\n    p.op = this.op;\n    p._conditions = utils.clone(this._conditions);\n    p._fields = utils.clone(this._fields);\n    p._updateDoc = utils.clone(this._updateDoc);\n    p._path = this._path;\n    p._distinctDoc = this._distinctDoc;\n    p._collection = this._collection;\n    p._traceFunction = this._traceFunction;\n    return CustomQuery;\n};\n/**\n * Sets query options.\n *\n * #### Options:\n *\n * - [tailable](http://www.mongodb.org/display/DOCS/Tailable+Cursors) *\n * - [sort](http://www.mongodb.org/display/DOCS/Advanced+Queries#AdvancedQueries-%7B%7Bsort(\\)%7D%7D) *\n * - [limit](http://www.mongodb.org/display/DOCS/Advanced+Queries#AdvancedQueries-%7B%7Blimit%28%29%7D%7D) *\n * - [skip](http://www.mongodb.org/display/DOCS/Advanced+Queries#AdvancedQueries-%7B%7Bskip%28%29%7D%7D) *\n * - [maxTime](http://docs.mongodb.org/manual/reference/operator/meta/maxTimeMS/#op._S_maxTimeMS) *\n * - [batchSize](http://www.mongodb.org/display/DOCS/Advanced+Queries#AdvancedQueries-%7B%7BbatchSize%28%29%7D%7D) *\n * - [comment](http://www.mongodb.org/display/DOCS/Advanced+Queries#AdvancedQueries-%24comment) *\n * - [hint](http://www.mongodb.org/display/DOCS/Advanced+Queries#AdvancedQueries-%24hint) *\n * - [slaveOk](http://docs.mongodb.org/manual/applications/replication/#read-preference) *\n * - [safe](http://www.mongodb.org/display/DOCS/getLastError+Command)\n * - collection the collection to query against\n *\n * _* denotes a query helper method is also available_\n *\n * @param {Object} options\n * @api public\n */ Query.prototype.setOptions = function(options) {\n    if (!(options && utils.isObject(options))) return this;\n    // set arbitrary options\n    const methods = utils.keys(options);\n    let method;\n    for(let i = 0; i < methods.length; ++i){\n        method = methods[i];\n        // use methods if exist (safer option manipulation)\n        if (\"function\" == typeof this[method]) {\n            const args = Array.isArray(options[method]) ? options[method] : [\n                options[method]\n            ];\n            this[method].apply(this, args);\n        } else {\n            this.options[method] = options[method];\n        }\n    }\n    return this;\n};\n/**\n * Sets this Querys collection.\n *\n * @param {Collection} coll\n * @return {Query} this\n */ Query.prototype.collection = function collection(coll) {\n    this._collection = new Query.Collection(coll);\n    return this;\n};\n/**\n * Adds a collation to this op (MongoDB 3.4 and up)\n *\n * #### Example:\n *\n *     query.find().collation({ locale: \"en_US\", strength: 1 })\n *\n * @param {Object} value\n * @return {Query} this\n * @see MongoDB docs https://docs.mongodb.com/manual/reference/method/cursor.collation/#cursor.collation\n * @api public\n */ Query.prototype.collation = function(value) {\n    this.options.collation = value;\n    return this;\n};\n/**\n * Specifies a `$where` condition\n *\n * Use `$where` when you need to select documents using a JavaScript expression.\n *\n * #### Example:\n *\n *     query.$where('this.comments.length > 10 || this.name.length > 5')\n *\n *     query.$where(function () {\n *       return this.comments.length > 10 || this.name.length > 5;\n *     })\n *\n * @param {String|Function} js javascript string or function\n * @return {Query} this\n * @memberOf Query\n * @method $where\n * @api public\n */ Query.prototype.$where = function(js) {\n    this._conditions.$where = js;\n    return this;\n};\n/**\n * Specifies a `path` for use with chaining.\n *\n * #### Example:\n *\n *     // instead of writing:\n *     await User.find({age: {$gte: 21, $lte: 65}});\n *\n *     // we can instead write:\n *     User.where('age').gte(21).lte(65);\n *\n *     // passing query conditions is permitted\n *     User.find().where({ name: 'vonderful' })\n *\n *     // chaining\n *     await User\n *       .where('age').gte(21).lte(65)\n *       .where('name', /^vonderful/i)\n *       .where('friends').slice(10)\n *       .exec()\n *\n * @param {String} [path]\n * @param {Object} [val]\n * @return {Query} this\n * @api public\n */ Query.prototype.where = function() {\n    if (!arguments.length) return this;\n    if (!this.op) this.op = \"find\";\n    const type = typeof arguments[0];\n    if (\"string\" == type) {\n        this._path = arguments[0];\n        if (2 === arguments.length) {\n            this._conditions[this._path] = arguments[1];\n        }\n        return this;\n    }\n    if (\"object\" == type && !Array.isArray(arguments[0])) {\n        return this.merge(arguments[0]);\n    }\n    throw new TypeError(\"path must be a string or object\");\n};\n/**\n * Specifies the complementary comparison value for paths specified with `where()`\n *\n * #### Example:\n *\n *     User.where('age').equals(49);\n *\n *     // is the same as\n *\n *     User.where('age', 49);\n *\n * @param {Object} val\n * @return {Query} this\n * @api public\n */ Query.prototype.equals = function equals(val) {\n    this._ensurePath(\"equals\");\n    const path = this._path;\n    this._conditions[path] = val;\n    return this;\n};\n/**\n * Specifies the complementary comparison value for paths specified with `where()`\n * This is alias of `equals`\n *\n * #### Example:\n *\n *     User.where('age').eq(49);\n *\n *     // is the same as\n *\n *     User.shere('age').equals(49);\n *\n *     // is the same as\n *\n *     User.where('age', 49);\n *\n * @param {Object} val\n * @return {Query} this\n * @api public\n */ Query.prototype.eq = function eq(val) {\n    this._ensurePath(\"eq\");\n    const path = this._path;\n    this._conditions[path] = val;\n    return this;\n};\n/**\n * Specifies arguments for an `$or` condition.\n *\n * #### Example:\n *\n *     query.or([{ color: 'red' }, { status: 'emergency' }])\n *\n * @param {Array} array array of conditions\n * @return {Query} this\n * @api public\n */ Query.prototype.or = function or(array) {\n    const or = this._conditions.$or || (this._conditions.$or = []);\n    if (!Array.isArray(array)) array = [\n        array\n    ];\n    or.push.apply(or, array);\n    return this;\n};\n/**\n * Specifies arguments for a `$nor` condition.\n *\n * #### Example:\n *\n *     query.nor([{ color: 'green' }, { status: 'ok' }])\n *\n * @param {Array} array array of conditions\n * @return {Query} this\n * @api public\n */ Query.prototype.nor = function nor(array) {\n    const nor = this._conditions.$nor || (this._conditions.$nor = []);\n    if (!Array.isArray(array)) array = [\n        array\n    ];\n    nor.push.apply(nor, array);\n    return this;\n};\n/**\n * Specifies arguments for a `$and` condition.\n *\n * #### Example:\n *\n *     query.and([{ color: 'green' }, { status: 'ok' }])\n *\n * @see $and http://docs.mongodb.org/manual/reference/operator/and/\n * @param {Array} array array of conditions\n * @return {Query} this\n * @api public\n */ Query.prototype.and = function and(array) {\n    const and = this._conditions.$and || (this._conditions.$and = []);\n    if (!Array.isArray(array)) array = [\n        array\n    ];\n    and.push.apply(and, array);\n    return this;\n};\n/**\n * Specifies a $gt query condition.\n *\n * When called with one argument, the most recent path passed to `where()` is used.\n *\n * #### Example:\n *\n *     Thing.find().where('age').gt(21)\n *\n *     // or\n *     Thing.find().gt('age', 21)\n *\n * @method gt\n * @memberOf Query\n * @param {String} [path]\n * @param {Number} val\n * @api public\n */ /**\n * Specifies a $gte query condition.\n *\n * When called with one argument, the most recent path passed to `where()` is used.\n *\n * @method gte\n * @memberOf Query\n * @param {String} [path]\n * @param {Number} val\n * @api public\n */ /**\n * Specifies a $lt query condition.\n *\n * When called with one argument, the most recent path passed to `where()` is used.\n *\n * @method lt\n * @memberOf Query\n * @param {String} [path]\n * @param {Number} val\n * @api public\n */ /**\n * Specifies a $lte query condition.\n *\n * When called with one argument, the most recent path passed to `where()` is used.\n *\n * @method lte\n * @memberOf Query\n * @param {String} [path]\n * @param {Number} val\n * @api public\n */ /**\n * Specifies a $ne query condition.\n *\n * When called with one argument, the most recent path passed to `where()` is used.\n *\n * @method ne\n * @memberOf Query\n * @param {String} [path]\n * @param {Number} val\n * @api public\n */ /**\n * Specifies an $in query condition.\n *\n * When called with one argument, the most recent path passed to `where()` is used.\n *\n * @method in\n * @memberOf Query\n * @param {String} [path]\n * @param {Number} val\n * @api public\n */ /**\n * Specifies an $nin query condition.\n *\n * When called with one argument, the most recent path passed to `where()` is used.\n *\n * @method nin\n * @memberOf Query\n * @param {String} [path]\n * @param {Number} val\n * @api public\n */ /**\n * Specifies an $all query condition.\n *\n * When called with one argument, the most recent path passed to `where()` is used.\n *\n * @method all\n * @memberOf Query\n * @param {String} [path]\n * @param {Number} val\n * @api public\n */ /**\n * Specifies a $size query condition.\n *\n * When called with one argument, the most recent path passed to `where()` is used.\n *\n * @method size\n * @memberOf Query\n * @param {String} [path]\n * @param {Number} val\n * @api public\n */ /**\n * Specifies a $regex query condition.\n *\n * When called with one argument, the most recent path passed to `where()` is used.\n *\n * @method regex\n * @memberOf Query\n * @param {String} [path]\n * @param {String|RegExp} val\n * @api public\n */ /**\n * Specifies a $maxDistance query condition.\n *\n * When called with one argument, the most recent path passed to `where()` is used.\n *\n * @method maxDistance\n * @memberOf Query\n * @param {String} [path]\n * @param {Number} val\n * @api public\n */ /*!\n * gt, gte, lt, lte, ne, in, nin, all, regex, size, maxDistance\n *\n *     Thing.where('type').nin(array)\n */ \"gt gte lt lte ne in nin all regex size maxDistance minDistance\".split(\" \").forEach(function($conditional) {\n    Query.prototype[$conditional] = function() {\n        let path, val;\n        if (1 === arguments.length) {\n            this._ensurePath($conditional);\n            val = arguments[0];\n            path = this._path;\n        } else {\n            val = arguments[1];\n            path = arguments[0];\n        }\n        const conds = this._conditions[path] === null || typeof this._conditions[path] === \"object\" ? this._conditions[path] : this._conditions[path] = {};\n        conds[\"$\" + $conditional] = val;\n        return this;\n    };\n});\n/**\n * Specifies a `$mod` condition\n *\n * @param {String} [path]\n * @param {Number} val\n * @return {Query} this\n * @api public\n */ Query.prototype.mod = function() {\n    let val, path;\n    if (1 === arguments.length) {\n        this._ensurePath(\"mod\");\n        val = arguments[0];\n        path = this._path;\n    } else if (2 === arguments.length && !Array.isArray(arguments[1])) {\n        this._ensurePath(\"mod\");\n        val = [\n            arguments[0],\n            arguments[1]\n        ];\n        path = this._path;\n    } else if (3 === arguments.length) {\n        val = [\n            arguments[1],\n            arguments[2]\n        ];\n        path = arguments[0];\n    } else {\n        val = arguments[1];\n        path = arguments[0];\n    }\n    const conds = this._conditions[path] || (this._conditions[path] = {});\n    conds.$mod = val;\n    return this;\n};\n/**\n * Specifies an `$exists` condition\n *\n * #### Example:\n *\n *     // { name: { $exists: true }}\n *     Thing.where('name').exists()\n *     Thing.where('name').exists(true)\n *     Thing.find().exists('name')\n *\n *     // { name: { $exists: false }}\n *     Thing.where('name').exists(false);\n *     Thing.find().exists('name', false);\n *\n * @param {String} [path]\n * @param {Number} val\n * @return {Query} this\n * @api public\n */ Query.prototype.exists = function() {\n    let path, val;\n    if (0 === arguments.length) {\n        this._ensurePath(\"exists\");\n        path = this._path;\n        val = true;\n    } else if (1 === arguments.length) {\n        if (\"boolean\" === typeof arguments[0]) {\n            this._ensurePath(\"exists\");\n            path = this._path;\n            val = arguments[0];\n        } else {\n            path = arguments[0];\n            val = true;\n        }\n    } else if (2 === arguments.length) {\n        path = arguments[0];\n        val = arguments[1];\n    }\n    const conds = this._conditions[path] || (this._conditions[path] = {});\n    conds.$exists = val;\n    return this;\n};\n/**\n * Specifies an `$elemMatch` condition\n *\n * #### Example:\n *\n *     query.elemMatch('comment', { author: 'autobot', votes: {$gte: 5}})\n *\n *     query.where('comment').elemMatch({ author: 'autobot', votes: {$gte: 5}})\n *\n *     query.elemMatch('comment', function (elem) {\n *       elem.where('author').equals('autobot');\n *       elem.where('votes').gte(5);\n *     })\n *\n *     query.where('comment').elemMatch(function (elem) {\n *       elem.where({ author: 'autobot' });\n *       elem.where('votes').gte(5);\n *     })\n *\n * @param {String|Object|Function} path\n * @param {Object|Function} criteria\n * @return {Query} this\n * @api public\n */ Query.prototype.elemMatch = function() {\n    if (null == arguments[0]) throw new TypeError(\"Invalid argument\");\n    let fn, path, criteria;\n    if (\"function\" === typeof arguments[0]) {\n        this._ensurePath(\"elemMatch\");\n        path = this._path;\n        fn = arguments[0];\n    } else if (utils.isObject(arguments[0])) {\n        this._ensurePath(\"elemMatch\");\n        path = this._path;\n        criteria = arguments[0];\n    } else if (\"function\" === typeof arguments[1]) {\n        path = arguments[0];\n        fn = arguments[1];\n    } else if (arguments[1] && utils.isObject(arguments[1])) {\n        path = arguments[0];\n        criteria = arguments[1];\n    } else {\n        throw new TypeError(\"Invalid argument\");\n    }\n    if (fn) {\n        criteria = new Query;\n        fn(criteria);\n        criteria = criteria._conditions;\n    }\n    const conds = this._conditions[path] || (this._conditions[path] = {});\n    conds.$elemMatch = criteria;\n    return this;\n};\n// Spatial queries\n/**\n * Sugar for geo-spatial queries.\n *\n * #### Example:\n *\n *     query.within().box()\n *     query.within().circle()\n *     query.within().geometry()\n *\n *     query.where('loc').within({ center: [50,50], radius: 10, unique: true, spherical: true });\n *     query.where('loc').within({ box: [[40.73, -73.9], [40.7, -73.988]] });\n *     query.where('loc').within({ polygon: [[],[],[],[]] });\n *\n *     query.where('loc').within([], [], []) // polygon\n *     query.where('loc').within([], []) // box\n *     query.where('loc').within({ type: 'LineString', coordinates: [...] }); // geometry\n *\n * #### Note:\n *\n * Must be used after `where()`.\n *\n * @memberOf Query\n * @return {Query} this\n * @api public\n */ Query.prototype.within = function within() {\n    // opinionated, must be used after where\n    this._ensurePath(\"within\");\n    this._geoComparison = $withinCmd;\n    if (0 === arguments.length) {\n        return this;\n    }\n    if (2 === arguments.length) {\n        return this.box.apply(this, arguments);\n    } else if (2 < arguments.length) {\n        return this.polygon.apply(this, arguments);\n    }\n    const area = arguments[0];\n    if (!area) throw new TypeError(\"Invalid argument\");\n    if (area.center) return this.circle(area);\n    if (area.box) return this.box.apply(this, area.box);\n    if (area.polygon) return this.polygon.apply(this, area.polygon);\n    if (area.type && area.coordinates) return this.geometry(area);\n    throw new TypeError(\"Invalid argument\");\n};\n/**\n * Specifies a $box condition\n *\n * #### Example:\n *\n *     var lowerLeft = [40.73083, -73.99756]\n *     var upperRight= [40.741404,  -73.988135]\n *\n *     query.where('loc').within().box(lowerLeft, upperRight)\n *     query.box('loc', lowerLeft, upperRight )\n *\n * @see http://www.mongodb.org/display/DOCS/Geospatial+Indexing\n * @see Query#within #query_Query-within\n * @param {String} path\n * @param {Object} val\n * @return {Query} this\n * @api public\n */ Query.prototype.box = function() {\n    let path, box;\n    if (3 === arguments.length) {\n        // box('loc', [], [])\n        path = arguments[0];\n        box = [\n            arguments[1],\n            arguments[2]\n        ];\n    } else if (2 === arguments.length) {\n        // box([], [])\n        this._ensurePath(\"box\");\n        path = this._path;\n        box = [\n            arguments[0],\n            arguments[1]\n        ];\n    } else {\n        throw new TypeError(\"Invalid argument\");\n    }\n    const conds = this._conditions[path] || (this._conditions[path] = {});\n    conds[this._geoComparison || $withinCmd] = {\n        $box: box\n    };\n    return this;\n};\n/**\n * Specifies a $polygon condition\n *\n * #### Example:\n *\n *     query.where('loc').within().polygon([10,20], [13, 25], [7,15])\n *     query.polygon('loc', [10,20], [13, 25], [7,15])\n *\n * @param {String|Array} [path]\n * @param {Array|Object} [val]\n * @return {Query} this\n * @see http://www.mongodb.org/display/DOCS/Geospatial+Indexing\n * @api public\n */ Query.prototype.polygon = function() {\n    let val, path;\n    if (\"string\" == typeof arguments[0]) {\n        // polygon('loc', [],[],[])\n        val = Array.from(arguments);\n        path = val.shift();\n    } else {\n        // polygon([],[],[])\n        this._ensurePath(\"polygon\");\n        path = this._path;\n        val = Array.from(arguments);\n    }\n    const conds = this._conditions[path] || (this._conditions[path] = {});\n    conds[this._geoComparison || $withinCmd] = {\n        $polygon: val\n    };\n    return this;\n};\n/**\n * Specifies a $center or $centerSphere condition.\n *\n * #### Example:\n *\n *     var area = { center: [50, 50], radius: 10, unique: true }\n *     query.where('loc').within().circle(area)\n *     query.center('loc', area);\n *\n *     // for spherical calculations\n *     var area = { center: [50, 50], radius: 10, unique: true, spherical: true }\n *     query.where('loc').within().circle(area)\n *     query.center('loc', area);\n *\n * @param {String} [path]\n * @param {Object} area\n * @return {Query} this\n * @see http://www.mongodb.org/display/DOCS/Geospatial+Indexing\n * @api public\n */ Query.prototype.circle = function() {\n    let path, val;\n    if (1 === arguments.length) {\n        this._ensurePath(\"circle\");\n        path = this._path;\n        val = arguments[0];\n    } else if (2 === arguments.length) {\n        path = arguments[0];\n        val = arguments[1];\n    } else {\n        throw new TypeError(\"Invalid argument\");\n    }\n    if (!(\"radius\" in val && val.center)) throw new Error(\"center and radius are required\");\n    const conds = this._conditions[path] || (this._conditions[path] = {});\n    const type = val.spherical ? \"$centerSphere\" : \"$center\";\n    const wKey = this._geoComparison || $withinCmd;\n    conds[wKey] = {};\n    conds[wKey][type] = [\n        val.center,\n        val.radius\n    ];\n    if (\"unique\" in val) conds[wKey].$uniqueDocs = !!val.unique;\n    return this;\n};\n/**\n * Specifies a `$near` or `$nearSphere` condition\n *\n * These operators return documents sorted by distance.\n *\n * #### Example:\n *\n *     query.where('loc').near({ center: [10, 10] });\n *     query.where('loc').near({ center: [10, 10], maxDistance: 5 });\n *     query.where('loc').near({ center: [10, 10], maxDistance: 5, spherical: true });\n *     query.near('loc', { center: [10, 10], maxDistance: 5 });\n *     query.near({ center: { type: 'Point', coordinates: [..] }})\n *     query.near().geometry({ type: 'Point', coordinates: [..] })\n *\n * @param {String} [path]\n * @param {Object} val\n * @return {Query} this\n * @see http://www.mongodb.org/display/DOCS/Geospatial+Indexing\n * @api public\n */ Query.prototype.near = function near() {\n    let path, val;\n    this._geoComparison = \"$near\";\n    if (0 === arguments.length) {\n        return this;\n    } else if (1 === arguments.length) {\n        this._ensurePath(\"near\");\n        path = this._path;\n        val = arguments[0];\n    } else if (2 === arguments.length) {\n        path = arguments[0];\n        val = arguments[1];\n    } else {\n        throw new TypeError(\"Invalid argument\");\n    }\n    if (!val.center) {\n        throw new Error(\"center is required\");\n    }\n    const conds = this._conditions[path] || (this._conditions[path] = {});\n    const type = val.spherical ? \"$nearSphere\" : \"$near\";\n    // center could be a GeoJSON object or an Array\n    if (Array.isArray(val.center)) {\n        conds[type] = val.center;\n        const radius = \"maxDistance\" in val ? val.maxDistance : null;\n        if (null != radius) {\n            conds.$maxDistance = radius;\n        }\n        if (null != val.minDistance) {\n            conds.$minDistance = val.minDistance;\n        }\n    } else {\n        // GeoJSON?\n        if (val.center.type != \"Point\" || !Array.isArray(val.center.coordinates)) {\n            throw new Error(util.format(\"Invalid GeoJSON specified for %s\", type));\n        }\n        conds[type] = {\n            $geometry: val.center\n        };\n        // MongoDB 2.6 insists on maxDistance being in $near / $nearSphere\n        if (\"maxDistance\" in val) {\n            conds[type][\"$maxDistance\"] = val.maxDistance;\n        }\n        if (\"minDistance\" in val) {\n            conds[type][\"$minDistance\"] = val.minDistance;\n        }\n    }\n    return this;\n};\n/**\n * Declares an intersects query for `geometry()`.\n *\n * #### Example:\n *\n *     query.where('path').intersects().geometry({\n *         type: 'LineString'\n *       , coordinates: [[180.0, 11.0], [180, 9.0]]\n *     })\n *\n *     query.where('path').intersects({\n *         type: 'LineString'\n *       , coordinates: [[180.0, 11.0], [180, 9.0]]\n *     })\n *\n * @param {Object} [arg]\n * @return {Query} this\n * @api public\n */ Query.prototype.intersects = function intersects() {\n    // opinionated, must be used after where\n    this._ensurePath(\"intersects\");\n    this._geoComparison = \"$geoIntersects\";\n    if (0 === arguments.length) {\n        return this;\n    }\n    const area = arguments[0];\n    if (null != area && area.type && area.coordinates) return this.geometry(area);\n    throw new TypeError(\"Invalid argument\");\n};\n/**\n * Specifies a `$geometry` condition\n *\n * #### Example:\n *\n *     var polyA = [[[ 10, 20 ], [ 10, 40 ], [ 30, 40 ], [ 30, 20 ]]]\n *     query.where('loc').within().geometry({ type: 'Polygon', coordinates: polyA })\n *\n *     // or\n *     var polyB = [[ 0, 0 ], [ 1, 1 ]]\n *     query.where('loc').within().geometry({ type: 'LineString', coordinates: polyB })\n *\n *     // or\n *     var polyC = [ 0, 0 ]\n *     query.where('loc').within().geometry({ type: 'Point', coordinates: polyC })\n *\n *     // or\n *     query.where('loc').intersects().geometry({ type: 'Point', coordinates: polyC })\n *\n * #### Note:\n *\n * `geometry()` **must** come after either `intersects()` or `within()`.\n *\n * The `object` argument must contain `type` and `coordinates` properties.\n * - type {String}\n * - coordinates {Array}\n *\n * The most recent path passed to `where()` is used.\n *\n * @param {Object} object Must contain a `type` property which is a String and a `coordinates` property which is an Array. See the examples.\n * @return {Query} this\n * @see http://docs.mongodb.org/manual/release-notes/2.4/#new-geospatial-indexes-with-geojson-and-improved-spherical-geometry\n * @see http://www.mongodb.org/display/DOCS/Geospatial+Indexing\n * @see $geometry http://docs.mongodb.org/manual/reference/operator/geometry/\n * @api public\n */ Query.prototype.geometry = function geometry() {\n    if (!(\"$within\" == this._geoComparison || \"$geoWithin\" == this._geoComparison || \"$near\" == this._geoComparison || \"$geoIntersects\" == this._geoComparison)) {\n        throw new Error(\"geometry() must come after `within()`, `intersects()`, or `near()\");\n    }\n    let val, path;\n    if (1 === arguments.length) {\n        this._ensurePath(\"geometry\");\n        path = this._path;\n        val = arguments[0];\n    } else {\n        throw new TypeError(\"Invalid argument\");\n    }\n    if (!(val.type && Array.isArray(val.coordinates))) {\n        throw new TypeError(\"Invalid argument\");\n    }\n    const conds = this._conditions[path] || (this._conditions[path] = {});\n    conds[this._geoComparison] = {\n        $geometry: val\n    };\n    return this;\n};\n// end spatial\n/**\n * Specifies which document fields to include or exclude\n *\n * #### String syntax\n *\n * When passing a string, prefixing a path with `-` will flag that path as excluded. When a path does not have the `-` prefix, it is included.\n *\n * #### Example:\n *\n *     // include a and b, exclude c\n *     query.select('a b -c');\n *\n *     // or you may use object notation, useful when\n *     // you have keys already prefixed with a \"-\"\n *     query.select({a: 1, b: 1, c: 0});\n *\n * #### Note:\n *\n * Cannot be used with `distinct()`\n *\n * @param {Object|String} arg\n * @return {Query} this\n * @see SchemaType\n * @api public\n */ Query.prototype.select = function select() {\n    let arg = arguments[0];\n    if (!arg) return this;\n    if (arguments.length !== 1) {\n        throw new Error(\"Invalid select: select only takes 1 argument\");\n    }\n    this._validate(\"select\");\n    const fields = this._fields || (this._fields = {});\n    const type = typeof arg;\n    let i, len;\n    if ((\"string\" == type || utils.isArgumentsObject(arg)) && \"number\" == typeof arg.length || Array.isArray(arg)) {\n        if (\"string\" == type) arg = arg.split(/\\s+/);\n        for(i = 0, len = arg.length; i < len; ++i){\n            let field = arg[i];\n            if (!field) continue;\n            const include = \"-\" == field[0] ? 0 : 1;\n            if (include === 0) field = field.substring(1);\n            fields[field] = include;\n        }\n        return this;\n    }\n    if (utils.isObject(arg)) {\n        const keys = utils.keys(arg);\n        for(i = 0; i < keys.length; ++i){\n            fields[keys[i]] = arg[keys[i]];\n        }\n        return this;\n    }\n    throw new TypeError(\"Invalid select() argument. Must be string or object.\");\n};\n/**\n * Specifies a $slice condition for a `path`\n *\n * #### Example:\n *\n *     query.slice('comments', 5)\n *     query.slice('comments', -5)\n *     query.slice('comments', [10, 5])\n *     query.where('comments').slice(5)\n *     query.where('comments').slice([-10, 5])\n *\n * @param {String} [path]\n * @param {Number} val number/range of elements to slice\n * @return {Query} this\n * @see mongodb http://www.mongodb.org/display/DOCS/Retrieving+a+Subset+of+Fields#RetrievingaSubsetofFields-RetrievingaSubrangeofArrayElements\n * @api public\n */ Query.prototype.slice = function() {\n    if (0 === arguments.length) return this;\n    this._validate(\"slice\");\n    let path, val;\n    if (1 === arguments.length) {\n        const arg = arguments[0];\n        if (typeof arg === \"object\" && !Array.isArray(arg)) {\n            const keys = Object.keys(arg);\n            const numKeys = keys.length;\n            for(let i = 0; i < numKeys; ++i){\n                this.slice(keys[i], arg[keys[i]]);\n            }\n            return this;\n        }\n        this._ensurePath(\"slice\");\n        path = this._path;\n        val = arguments[0];\n    } else if (2 === arguments.length) {\n        if (\"number\" === typeof arguments[0]) {\n            this._ensurePath(\"slice\");\n            path = this._path;\n            val = [\n                arguments[0],\n                arguments[1]\n            ];\n        } else {\n            path = arguments[0];\n            val = arguments[1];\n        }\n    } else if (3 === arguments.length) {\n        path = arguments[0];\n        val = [\n            arguments[1],\n            arguments[2]\n        ];\n    }\n    const myFields = this._fields || (this._fields = {});\n    myFields[path] = {\n        $slice: val\n    };\n    return this;\n};\n/**\n * Sets the sort order\n *\n * If an object is passed, values allowed are 'asc', 'desc', 'ascending', 'descending', 1, and -1.\n *\n * If a string is passed, it must be a space delimited list of path names. The sort order of each path is ascending unless the path name is prefixed with `-` which will be treated as descending.\n *\n * #### Example:\n *\n *     // these are equivalent\n *     query.sort({ field: 'asc', test: -1 });\n *     query.sort('field -test');\n *     query.sort([['field', 1], ['test', -1]]);\n *\n * #### Note:\n *\n *  - The array syntax `.sort([['field', 1], ['test', -1]])` can only be used with [mongodb driver >= 2.0.46](https://github.com/mongodb/node-mongodb-native/blob/2.1/HISTORY.md#2046-2015-10-15).\n *  - Cannot be used with `distinct()`\n *\n * @param {Object|String|Array} arg\n * @return {Query} this\n * @api public\n */ Query.prototype.sort = function(arg) {\n    if (!arg) return this;\n    let i, len, field;\n    this._validate(\"sort\");\n    const type = typeof arg;\n    // .sort([['field', 1], ['test', -1]])\n    if (Array.isArray(arg)) {\n        len = arg.length;\n        for(i = 0; i < arg.length; ++i){\n            if (!Array.isArray(arg[i])) {\n                throw new Error(\"Invalid sort() argument, must be array of arrays\");\n            }\n            _pushArr(this.options, arg[i][0], arg[i][1]);\n        }\n        return this;\n    }\n    // .sort('field -test')\n    if (1 === arguments.length && \"string\" == type) {\n        arg = arg.split(/\\s+/);\n        len = arg.length;\n        for(i = 0; i < len; ++i){\n            field = arg[i];\n            if (!field) continue;\n            const ascend = \"-\" == field[0] ? -1 : 1;\n            if (ascend === -1) field = field.substring(1);\n            push(this.options, field, ascend);\n        }\n        return this;\n    }\n    // .sort({ field: 1, test: -1 })\n    if (utils.isObject(arg)) {\n        const keys = utils.keys(arg);\n        for(i = 0; i < keys.length; ++i){\n            field = keys[i];\n            push(this.options, field, arg[field]);\n        }\n        return this;\n    }\n    if (typeof Map !== \"undefined\" && arg instanceof Map) {\n        _pushMap(this.options, arg);\n        return this;\n    }\n    throw new TypeError(\"Invalid sort() argument. Must be a string, object, or array.\");\n};\n/*!\n * @ignore\n */ const _validSortValue = {\n    1: 1,\n    \"-1\": -1,\n    asc: 1,\n    ascending: 1,\n    desc: -1,\n    descending: -1\n};\nfunction push(opts, field, value) {\n    if (Array.isArray(opts.sort)) {\n        throw new TypeError(\"Can't mix sort syntaxes. Use either array or object:\" + \"\\n- `.sort([['field', 1], ['test', -1]])`\" + \"\\n- `.sort({ field: 1, test: -1 })`\");\n    }\n    let s;\n    if (value && value.$meta) {\n        s = opts.sort || (opts.sort = {});\n        s[field] = {\n            $meta: value.$meta\n        };\n        return;\n    }\n    s = opts.sort || (opts.sort = {});\n    let val = String(value || 1).toLowerCase();\n    val = _validSortValue[val];\n    if (!val) throw new TypeError(\"Invalid sort value: { \" + field + \": \" + value + \" }\");\n    s[field] = val;\n}\nfunction _pushArr(opts, field, value) {\n    opts.sort = opts.sort || [];\n    if (!Array.isArray(opts.sort)) {\n        throw new TypeError(\"Can't mix sort syntaxes. Use either array or object:\" + \"\\n- `.sort([['field', 1], ['test', -1]])`\" + \"\\n- `.sort({ field: 1, test: -1 })`\");\n    }\n    let val = String(value || 1).toLowerCase();\n    val = _validSortValue[val];\n    if (!val) throw new TypeError(\"Invalid sort value: [ \" + field + \", \" + value + \" ]\");\n    opts.sort.push([\n        field,\n        val\n    ]);\n}\nfunction _pushMap(opts, map) {\n    opts.sort = opts.sort || new Map();\n    if (!(opts.sort instanceof Map)) {\n        throw new TypeError(\"Can't mix sort syntaxes. Use either array or \" + \"object or map consistently\");\n    }\n    map.forEach(function(value, key) {\n        let val = String(value || 1).toLowerCase();\n        val = _validSortValue[val];\n        if (!val) throw new TypeError(\"Invalid sort value: < \" + key + \": \" + value + \" >\");\n        opts.sort.set(key, val);\n    });\n}\n/**\n * Specifies the limit option.\n *\n * #### Example:\n *\n *     query.limit(20)\n *\n * #### Note:\n *\n * Cannot be used with `distinct()`\n *\n * @method limit\n * @memberOf Query\n * @param {Number} val\n * @see mongodb http://www.mongodb.org/display/DOCS/Advanced+Queries#AdvancedQueries-%7B%7Blimit%28%29%7D%7D\n * @api public\n */ /**\n * Specifies the skip option.\n *\n * #### Example:\n *\n *     query.skip(100).limit(20)\n *\n * #### Note:\n *\n * Cannot be used with `distinct()`\n *\n * @method skip\n * @memberOf Query\n * @param {Number} val\n * @see mongodb http://www.mongodb.org/display/DOCS/Advanced+Queries#AdvancedQueries-%7B%7Bskip%28%29%7D%7D\n * @api public\n */ /**\n * Specifies the batchSize option.\n *\n * #### Example:\n *\n *     query.batchSize(100)\n *\n * #### Note:\n *\n * Cannot be used with `distinct()`\n *\n * @method batchSize\n * @memberOf Query\n * @param {Number} val\n * @see mongodb http://www.mongodb.org/display/DOCS/Advanced+Queries#AdvancedQueries-%7B%7BbatchSize%28%29%7D%7D\n * @api public\n */ /**\n * Specifies the `comment` option.\n *\n * #### Example:\n *\n *     query.comment('login query')\n *\n * #### Note:\n *\n * Cannot be used with `distinct()`\n *\n * @method comment\n * @memberOf Query\n * @param {Number} val\n * @see mongodb http://www.mongodb.org/display/DOCS/Advanced+Queries#AdvancedQueries-%24comment\n * @api public\n */ /*!\n * limit, skip, batchSize, comment\n *\n * Sets these associated options.\n *\n *     query.comment('feed query');\n */ [\n    \"limit\",\n    \"skip\",\n    \"batchSize\",\n    \"comment\"\n].forEach(function(method) {\n    Query.prototype[method] = function(v) {\n        this._validate(method);\n        this.options[method] = v;\n        return this;\n    };\n});\n/**\n * Specifies the maxTimeMS option.\n *\n * #### Example:\n *\n *     query.maxTime(100)\n *     query.maxTimeMS(100)\n *\n * @method maxTime\n * @memberOf Query\n * @param {Number} ms\n * @see mongodb http://docs.mongodb.org/manual/reference/operator/meta/maxTimeMS/#op._S_maxTimeMS\n * @api public\n */ Query.prototype.maxTime = Query.prototype.maxTimeMS = function(ms) {\n    this._validate(\"maxTime\");\n    this.options.maxTimeMS = ms;\n    return this;\n};\n/**\n * Sets query hints.\n *\n * #### Example:\n *\n *     query.hint({ indexA: 1, indexB: -1});\n *     query.hint('indexA_1_indexB_1');\n *\n * #### Note:\n *\n * Cannot be used with `distinct()`\n *\n * @param {Object|string} val a hint object or the index name\n * @return {Query} this\n * @see mongodb http://www.mongodb.org/display/DOCS/Advanced+Queries#AdvancedQueries-%24hint\n * @api public\n */ Query.prototype.hint = function() {\n    if (0 === arguments.length) return this;\n    this._validate(\"hint\");\n    const arg = arguments[0];\n    if (utils.isObject(arg)) {\n        const hint = this.options.hint || (this.options.hint = {});\n        // must keep object keys in order so don't use Object.keys()\n        for(const k in arg){\n            hint[k] = arg[k];\n        }\n        return this;\n    }\n    if (typeof arg === \"string\") {\n        this.options.hint = arg;\n        return this;\n    }\n    throw new TypeError(\"Invalid hint. \" + arg);\n};\n/**\n * Requests acknowledgement that this operation has been persisted to MongoDB's\n * on-disk journal.\n * This option is only valid for operations that write to the database:\n *\n * - `deleteOne()`\n * - `deleteMany()`\n * - `findOneAndDelete()`\n * - `findOneAndUpdate()`\n * - `updateOne()`\n * - `updateMany()`\n *\n * Defaults to the `j` value if it is specified in writeConcern options\n *\n * #### Example:\n *\n *     mquery().w(2).j(true).wtimeout(2000);\n *\n * @method j\n * @memberOf Query\n * @instance\n * @param {boolean} val\n * @see mongodb https://docs.mongodb.com/manual/reference/write-concern/#j-option\n * @return {Query} this\n * @api public\n */ Query.prototype.j = function j(val) {\n    this.options.j = val;\n    return this;\n};\n/**\n * Sets the slaveOk option. _Deprecated_ in MongoDB 2.2 in favor of read preferences.\n *\n * #### Example:\n *\n *     query.slaveOk() // true\n *     query.slaveOk(true)\n *     query.slaveOk(false)\n *\n * @deprecated use read() preferences instead if on mongodb >= 2.2\n * @param {Boolean} v defaults to true\n * @see mongodb http://docs.mongodb.org/manual/applications/replication/#read-preference\n * @see read()\n * @return {Query} this\n * @api public\n */ Query.prototype.slaveOk = function(v) {\n    this.options.slaveOk = arguments.length ? !!v : true;\n    return this;\n};\n/**\n * Sets the readPreference option for the query.\n *\n * #### Example:\n *\n *     new Query().read('primary')\n *     new Query().read('p')  // same as primary\n *\n *     new Query().read('primaryPreferred')\n *     new Query().read('pp') // same as primaryPreferred\n *\n *     new Query().read('secondary')\n *     new Query().read('s')  // same as secondary\n *\n *     new Query().read('secondaryPreferred')\n *     new Query().read('sp') // same as secondaryPreferred\n *\n *     new Query().read('nearest')\n *     new Query().read('n')  // same as nearest\n *\n *     // you can also use mongodb.ReadPreference class to also specify tags\n *     new Query().read(mongodb.ReadPreference('secondary', [{ dc:'sf', s: 1 },{ dc:'ma', s: 2 }]))\n *\n *     new Query().setReadPreference('primary') // alias of .read()\n *\n * #### Preferences:\n *\n *     primary - (default)  Read from primary only. Operations will produce an error if primary is unavailable. Cannot be combined with tags.\n *     secondary            Read from secondary if available, otherwise error.\n *     primaryPreferred     Read from primary if available, otherwise a secondary.\n *     secondaryPreferred   Read from a secondary if available, otherwise read from the primary.\n *     nearest              All operations read from among the nearest candidates, but unlike other modes, this option will include both the primary and all secondaries in the random selection.\n *\n * Aliases\n *\n *     p   primary\n *     pp  primaryPreferred\n *     s   secondary\n *     sp  secondaryPreferred\n *     n   nearest\n *\n * Read more about how to use read preferences [here](http://docs.mongodb.org/manual/applications/replication/#read-preference) and [here](http://mongodb.github.com/node-mongodb-native/driver-articles/anintroductionto1_1and2_2.html#read-preferences).\n *\n * @param {String|ReadPreference} pref one of the listed preference options or their aliases\n * @see mongodb http://docs.mongodb.org/manual/applications/replication/#read-preference\n * @see driver http://mongodb.github.com/node-mongodb-native/driver-articles/anintroductionto1_1and2_2.html#read-preferences\n * @return {Query} this\n * @api public\n */ Query.prototype.read = Query.prototype.setReadPreference = function(pref) {\n    if (arguments.length > 1 && !Query.prototype.read.deprecationWarningIssued) {\n        console.error(\"Deprecation warning: 'tags' argument is not supported anymore in Query.read() method. Please use mongodb.ReadPreference object instead.\");\n        Query.prototype.read.deprecationWarningIssued = true;\n    }\n    this.options.readPreference = utils.readPref(pref);\n    return this;\n};\n/**\n * Sets the readConcern option for the query.\n *\n * #### Example:\n *\n *     new Query().readConcern('local')\n *     new Query().readConcern('l')  // same as local\n *\n *     new Query().readConcern('available')\n *     new Query().readConcern('a')  // same as available\n *\n *     new Query().readConcern('majority')\n *     new Query().readConcern('m')  // same as majority\n *\n *     new Query().readConcern('linearizable')\n *     new Query().readConcern('lz') // same as linearizable\n *\n *     new Query().readConcern('snapshot')\n *     new Query().readConcern('s')  // same as snapshot\n *\n *     new Query().r('s') // r is alias of readConcern\n *\n *\n * #### Read Concern Level:\n *\n *     local         MongoDB 3.2+ The query returns from the instance with no guarantee guarantee that the data has been written to a majority of the replica set members (i.e. may be rolled back).\n *     available     MongoDB 3.6+ The query returns from the instance with no guarantee guarantee that the data has been written to a majority of the replica set members (i.e. may be rolled back).\n *     majority      MongoDB 3.2+ The query returns the data that has been acknowledged by a majority of the replica set members. The documents returned by the read operation are durable, even in the event of failure.\n *     linearizable  MongoDB 3.4+ The query returns data that reflects all successful majority-acknowledged writes that completed prior to the start of the read operation. The query may wait for concurrently executing writes to propagate to a majority of replica set members before returning results.\n *     snapshot      MongoDB 4.0+ Only available for operations within multi-document transactions. Upon transaction commit with write concern \"majority\", the transaction operations are guaranteed to have read from a snapshot of majority-committed data.\n *\n * Aliases\n *\n *     l   local\n *     a   available\n *     m   majority\n *     lz  linearizable\n *     s   snapshot\n *\n * Read more about how to use read concern [here](https://docs.mongodb.com/manual/reference/read-concern/).\n *\n * @param {String} level one of the listed read concern level or their aliases\n * @see mongodb https://docs.mongodb.com/manual/reference/read-concern/\n * @return {Query} this\n * @api public\n */ Query.prototype.readConcern = Query.prototype.r = function(level) {\n    this.options.readConcern = utils.readConcern(level);\n    return this;\n};\n/**\n * Sets tailable option.\n *\n * #### Example:\n *\n *     query.tailable() <== true\n *     query.tailable(true)\n *     query.tailable(false)\n *\n * #### Note:\n *\n * Cannot be used with `distinct()`\n *\n * @param {Boolean} v defaults to true\n * @see mongodb http://www.mongodb.org/display/DOCS/Tailable+Cursors\n * @api public\n */ Query.prototype.tailable = function() {\n    this._validate(\"tailable\");\n    this.options.tailable = arguments.length ? !!arguments[0] : true;\n    return this;\n};\n/**\n * Sets the specified number of `mongod` servers, or tag set of `mongod` servers,\n * that must acknowledge this write before this write is considered successful.\n * This option is only valid for operations that write to the database:\n *\n * - `deleteOne()`\n * - `deleteMany()`\n * - `findOneAndDelete()`\n * - `findOneAndUpdate()`\n * - `updateOne()`\n * - `updateMany()`\n *\n * Defaults to the `w` value if it is specified in writeConcern options\n *\n * #### Example:\n *\n *     mquery().writeConcern(0)\n *     mquery().writeConcern(1)\n *     mquery().writeConcern({ w: 1, j: true, wtimeout: 2000 })\n *     mquery().writeConcern('majority')\n *     mquery().writeConcern('m') // same as majority\n *     mquery().writeConcern('tagSetName') // if the tag set is 'm', use .writeConcern({ w: 'm' }) instead\n *     mquery().w(1) // w is alias of writeConcern\n *\n * @method writeConcern\n * @memberOf Query\n * @instance\n * @param {String|number|object} concern 0 for fire-and-forget, 1 for acknowledged by one server, 'majority' for majority of the replica set, or [any of the more advanced options](https://docs.mongodb.com/manual/reference/write-concern/#w-option).\n * @see mongodb https://docs.mongodb.com/manual/reference/write-concern/#w-option\n * @return {Query} this\n * @api public\n */ Query.prototype.writeConcern = Query.prototype.w = function writeConcern(concern) {\n    if (\"object\" === typeof concern) {\n        if (\"undefined\" !== typeof concern.j) this.options.j = concern.j;\n        if (\"undefined\" !== typeof concern.w) this.options.w = concern.w;\n        if (\"undefined\" !== typeof concern.wtimeout) this.options.wtimeout = concern.wtimeout;\n    } else {\n        this.options.w = \"m\" === concern ? \"majority\" : concern;\n    }\n    return this;\n};\n/**\n * Specifies a time limit, in milliseconds, for the write concern.\n * If `ms > 1`, it is maximum amount of time to wait for this write\n * to propagate through the replica set before this operation fails.\n * The default is `0`, which means no timeout.\n *\n * This option is only valid for operations that write to the database:\n *\n * - `deleteOne()`\n * - `deleteMany()`\n * - `findOneAndDelete()`\n * - `findOneAndUpdate()`\n * - `updateOne()`\n * - `updateMany()`\n *\n * Defaults to `wtimeout` value if it is specified in writeConcern\n *\n * #### Example:\n *\n *     mquery().w(2).j(true).wtimeout(2000)\n *\n * @method wtimeout\n * @memberOf Query\n * @instance\n * @param {number} ms number of milliseconds to wait\n * @see mongodb https://docs.mongodb.com/manual/reference/write-concern/#wtimeout\n * @return {Query} this\n * @api public\n */ Query.prototype.wtimeout = Query.prototype.wTimeout = function wtimeout(ms) {\n    this.options.wtimeout = ms;\n    return this;\n};\n/**\n * Merges another Query or conditions object into this one.\n *\n * When a Query is passed, conditions, field selection and options are merged.\n *\n * @param {Query|Object} source\n * @return {Query} this\n */ Query.prototype.merge = function(source) {\n    if (!source) return this;\n    if (!Query.canMerge(source)) throw new TypeError(\"Invalid argument. Expected instanceof mquery or plain object\");\n    if (source instanceof Query) {\n        // if source has a feature, apply it to ourselves\n        if (source._conditions) {\n            utils.merge(this._conditions, source._conditions);\n        }\n        if (source._fields) {\n            this._fields || (this._fields = {});\n            utils.merge(this._fields, source._fields);\n        }\n        if (source.options) {\n            this.options || (this.options = {});\n            utils.merge(this.options, source.options);\n        }\n        if (source._updateDoc) {\n            this._updateDoc || (this._updateDoc = {});\n            utils.mergeClone(this._updateDoc, source._updateDoc);\n        }\n        if (source._distinctDoc) {\n            this._distinctDoc = source._distinctDoc;\n        }\n        return this;\n    }\n    // plain object\n    utils.merge(this._conditions, source);\n    return this;\n};\n/**\n * Finds documents.\n *\n * #### Example:\n *\n *     query.find()\n *     await query.find()\n *     await query.find({ name: 'Burning Lights' })\n *\n * @param {Object} [criteria] mongodb selector\n * @return {Query} this\n * @api public\n */ Query.prototype.find = function(criteria) {\n    this.op = \"find\";\n    if (Query.canMerge(criteria)) {\n        this.merge(criteria);\n    }\n    return this;\n};\n/**\n * Executes a `find` Query\n * @returns the result\n */ Query.prototype._find = async function _find() {\n    const conds = this._conditions;\n    const options = this._optionsForExec();\n    if (this.$useProjection) {\n        options.projection = this._fieldsForExec();\n    } else {\n        options.fields = this._fieldsForExec();\n    }\n    debug(\"_find\", this._collection.collectionName, conds, options);\n    return this._collection.find(conds, options);\n};\n/**\n * Returns the query cursor\n *\n * #### Examples:\n *\n *     query.find().cursor();\n *     query.cursor({ name: 'Burning Lights' });\n *\n * @param {Object} [criteria] mongodb selector\n * @return {Object} cursor\n * @api public\n */ Query.prototype.cursor = function cursor(criteria) {\n    if (this.op) {\n        if (this.op !== \"find\") {\n            throw new TypeError(\".cursor only support .find method\");\n        }\n    } else {\n        this.find(criteria);\n    }\n    const conds = this._conditions;\n    const options = this._optionsForExec();\n    if (this.$useProjection) {\n        options.projection = this._fieldsForExec();\n    } else {\n        options.fields = this._fieldsForExec();\n    }\n    debug(\"findCursor\", this._collection.collectionName, conds, options);\n    return this._collection.findCursor(conds, options);\n};\n/**\n * Executes the query as a findOne() operation.\n *\n * #### Example:\n *\n *     query.findOne().where('name', /^Burning/);\n *\n *     query.findOne({ name: /^Burning/ })\n *\n *     await query.findOne({ name: /^Burning/ }); // executes\n *\n * @param {Object|Query} [criteria] mongodb selector\n * @return {Query} this\n * @api public\n */ Query.prototype.findOne = function(criteria) {\n    this.op = \"findOne\";\n    if (Query.canMerge(criteria)) {\n        this.merge(criteria);\n    }\n    return this;\n};\n/**\n * Executes a `findOne` Query\n * @returns the results\n */ Query.prototype._findOne = async function _findOne() {\n    const conds = this._conditions;\n    const options = this._optionsForExec();\n    if (this.$useProjection) {\n        options.projection = this._fieldsForExec();\n    } else {\n        options.fields = this._fieldsForExec();\n    }\n    debug(\"findOne\", this._collection.collectionName, conds, options);\n    return this._collection.findOne(conds, options);\n};\n/**\n * Exectues the query as a count() operation.\n *\n * #### Example:\n *\n *     query.count().where('color', 'black').exec();\n *\n *     query.count({ color: 'black' })\n *\n *     await query.count({ color: 'black' });\n *\n *     const doc = await query.where('color', 'black').count();\n *     console.log('there are %d kittens', count);\n *\n * @param {Object} [criteria] mongodb selector\n * @return {Query} this\n * @see mongodb http://www.mongodb.org/display/DOCS/Aggregation#Aggregation-Count\n * @api public\n */ Query.prototype.count = function(criteria) {\n    this.op = \"count\";\n    this._validate();\n    if (Query.canMerge(criteria)) {\n        this.merge(criteria);\n    }\n    return this;\n};\n/**\n * Executes a `count` Query\n * @returns the results\n */ Query.prototype._count = async function _count() {\n    const conds = this._conditions, options = this._optionsForExec();\n    debug(\"count\", this._collection.collectionName, conds, options);\n    return this._collection.count(conds, options);\n};\n/**\n * Declares or executes a distinct() operation.\n *\n * #### Example:\n *\n *     await distinct(criteria, field)\n *     distinct(criteria, field)\n *     await distinct(field)\n *     distinct(field)\n *     await distinct()\n *     distinct()\n *\n * @param {Object|Query} [criteria]\n * @param {String} [field]\n * @return {Query} this\n * @see mongodb http://www.mongodb.org/display/DOCS/Aggregation#Aggregation-Distinct\n * @api public\n */ Query.prototype.distinct = function(criteria, field) {\n    this.op = \"distinct\";\n    this._validate();\n    if (!field && typeof criteria === \"string\") {\n        field = criteria;\n        criteria = undefined;\n    }\n    if (\"string\" == typeof field) {\n        this._distinctDoc = field;\n    }\n    if (Query.canMerge(criteria)) {\n        this.merge(criteria);\n    }\n    return this;\n};\n/**\n * Executes a `distinct` Query\n * @returns the results\n */ Query.prototype._distinct = async function _distinct() {\n    if (!this._distinctDoc) {\n        throw new Error(\"No value for `distinct` has been declared\");\n    }\n    const conds = this._conditions, options = this._optionsForExec();\n    debug(\"distinct\", this._collection.collectionName, conds, options);\n    return this._collection.distinct(this._distinctDoc, conds, options);\n};\n/**\n * Declare and/or execute this query as an `updateMany()` operation. This function will update _all_ documents that match\n * `criteria`, rather than just the first one.\n *\n * _All paths passed that are not $atomic operations will become $set ops._\n *\n * #### Example:\n *\n *     // Update every document whose `title` contains 'test'\n *     mquery().updateMany({ title: /test/ }, { year: 2017 })\n *\n * @param {Object} [criteria]\n * @param {Object} [doc] the update command\n * @param {Object} [options]\n * @return {Query} this\n * @api public\n */ Query.prototype.updateMany = function updateMany(criteria, doc, options) {\n    if (arguments.length === 1) {\n        doc = criteria;\n        criteria = options = undefined;\n    }\n    return _update(this, \"updateMany\", criteria, doc, options);\n};\n/**\n * Executes a `updateMany` Query\n * @returns the results\n */ Query.prototype._updateMany = async function() {\n    return _updateExec(this, \"updateMany\");\n};\n/**\n * Declare and/or execute this query as an `updateOne()` operation. This function will _always_ update just one document,\n * regardless of the `multi` option.\n *\n * _All paths passed that are not $atomic operations will become $set ops._\n *\n * #### Example:\n *\n *     // Update the first document whose `title` contains 'test'\n *     mquery().updateMany({ title: /test/ }, { year: 2017 })\n *\n * @param {Object} [criteria]\n * @param {Object} [doc] the update command\n * @param {Object} [options]\n * @return {Query} this\n * @api public\n */ Query.prototype.updateOne = function updateOne(criteria, doc, options) {\n    if (arguments.length === 1) {\n        doc = criteria;\n        criteria = options = undefined;\n    }\n    return _update(this, \"updateOne\", criteria, doc, options);\n};\n/**\n * Executes a `updateOne` Query\n * @returns the results\n */ Query.prototype._updateOne = async function() {\n    return _updateExec(this, \"updateOne\");\n};\n/**\n * Declare and/or execute this query as an `replaceOne()` operation. Similar\n * to `updateOne()`, except `replaceOne()` is not allowed to use atomic\n * modifiers (`$set`, `$push`, etc.). Calling `replaceOne()` will always\n * replace the existing doc.\n *\n * #### Example:\n *\n *     // Replace the document with `_id` 1 with `{ _id: 1, year: 2017 }`\n *     mquery().replaceOne({ _id: 1 }, { year: 2017 })\n *\n * @param {Object} [criteria]\n * @param {Object} [doc] the update command\n * @param {Object} [options]\n * @return {Query} this\n * @api public\n */ Query.prototype.replaceOne = function replaceOne(criteria, doc, options) {\n    if (arguments.length === 1) {\n        doc = criteria;\n        criteria = options = undefined;\n    }\n    this.setOptions({\n        overwrite: true\n    });\n    return _update(this, \"replaceOne\", criteria, doc, options);\n};\n/**\n * Executes a `replaceOne` Query\n * @returns the results\n */ Query.prototype._replaceOne = async function() {\n    return _updateExec(this, \"replaceOne\");\n};\n/*!\n * Internal helper for updateMany, updateOne\n */ function _update(query, op, criteria, doc, options) {\n    query.op = op;\n    if (Query.canMerge(criteria)) {\n        query.merge(criteria);\n    }\n    if (doc) {\n        query._mergeUpdate(doc);\n    }\n    if (utils.isObject(options)) {\n        // { overwrite: true }\n        query.setOptions(options);\n    }\n    return query;\n}\n/**\n * Helper for de-duplicating \"update*\" functions\n * @param {Query} query The Query Object (replacement for \"this\")\n * @param {String} op The Operation to be done\n * @returns the results\n */ async function _updateExec(query, op) {\n    const options = query._optionsForExec();\n    const criteria = query._conditions;\n    const doc = query._updateForExec();\n    debug(\"update\", query._collection.collectionName, criteria, doc, options);\n    return query._collection[op](criteria, doc, options);\n}\n/**\n * Declare and/or execute this query as a `deleteOne()` operation.\n *\n * #### Example:\n *\n *     await mquery(collection).deleteOne({ artist: 'Anne Murray' })\n *\n * @param {Object|Query} [criteria] mongodb selector\n * @return {Query} this\n * @api public\n */ Query.prototype.deleteOne = function(criteria) {\n    this.op = \"deleteOne\";\n    if (Query.canMerge(criteria)) {\n        this.merge(criteria);\n    }\n    return this;\n};\n/**\n * Executes a `deleteOne` Query\n * @returns the results\n */ Query.prototype._deleteOne = async function() {\n    const options = this._optionsForExec();\n    delete options.justOne;\n    const conds = this._conditions;\n    debug(\"deleteOne\", this._collection.collectionName, conds, options);\n    return this._collection.deleteOne(conds, options);\n};\n/**\n * Declare and/or execute this query as a `deleteMany()` operation. Always deletes\n * _every_ document that matches `criteria`.\n *\n * #### Example:\n *\n *     await mquery(collection).deleteMany({ artist: 'Anne Murray' })\n *\n * @param {Object|Query} [criteria] mongodb selector\n * @return {Query} this\n * @api public\n */ Query.prototype.deleteMany = function(criteria) {\n    this.op = \"deleteMany\";\n    if (Query.canMerge(criteria)) {\n        this.merge(criteria);\n    }\n    return this;\n};\n/**\n * Executes a `deleteMany` Query\n * @returns the results\n */ Query.prototype._deleteMany = async function() {\n    const options = this._optionsForExec();\n    delete options.justOne;\n    const conds = this._conditions;\n    debug(\"deleteOne\", this._collection.collectionName, conds, options);\n    return this._collection.deleteMany(conds, options);\n};\n/**\n * Issues a mongodb [findAndModify](http://www.mongodb.org/display/DOCS/findAndModify+Command) update command.\n *\n * Finds a matching document, updates it according to the `update` arg, passing any `options`, and returns the found document (if any).\n *\n * #### Available options\n *\n * - `new`: bool - true to return the modified document rather than the original. defaults to true\n * - `upsert`: bool - creates the object if it doesn't exist. defaults to false.\n * - `sort`: if multiple docs are found by the conditions, sets the sort order to choose which doc to update\n *\n * #### Examples:\n *\n *     await query.findOneAndUpdate(conditions, update, options) // executes\n *     query.findOneAndUpdate(conditions, update, options)  // returns Query\n *     await query.findOneAndUpdate(conditions, update) // executes\n *     query.findOneAndUpdate(conditions, update)           // returns Query\n *     await query.findOneAndUpdate(update)             // returns Query\n *     query.findOneAndUpdate(update)                       // returns Query\n *     await query.findOneAndUpdate()                     // executes\n *     query.findOneAndUpdate()                             // returns Query\n *\n * @param {Object|Query} [query]\n * @param {Object} [doc]\n * @param {Object} [options]\n * @see mongodb http://www.mongodb.org/display/DOCS/findAndModify+Command\n * @return {Query} this\n * @api public\n */ Query.prototype.findOneAndUpdate = function(criteria, doc, options) {\n    this.op = \"findOneAndUpdate\";\n    this._validate();\n    if (arguments.length === 1) {\n        doc = criteria;\n        criteria = options = undefined;\n    }\n    if (Query.canMerge(criteria)) {\n        this.merge(criteria);\n    }\n    // apply doc\n    if (doc) {\n        this._mergeUpdate(doc);\n    }\n    options && this.setOptions(options);\n    return this;\n};\n/**\n * Executes a `findOneAndUpdate` Query\n * @returns the results\n */ Query.prototype._findOneAndUpdate = async function() {\n    const conds = this._conditions;\n    const update = this._updateForExec();\n    const options = this._optionsForExec();\n    return this._collection.findOneAndUpdate(conds, update, options);\n};\n/**\n * Issues a mongodb [findAndModify](http://www.mongodb.org/display/DOCS/findAndModify+Command) remove command.\n *\n * Finds a matching document, removes it, returning the found document (if any).\n *\n * #### Available options\n *\n * - `sort`: if multiple docs are found by the conditions, sets the sort order to choose which doc to update\n *\n * #### Examples:\n *\n *     await A.where().findOneAndRemove(conditions, options) // executes\n *     A.where().findOneAndRemove(conditions, options)  // return Query\n *     await A.where().findOneAndRemove(conditions) // executes\n *     A.where().findOneAndRemove(conditions) // returns Query\n *     await A.where().findOneAndRemove()   // executes\n *     A.where().findOneAndRemove()           // returns Query\n *     A.where().findOneAndDelete()           // alias of .findOneAndRemove()\n *\n * @param {Object} [conditions]\n * @param {Object} [options]\n * @return {Query} this\n * @see mongodb http://www.mongodb.org/display/DOCS/findAndModify+Command\n * @api public\n */ Query.prototype.findOneAndRemove = Query.prototype.findOneAndDelete = function(conditions, options) {\n    this.op = \"findOneAndRemove\";\n    this._validate();\n    // apply conditions\n    if (Query.canMerge(conditions)) {\n        this.merge(conditions);\n    }\n    // apply options\n    options && this.setOptions(options);\n    return this;\n};\n/**\n * Executes a `findOneAndRemove` Query\n * @returns the results\n */ Query.prototype._findOneAndRemove = async function() {\n    const options = this._optionsForExec();\n    const conds = this._conditions;\n    return this._collection.findOneAndDelete(conds, options);\n};\n/**\n * Add trace function that gets called when the query is executed.\n * The function will be called with (method, queryInfo, query) and\n * should return a callback function which will be called\n * with (err, result, millis) when the query is complete.\n *\n * queryInfo is an object containing: {\n *   collectionName: <name of the collection>,\n *   conditions: <query criteria>,\n *   options: <comment, fields, readPreference, etc>,\n *   doc: [document to update, if applicable]\n * }\n *\n * NOTE: Does not trace stream queries.\n *\n * @param {Function} traceFunction\n * @return {Query} this\n * @api public\n */ Query.prototype.setTraceFunction = function(traceFunction) {\n    this._traceFunction = traceFunction;\n    return this;\n};\n/**\n * Executes the query\n *\n * #### Examples:\n *\n *     query.exec();\n *     await query.exec();\n *     query.exec('update');\n *     await query.exec('find');\n *\n * @param {String|Function} [operation]\n * @api public\n */ Query.prototype.exec = async function exec(op) {\n    if (typeof op === \"string\") {\n        this.op = op;\n    }\n    assert.ok(this.op, \"Missing query type: (find, etc)\");\n    const fnName = \"_\" + this.op;\n    // better error, because default would list it as \"this[fnName] is not a function\"\n    if (typeof this[fnName] !== \"function\") {\n        throw new TypeError(`this[${fnName}] is not a function`);\n    }\n    return this[fnName]();\n};\n/**\n * Executes the query returning a `Promise` which will be\n * resolved with either the doc(s) or rejected with the error.\n *\n * @param {Function} [resolve]\n * @param {Function} [reject]\n * @return {Promise}\n * @api public\n */ Query.prototype.then = async function(res, rej) {\n    return this.exec().then(res, rej);\n};\n/**\n * Returns a cursor for the given `find` query.\n *\n * @throws Error if operation is not a find\n * @returns {Cursor} MongoDB driver cursor\n */ Query.prototype.cursor = function() {\n    if (\"find\" != this.op) throw new Error(\"cursor() is only available for find\");\n    const conds = this._conditions;\n    const options = this._optionsForExec();\n    if (this.$useProjection) {\n        options.projection = this._fieldsForExec();\n    } else {\n        options.fields = this._fieldsForExec();\n    }\n    debug(\"cursor\", this._collection.collectionName, conds, options);\n    return this._collection.findCursor(conds, options);\n};\n/**\n * Determines if field selection has been made.\n *\n * @return {Boolean}\n * @api public\n */ Query.prototype.selected = function selected() {\n    return !!(this._fields && Object.keys(this._fields).length > 0);\n};\n/**\n * Determines if inclusive field selection has been made.\n *\n *     query.selectedInclusively() // false\n *     query.select('name')\n *     query.selectedInclusively() // true\n *     query.selectedExlusively() // false\n *\n * @returns {Boolean}\n */ Query.prototype.selectedInclusively = function selectedInclusively() {\n    if (!this._fields) return false;\n    const keys = Object.keys(this._fields);\n    if (0 === keys.length) return false;\n    for(let i = 0; i < keys.length; ++i){\n        const key = keys[i];\n        if (0 === this._fields[key]) return false;\n        if (this._fields[key] && typeof this._fields[key] === \"object\" && this._fields[key].$meta) {\n            return false;\n        }\n    }\n    return true;\n};\n/**\n * Determines if exclusive field selection has been made.\n *\n *     query.selectedExlusively() // false\n *     query.select('-name')\n *     query.selectedExlusively() // true\n *     query.selectedInclusively() // false\n *\n * @returns {Boolean}\n */ Query.prototype.selectedExclusively = function selectedExclusively() {\n    if (!this._fields) return false;\n    const keys = Object.keys(this._fields);\n    if (0 === keys.length) return false;\n    for(let i = 0; i < keys.length; ++i){\n        const key = keys[i];\n        if (0 === this._fields[key]) return true;\n    }\n    return false;\n};\n/**\n * Merges `doc` with the current update object.\n *\n * @param {Object} doc\n */ Query.prototype._mergeUpdate = function(doc) {\n    if (!this._updateDoc) this._updateDoc = {};\n    if (doc instanceof Query) {\n        if (doc._updateDoc) {\n            utils.mergeClone(this._updateDoc, doc._updateDoc);\n        }\n    } else {\n        utils.mergeClone(this._updateDoc, doc);\n    }\n};\n/**\n * Returns default options.\n *\n * @return {Object}\n * @api private\n */ Query.prototype._optionsForExec = function() {\n    const options = utils.clone(this.options);\n    return options;\n};\n/**\n * Returns fields selection for this query.\n *\n * @return {Object}\n * @api private\n */ Query.prototype._fieldsForExec = function() {\n    return utils.clone(this._fields);\n};\n/**\n * Return an update document with corrected $set operations.\n *\n * @api private\n */ Query.prototype._updateForExec = function() {\n    const update = utils.clone(this._updateDoc);\n    const ops = utils.keys(update);\n    const ret = {};\n    for (const op of ops){\n        if (this.options.overwrite) {\n            ret[op] = update[op];\n            continue;\n        }\n        if (\"$\" !== op[0]) {\n            // fix up $set sugar\n            if (!ret.$set) {\n                if (update.$set) {\n                    ret.$set = update.$set;\n                } else {\n                    ret.$set = {};\n                }\n            }\n            ret.$set[op] = update[op];\n            if (!~ops.indexOf(\"$set\")) ops.push(\"$set\");\n        } else if (\"$set\" === op) {\n            if (!ret.$set) {\n                ret[op] = update[op];\n            }\n        } else {\n            ret[op] = update[op];\n        }\n    }\n    this._compiledUpdate = ret;\n    return ret;\n};\n/**\n * Make sure _path is set.\n *\n * @parmam {String} method\n */ Query.prototype._ensurePath = function(method) {\n    if (!this._path) {\n        const msg = method + \"() must be used after where() \" + \"when called with these arguments\";\n        throw new Error(msg);\n    }\n};\n/*!\n * Permissions\n */ Query.permissions = __webpack_require__(/*! ./permissions */ \"(ssr)/./node_modules/mquery/lib/permissions.js\");\nQuery._isPermitted = function(a, b) {\n    const denied = Query.permissions[b];\n    if (!denied) return true;\n    return true !== denied[a];\n};\nQuery.prototype._validate = function(action) {\n    let fail;\n    let validator;\n    if (undefined === action) {\n        validator = Query.permissions[this.op];\n        if (\"function\" != typeof validator) return true;\n        fail = validator(this);\n    } else if (!Query._isPermitted(action, this.op)) {\n        fail = action;\n    }\n    if (fail) {\n        throw new Error(fail + \" cannot be used with \" + this.op);\n    }\n};\n/**\n * Determines if `conds` can be merged using `mquery().merge()`\n *\n * @param {Object} conds\n * @return {Boolean}\n */ Query.canMerge = function(conds) {\n    return conds instanceof Query || utils.isObject(conds);\n};\n/**\n * Set a trace function that will get called whenever a\n * query is executed.\n *\n * See `setTraceFunction()` for details.\n *\n * @param {Object} conds\n * @return {Boolean}\n */ Query.setGlobalTraceFunction = function(traceFunction) {\n    Query.traceFunction = traceFunction;\n};\n/*!\n * Exports.\n */ Query.utils = utils;\nQuery.env = __webpack_require__(/*! ./env */ \"(ssr)/./node_modules/mquery/lib/env.js\");\nQuery.Collection = __webpack_require__(/*! ./collection */ \"(ssr)/./node_modules/mquery/lib/collection/index.js\");\nQuery.BaseCollection = __webpack_require__(/*! ./collection/collection */ \"(ssr)/./node_modules/mquery/lib/collection/collection.js\");\nmodule.exports = exports = Query; // TODO\n // test utils\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mquery/lib/mquery.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mquery/lib/permissions.js":
/*!************************************************!*\
  !*** ./node_modules/mquery/lib/permissions.js ***!
  \************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nconst denied = exports;\ndenied.distinct = function(self) {\n    if (self._fields && Object.keys(self._fields).length > 0) {\n        return \"field selection and slice\";\n    }\n    const keys = Object.keys(denied.distinct);\n    let err;\n    keys.every(function(option) {\n        if (self.options[option]) {\n            err = option;\n            return false;\n        }\n        return true;\n    });\n    return err;\n};\ndenied.distinct.select = denied.distinct.slice = denied.distinct.sort = denied.distinct.limit = denied.distinct.skip = denied.distinct.batchSize = denied.distinct.hint = denied.distinct.tailable = true;\n// aggregation integration\ndenied.findOneAndUpdate = denied.findOneAndRemove = function(self) {\n    const keys = Object.keys(denied.findOneAndUpdate);\n    let err;\n    keys.every(function(option) {\n        if (self.options[option]) {\n            err = option;\n            return false;\n        }\n        return true;\n    });\n    return err;\n};\ndenied.findOneAndUpdate.limit = denied.findOneAndUpdate.skip = denied.findOneAndUpdate.batchSize = denied.findOneAndUpdate.tailable = true;\ndenied.count = function(self) {\n    if (self._fields && Object.keys(self._fields).length > 0) {\n        return \"field selection and slice\";\n    }\n    const keys = Object.keys(denied.count);\n    let err;\n    keys.every(function(option) {\n        if (self.options[option]) {\n            err = option;\n            return false;\n        }\n        return true;\n    });\n    return err;\n};\ndenied.count.slice = denied.count.batchSize = denied.count.tailable = true;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbXF1ZXJ5L2xpYi9wZXJtaXNzaW9ucy5qcyIsIm1hcHBpbmdzIjoiQUFBQTtBQUVBLE1BQU1BLFNBQVNDO0FBRWZELE9BQU9FLFFBQVEsR0FBRyxTQUFTQyxJQUFJO0lBQzdCLElBQUlBLEtBQUtDLE9BQU8sSUFBSUMsT0FBT0MsSUFBSSxDQUFDSCxLQUFLQyxPQUFPLEVBQUVHLE1BQU0sR0FBRyxHQUFHO1FBQ3hELE9BQU87SUFDVDtJQUVBLE1BQU1ELE9BQU9ELE9BQU9DLElBQUksQ0FBQ04sT0FBT0UsUUFBUTtJQUN4QyxJQUFJTTtJQUVKRixLQUFLRyxLQUFLLENBQUMsU0FBU0MsTUFBTTtRQUN4QixJQUFJUCxLQUFLUSxPQUFPLENBQUNELE9BQU8sRUFBRTtZQUN4QkYsTUFBTUU7WUFDTixPQUFPO1FBQ1Q7UUFDQSxPQUFPO0lBQ1Q7SUFFQSxPQUFPRjtBQUNUO0FBQ0FSLE9BQU9FLFFBQVEsQ0FBQ1UsTUFBTSxHQUN0QlosT0FBT0UsUUFBUSxDQUFDVyxLQUFLLEdBQ3JCYixPQUFPRSxRQUFRLENBQUNZLElBQUksR0FDcEJkLE9BQU9FLFFBQVEsQ0FBQ2EsS0FBSyxHQUNyQmYsT0FBT0UsUUFBUSxDQUFDYyxJQUFJLEdBQ3BCaEIsT0FBT0UsUUFBUSxDQUFDZSxTQUFTLEdBQ3pCakIsT0FBT0UsUUFBUSxDQUFDZ0IsSUFBSSxHQUNwQmxCLE9BQU9FLFFBQVEsQ0FBQ2lCLFFBQVEsR0FBRztBQUczQiwwQkFBMEI7QUFHMUJuQixPQUFPb0IsZ0JBQWdCLEdBQ3ZCcEIsT0FBT3FCLGdCQUFnQixHQUFHLFNBQVNsQixJQUFJO0lBQ3JDLE1BQU1HLE9BQU9ELE9BQU9DLElBQUksQ0FBQ04sT0FBT29CLGdCQUFnQjtJQUNoRCxJQUFJWjtJQUVKRixLQUFLRyxLQUFLLENBQUMsU0FBU0MsTUFBTTtRQUN4QixJQUFJUCxLQUFLUSxPQUFPLENBQUNELE9BQU8sRUFBRTtZQUN4QkYsTUFBTUU7WUFDTixPQUFPO1FBQ1Q7UUFDQSxPQUFPO0lBQ1Q7SUFFQSxPQUFPRjtBQUNUO0FBQ0FSLE9BQU9vQixnQkFBZ0IsQ0FBQ0wsS0FBSyxHQUM3QmYsT0FBT29CLGdCQUFnQixDQUFDSixJQUFJLEdBQzVCaEIsT0FBT29CLGdCQUFnQixDQUFDSCxTQUFTLEdBQ2pDakIsT0FBT29CLGdCQUFnQixDQUFDRCxRQUFRLEdBQUc7QUFHbkNuQixPQUFPc0IsS0FBSyxHQUFHLFNBQVNuQixJQUFJO0lBQzFCLElBQUlBLEtBQUtDLE9BQU8sSUFBSUMsT0FBT0MsSUFBSSxDQUFDSCxLQUFLQyxPQUFPLEVBQUVHLE1BQU0sR0FBRyxHQUFHO1FBQ3hELE9BQU87SUFDVDtJQUVBLE1BQU1ELE9BQU9ELE9BQU9DLElBQUksQ0FBQ04sT0FBT3NCLEtBQUs7SUFDckMsSUFBSWQ7SUFFSkYsS0FBS0csS0FBSyxDQUFDLFNBQVNDLE1BQU07UUFDeEIsSUFBSVAsS0FBS1EsT0FBTyxDQUFDRCxPQUFPLEVBQUU7WUFDeEJGLE1BQU1FO1lBQ04sT0FBTztRQUNUO1FBQ0EsT0FBTztJQUNUO0lBRUEsT0FBT0Y7QUFDVDtBQUVBUixPQUFPc0IsS0FBSyxDQUFDVCxLQUFLLEdBQ2xCYixPQUFPc0IsS0FBSyxDQUFDTCxTQUFTLEdBQ3RCakIsT0FBT3NCLEtBQUssQ0FBQ0gsUUFBUSxHQUFHIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYmxvZy1hcHBsaWNhdGlvbi8uL25vZGVfbW9kdWxlcy9tcXVlcnkvbGliL3Blcm1pc3Npb25zLmpzPzMyYWQiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG5jb25zdCBkZW5pZWQgPSBleHBvcnRzO1xuXG5kZW5pZWQuZGlzdGluY3QgPSBmdW5jdGlvbihzZWxmKSB7XG4gIGlmIChzZWxmLl9maWVsZHMgJiYgT2JqZWN0LmtleXMoc2VsZi5fZmllbGRzKS5sZW5ndGggPiAwKSB7XG4gICAgcmV0dXJuICdmaWVsZCBzZWxlY3Rpb24gYW5kIHNsaWNlJztcbiAgfVxuXG4gIGNvbnN0IGtleXMgPSBPYmplY3Qua2V5cyhkZW5pZWQuZGlzdGluY3QpO1xuICBsZXQgZXJyO1xuXG4gIGtleXMuZXZlcnkoZnVuY3Rpb24ob3B0aW9uKSB7XG4gICAgaWYgKHNlbGYub3B0aW9uc1tvcHRpb25dKSB7XG4gICAgICBlcnIgPSBvcHRpb247XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIHJldHVybiB0cnVlO1xuICB9KTtcblxuICByZXR1cm4gZXJyO1xufTtcbmRlbmllZC5kaXN0aW5jdC5zZWxlY3QgPVxuZGVuaWVkLmRpc3RpbmN0LnNsaWNlID1cbmRlbmllZC5kaXN0aW5jdC5zb3J0ID1cbmRlbmllZC5kaXN0aW5jdC5saW1pdCA9XG5kZW5pZWQuZGlzdGluY3Quc2tpcCA9XG5kZW5pZWQuZGlzdGluY3QuYmF0Y2hTaXplID1cbmRlbmllZC5kaXN0aW5jdC5oaW50ID1cbmRlbmllZC5kaXN0aW5jdC50YWlsYWJsZSA9IHRydWU7XG5cblxuLy8gYWdncmVnYXRpb24gaW50ZWdyYXRpb25cblxuXG5kZW5pZWQuZmluZE9uZUFuZFVwZGF0ZSA9XG5kZW5pZWQuZmluZE9uZUFuZFJlbW92ZSA9IGZ1bmN0aW9uKHNlbGYpIHtcbiAgY29uc3Qga2V5cyA9IE9iamVjdC5rZXlzKGRlbmllZC5maW5kT25lQW5kVXBkYXRlKTtcbiAgbGV0IGVycjtcblxuICBrZXlzLmV2ZXJ5KGZ1bmN0aW9uKG9wdGlvbikge1xuICAgIGlmIChzZWxmLm9wdGlvbnNbb3B0aW9uXSkge1xuICAgICAgZXJyID0gb3B0aW9uO1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICByZXR1cm4gdHJ1ZTtcbiAgfSk7XG5cbiAgcmV0dXJuIGVycjtcbn07XG5kZW5pZWQuZmluZE9uZUFuZFVwZGF0ZS5saW1pdCA9XG5kZW5pZWQuZmluZE9uZUFuZFVwZGF0ZS5za2lwID1cbmRlbmllZC5maW5kT25lQW5kVXBkYXRlLmJhdGNoU2l6ZSA9XG5kZW5pZWQuZmluZE9uZUFuZFVwZGF0ZS50YWlsYWJsZSA9IHRydWU7XG5cblxuZGVuaWVkLmNvdW50ID0gZnVuY3Rpb24oc2VsZikge1xuICBpZiAoc2VsZi5fZmllbGRzICYmIE9iamVjdC5rZXlzKHNlbGYuX2ZpZWxkcykubGVuZ3RoID4gMCkge1xuICAgIHJldHVybiAnZmllbGQgc2VsZWN0aW9uIGFuZCBzbGljZSc7XG4gIH1cblxuICBjb25zdCBrZXlzID0gT2JqZWN0LmtleXMoZGVuaWVkLmNvdW50KTtcbiAgbGV0IGVycjtcblxuICBrZXlzLmV2ZXJ5KGZ1bmN0aW9uKG9wdGlvbikge1xuICAgIGlmIChzZWxmLm9wdGlvbnNbb3B0aW9uXSkge1xuICAgICAgZXJyID0gb3B0aW9uO1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICByZXR1cm4gdHJ1ZTtcbiAgfSk7XG5cbiAgcmV0dXJuIGVycjtcbn07XG5cbmRlbmllZC5jb3VudC5zbGljZSA9XG5kZW5pZWQuY291bnQuYmF0Y2hTaXplID1cbmRlbmllZC5jb3VudC50YWlsYWJsZSA9IHRydWU7XG4iXSwibmFtZXMiOlsiZGVuaWVkIiwiZXhwb3J0cyIsImRpc3RpbmN0Iiwic2VsZiIsIl9maWVsZHMiLCJPYmplY3QiLCJrZXlzIiwibGVuZ3RoIiwiZXJyIiwiZXZlcnkiLCJvcHRpb24iLCJvcHRpb25zIiwic2VsZWN0Iiwic2xpY2UiLCJzb3J0IiwibGltaXQiLCJza2lwIiwiYmF0Y2hTaXplIiwiaGludCIsInRhaWxhYmxlIiwiZmluZE9uZUFuZFVwZGF0ZSIsImZpbmRPbmVBbmRSZW1vdmUiLCJjb3VudCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mquery/lib/permissions.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mquery/lib/utils.js":
/*!******************************************!*\
  !*** ./node_modules/mquery/lib/utils.js ***!
  \******************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\n/*!\n * Module dependencies.\n */ const specialProperties = [\n    \"__proto__\",\n    \"constructor\",\n    \"prototype\"\n];\n/**\n * Clones objects\n *\n * @param {Object} obj the object to clone\n * @param {Object} options\n * @return {Object} the cloned object\n * @api private\n */ const clone = exports.clone = function clone(obj, options) {\n    if (obj === undefined || obj === null) return obj;\n    if (Array.isArray(obj)) return exports.cloneArray(obj, options);\n    if (obj.constructor) {\n        if (/ObjectI[dD]$/.test(obj.constructor.name)) {\n            return \"function\" == typeof obj.clone ? obj.clone() : new obj.constructor(obj.id);\n        }\n        if (obj.constructor.name === \"ReadPreference\") {\n            return new obj.constructor(obj.mode, clone(obj.tags, options));\n        }\n        if (\"Binary\" == obj._bsontype && obj.buffer && obj.value) {\n            return \"function\" == typeof obj.clone ? obj.clone() : new obj.constructor(obj.value(true), obj.sub_type);\n        }\n        if (\"Date\" === obj.constructor.name || \"Function\" === obj.constructor.name) return new obj.constructor(+obj);\n        if (\"RegExp\" === obj.constructor.name) return new RegExp(obj);\n        if (\"Buffer\" === obj.constructor.name) return Buffer.from(obj);\n    }\n    if (isObject(obj)) return exports.cloneObject(obj, options);\n    if (obj.valueOf) return obj.valueOf();\n};\n/*!\n * ignore\n */ exports.cloneObject = function cloneObject(obj, options) {\n    const minimize = options && options.minimize, ret = {}, keys = Object.keys(obj), len = keys.length;\n    let hasKeys = false, val, k = \"\", i = 0;\n    for(i = 0; i < len; ++i){\n        k = keys[i];\n        // Not technically prototype pollution because this wouldn't merge properties\n        // onto `Object.prototype`, but avoid properties like __proto__ as a precaution.\n        if (specialProperties.indexOf(k) !== -1) {\n            continue;\n        }\n        val = clone(obj[k], options);\n        if (!minimize || \"undefined\" !== typeof val) {\n            hasKeys || (hasKeys = true);\n            ret[k] = val;\n        }\n    }\n    return minimize ? hasKeys && ret : ret;\n};\nexports.cloneArray = function cloneArray(arr, options) {\n    const ret = [], l = arr.length;\n    let i = 0;\n    for(; i < l; i++)ret.push(clone(arr[i], options));\n    return ret;\n};\n/**\n * Merges `from` into `to` without overwriting existing properties.\n *\n * @param {Object} to\n * @param {Object} from\n * @api private\n */ exports.merge = function merge(to, from) {\n    const keys = Object.keys(from);\n    for (const key of keys){\n        if (specialProperties.indexOf(key) !== -1) {\n            continue;\n        }\n        if (\"undefined\" === typeof to[key]) {\n            to[key] = from[key];\n        } else {\n            if (exports.isObject(from[key])) {\n                merge(to[key], from[key]);\n            } else {\n                to[key] = from[key];\n            }\n        }\n    }\n};\n/**\n * Same as merge but clones the assigned values.\n *\n * @param {Object} to\n * @param {Object} from\n * @api private\n */ exports.mergeClone = function mergeClone(to, from) {\n    const keys = Object.keys(from);\n    for (const key of keys){\n        if (specialProperties.indexOf(key) !== -1) {\n            continue;\n        }\n        if (\"undefined\" === typeof to[key]) {\n            to[key] = clone(from[key]);\n        } else {\n            if (exports.isObject(from[key])) {\n                mergeClone(to[key], from[key]);\n            } else {\n                to[key] = clone(from[key]);\n            }\n        }\n    }\n};\n/**\n * Read pref helper (mongo 2.2 drivers support this)\n *\n * Allows using aliases instead of full preference names:\n *\n *     p   primary\n *     pp  primaryPreferred\n *     s   secondary\n *     sp  secondaryPreferred\n *     n   nearest\n *\n * @param {String} pref\n */ exports.readPref = function readPref(pref) {\n    switch(pref){\n        case \"p\":\n            pref = \"primary\";\n            break;\n        case \"pp\":\n            pref = \"primaryPreferred\";\n            break;\n        case \"s\":\n            pref = \"secondary\";\n            break;\n        case \"sp\":\n            pref = \"secondaryPreferred\";\n            break;\n        case \"n\":\n            pref = \"nearest\";\n            break;\n    }\n    return pref;\n};\n/**\n * Read Concern helper (mongo 3.2 drivers support this)\n *\n * Allows using string to specify read concern level:\n *\n *     local          3.2+\n *     available      3.6+\n *     majority       3.2+\n *     linearizable   3.4+\n *     snapshot       4.0+\n *\n * @param {String|Object} concern\n */ exports.readConcern = function readConcern(concern) {\n    if (\"string\" === typeof concern) {\n        switch(concern){\n            case \"l\":\n                concern = \"local\";\n                break;\n            case \"a\":\n                concern = \"available\";\n                break;\n            case \"m\":\n                concern = \"majority\";\n                break;\n            case \"lz\":\n                concern = \"linearizable\";\n                break;\n            case \"s\":\n                concern = \"snapshot\";\n                break;\n        }\n        concern = {\n            level: concern\n        };\n    }\n    return concern;\n};\n/**\n * Object.prototype.toString.call helper\n */ const _toString = Object.prototype.toString;\nexports.toString = function(arg) {\n    return _toString.call(arg);\n};\n/**\n * Determines if `arg` is an object.\n *\n * @param {Object|Array|String|Function|RegExp|any} arg\n * @return {Boolean}\n */ const isObject = exports.isObject = function(arg) {\n    return \"[object Object]\" == exports.toString(arg);\n};\n/**\n * Object.keys helper\n */ exports.keys = Object.keys;\n/**\n * Basic Object.create polyfill.\n * Only one argument is supported.\n *\n * Based on https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Object/create\n */ exports.create = \"function\" == typeof Object.create ? Object.create : create;\nfunction create(proto) {\n    if (arguments.length > 1) {\n        throw new Error(\"Adding properties is not supported\");\n    }\n    function F() {}\n    F.prototype = proto;\n    return new F;\n}\n/**\n * inheritance\n */ exports.inherits = function(ctor, superCtor) {\n    ctor.prototype = exports.create(superCtor.prototype);\n    ctor.prototype.constructor = ctor;\n};\n/**\n * Check if this object is an arguments object\n *\n * @param {Any} v\n * @return {Boolean}\n */ exports.isArgumentsObject = function(v) {\n    return Object.prototype.toString.call(v) === \"[object Arguments]\";\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mquery/lib/utils.js\n");

/***/ })

};
;